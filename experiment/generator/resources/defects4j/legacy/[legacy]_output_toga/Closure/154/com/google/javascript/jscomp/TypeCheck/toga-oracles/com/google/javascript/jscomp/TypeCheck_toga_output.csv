project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(35, 64, 14);
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = new Node(22, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test0012,"public void test0012() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = new Node(22, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test0023,"public void test0023() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = null;
    try {
        typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0034,"public void test0034() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(82, (-631), 145);
    Node node1 = new Node(44, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, node1.getSideEffectFlags());
}",0,
project,0,test0045,"public void test0045() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test0056,"public void test0056() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(105, """");
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.shouldTraverse(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test0067,"public void test0067() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(118, """");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, Node.DECR_FLAG);
}",0,
project,0,test0078,"public void test0078() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, ""S*65>P1ZlRo'M`"");
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    Node node0 = jsAst0.getAstRoot(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
}",0,
project,0,test0089,"public void test0089() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(132, 132, (-877));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(25, Node.ISNUMBER_PROP);
}",0,
project,0,test00910,"public void test00910() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(4, 30, 116);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(20, Node.FINALLY_PROP);
}",0,
project,0,test01011,"public void test01011() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(5, 3021, 36);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01012,"public void test01012() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(5, 3021, 36);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test01113,"public void test01113() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    Node node1 = new Node(6, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01114,"public void test01114() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    Node node1 = new Node(6, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,"assertEquals(0, loggerErrorManager0.getErrorCount())"
project,0,test01215,"public void test01215() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(3, (-10), (-10));
    Node node1 = new Node(7, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test01216,"public void test01216() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(3, (-10), (-10));
    Node node1 = new Node(7, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test01317,"public void test01317() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(8, 49, 76);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test01318,"public void test01318() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(8, 49, 76);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test01419,"public void test01419() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(9, 36, 394);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test01520,"public void test01520() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Vector<JSType> vector0 = new Vector<JSType>();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    Node node1 = new Node(10, 1510, 135);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test01621,"public void test01621() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(""com.google.common.collect.SingletonImmutableList$1"", (-1270), 0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node1 = new Node(12, node0, 562, (-1));
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(12, Node.REGEXP_PROP);
}",0,
project,0,test01722,"public void test01722() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(142, ""7ei2["");
    Node node1 = new Node(13, 2, 12);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test01823,"public void test01823() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(100, 2505, 100);
    Node node1 = new Node(14, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(node0.isLocalResultCall());
}",0,
project,0,test01924,"public void test01924() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(116, ""R)XQjNy2GEU`LD8"");
    Node node1 = new Node(15, 19, 4747);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test02025,"public void test02025() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(16, 22, 3437);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test02126,"public void test02126() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(17, 115, 16);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test02227,"public void test02227() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(7948, 1597, 3);
    Node node1 = new Node(18, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02228,"public void test02228() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(7948, 1597, 3);
    Node node1 = new Node(18, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test02229,"public void test02229() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(7948, 1597, 3);
    Node node1 = new Node(18, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test02330,"public void test02330() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
    Node node0 = Node.newNumber(1.0, 136, 123);
    Node node1 = new Node(19, node0, node0, node0, node0, 26, 32);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02331,"public void test02331() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
    Node node0 = Node.newNumber(1.0, 136, 123);
    Node node1 = new Node(19, node0, node0, node0, node0, 26, 32);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test02332,"public void test02332() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
    Node node0 = Node.newNumber(1.0, 136, 123);
    Node node1 = new Node(19, node0, node0, node0, node0, 26, 32);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, loggerErrorManager0.getErrorCount());
}",0,
project,0,test02433,"public void test02433() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
    RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, renameLabels_ProcessLabels0);
    Node node0 = Node.newString(105, """");
    Node node1 = Node.newString(21, ""can only implement interfaces"");
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test02534,"public void test02534() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(120, ""!E?kW"");
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0, (ScopeCreator) null);
    Node node1 = new Node(23, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(2, Node.ATTRIBUTE_FLAG);
}",0,
project,0,test02635,"public void test02635() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.initCompilerOptionsIfTesting();
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
    Node node0 = Node.newNumber((-6917.435723014053), 123, (-2508));
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.brokenClosureRequiresLevel);
    Node node1 = new Node(24, node0, node0, node0, node0, 139, 37);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test02636,"public void test02636() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.initCompilerOptionsIfTesting();
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
    Node node0 = Node.newNumber((-6917.435723014053), 123, (-2508));
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.brokenClosureRequiresLevel);
    Node node1 = new Node(24, node0, node0, node0, node0, 139, 37);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,
project,0,test02737,"public void test02737() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(25, 44, 120);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test02838,"public void test02838() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(26, 123, (-1321));
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(6, Node.TEMP_PROP);
}",0,
project,0,test02939,"public void test02939() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = new Node(27, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(40, Node.BRACELESS_TYPE);
}",0,
project,0,test03040,"public void test03040() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(105, """");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node1 = new Node(28, node0, 10, 21);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(12, Node.REGEXP_PROP);
}",0,
project,0,test03141,"public void test03141() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(29, 8200, 28);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test03242,"public void test03242() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
    RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, renameLabels_ProcessLabels0);
    Node node0 = new Node(30, 1, 1492);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test03343,"public void test03343() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Vector<JSType> vector0 = new Vector<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    Node node1 = new Node(31, node0, 144, (-1164));
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test03344,"public void test03344() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Vector<JSType> vector0 = new Vector<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    Node node1 = new Node(31, node0, 144, (-1164));
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test03445,"public void test03445() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(142, ""7ei2["");
    Node node1 = new Node(32, 16, 132);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test03446,"public void test03446() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(142, ""7ei2["");
    Node node1 = new Node(32, 16, 132);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, loggerErrorManager0.getErrorCount());
}",0,"assertEquals(0, loggerErrorManager0.getErrorCount())"
project,0,test03547,"public void test03547() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Vector<JSType> vector0 = new Vector<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    Node node1 = new Node(33, 37, 142);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test03648,"public void test03648() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(34, 280, 153);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test03649,"public void test03649() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(34, 280, 153);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test03750,"public void test03750() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
    RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, renameLabels_ProcessLabels0);
    Node node0 = new Node(122, 64, 64);
    Node node1 = Node.newString(36, "":_lGO1S*0[ @"");
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeTraversal"", e);
    }
}",0,
project,0,test03851,"public void test03851() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, (ScopeCreator) null);
    Node node0 = new Node(870, 139, 3);
    Node node1 = new Node(37, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test03852,"public void test03852() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, (ScopeCreator) null);
    Node node0 = new Node(870, 139, 3);
    Node node1 = new Node(37, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);
    assertTrue(boolean0);
}",0,
project,0,test03853,"public void test03853() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, (ScopeCreator) null);
    Node node0 = new Node(870, 139, 3);
    Node node1 = new Node(37, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);
    assertFalse(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test03954,"public void test03954() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    Node node1 = new Node(38, 151, 3027);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(16, Node.FLAG_LOCAL_RESULTS);
}",0,
project,0,test04055,"public void test04055() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(""com.google.common.collect.SingletonImmutableList$1"", (-1270), 0);
    Node node1 = new Node(12, node0, 562, (-1));
    Scope scope0 = typeCheck0.processForTesting(node0, node0);
    assertEquals(33, scope0.getVarCount());
}",0,
project,0,test04156,"public void test04156() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(93, (-3951), 148);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node1 = new Node(41, node0, 4780, 2);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(42, Node.IS_CONSTANT_NAME);
}",0,
project,0,test04257,"public void test04257() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    Vector<JSType> vector0 = new Vector<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    Node node1 = new Node(42, (-1640531527), 16);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test04358,"public void test04358() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Vector<JSType> vector0 = new Vector<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    Node[] nodeArray0 = new Node[0];
    Node node1 = new Node(43, nodeArray0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(22, Node.TARGETBLOCK_PROP);
}",0,
project,0,test04459,"public void test04459() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(45, (-3028), 39);
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test04560,"public void test04560() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.initCompilerOptionsIfTesting();
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
    Node node0 = Node.newNumber((double) 123, 123, 123);
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkUndefinedProperties, compilerOptions0.reportUnknownTypes);
    Node node1 = new Node(46, node0, node0, node0, node0, (-853), 15);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(15, Node.CASEARRAY_PROP);
}",0,
project,0,test04661,"public void test04661() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(47, (-3951), 114);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(38, Node.EMPTY_BLOCK);
}",0,
project,0,test04762,"public void test04762() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = Node.newString(48, ""8^8S&"", 16, 14);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test04763,"public void test04763() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = Node.newString(48, ""8^8S&"", 16, 14);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,
project,0,test04864,"public void test04864() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
    RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, renameLabels_ProcessLabels0);
    Node node0 = new Node(49, 109, 0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals((-1), Node.CATCH_SCOPE_PROP);
}",0,
project,0,test04965,"public void test04965() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(50, 111, 111);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test04966,"public void test04966() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(50, 111, 111);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,"assertEquals(0, loggerErrorManager0.getErrorCount())"
project,0,test05067,"public void test05067() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(61, 130, 61);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05068,"public void test05068() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(61, 130, 61);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,
project,0,test05169,"public void test05169() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(62, 28, 23);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05170,"public void test05170() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(62, 28, 23);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test05271,"public void test05271() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(64, 50, 23);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isLocalResultCall());
}",0,assertTrue(node0.isLocalResultCall())
project,0,test05372,"public void test05372() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(66, 123, 123);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05373,"public void test05373() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(66, 123, 123);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,"assertEquals(1, loggerErrorManager0.getErrorCount())"
project,0,test05474,"public void test05474() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(70, 7960, 113);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05475,"public void test05475() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(70, 7960, 113);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,"assertEquals(1, loggerErrorManager0.getErrorCount())"
project,0,test05576,"public void test05576() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(75, ""// Input %num%"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05577,"public void test05577() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(75, ""// Input %num%"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05678,"public void test05678() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
    RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, renameLabels_ProcessLabels0);
    Node node0 = Node.newString(78, """");
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeTraversal"", e);
    }
}",0,
project,0,test05779,"public void test05779() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(79, 15, 29);
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test05780,"public void test05780() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(79, 15, 29);
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05881,"public void test05881() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(82, (-631), 145);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test05882,"public void test05882() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(82, (-631), 145);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test05983,"public void test05983() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test06084,"public void test06084() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(26, 123, (-1321));
    Node node1 = new Node(84, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test06085,"public void test06085() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(26, 123, (-1321));
    Node node1 = new Node(84, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test06186,"public void test06186() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(""com.google.common.collect.SingletonImmutableList$1"", (-1270), 0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node1 = Node.newString(86, ""REF_MEMBER"");
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test06287,"public void test06287() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(89, 123, 123);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test06388,"public void test06388() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(93, (-3951), 114);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test06489,"public void test06489() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(95, 138, 138);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test06590,"public void test06590() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(100, 2505, 100);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isOnlyModifiesThisCall());
}",0,assertTrue(node0.isOnlyModifiesThisCall())
project,0,test06691,"public void test06691() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Vector<JSType> vector0 = new Vector<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    Node node1 = new Node(102, 2, (-2449));
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test06792,"public void test06792() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(103, 2, (-980));
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0, (ScopeCreator) null);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test06893,"public void test06893() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(105, """");
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0, (ScopeCreator) null);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test06994,"public void test06994() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(106, 2263, 106);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06995,"public void test06995() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(106, 2263, 106);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,"assertEquals(0, loggerErrorManager0.getErrorCount())"
project,0,test07096,"public void test07096() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
    RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
    Node node0 = new Node(107, 147, 147);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test07097,"public void test07097() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
    RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
    Node node0 = new Node(107, 147, 147);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,
project,0,test07198,"public void test07198() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(108, 147, 471);
    typeCheck0.visit((NodeTraversal) null, node0, node0);
    assertEquals(48, Node.DIRECT_EVAL);
}",0,
project,0,test07299,"public void test07299() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(110, (-2858), (-2858));
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
}",0,
project,0,test073100,"public void test073100() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(123, 1600, 0);
    Node node1 = new Node(111, 19, 40);
    // Undeclared exception!
    try {
        typeCheck0.visit((NodeTraversal) null, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test074101,"public void test074101() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(112, 112, 7);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator((AbstractCompiler) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isUnscopedQualifiedName());
}",0,
project,0,test075102,"public void test075102() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(113, 7948, 113);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(44, Node.IS_VAR_ARGS_PARAM);
}",0,
project,0,test076103,"public void test076103() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(""// Input %num%"", 11, 120);
    Node node1 = new Node(114, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, Node.DECR_FLAG);
}",0,
project,0,test077104,"public void test077104() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(115, 23, 23);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(36, Node.OPT_ARG_NAME);
}",0,
project,0,test078105,"public void test078105() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(116, ""// Input %num%"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
}",0,
project,0,test079106,"public void test079106() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(117, ""// Input %num%"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(46, Node.IS_DISPATCHER);
}",0,
project,0,test080107,"public void test080107() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(120, """");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(16, Node.FLAG_LOCAL_RESULTS);
}",0,
project,0,test081108,"public void test081108() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(121, 121, 142);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test081109,"public void test081109() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(121, 121, 142);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test082110,"public void test082110() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(122, ""// Input %num%"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(42, Node.IS_CONSTANT_NAME);
}",0,
project,0,test083111,"public void test083111() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(123, 89, 123);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test083112,"public void test083112() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(123, 89, 123);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test084113,"public void test084113() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(124, 124, 7960);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(47, Node.DIRECTIVES);
}",0,
project,0,test085114,"public void test085114() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(126, (-801), 6158);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, Node.BREAK_PROP);
}",0,
project,0,test086115,"public void test086115() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    VarCheck varCheck0 = new VarCheck(compiler0, false);
    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, memoizedScopeCreator0);
    Node node0 = new Node(127);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test086116,"public void test086116() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    VarCheck varCheck0 = new VarCheck(compiler0, false);
    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, memoizedScopeCreator0);
    Node node0 = new Node(127);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test087117,"public void test087117() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(128, 3, 12);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test087118,"public void test087118() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(128, 3, 12);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test088119,"public void test088119() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(129, 89, (-4016));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",0,assertFalse(compiler0.hasErrors())
project,0,test088120,"public void test088120() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(129, 89, (-4016));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,
project,0,test089121,"public void test089121() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(130, 7948, (-3368));
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals((-1), node0.getCharno());
}",0,
project,0,test090122,"public void test090122() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(133, 19, 42);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test090123,"public void test090123() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(133, 19, 42);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test091124,"public void test091124() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, (GatherSideEffectSubexpressionsCallback.SideEffectAccumulator) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(134, 106, 4208);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test091125,"public void test091125() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, (GatherSideEffectSubexpressionsCallback.SideEffectAccumulator) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(134, 106, 4208);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,
project,0,test092126,"public void test092126() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.initCompilerOptionsIfTesting();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(135, 702, 135);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test092127,"public void test092127() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.initCompilerOptionsIfTesting();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(135, 702, 135);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,"assertEquals(1, loggerErrorManager0.getErrorCount())"
project,0,test093128,"public void test093128() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(136, 136, 136);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test093129,"public void test093129() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(136, 136, 136);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,
project,0,test094130,"public void test094130() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(137, 89, 123);
    Denormalize.StripConstantAnnotations denormalize_StripConstantAnnotations0 = new Denormalize.StripConstantAnnotations((AbstractCompiler) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize_StripConstantAnnotations0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test094131,"public void test094131() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(137, 89, 123);
    Denormalize.StripConstantAnnotations denormalize_StripConstantAnnotations0 = new Denormalize.StripConstantAnnotations((AbstractCompiler) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize_StripConstantAnnotations0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,
project,0,test095132,"public void test095132() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(138, 138, 138);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test095133,"public void test095133() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(138, 138, 138);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, loggerErrorManager0.getErrorCount());
}",0,"assertEquals(1, loggerErrorManager0.getErrorCount())"
project,0,test096134,"public void test096134() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.initCompilerOptionsIfTesting();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(139, 702, 139);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test096135,"public void test096135() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.initCompilerOptionsIfTesting();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(139, 702, 139);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test097136,"public void test097136() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(144, 150, 2546);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test097137,"public void test097137() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(144, 150, 2546);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test098138,"public void test098138() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(145, 145, (-2398));
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test098139,"public void test098139() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(145, 145, (-2398));
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test099140,"public void test099140() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(93, (-3951), 148);
    Node node1 = new Node(146, 18, 108);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test099141,"public void test099141() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(93, (-3951), 148);
    Node node1 = new Node(146, 18, 108);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test100142,"public void test100142() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(147, 147, 145);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test101143,"public void test101143() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.initCompilerOptionsIfTesting();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(148, 18, 89);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isQualifiedName());
}",0,assertTrue(node0.isQualifiedName())
project,0,test102144,"public void test102144() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(149, 106, 27);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test102145,"public void test102145() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(149, 106, 27);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test103146,"public void test103146() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(150, 106, (-817));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test103147,"public void test103147() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(150, 106, (-817));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test104148,"public void test104148() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, (ScopeCreator) null);
    Node node0 = Node.newString(151, ""%#0|^{u{(gAk`"");
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 151
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test105149,"public void test105149() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(152, 1273, 138);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(16, Node.FLAG_LOCAL_RESULTS);
}",0,
project,0,test106150,"public void test106150() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    Node node0 = new Node(153, 7948, 153);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(153, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test107151,"public void test107151() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    Node node1 = new Node(105, 101, 22);
    typeCheck0.visit(nodeTraversal0, node0, node1);
    assertEquals(12, Node.COLUMN_BITS);
}",0,
project,0,test108152,"public void test108152() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(66, 123, 123);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = Node.newNumber((double) 8, 2, 49);
    Node node2 = new Node(110, node1, node1);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(41, Node.SIDE_EFFECT_FLAGS);
}",0,
project,0,test109153,"public void test109153() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(105, """");
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0, (ScopeCreator) null);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}",0,
project,0,test110154,"public void test110154() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(120, 120, (-24));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}",0,
project,0,test111155,"public void test111155() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.initCompilerOptionsIfTesting();
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
    Node node0 = Node.newNumber((-6917.435723014053), 123, (-2508));
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkUndefinedProperties, compilerOptions0.reportUnknownTypes);
    // Undeclared exception!
    try {
        typeCheck0.visitName(nodeTraversal0, node0, node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NUMBER -6917.435723014053 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test112156,"public void test112156() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, (ScopeCreator) null);
    Node node0 = new Node(3, 870, 139);
    Node node1 = new Node(118, node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // LEAVEWITH 870 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test113157,"public void test113157() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    Node node1 = new Node(20, node0, node0, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test113158,"public void test113158() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    Node node1 = new Node(20, node0, node0, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,"assertEquals(1, loggerErrorManager0.getWarningCount())"
project,0,test114159,"public void test114159() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(142, ""7ei2["");
    Node node1 = new Node(11, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node1);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test114160,"public void test114160() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(142, ""7ei2["");
    Node node1 = new Node(11, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
    typeCheck0.visit(nodeTraversal0, node0, node1);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test115161,"public void test115161() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(190, 190, (-230));
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    Node node1 = new Node(1, node0);
    node1.addSuppression("""");
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test115162,"public void test115162() throws Throwable {
    Logger logger0 = Logger.getAnonymousLogger();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(190, 190, (-230));
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    Node node1 = new Node(1, node0);
    node1.addSuppression("""");
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, loggerErrorManager0.getWarningCount());
}",0,
project,0,test116163,"public void test116163() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    compiler0.initCompilerOptionsIfTesting();
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(0.0, double0, 0.01);
}",0,
