/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 09:21:28 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.rhino.Node;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionInjector_ESTest extends FunctionInjector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        Node node0 = null;
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
        HashSet<String> hashSet0 = new HashSet<String>();
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, hashSet0, true, true);
        String string0 = "VAR_DECL_SIMPLE_ASSIGNMENT";
        FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
        functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode1);
    }
}
