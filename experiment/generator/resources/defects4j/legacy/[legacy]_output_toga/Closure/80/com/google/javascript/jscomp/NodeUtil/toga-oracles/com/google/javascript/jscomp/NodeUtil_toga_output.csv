project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0011,"public void test0011() throws Throwable {
    Node node0 = Node.newString(105, ""L!C"");
    // Undeclared exception!
    try {
        NodeUtil.isVarArgsFunction(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil$MatchNameNode"", e);
    }
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    Node node0 = new Node(53);
    // Undeclared exception!
    try {
        NodeUtil.getArgumentForCallOrNew(node0, 22);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test0033,"public void test0033() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",1,
project,0,test0044,"public void test0044() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0055,"public void test0055() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.getPrototypePropertyName((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test0066,"public void test0066() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test0077,"public void test0077() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""rD"", ""rD"");
    // Undeclared exception!
    try {
        NodeUtil.functionCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected CALL node, got SCRIPT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test0088,"public void test0088() throws Throwable {
    Node node0 = new Node(68, 68, 68);
    boolean boolean0 = NodeUtil.containsCall(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0099,"public void test0099() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        NodeUtil.getNodeTypeReferenceCount((Node) null, (-3101), compilerOptions0.sourceMapDetailLevel);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil$MatchNodeType"", e);
    }
}",0,
project,0,test01010,"public void test01010() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    // Undeclared exception!
    try {
        NodeUtil.constructorCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NEW node, got TRY
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test01111,"public void test01111() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.getFunctionBody((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test01212,"public void test01212() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    node0.setType(36);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSETELEM 103
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test01313,"public void test01313() throws Throwable {
    Node node0 = new Node(85);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01314,"public void test01314() throws Throwable {
    Node node0 = new Node(85);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(130, node1.getType());
}",0,
project,0,test01415,"public void test01415() throws Throwable {
    Node node0 = Node.newString(38, ""com.google.javascript.jscomp.CodePrinter"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01516,"public void test01516() throws Throwable {
    Node node0 = Node.newString(47, ""=="");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01917,"public void test01917() throws Throwable {
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        NodeUtil.getExpressionBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test02018,"public void test02018() throws Throwable {
    Node node0 = Node.newString(86, ""[J_Iq1."");
    // Undeclared exception!
    try {
        NodeUtil.getExpressionBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test02119,"public void test02119() throws Throwable {
    Node node0 = Node.newString(98, ""; "");
    // Undeclared exception!
    try {
        NodeUtil.getExpressionBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test02220,"public void test02220() throws Throwable {
    Node node0 = new Node(100);
    // Undeclared exception!
    try {
        NodeUtil.getExpressionBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test02321,"public void test02321() throws Throwable {
    Node node0 = Node.newString(26, ""J97"");
    // Undeclared exception!
    try {
        NodeUtil.getBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test02422,"public void test02422() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""1"", 22, 22);
    NodeUtil.getExpressionBooleanValue(node0);
    assertEquals(38, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test02423,"public void test02423() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""1"", 22, 22);
    NodeUtil.getExpressionBooleanValue(node0);
    assertEquals(22, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test02424,"public void test02424() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""1"", 22, 22);
    NodeUtil.getExpressionBooleanValue(node0);
    assertEquals(22, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test02625,"public void test02625() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(26, node0, node0, node0, 2, (-668));
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(0.0, (double) double0, 0.01);
}",0,
project,0,test02626,"public void test02626() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(26, node0, node0, node0, 2, (-668));
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNotNull(double0);
}",0,
project,0,test03327,"public void test03327() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nqn)|/*"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    NodeUtil.getExpressionBooleanValue(node1);
    assertEquals(122, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test03528,"public void test03528() throws Throwable {
    Node node0 = Node.newString(77, ""undefined"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""undefined"", node0);
    Node node2 = node1.cloneTree();
    NodeUtil.getExpressionBooleanValue(node2);
    assertEquals(38, node2.getType());
}",0,"assertEquals(0, node2.getType())"
project,0,test03529,"public void test03529() throws Throwable {
    Node node0 = Node.newString(77, ""undefined"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""undefined"", node0);
    Node node2 = node1.cloneTree();
    NodeUtil.getExpressionBooleanValue(node2);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,assertFalse(node1.isUnscopedQualifiedName())
project,0,test03630,"public void test03630() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""NaN"", node0);
    NodeUtil.getExpressionBooleanValue(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,assertFalse(node1.isUnscopedQualifiedName())
project,0,test03631,"public void test03631() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""NaN"", node0);
    NodeUtil.getExpressionBooleanValue(node1);
    assertEquals(38, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test03732,"public void test03732() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(26, node0, node0, node0, 2, 0);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test03733,"public void test03733() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(26, node0, node0, node0, 2, 0);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertEquals(""false"", string0);
}",0,assertNotNull(string0)
project,0,test03834,"public void test03834() throws Throwable {
    Node node0 = Node.newString(""com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher"");
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals(""com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher"", string0);
}",0,
project,0,test03935,"public void test03935() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("" |b"", "" |b"");
    Node node1 = NodeUtil.newVarNode("" |b"", node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertNull(string0);
}",0,
project,0,test03936,"public void test03936() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("" |b"", "" |b"");
    Node node1 = NodeUtil.newVarNode("" |b"", node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertEquals(118, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test03937,"public void test03937() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("" |b"", "" |b"");
    Node node1 = NodeUtil.newVarNode("" |b"", node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertFalse(node0.hasChildren());
}",0,assertTrue(node0.hasChildren())
project,0,test03938,"public void test03938() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("" |b"", "" |b"");
    Node node1 = NodeUtil.newVarNode("" |b"", node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertNotSame(node0, node1);
}",0,
project,0,test04039,"public void test04039() throws Throwable {
    Node node0 = Node.newString((int) (byte) 89, "" (type "");
    Node node1 = new Node(41, node0, node0);
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(""null"", string0);
}",0,
project,0,test04140,"public void test04140() throws Throwable {
    Node node0 = Node.newString(43, ""com.google.common.collect.SingletonImmutableMap$Values"");
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals(""false"", string0);
}",0,
project,0,test04241,"public void test04241() throws Throwable {
    Node node0 = Node.newString(44, """");
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals(""true"", string0);
}",0,
project,0,test04342,"public void test04342() throws Throwable {
    Node node0 = Node.newString(63, ""'ED76%W}=Ls-r[Z<A+"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}",1,
project,0,test04443,"public void test04443() throws Throwable {
    Node node0 = new Node(64);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(Double.NaN, (double) double0, 0.01);
}",0,
project,0,test04444,"public void test04444() throws Throwable {
    Node node0 = new Node(64);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNotNull(double0);
}",0,
project,0,test04545,"public void test04545() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""NaN"", node0);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test04546,"public void test04546() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""NaN"", node0);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertEquals(""NaN"", string0);
}",0,assertNotNull(string0)
project,0,test04647,"public void test04647() throws Throwable {
    Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals(""-Infinity"", string0);
}",0,assertNotNull(string0)
project,0,test04748,"public void test04748() throws Throwable {
    Node node0 = Node.newString(109, ""Q8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(26, node0, node0, node0, 2, 1189);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test04849,"public void test04849() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""undefined"");
    Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""undefined"", vector0, node0, 2, 12);
    String string0 = NodeUtil.arrayToString(node1);
    assertNull(string0);
}",0,
project,0,test04850,"public void test04850() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""undefined"");
    Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""undefined"", vector0, node0, 2, 12);
    String string0 = NodeUtil.arrayToString(node1);
    assertEquals(12, node1.getCharno());
}",0,
project,0,test04851,"public void test04851() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""undefined"");
    Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""undefined"", vector0, node0, 2, 12);
    String string0 = NodeUtil.arrayToString(node1);
    assertEquals(2, node1.getLineno());
}",0,
project,0,test04852,"public void test04852() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""undefined"");
    Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""undefined"", vector0, node0, 2, 12);
    String string0 = NodeUtil.arrayToString(node1);
    assertEquals(3, node1.getChildCount());
}",0,
project,0,test04853,"public void test04853() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""undefined"");
    Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""undefined"", vector0, node0, 2, 12);
    String string0 = NodeUtil.arrayToString(node1);
    assertEquals(105, node1.getType());
}",0,
project,0,test04954,"public void test04954() throws Throwable {
    Node node0 = Node.newString(29, ""-Infinity"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}",0,
project,0,test05055,"public void test05055() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""infinity"", node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNull(double0);
}",1,
project,0,test05056,"public void test05056() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""infinity"", node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(38, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test05057,"public void test05057() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""infinity"", node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNotSame(node0, node1);
}",1,
project,0,test05158,"public void test05158() throws Throwable {
    Node node0 = Node.newNumber((double) 49, 1872, (-2));
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(49.0, (double) double0, 0.01);
}",0,
project,0,test05259,"public void test05259() throws Throwable {
    Node node0 = Node.newString(""5i)`KT"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(Double.NaN, (double) double0, 0.01);
}",0,
project,0,test05260,"public void test05260() throws Throwable {
    Node node0 = Node.newString(""5i)`KT"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNotNull(double0);
}",0,
project,0,test05361,"public void test05361() throws Throwable {
    Node node0 = new Node(41);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}",0,
project,0,test05462,"public void test05462() throws Throwable {
    Node node0 = Node.newString(43, ""LMC8Da.X?#Er"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}",0,
project,0,test05563,"public void test05563() throws Throwable {
    Node node0 = Node.newString((-1077), ""com.googlg.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration"");
    Node node1 = new Node(44, node0, 29, 14);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(1.0, (double) double0, 0.01);
}",0,
project,0,test05664,"public void test05664() throws Throwable {
    Node node0 = Node.newString(""fx1~BNF_`lb"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(Double.NaN, (double) double0, 0.01);
}",1,
project,0,test05665,"public void test05665() throws Throwable {
    Node node0 = Node.newString(""fx1~BNF_`lb"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNotNull(double0);
}",1,
project,0,test05666,"public void test05666() throws Throwable {
    Node node0 = Node.newString(""fx1~BNF_`lb"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(1, node1.getChildCount());
}",0,"assertEquals(0, node1.getChildCount())"
project,0,test05767,"public void test05767() throws Throwable {
    Node node0 = Node.newString(106, """");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}",1,
project,0,test05868,"public void test05868() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""nQ8rk\""pQq9Nq)|/*"");
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, ""undefined"", node0, ""nQ8rk\""pQq9Nq)|/*"");
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(Double.NaN, (double) double0, 0.01);
}",1,
project,0,test05869,"public void test05869() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""nQ8rk\""pQq9Nq)|/*"");
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, ""undefined"", node0, ""nQ8rk\""pQq9Nq)|/*"");
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNotNull(double0);
}",1,
project,0,test05970,"public void test05970() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""NaN"", node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNotNull(double0);
}",1,
project,0,test05971,"public void test05971() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""NaN"", node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(Double.NaN, (double) double0, 0.01);
}",1,
project,0,test05972,"public void test05972() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""NaN"", node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNotSame(node1, node0);
}",1,
project,0,test06073,"public void test06073() throws Throwable {
    Node node0 = new Node((byte) 100);
    Node node1 = new Node(29, node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNull(double0);
}",0,
project,0,test06174,"public void test06174() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    node0.setType(1893);
    Node node1 = new Node(26, node0, node0, node0, 2, 0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNull(double0);
}",1,
project,0,test06275,"public void test06275() throws Throwable {
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(86, nodeArray0);
    Node node1 = new Node(63, node0, node0, node0, 46, 43);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNull(double0);
}",0,
project,0,test06376,"public void test06376() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""b"");
    assertNotNull(double0);
}",1,
project,0,test06377,"public void test06377() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""b"");
    assertEquals(Double.NaN, (double) double0, 0.01);
}",1,
project,0,test06478,"public void test06478() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""0Y-uSymKzP?'/PI{"");
    assertEquals(Double.NaN, (double) double0, 0.01);
}",0,
project,0,test06479,"public void test06479() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""0Y-uSymKzP?'/PI{"");
    assertNotNull(double0);
}",0,
project,0,test06580,"public void test06580() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""+infinity"");
    assertNull(double0);
}",0,
project,0,test06681,"public void test06681() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""infinity"");
    assertNull(double0);
}",1,
project,0,test06782,"public void test06782() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""-infinity"");
    assertNull(double0);
}",0,
project,0,test06883,"public void test06883() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""Invalid attempt to remove node: "");
    assertNotNull(double0);
}",0,
project,0,test06884,"public void test06884() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""Invalid attempt to remove node: "");
    assertEquals(Double.NaN, (double) double0, 0.01);
}",0,
project,0,test06985,"public void test06985() throws Throwable {
    String string0 = NodeUtil.trimJsWhiteSpace(""\n parent:"");
    assertEquals(""parent:"", string0);
}",0,
project,0,test07086,"public void test07086() throws Throwable {
    boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(9);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07187,"public void test07187() throws Throwable {
    boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(11);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07288,"public void test07288() throws Throwable {
    boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(12);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07389,"public void test07389() throws Throwable {
    boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(13);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07490,"public void test07490() throws Throwable {
    boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(8232);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07591,"public void test07591() throws Throwable {
    boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(8233);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07692,"public void test07692() throws Throwable {
    boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(65279);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07793,"public void test07793() throws Throwable {
    boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(8202);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07894,"public void test07894() throws Throwable {
    Node node0 = new Node(2870);
    Node node1 = NodeUtil.newVarNode("""", node0);
    Node node2 = new Node(37, node1, node1, node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertEquals(118, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test07895,"public void test07895() throws Throwable {
    Node node0 = new Node(2870);
    Node node1 = NodeUtil.newVarNode("""", node0);
    Node node2 = new Node(37, node1, node1, node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertFalse(node0.hasChildren());
}",0,assertFalse(node0.hasChildren())
project,0,test07896,"public void test07896() throws Throwable {
    Node node0 = new Node(2870);
    Node node1 = NodeUtil.newVarNode("""", node0);
    Node node2 = new Node(37, node1, node1, node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test07997,"public void test07997() throws Throwable {
    Node node0 = Node.newString(""neg"");
    Node node1 = new Node(115, node0, node0, node0);
    Node node2 = new Node(14, node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test07998,"public void test07998() throws Throwable {
    Node node0 = Node.newString(""neg"");
    Node node1 = new Node(115, node0, node0, node0);
    Node node2 = new Node(14, node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertEquals(""neg"", string0);
}",0,
project,0,test08099,"public void test08099() throws Throwable {
    Node node0 = new Node(62, 62, 38);
    Node node1 = new Node(26, node0, node0, node0, node0, 29, 36);
    Node node2 = node1.copyInformationFrom(node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node2, false);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test081100,"public void test081100() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("""", """");
    Node node1 = new Node(29, node0, 2, (-12));
    boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test082101,"public void test082101() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""5VK:{ZLviGH;"", 48, 48);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    assertTrue(boolean0);
}",0,
project,0,test082102,"public void test082102() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""5VK:{ZLviGH;"", 48, 48);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    assertEquals(48, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test082103,"public void test082103() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""5VK:{ZLviGH;"", 48, 48);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    assertEquals(38, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test082104,"public void test082104() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""5VK:{ZLviGH;"", 48, 48);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    assertEquals(48, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test083105,"public void test083105() throws Throwable {
    Node node0 = Node.newString(""~J{rE4pxN,"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,
project,0,test084106,"public void test084106() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test085107,"public void test085107() throws Throwable {
    Node node0 = Node.newString(43, ""com.google.common.collect.SingletonImmutableMap$Values"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,
project,0,test086108,"public void test086108() throws Throwable {
    Node node0 = Node.newString(44, """");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test087109,"public void test087109() throws Throwable {
    Node node0 = Node.newString(122, ""S>;e(&+$D^FTP"");
    // Undeclared exception!
    try {
        NodeUtil.isLiteralValue(node0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test088110,"public void test088110() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""NaN"", node0);
    boolean boolean0 = NodeUtil.isImmutableValue(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test088111,"public void test088111() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""NaN"", node0);
    boolean boolean0 = NodeUtil.isImmutableValue(node1);
    assertNotSame(node1, node0);
}",0,
project,0,test089112,"public void test089112() throws Throwable {
    Node node0 = Node.newString(47, ""!!"");
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test090113,"public void test090113() throws Throwable {
    Node node0 = Node.newString(63, ""'ED76%W}=Ls-r[Z<A+"");
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test091114,"public void test091114() throws Throwable {
    Node node0 = new Node(64);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test092115,"public void test092115() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test093116,"public void test093116() throws Throwable {
    Node node0 = new Node(105);
    // Undeclared exception!
    try {
        NodeUtil.isLiteralValue(node0, true);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test094117,"public void test094117() throws Throwable {
    Node node0 = Node.newString(9, ""\""2>$+-m)hJaKMK-"");
    HashSet<String> hashSet0 = new HashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test095118,"public void test095118() throws Throwable {
    Node node0 = Node.newString(10, ""-="");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test096119,"public void test096119() throws Throwable {
    Node node0 = new Node(11);
    HashSet<String> hashSet0 = new HashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test097120,"public void test097120() throws Throwable {
    Node node0 = new Node(12);
    HashSet<String> hashSet0 = new HashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test098121,"public void test098121() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", (byte) 32, (byte) 32);
    Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertEquals(33, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test098122,"public void test098122() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", (byte) 32, (byte) 32);
    Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertEquals(32, node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test098123,"public void test098123() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", (byte) 32, (byte) 32);
    Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(boolean0);
}",0,
project,0,test098124,"public void test098124() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", (byte) 32, (byte) 32);
    Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(node0.hasOneChild());
}",0,assertTrue(node0.hasOneChild())
project,0,test098125,"public void test098125() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", (byte) 32, (byte) 32);
    Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertEquals(32, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test099126,"public void test099126() throws Throwable {
    Node node0 = Node.newString(3552, ""K9^J#WWnmOk"");
    Node node1 = new Node(16, node0, node0);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""nQ8rk\""pQq9Nq)|/*"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
    Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    assertFalse(boolean0);
}",0,
project,0,test100127,"public void test100127() throws Throwable {
    Node node0 = Node.newString(17, ""NdvmeUtil"");
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ImmutableSetMultimap<ByteArrayInputStream, String> immutableSetMultimap0 = ImmutableSetMultimap.of(byteArrayInputStream0, ""NdvmeUtil"");
    ImmutableSet<String> immutableSet0 = immutableSetMultimap0.get(byteArrayInputStream0);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, immutableSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test101128,"public void test101128() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.CodePrinter"");
    Node node1 = new Node(18, node0, 29, 1);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(boolean0);
}",0,
project,0,test102129,"public void test102129() throws Throwable {
    Node node0 = Node.newString(""If this if/for/while really shouldn't have a body, use {}"");
    Node node1 = new Node((byte) 19, node0, node0, node0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertTrue(boolean0);
}",0,
project,0,test103130,"public void test103130() throws Throwable {
    Node node0 = new Node(119);
    Node node1 = new Node(21, node0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(boolean0);
}",0,
project,0,test104131,"public void test104131() throws Throwable {
    Node node0 = Node.newString(""+infinity"");
    Node node1 = new Node(22, node0, node0, 34, 14);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertTrue(boolean0);
}",0,
project,0,test105132,"public void test105132() throws Throwable {
    Node node0 = Node.newString(""+infinity"");
    Node node1 = new Node(23, node0, node0, node0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertTrue(boolean0);
}",0,
project,0,test106133,"public void test106133() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""If this if/for/while really shouldn't have a body, use {}"", (byte) 24, (byte) 24);
    Node node1 = new Node((byte) 24, node0, node0, node0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertEquals(24, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test106134,"public void test106134() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""If this if/for/while really shouldn't have a body, use {}"", (byte) 24, (byte) 24);
    Node node1 = new Node((byte) 24, node0, node0, node0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertEquals(24, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test106135,"public void test106135() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""If this if/for/while really shouldn't have a body, use {}"", (byte) 24, (byte) 24);
    Node node1 = new Node((byte) 24, node0, node0, node0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(boolean0);
}",0,
project,0,test106136,"public void test106136() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""If this if/for/while really shouldn't have a body, use {}"", (byte) 24, (byte) 24);
    Node node1 = new Node((byte) 24, node0, node0, node0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test107137,"public void test107137() throws Throwable {
    Node node0 = Node.newString(25, "";g"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test108138,"public void test108138() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(26, node0, node0, node0, 2, 0);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertTrue(boolean0);
}",0,
project,0,test109139,"public void test109139() throws Throwable {
    Node node0 = Node.newString(""+infinity"");
    Node node1 = new Node(27, node0, node0, node0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""+infinity"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
    Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    assertTrue(boolean0);
}",0,
project,0,test110140,"public void test110140() throws Throwable {
    Node node0 = Node.newString(28, ""XMLHttpRequest"");
    HashSet<String> hashSet0 = new HashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test111141,"public void test111141() throws Throwable {
    Node node0 = Node.newString(29, ""\""2>$+-m)hJaKMK-"");
    HashSet<String> hashSet0 = new HashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test112142,"public void test112142() throws Throwable {
    Node node0 = new Node(30);
    Locale locale0 = Locale.ITALIAN;
    Set<String> set0 = locale0.getUnicodeLocaleAttributes();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    assertFalse(boolean0);
}",0,
project,0,test113143,"public void test113143() throws Throwable {
    Node node0 = Node.newString(31, ""fQo\t&S~z~fUOMYJpR"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,
project,0,test114144,"public void test114144() throws Throwable {
    Node node0 = Node.newString(32, ""%="");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}",0,
project,0,test115145,"public void test115145() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ}isk\""pQq9Nq)|/*"");
    Node node1 = new Node(35, node0, 7, 2);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(boolean0);
}",0,
project,0,test116146,"public void test116146() throws Throwable {
    Node node0 = Node.newString(""If this if/for/while really shouldn't have a body, use {}"");
    Node node1 = new Node(36, node0, node0, node0, 30, 1);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(boolean0);
}",0,
project,0,test117147,"public void test117147() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""U-Mk86p6"");
    Node node1 = new Node(37, node0, 32, 37);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(boolean0);
}",0,
project,0,test118148,"public void test118148() throws Throwable {
    Node node0 = Node.newString(39, ""<tK&-y"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}",0,
project,0,test119149,"public void test119149() throws Throwable {
    Node node0 = new Node(100, 100, 100);
    Node node1 = new Node(41, node0, node0, node0, node0, 1, 1);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(boolean0);
}",0,
project,0,test120150,"public void test120150() throws Throwable {
    Node node0 = new Node(85, 85, 85);
    Node node1 = new Node(42, node0, 9, 7);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertFalse(boolean0);
}",0,
project,0,test121151,"public void test121151() throws Throwable {
    Node node0 = new Node(43);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertTrue(boolean0);
}",0,
project,0,test122152,"public void test122152() throws Throwable {
    Node node0 = Node.newString(44, """");
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertTrue(boolean0);
}",0,
project,0,test123153,"public void test123153() throws Throwable {
    Node node0 = new Node(45, 45, 45);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test124154,"public void test124154() throws Throwable {
    Node node0 = Node.newString(""2Z^+?AP#2>i^^1"");
    Node node1 = Node.newString(33, ""+infinity"");
    node1.addChildrenToFront(node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    assertFalse(boolean0);
}",0,
project,0,test125155,"public void test125155() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""If this if/for/while really shouldn't have a body, use {}"", (-1290), (-1290));
    HashSet<String> hashSet0 = new HashSet<String>();
    hashSet0.add(""If this if/for/while really shouldn't have a body, use {}"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertTrue(boolean0);
}",0,
project,0,test126156,"public void test126156() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ8rk\""pQq9Nqn)|/*"");
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test127157,"public void test127157() throws Throwable {
    Node node0 = Node.newString(63, ""Number"", 63, 43);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test128158,"public void test128158() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ8rk\""pQq9Nqn)|/*"");
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test129159,"public void test129159() throws Throwable {
    Node node0 = new Node(9, 9, 9);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test130160,"public void test130160() throws Throwable {
    Node node0 = new Node(10);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,
project,0,test131161,"public void test131161() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test132162,"public void test132162() throws Throwable {
    Node node0 = new Node(12);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test133163,"public void test133163() throws Throwable {
    Node node0 = new Node(13);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,
project,0,test134164,"public void test134164() throws Throwable {
    Node node0 = new Node(14, 8, 31);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test135165,"public void test135165() throws Throwable {
    Node node0 = new Node(60, 60, 60);
    Node node1 = new Node(15, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test136166,"public void test136166() throws Throwable {
    Node node0 = new Node(16);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test137167,"public void test137167() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test138168,"public void test138168() throws Throwable {
    Node node0 = new Node(18, 18, 18);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test139169,"public void test139169() throws Throwable {
    Node node0 = new Node(19);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test140170,"public void test140170() throws Throwable {
    Node node0 = new Node(20);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test141171,"public void test141171() throws Throwable {
    Node node0 = new Node(21);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test142172,"public void test142172() throws Throwable {
    Node node0 = new Node(22);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test143173,"public void test143173() throws Throwable {
    Node node0 = new Node(23, 0, (-2473));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test144174,"public void test144174() throws Throwable {
    Node node0 = new Node(24);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test145175,"public void test145175() throws Throwable {
    Node node0 = new Node(25);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test146176,"public void test146176() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(26, node0, node0, node0, 2, 0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test147177,"public void test147177() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test148178,"public void test148178() throws Throwable {
    Node node0 = new Node(28, 28, 28);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test149179,"public void test149179() throws Throwable {
    Node node0 = new Node(29, 29, (byte) 112);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test150180,"public void test150180() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test151181,"public void test151181() throws Throwable {
    Node node0 = new Node(31);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test152182,"public void test152182() throws Throwable {
    Node node0 = new Node((byte) 32);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test153183,"public void test153183() throws Throwable {
    Node node0 = new Node(33);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test154184,"public void test154184() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test155185,"public void test155185() throws Throwable {
    Node node0 = new Node(35);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test156186,"public void test156186() throws Throwable {
    Node node0 = new Node(367);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.isSimpleOperator(node1);
    assertFalse(boolean0);
}",0,
project,0,test156187,"public void test156187() throws Throwable {
    Node node0 = new Node(367);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.isSimpleOperator(node1);
    assertEquals(37, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test157188,"public void test157188() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""1"", 22, 22);
    boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    assertEquals(22, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test157189,"public void test157189() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""1"", 22, 22);
    boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test157190,"public void test157190() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""1"", 22, 22);
    boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    assertEquals(22, node0.getLineno());
}",1,
project,0,test158191,"public void test158191() throws Throwable {
    Node node0 = new Node(39);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,
project,0,test159192,"public void test159192() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test160193,"public void test160193() throws Throwable {
    Node node0 = new Node(45);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test161194,"public void test161194() throws Throwable {
    Node node0 = new Node(46);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test162195,"public void test162195() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test163196,"public void test163196() throws Throwable {
    Node node0 = new Node(48);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test164197,"public void test164197() throws Throwable {
    Node node0 = new Node(49);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTHROW
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test165198,"public void test165198() throws Throwable {
    Node node0 = new Node(50);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRETHROW
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test166199,"public void test166199() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType((byte) 51);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test167200,"public void test167200() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""false"", 90, 90);
    Node node1 = new Node(52, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(90, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test167201,"public void test167201() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""false"", 90, 90);
    Node node1 = new Node(52, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test167202,"public void test167202() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""false"", 90, 90);
    Node node1 = new Node(52, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(node0.hasMoreThanOneChild());
}",0,assertTrue(node0.hasMoreThanOneChild())
project,0,test167203,"public void test167203() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""false"", 90, 90);
    Node node1 = new Node(52, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(90, node0.getCharno());
}",0,
project,0,test168204,"public void test168204() throws Throwable {
    Node node0 = new Node(53);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLOCAL_LOAD
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test169205,"public void test169205() throws Throwable {
    Node node0 = new Node(54, 54, 54);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeGETVAR 54
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test170206,"public void test170206() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(55);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test171207,"public void test171207() throws Throwable {
    Node node0 = new Node(56, 56, 56);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeCATCH_SCOPE 56
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test172208,"public void test172208() throws Throwable {
    Node node0 = new Node(57);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_INIT_KEYS
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test173209,"public void test173209() throws Throwable {
    Node node0 = new Node(58);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test174210,"public void test174210() throws Throwable {
    Node node0 = new Node(59);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_NEXT
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test175211,"public void test175211() throws Throwable {
    Node node0 = Node.newString(61, ""ko2yGsy'J0]qgF;w"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test176212,"public void test176212() throws Throwable {
    Node node0 = new Node(62, 62, 62);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test177213,"public void test177213() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test178214,"public void test178214() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test179215,"public void test179215() throws Throwable {
    Node node0 = new Node(65);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test180216,"public void test180216() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSET_REF 66
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test181217,"public void test181217() throws Throwable {
    Node node0 = new Node(67, 67, 67);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDEL_REF 67
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test182218,"public void test182218() throws Throwable {
    Node node0 = new Node(68, 68, 68);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_CALL 68
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test183219,"public void test183219() throws Throwable {
    Node node0 = new Node(69);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_SPECIAL
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test184220,"public void test184220() throws Throwable {
    Node node0 = new Node(70);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test185221,"public void test185221() throws Throwable {
    Node node0 = new Node(71, 71, 71);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test186222,"public void test186222() throws Throwable {
    Node node0 = new Node(72);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeESCXMLTEXT
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test187223,"public void test187223() throws Throwable {
    Node node0 = new Node(73);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test188224,"public void test188224() throws Throwable {
    Node node0 = new Node(74, (-185), 74);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NS_MEMBER
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test189225,"public void test189225() throws Throwable {
    Node node0 = new Node(75);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NAME
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test190226,"public void test190226() throws Throwable {
    Node node0 = new Node(76);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NS_NAME
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test191227,"public void test191227() throws Throwable {
    Node node0 = new Node(77);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTRY
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test192228,"public void test192228() throws Throwable {
    Node node0 = new Node(78);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test193229,"public void test193229() throws Throwable {
    Node node0 = new Node(79);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test194230,"public void test194230() throws Throwable {
    Node node0 = new Node(80, 621, 4);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRB 621
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test195231,"public void test195231() throws Throwable {
    Node node0 = new Node(81);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLC
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test196232,"public void test196232() throws Throwable {
    Node node0 = new Node(82);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRC
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test197233,"public void test197233() throws Throwable {
    Node node0 = new Node(83);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test198234,"public void test198234() throws Throwable {
    Node node0 = new Node(84);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test199235,"public void test199235() throws Throwable {
    Node node0 = new Node(85);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test200236,"public void test200236() throws Throwable {
    Node node0 = new Node(86, 104, 86);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test201237,"public void test201237() throws Throwable {
    Node node0 = new Node(87);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test202238,"public void test202238() throws Throwable {
    Node node0 = new Node(88);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test203239,"public void test203239() throws Throwable {
    Node node0 = new Node(89, 89, 113);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test204240,"public void test204240() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("""", """");
    Node node1 = new Node(91, node0, node0, node0, 2599, 37);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test205241,"public void test205241() throws Throwable {
    Node node0 = new Node(92);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test206242,"public void test206242() throws Throwable {
    Node node0 = new Node(93, 93, 2518);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test207243,"public void test207243() throws Throwable {
    Node node0 = new Node(95, 95, 95);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test208244,"public void test208244() throws Throwable {
    Node node0 = new Node(96, 96, 96);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test209245,"public void test209245() throws Throwable {
    Node node0 = new Node(97);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test210246,"public void test210246() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test211247,"public void test211247() throws Throwable {
    Node node0 = new Node(99);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeCOLON
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test212248,"public void test212248() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test213249,"public void test213249() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test214250,"public void test214250() throws Throwable {
    Node node0 = Node.newString(102, ""-="");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test215251,"public void test215251() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test216252,"public void test216252() throws Throwable {
    Node node0 = new Node(104, 104, 104);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDOT 104
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test217253,"public void test217253() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test218254,"public void test218254() throws Throwable {
    Node node0 = Node.newString(106, """");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test219255,"public void test219255() throws Throwable {
    Node node0 = new Node(107, 107, 107);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test220256,"public void test220256() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test221257,"public void test221257() throws Throwable {
    Node node0 = new Node(110);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSWITCH
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test222258,"public void test222258() throws Throwable {
    Node node0 = new Node(111, 111, 111);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test223259,"public void test223259() throws Throwable {
    Node node0 = new Node((byte) 112);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDEFAULT
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test224260,"public void test224260() throws Throwable {
    Node node0 = Node.newString(113, ""Cm("");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test225261,"public void test225261() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test226262,"public void test226262() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test227263,"public void test227263() throws Throwable {
    Node node0 = new Node(116, 116, 116);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test228264,"public void test228264() throws Throwable {
    Node node0 = new Node(117);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test229265,"public void test229265() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test230266,"public void test230266() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test231267,"public void test231267() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test232268,"public void test232268() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test233269,"public void test233269() throws Throwable {
    Node node0 = Node.newString(""fx1~BNF_`lb"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test233270,"public void test233270() throws Throwable {
    Node node0 = Node.newString(""fx1~BNF_`lb"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertEquals(1, node1.getChildCount());
}",0,"assertEquals(0, node1.getChildCount())"
project,0,test234271,"public void test234271() throws Throwable {
    Node node0 = Node.newString(36, ""T:[8>a)Kx*"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test235272,"public void test235272() throws Throwable {
    Node node0 = new Node(30);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test235273,"public void test235273() throws Throwable {
    Node node0 = new Node(30);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(37, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test236274,"public void test236274() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test237275,"public void test237275() throws Throwable {
    Node node0 = new Node(42);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test238276,"public void test238276() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test239277,"public void test239277() throws Throwable {
    Node node0 = new Node(44, 44, 2139);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test240278,"public void test240278() throws Throwable {
    Node node0 = new Node(46, 8, 37);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test241279,"public void test241279() throws Throwable {
    Node node0 = Node.newString(47, ""=="");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test242280,"public void test242280() throws Throwable {
    Node node0 = Node.newString(""qo<]q}I-eDw_nm[`M^"");
    Node node1 = new Node(50, node0, node0);
    Compiler compiler0 = new Compiler();
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test243281,"public void test243281() throws Throwable {
    Node node0 = new Node((byte) 51);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test244282,"public void test244282() throws Throwable {
    Node node0 = new Node(53, 53, 53);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test245283,"public void test245283() throws Throwable {
    Node node0 = new Node(54);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test246284,"public void test246284() throws Throwable {
    Node node0 = Node.newString(56, ""ko2yGsy'J0]qgF;w"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test247285,"public void test247285() throws Throwable {
    Node node0 = Node.newString(57, ""; "");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test248286,"public void test248286() throws Throwable {
    Node node0 = new Node(59);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test249287,"public void test249287() throws Throwable {
    Node node0 = new Node((byte) 63, (-1401), (-1401));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test250288,"public void test250288() throws Throwable {
    Node node0 = new Node(64);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test251289,"public void test251289() throws Throwable {
    Node node0 = new Node(66);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test252290,"public void test252290() throws Throwable {
    Node node0 = new Node(68, 68, 68);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test253291,"public void test253291() throws Throwable {
    Node node0 = new Node(69, 69, 69);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test254292,"public void test254292() throws Throwable {
    Node node0 = new Node(72);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test255293,"public void test255293() throws Throwable {
    Node node0 = new Node(74);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test256294,"public void test256294() throws Throwable {
    Node node0 = new Node(75);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test257295,"public void test257295() throws Throwable {
    Node node0 = new Node(76, 76, 76);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test258296,"public void test258296() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test259297,"public void test259297() throws Throwable {
    Node node0 = new Node(80);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test260298,"public void test260298() throws Throwable {
    Node node0 = new Node(81);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test261299,"public void test261299() throws Throwable {
    Node node0 = new Node(82);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test262300,"public void test262300() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Vector<JSType> vector0 = new Vector<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test263301,"public void test263301() throws Throwable {
    Node node0 = new Node(84, 84, 84);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test264302,"public void test264302() throws Throwable {
    Node node0 = new Node(98);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test265303,"public void test265303() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test266304,"public void test266304() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test267305,"public void test267305() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test268306,"public void test268306() throws Throwable {
    Node node0 = new Node(104, 104, 104);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test269307,"public void test269307() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test270308,"public void test270308() throws Throwable {
    Node node0 = new Node(108);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test271309,"public void test271309() throws Throwable {
    Node node0 = new Node(109, 109, 109);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test272310,"public void test272310() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test273311,"public void test273311() throws Throwable {
    Node node0 = new Node(112);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test274312,"public void test274312() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test275313,"public void test275313() throws Throwable {
    Node node0 = new Node((byte) 123);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test276314,"public void test276314() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test277315,"public void test277315() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test278316,"public void test278316() throws Throwable {
    Node node0 = new Node(127);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test279317,"public void test279317() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""e>{;uw"", (Node) null);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertEquals(118, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test279318,"public void test279318() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""e>{;uw"", (Node) null);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test280319,"public void test280319() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test281320,"public void test281320() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""<=jy4T"", 3486, (-1231));
    Node node1 = new Node(94, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test281321,"public void test281321() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""<=jy4T"", 3486, (-1231));
    Node node1 = new Node(94, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test281322,"public void test281322() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""<=jy4T"", 3486, (-1231));
    Node node1 = new Node(94, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(node0.hasMoreThanOneChild());
}",0,assertTrue(node0.hasMoreThanOneChild())
project,0,test282323,"public void test282323() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""|="", ""|="");
    Node node1 = new Node(91, node0, node0, node0, 43, 37);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test283324,"public void test283324() throws Throwable {
    Node node0 = Node.newString(""replace"");
    Node node1 = new Node(90, node0);
    Compiler compiler0 = new Compiler();
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test284325,"public void test284325() throws Throwable {
    Node node0 = Node.newString(30, ""Too many elements to create power set: %s > 30"");
    // Undeclared exception!
    try {
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test285326,"public void test285326() throws Throwable {
    Node node0 = new Node(38);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test286327,"public void test286327() throws Throwable {
    Node node0 = new Node(103);
    // Undeclared exception!
    try {
        NodeUtil.callHasLocalResult(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test287328,"public void test287328() throws Throwable {
    Node node0 = new Node(30);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertEquals(37, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test287329,"public void test287329() throws Throwable {
    Node node0 = new Node(30);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test288330,"public void test288330() throws Throwable {
    Node node0 = new Node(114);
    // Undeclared exception!
    try {
        NodeUtil.newHasLocalResult(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test289331,"public void test289331() throws Throwable {
    Node node0 = new Node(30);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    assertTrue(boolean0);
}",0,
project,0,test290332,"public void test290332() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""<=jy4T"", 3486, (-1231));
    Node node1 = new Node(94, node0, node0);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test290333,"public void test290333() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""<=jy4T"", 3486, (-1231));
    Node node1 = new Node(94, node0, node0);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertFalse(node0.hasMoreThanOneChild());
}",0,assertTrue(node0.hasMoreThanOneChild())
project,0,test290334,"public void test290334() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""<=jy4T"", 3486, (-1231));
    Node node1 = new Node(94, node0, node0);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test291335,"public void test291335() throws Throwable {
    Node node0 = new Node(31);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test292336,"public void test292336() throws Throwable {
    Node node0 = new Node(37);
    // Undeclared exception!
    try {
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test293337,"public void test293337() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""infinity"", node0);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,assertFalse(node1.isUnscopedQualifiedName())
project,0,test293338,"public void test293338() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""infinity"", node0);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertFalse(boolean0);
}",1,
project,0,test294339,"public void test294339() throws Throwable {
    Node node0 = Node.newString(49, ""'ED76%W}=Ls-r[Z<A+"", 49, 49);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test295340,"public void test295340() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test296341,"public void test296341() throws Throwable {
    Node node0 = Node.newString(30, ""\""2>$+-m)hJaKMK-"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test297342,"public void test297342() throws Throwable {
    Node node0 = new Node(367, 367, 367);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test298343,"public void test298343() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    // Undeclared exception!
    try {
        NodeUtil.canBeSideEffected(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test299344,"public void test299344() throws Throwable {
    Node node0 = new Node(64);
    Node node1 = new Node(103, node0, node0, 36, 2439);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test300345,"public void test300345() throws Throwable {
    Node node0 = Node.newString(""2Z^+?AP#2>i^^1"");
    Node node1 = Node.newString(33, ""2Z^+?AP#2>i^^1"");
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test301346,"public void test301346() throws Throwable {
    int int0 = NodeUtil.precedence(4);
    assertEquals(15, int0);
}",1,
project,0,test302347,"public void test302347() throws Throwable {
    int int0 = NodeUtil.precedence(103);
    assertEquals(13, int0);
}",0,
project,0,test303348,"public void test303348() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(5);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for goto (type 5)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test304349,"public void test304349() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(6);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ifeq (type 6)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test305350,"public void test305350() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(7);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ifne (type 7)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test306351,"public void test306351() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(8);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setname (type 8)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test307352,"public void test307352() throws Throwable {
    int int0 = NodeUtil.precedence(9);
    assertEquals(5, int0);
}",0,
project,0,test308353,"public void test308353() throws Throwable {
    int int0 = NodeUtil.precedence(10);
    assertEquals(6, int0);
}",0,
project,0,test309354,"public void test309354() throws Throwable {
    int int0 = NodeUtil.precedence(11);
    assertEquals(7, int0);
}",0,
project,0,test310355,"public void test310355() throws Throwable {
    int int0 = NodeUtil.precedence(12);
    assertEquals(8, int0);
}",0,
project,0,test311356,"public void test311356() throws Throwable {
    int int0 = NodeUtil.precedence(13);
    assertEquals(8, int0);
}",0,
project,0,test312357,"public void test312357() throws Throwable {
    int int0 = NodeUtil.precedence(14);
    assertEquals(9, int0);
}",0,
project,0,test313358,"public void test313358() throws Throwable {
    int int0 = NodeUtil.precedence(15);
    assertEquals(9, int0);
}",0,
project,0,test314359,"public void test314359() throws Throwable {
    int int0 = NodeUtil.precedence(16);
    assertEquals(9, int0);
}",0,
project,0,test315360,"public void test315360() throws Throwable {
    int int0 = NodeUtil.precedence(17);
    assertEquals(9, int0);
}",0,
project,0,test316361,"public void test316361() throws Throwable {
    int int0 = NodeUtil.precedence(18);
    assertEquals(10, int0);
}",0,
project,0,test317362,"public void test317362() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 19);
    assertEquals(10, int0);
}",0,
project,0,test318363,"public void test318363() throws Throwable {
    int int0 = NodeUtil.precedence(20);
    assertEquals(10, int0);
}",0,
project,0,test319364,"public void test319364() throws Throwable {
    int int0 = NodeUtil.precedence(21);
    assertEquals(11, int0);
}",0,
project,0,test320365,"public void test320365() throws Throwable {
    int int0 = NodeUtil.precedence(22);
    assertEquals(11, int0);
}",0,
project,0,test321366,"public void test321366() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 23);
    assertEquals(12, int0);
}",0,
project,0,test322367,"public void test322367() throws Throwable {
    int int0 = NodeUtil.precedence(24);
    assertEquals(12, int0);
}",0,
project,0,test323368,"public void test323368() throws Throwable {
    int int0 = NodeUtil.precedence(25);
    assertEquals(12, int0);
}",0,
project,0,test324369,"public void test324369() throws Throwable {
    int int0 = NodeUtil.precedence(26);
    assertEquals(13, int0);
}",0,
project,0,test325370,"public void test325370() throws Throwable {
    int int0 = NodeUtil.precedence(27);
    assertEquals(13, int0);
}",0,
project,0,test326371,"public void test326371() throws Throwable {
    int int0 = NodeUtil.precedence(28);
    assertEquals(13, int0);
}",0,
project,0,test327372,"public void test327372() throws Throwable {
    int int0 = NodeUtil.precedence(29);
    assertEquals(13, int0);
}",0,
project,0,test328373,"public void test328373() throws Throwable {
    int int0 = NodeUtil.precedence(30);
    assertEquals(13, int0);
}",0,
project,0,test329374,"public void test329374() throws Throwable {
    int int0 = NodeUtil.precedence(31);
    assertEquals(13, int0);
}",0,
project,0,test330375,"public void test330375() throws Throwable {
    int int0 = NodeUtil.precedence(32);
    assertEquals(13, int0);
}",0,
project,0,test331376,"public void test331376() throws Throwable {
    int int0 = NodeUtil.precedence(33);
    assertEquals(15, int0);
}",0,
project,0,test332377,"public void test332377() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setprop (type 34)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test333378,"public void test333378() throws Throwable {
    int int0 = NodeUtil.precedence(35);
    assertEquals(15, int0);
}",0,
project,0,test334379,"public void test334379() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(36);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setelem (type 36)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test335380,"public void test335380() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 37);
    assertEquals(15, int0);
}",0,
project,0,test336381,"public void test336381() throws Throwable {
    int int0 = NodeUtil.precedence(38);
    assertEquals(15, int0);
}",0,
project,0,test337382,"public void test337382() throws Throwable {
    int int0 = NodeUtil.precedence(39);
    assertEquals(15, int0);
}",0,
project,0,test338383,"public void test338383() throws Throwable {
    int int0 = NodeUtil.precedence(40);
    assertEquals(15, int0);
}",0,
project,0,test339384,"public void test339384() throws Throwable {
    int int0 = NodeUtil.precedence(41);
    assertEquals(15, int0);
}",0,
project,0,test340385,"public void test340385() throws Throwable {
    int int0 = NodeUtil.precedence(42);
    assertEquals(15, int0);
}",0,
project,0,test341386,"public void test341386() throws Throwable {
    int int0 = NodeUtil.precedence(43);
    assertEquals(15, int0);
}",0,
project,0,test342387,"public void test342387() throws Throwable {
    int int0 = NodeUtil.precedence(44);
    assertEquals(15, int0);
}",0,
project,0,test343388,"public void test343388() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 45);
    assertEquals(8, int0);
}",0,
project,0,test344389,"public void test344389() throws Throwable {
    int int0 = NodeUtil.precedence(46);
    assertEquals(8, int0);
}",0,
project,0,test345390,"public void test345390() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 47);
    assertEquals(15, int0);
}",0,
project,0,test346391,"public void test346391() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(48);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for bindname (type 48)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test347392,"public void test347392() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for throw (type 49)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test348393,"public void test348393() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=50> (type 50)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test349394,"public void test349394() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 51);
    assertEquals(9, int0);
}",0,
project,0,test350395,"public void test350395() throws Throwable {
    int int0 = NodeUtil.precedence(52);
    assertEquals(9, int0);
}",0,
project,0,test351396,"public void test351396() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=53> (type 53)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test352397,"public void test352397() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(54);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for getvar (type 54)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test353398,"public void test353398() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(55);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setvar (type 55)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test354399,"public void test354399() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=56> (type 56)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test355400,"public void test355400() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(57);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=57> (type 57)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test356401,"public void test356401() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=58> (type 58)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test357402,"public void test357402() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(59);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=59> (type 59)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test358403,"public void test358403() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(60);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=60> (type 60)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test359404,"public void test359404() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 61);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for thisfn (type 61)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test360405,"public void test360405() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=62> (type 62)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test361406,"public void test361406() throws Throwable {
    int int0 = NodeUtil.precedence(63);
    assertEquals(15, int0);
}",0,
project,0,test362407,"public void test362407() throws Throwable {
    int int0 = NodeUtil.precedence(64);
    assertEquals(15, int0);
}",0,
project,0,test363408,"public void test363408() throws Throwable {
    int int0 = NodeUtil.precedence(65);
    assertEquals(15, int0);
}",0,
project,0,test364409,"public void test364409() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=67> (type 67)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test365410,"public void test365410() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=68> (type 68)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test366411,"public void test366411() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(69);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ref_special (type 69)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test367412,"public void test367412() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(70);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=70> (type 70)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test368413,"public void test368413() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 71);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=71> (type 71)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test369414,"public void test369414() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=72> (type 72)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test370415,"public void test370415() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(74);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=74> (type 74)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test371416,"public void test371416() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=75> (type 75)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test372417,"public void test372417() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 76);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=76> (type 76)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test373418,"public void test373418() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for try (type 77)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test374419,"public void test374419() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(78);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for semi (type 78)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test375420,"public void test375420() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(79);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lb (type 79)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test376421,"public void test376421() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 80);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rb (type 80)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test377422,"public void test377422() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lc (type 81)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test378423,"public void test378423() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rc (type 82)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test379424,"public void test379424() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 83);
    assertEquals(15, int0);
}",0,
project,0,test380425,"public void test380425() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(84);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rp (type 84)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test381426,"public void test381426() throws Throwable {
    int int0 = NodeUtil.precedence(85);
    assertEquals(0, int0);
}",0,
project,0,test382427,"public void test382427() throws Throwable {
    int int0 = NodeUtil.precedence(86);
    assertEquals(1, int0);
}",0,
project,0,test383428,"public void test383428() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 87);
    assertEquals(1, int0);
}",0,
project,0,test384429,"public void test384429() throws Throwable {
    int int0 = NodeUtil.precedence(88);
    assertEquals(1, int0);
}",0,
project,0,test385430,"public void test385430() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 89);
    assertEquals(1, int0);
}",0,
project,0,test386431,"public void test386431() throws Throwable {
    int int0 = NodeUtil.precedence(90);
    assertEquals(1, int0);
}",0,
project,0,test387432,"public void test387432() throws Throwable {
    int int0 = NodeUtil.precedence(91);
    assertEquals(1, int0);
}",0,
project,0,test388433,"public void test388433() throws Throwable {
    int int0 = NodeUtil.precedence(92);
    assertEquals(1, int0);
}",0,
project,0,test389434,"public void test389434() throws Throwable {
    int int0 = NodeUtil.precedence(93);
    assertEquals(1, int0);
}",0,
project,0,test390435,"public void test390435() throws Throwable {
    int int0 = NodeUtil.precedence(94);
    assertEquals(1, int0);
}",0,
project,0,test391436,"public void test391436() throws Throwable {
    int int0 = NodeUtil.precedence(95);
    assertEquals(1, int0);
}",0,
project,0,test392437,"public void test392437() throws Throwable {
    int int0 = NodeUtil.precedence(96);
    assertEquals(1, int0);
}",0,
project,0,test393438,"public void test393438() throws Throwable {
    int int0 = NodeUtil.precedence(97);
    assertEquals(1, int0);
}",0,
project,0,test394439,"public void test394439() throws Throwable {
    int int0 = NodeUtil.precedence(98);
    assertEquals(2, int0);
}",0,
project,0,test395440,"public void test395440() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(99);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for colon (type 99)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test396441,"public void test396441() throws Throwable {
    int int0 = NodeUtil.precedence((byte) 100);
    assertEquals(3, int0);
}",0,
project,0,test397442,"public void test397442() throws Throwable {
    int int0 = NodeUtil.precedence(101);
    assertEquals(4, int0);
}",0,
project,0,test398443,"public void test398443() throws Throwable {
    int int0 = NodeUtil.precedence(102);
    assertEquals(13, int0);
}",0,
project,0,test399444,"public void test399444() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for dot (type 104)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test400445,"public void test400445() throws Throwable {
    int int0 = NodeUtil.precedence(105);
    assertEquals(15, int0);
}",0,
project,0,test401446,"public void test401446() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(106);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for export (type 106)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test402447,"public void test402447() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(107);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for import (type 107)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test403448,"public void test403448() throws Throwable {
    int int0 = NodeUtil.precedence(108);
    assertEquals(15, int0);
}",0,
project,0,test404449,"public void test404449() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for else (type 109)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test405450,"public void test405450() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(110);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for switch (type 110)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test406451,"public void test406451() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for case (type 111)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test407452,"public void test407452() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 112);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for default (type 112)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test408453,"public void test408453() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(113);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for while (type 113)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test409454,"public void test409454() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for do (type 114)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test410455,"public void test410455() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for for (type 115)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test411456,"public void test411456() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(116);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for break (type 116)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test412457,"public void test412457() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for continue (type 117)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test413458,"public void test413458() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for var (type 118)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test414459,"public void test414459() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(119);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for with (type 119)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test415460,"public void test415460() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(120);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for catch (type 120)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test416461,"public void test416461() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(121);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for finally (type 121)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test417462,"public void test417462() throws Throwable {
    int int0 = NodeUtil.precedence(122);
    assertEquals(13, int0);
}",0,
project,0,test418463,"public void test418463() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(123);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for reserved (type 123)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test419464,"public void test419464() throws Throwable {
    int int0 = NodeUtil.precedence(124);
    assertEquals(15, int0);
}",0,
project,0,test420465,"public void test420465() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(65279);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=65279> (type 65279)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test421466,"public void test421466() throws Throwable {
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        NodeUtil.mayBeStringHelper(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test422467,"public void test422467() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.mayBeString(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test423468,"public void test423468() throws Throwable {
    Node node0 = Node.newString(98, ""replace"");
    // Undeclared exception!
    try {
        NodeUtil.mayBeString(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test424469,"public void test424469() throws Throwable {
    Node node0 = new Node((byte) 100);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""Zju5S"", node0);
    node0.addChildToFront(node1);
    assertEquals(38, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test424470,"public void test424470() throws Throwable {
    Node node0 = new Node((byte) 100);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""Zju5S"", node0);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test425471,"public void test425471() throws Throwable {
    Node node0 = new Node(9, (byte) 51, (byte) 51);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test426472,"public void test426472() throws Throwable {
    Node node0 = new Node(38, 38, 38);
    Node node1 = new Node(10, node0, node0, 0, (-22));
    boolean boolean0 = NodeUtil.mayBeString(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test427473,"public void test427473() throws Throwable {
    Node node0 = new Node(11);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test428474,"public void test428474() throws Throwable {
    Node node0 = new Node(18);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test429475,"public void test429475() throws Throwable {
    Node node0 = Node.newString(19, "" hiL2X%a**y"");
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test430476,"public void test430476() throws Throwable {
    Node node0 = new Node(20, 20, 99);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test431477,"public void test431477() throws Throwable {
    Node node0 = new Node(119);
    Node node1 = new Node(21, node0);
    Node node2 = node1.copyInformationFrom(node0);
    boolean boolean0 = NodeUtil.mayBeString(node2);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test432478,"public void test432478() throws Throwable {
    Node node0 = Node.newString(""+infinity"");
    Node node1 = new Node(22, node0, node0, 34, 14);
    boolean boolean0 = NodeUtil.mayBeString(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test433479,"public void test433479() throws Throwable {
    Node node0 = new Node(24);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test434480,"public void test434480() throws Throwable {
    Node node0 = Node.newString(25, ""false"");
    boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test435481,"public void test435481() throws Throwable {
    Node node0 = new Node(62, 62, 38);
    Node node1 = new Node(27, node0);
    Node node2 = node1.copyInformationFrom(node0);
    boolean boolean0 = NodeUtil.mayBeString(node2);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test436482,"public void test436482() throws Throwable {
    Node node0 = new Node(28);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test437483,"public void test437483() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test438484,"public void test438484() throws Throwable {
    Node node0 = new Node(39);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test439485,"public void test439485() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test440486,"public void test440486() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test441487,"public void test441487() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""NaN"", (byte) 118, 1);
    boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    assertEquals(1, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test441488,"public void test441488() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""NaN"", (byte) 118, 1);
    boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    assertEquals(118, node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test441489,"public void test441489() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""NaN"", (byte) 118, 1);
    boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test442490,"public void test442490() throws Throwable {
    Node node0 = new Node(12);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test443491,"public void test443491() throws Throwable {
    Node node0 = new Node(14, 23, 15);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test444492,"public void test444492() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""If this if/for/while really shouldn't have a body, use {}"", (byte) 32, (byte) 32);
    Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
    boolean boolean0 = NodeUtil.mayBeString(node1);
    assertEquals(32, node0.getLineno());
}",1,
project,0,test444493,"public void test444493() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""If this if/for/while really shouldn't have a body, use {}"", (byte) 32, (byte) 32);
    Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
    boolean boolean0 = NodeUtil.mayBeString(node1);
    assertFalse(node0.hasChildren());
}",0,
project,0,test444494,"public void test444494() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""If this if/for/while really shouldn't have a body, use {}"", (byte) 32, (byte) 32);
    Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
    boolean boolean0 = NodeUtil.mayBeString(node1);
    assertEquals(32, node0.getCharno());
}",1,
project,0,test444495,"public void test444495() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""If this if/for/while really shouldn't have a body, use {}"", (byte) 32, (byte) 32);
    Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
    boolean boolean0 = NodeUtil.mayBeString(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test445496,"public void test445496() throws Throwable {
    Node node0 = new Node(16);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test446497,"public void test446497() throws Throwable {
    Node node0 = new Node(17);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test447498,"public void test447498() throws Throwable {
    Node node0 = new Node(368);
    Node node1 = new Node(18, node0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test448499,"public void test448499() throws Throwable {
    Node node0 = new Node(19);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test449500,"public void test449500() throws Throwable {
    Node node0 = new Node(20, (-3214), (-1370));
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test450501,"public void test450501() throws Throwable {
    Node node0 = new Node(23, 0, (-2473));
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test451502,"public void test451502() throws Throwable {
    Node node0 = Node.newString(93, ""9Pq0`>7yQN"");
    Node node1 = new Node(25, node0, node0, node0, 29, (-419));
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test452503,"public void test452503() throws Throwable {
    Node node0 = new Node(26);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test453504,"public void test453504() throws Throwable {
    Node node0 = Node.newString(""+infinity"");
    Node node1 = new Node(27, node0, node0, node0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test454505,"public void test454505() throws Throwable {
    Node node0 = Node.newString(63, ""Number"", 63, 43);
    Node node1 = new Node(28, node0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test455506,"public void test455506() throws Throwable {
    Node node0 = new Node((byte) 100);
    Node node1 = new Node(29, node0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test456507,"public void test456507() throws Throwable {
    Node node0 = new Node(31);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",1,
project,0,test457508,"public void test457508() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",1,
project,0,test458509,"public void test458509() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",1,
project,0,test459510,"public void test459510() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",1,
project,0,test460511,"public void test460511() throws Throwable {
    Node node0 = new Node(35);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",1,
project,0,test461512,"public void test461512() throws Throwable {
    Node node0 = new Node(39, 39, 39);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test462513,"public void test462513() throws Throwable {
    Node node0 = Node.newString(41, ""LMC8Da.X?#Er"");
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test463514,"public void test463514() throws Throwable {
    Node node0 = new Node(42, 92, 20);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
    boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test464515,"public void test464515() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test465516,"public void test465516() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = new Node(44, node0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test466517,"public void test466517() throws Throwable {
    Node node0 = new Node(45);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test467518,"public void test467518() throws Throwable {
    Node node0 = new Node(46);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test468519,"public void test468519() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",1,
project,0,test469520,"public void test469520() throws Throwable {
    Node node0 = new Node(48);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",1,
project,0,test470521,"public void test470521() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    Node node1 = new Node(49, node0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test471522,"public void test471522() throws Throwable {
    Node node0 = new Node(50);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}",1,
project,0,test472523,"public void test472523() throws Throwable {
    Node node0 = new Node((byte) 51);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test473524,"public void test473524() throws Throwable {
    Node node0 = Node.newString(""+infinity"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.isUndefined(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test474525,"public void test474525() throws Throwable {
    Node node0 = new Node(41);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test475526,"public void test475526() throws Throwable {
    Node node0 = Node.newString(""+infinity"");
    boolean boolean0 = NodeUtil.mayBeString(node0, false);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test476527,"public void test476527() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    assertNotNull(node0);
}",0,
project,0,test476528,"public void test476528() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}",1,
project,0,test477529,"public void test477529() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(9);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test478530,"public void test478530() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(38);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test479531,"public void test479531() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(10);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test480532,"public void test480532() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(11);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test481533,"public void test481533() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(23);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test482534,"public void test482534() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(100);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test483535,"public void test483535() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(101);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test484536,"public void test484536() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(9);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test485537,"public void test485537() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(48);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test486538,"public void test486538() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(11);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test487539,"public void test487539() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(23);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test488540,"public void test488540() throws Throwable {
    Node node0 = new Node(87);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(9, int0);
}",0,"assertEquals(1, int0)"
project,0,test489541,"public void test489541() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    // Undeclared exception!
    try {
        NodeUtil.getOpFromAssignmentOp(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Not an assiment op
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test490542,"public void test490542() throws Throwable {
    Node node0 = Node.newString(68, ""+xO'J,S3~"");
    Node node1 = new Node(88, node0, node0, 2871, 29);
    int int0 = NodeUtil.getOpFromAssignmentOp(node1);
    assertEquals(10, int0);
}",0,"assertEquals(0, int0)"
project,0,test491543,"public void test491543() throws Throwable {
    Node node0 = Node.newString(89, ""KKefsF_]"", 89, 89);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(11, int0);
}",0,"assertEquals(1, int0)"
project,0,test492544,"public void test492544() throws Throwable {
    Node node0 = Node.newString(93, ""prototype"");
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(21, int0);
}",0,"assertEquals(1, int0)"
project,0,test493545,"public void test493545() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(22, int0);
}",0,"assertEquals(1, int0)"
project,0,test494546,"public void test494546() throws Throwable {
    Node node0 = Node.newString(96, ""DEC"");
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(24, int0);
}",0,"assertEquals(1, int0)"
project,0,test495547,"public void test495547() throws Throwable {
    Node node0 = Node.newString(""0Y-uSymKzP?'/PI{"");
    boolean boolean0 = NodeUtil.isExpressionNode(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test496548,"public void test496548() throws Throwable {
    Node node0 = Node.newString(130, ""+infinity"");
    boolean boolean0 = NodeUtil.isExpressionNode(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test497549,"public void test497549() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    boolean boolean0 = NodeUtil.isGet(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test498550,"public void test498550() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.NodeUtil"", 1273, 1273);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(1273, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test498551,"public void test498551() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.NodeUtil"", 1273, 1273);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(33, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test498552,"public void test498552() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.NodeUtil"", 1273, 1273);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertNull(node1);
}",0,
project,0,test498553,"public void test498553() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.NodeUtil"", 1273, 1273);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(2, node0.getChildCount());
}",0,"assertEquals(0, node0.getChildCount())"
project,0,test498554,"public void test498554() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.NodeUtil"", 1273, 1273);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(1273, node0.getLineno());
}",0,
project,0,test499555,"public void test499555() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.isCallOrNew(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test500556,"public void test500556() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""5VK:{ZLviGH;"", 48, 48);
    node0.addChildAfter(node0, node0);
    assertFalse(node0.hasMoreThanOneChild());
}",0,assertFalse(node0.hasMoreThanOneChild())
project,0,test500557,"public void test500557() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""5VK:{ZLviGH;"", 48, 48);
    node0.addChildAfter(node0, node0);
    NodeUtil.getAssignedValue(node0);
    assertEquals(48, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test500558,"public void test500558() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""5VK:{ZLviGH;"", 48, 48);
    node0.addChildAfter(node0, node0);
    NodeUtil.getAssignedValue(node0);
    assertEquals(48, node0.getCharno());
}",0,
project,0,test501559,"public void test501559() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    Node node1 = NodeUtil.newVarNode(""infinity"", node0);
    boolean boolean0 = NodeUtil.isVar(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test501560,"public void test501560() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    Node node1 = NodeUtil.newVarNode(""infinity"", node0);
    boolean boolean0 = NodeUtil.isVar(node1);
    assertFalse(node0.hasChildren());
}",0,assertFalse(node0.hasChildren())
project,0,test502561,"public void test502561() throws Throwable {
    Node node0 = new Node((-257));
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    boolean boolean0 = NodeUtil.has(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test503562,"public void test503562() throws Throwable {
    Node node0 = Node.newString(""~J{rE4pxN,"");
    boolean boolean0 = NodeUtil.isString(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test504563,"public void test504563() throws Throwable {
    Node node0 = new Node(85);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprAssign(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test504564,"public void test504564() throws Throwable {
    Node node0 = new Node(85);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprAssign(node1);
    assertEquals(130, node1.getType());
}",0,
project,0,test505565,"public void test505565() throws Throwable {
    Node node0 = Node.newString(""'ED6W}=Ls-r[Zs<A+"");
    Node node1 = new Node(86, node0);
    boolean boolean0 = NodeUtil.isAssign(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test506566,"public void test506566() throws Throwable {
    Node node0 = Node.newString(111, ""nQ8rk\""pQq9Nq)|/*"");
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test507567,"public void test507567() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertEquals(130, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test507568,"public void test507568() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test508569,"public void test508569() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test509570,"public void test509570() throws Throwable {
    Node node0 = new Node(19);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test510571,"public void test510571() throws Throwable {
    Node node0 = Node.newString(""fQo\t&S~z~fUOMYJpR"");
    Node node1 = new Node(115, node0, node0, node0);
    Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
    assertFalse(node2.hasChildren());
}",0,assertFalse(node2.hasChildren())
project,0,test511572,"public void test511572() throws Throwable {
    Node node0 = Node.newString(""nVeg"");
    Node node1 = new Node(15, node0, node0, node0);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test512573,"public void test512573() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test513574,"public void test513574() throws Throwable {
    Node node0 = Node.newString(""neg"");
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}",0,
project,0,test514575,"public void test514575() throws Throwable {
    Node node0 = Node.newString(""neg"");
    Node node1 = new Node(115, node0, node0, node0);
    Node node2 = NodeUtil.getLoopCodeBlock(node1);
    assertEquals(33, Node.NAME_PROP);
}",0,
project,0,test515576,"public void test515576() throws Throwable {
    Node node0 = Node.newString(""neg"");
    Node node1 = new Node(115, node0, node0, node0);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test516577,"public void test516577() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(105, node0, node0, node0);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test517578,"public void test517578() throws Throwable {
    Node node0 = Node.newString(26, ""J97"");
    Node node1 = new Node(77, node0, node0, 0, 1324);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test518579,"public void test518579() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test519580,"public void test519580() throws Throwable {
    Node node0 = new Node(108);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test520581,"public void test520581() throws Throwable {
    Node node0 = Node.newString(110, ""javascript"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test521582,"public void test521582() throws Throwable {
    Node node0 = Node.newString(111, ""x:;z;xB3bAG3=e"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test522583,"public void test522583() throws Throwable {
    Node node0 = new Node(112);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test523584,"public void test523584() throws Throwable {
    Node node0 = Node.newString(113, ""4$4pETVH/"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test525586,"public void test525586() throws Throwable {
    Node node0 = Node.newString((int) (byte) 119, ""koDgqJh=vG*kE"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test526587,"public void test526587() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test527588,"public void test527588() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test528589,"public void test528589() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test529590,"public void test529590() throws Throwable {
    Node node0 = Node.newString(110, ""javascript"");
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}",0,
project,0,test530591,"public void test530591() throws Throwable {
    Node node0 = Node.newString(111, ""nQ8rk\""pQq9Nq)|/*"");
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test531592,"public void test531592() throws Throwable {
    Node node0 = Node.newString((int) (byte) 112, ""javascript"");
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test532593,"public void test532593() throws Throwable {
    Node node0 = Node.newString(""fQo\t&S~z~fUOMYJpR"");
    Node node1 = new Node(115, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test533594,"public void test533594() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(120, node0, node0, node0, 38, 0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test534595,"public void test534595() throws Throwable {
    Node node0 = Node.newString(""~J{rE4pxN,"");
    // Undeclared exception!
    try {
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test535596,"public void test535596() throws Throwable {
    Node node0 = Node.newString(""fQo\t&S~z~fUOMYJpR"");
    Node node1 = new Node(115, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test536597,"public void test536597() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test537598,"public void test537598() throws Throwable {
    Node node0 = new Node(120, 120, 120);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test538599,"public void test538599() throws Throwable {
    Node node0 = Node.newString(108, ""google"");
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}",0,"assertEquals(node0, node1)"
project,0,test539600,"public void test539600() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}",0,"assertEquals(node0, node1)"
project,0,test540601,"public void test540601() throws Throwable {
    Node node0 = Node.newString(110, ""javascript"");
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // SWITCH javascript does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test541602,"public void test541602() throws Throwable {
    Node node0 = Node.newString(111, ""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}",0,"assertEquals(node0, node1)"
project,0,test542603,"public void test542603() throws Throwable {
    Node node0 = Node.newString((int) (byte) 112, ""javascript"");
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // DEFAULT javascript does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test543604,"public void test543604() throws Throwable {
    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""com.google.javascript.jscomp.MaybeReachingVariableUse"", 113, 113);
    Node node1 = new Node(113, node0, 22, 23);
    peepholeRemoveDeadCode0.tryFoldWhile(node1);
    assertEquals(113, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test543605,"public void test543605() throws Throwable {
    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""com.google.javascript.jscomp.MaybeReachingVariableUse"", 113, 113);
    Node node1 = new Node(113, node0, 22, 23);
    peepholeRemoveDeadCode0.tryFoldWhile(node1);
    assertFalse(node0.hasOneChild());
}",0,
project,0,test543606,"public void test543606() throws Throwable {
    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""com.google.javascript.jscomp.MaybeReachingVariableUse"", 113, 113);
    Node node1 = new Node(113, node0, 22, 23);
    peepholeRemoveDeadCode0.tryFoldWhile(node1);
    assertEquals(113, node0.getLineno());
}",0,
project,0,test543607,"public void test543607() throws Throwable {
    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""com.google.javascript.jscomp.MaybeReachingVariableUse"", 113, 113);
    Node node1 = new Node(113, node0, 22, 23);
    peepholeRemoveDeadCode0.tryFoldWhile(node1);
    assertEquals(33, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test544608,"public void test544608() throws Throwable {
    Node node0 = Node.newString(""fQo\t&S~z~fUOMYJpR"");
    Node node1 = new Node(115, node0, node0, node0);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // malformed 'for' statement FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test545609,"public void test545609() throws Throwable {
    Node node0 = Node.newString((-1077), ""com.googlg.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration"");
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // -1077
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test546610,"public void test546610() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ8rk\""pQq9Nqn)|/*"");
    node0.addChildrenToBack(node0);
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test547611,"public void test547611() throws Throwable {
    Node node0 = new Node(85);
    Node node1 = NodeUtil.newExpr(node0);
    assertEquals(130, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test547612,"public void test547612() throws Throwable {
    Node node0 = new Node(85);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isStatement(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test548613,"public void test548613() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ8rk\""pQq9Nqn)|/*"");
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isStatement(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test549614,"public void test549614() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""nQ8rk\""pQq9Nq)|/*"");
    Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isStatement(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test550615,"public void test550615() throws Throwable {
    Node node0 = Node.newString(111, ""f"");
    boolean boolean0 = NodeUtil.isSwitchCase(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test551616,"public void test551616() throws Throwable {
    Node node0 = Node.newString((int) (byte) 112, ""koDgqJh=vG*kE"");
    boolean boolean0 = NodeUtil.isSwitchCase(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test552617,"public void test552617() throws Throwable {
    Node node0 = new Node(85);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test553618,"public void test553618() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""1"", 22, 22);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test553619,"public void test553619() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""1"", 22, 22);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertEquals(22, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test553620,"public void test553620() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""1"", 22, 22);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertEquals(22, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test554621,"public void test554621() throws Throwable {
    boolean boolean0 = NodeUtil.isLabelName((Node) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test555622,"public void test555622() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""S989<"");
    Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
    boolean boolean0 = NodeUtil.isLabelName(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test556623,"public void test556623() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test557624,"public void test557624() throws Throwable {
    MockFile mockFile0 = new MockFile(""match"", ""match"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    Node node0 = compiler0.parseSyntheticCode(""match"", ""match"");
    Node node1 = new Node(115, node0, node0, node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: SCRIPT 1 [sourcename: java.lang.String@0000000440] [synthetic: 1] of FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test558625,"public void test558625() throws Throwable {
    Node node0 = Node.newString(120, ""72tlHa+R5>_v"");
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test559626,"public void test559626() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ8rk\""pQq9Nqn)|/*"");
    node0.addChildrenToBack(node0);
    NodeUtil.removeChild(node0, node0);
    assertEquals(48, Node.DIRECT_EVAL);
}",0,
project,0,test560627,"public void test560627() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""nQ8rk\""pQq9Nq)|/*"");
    Compiler compiler0 = new Compiler();
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    NodeUtil.newExpr(node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test561628,"public void test561628() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    Node node1 = new Node(105, node0, node0, node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: STRING nQ8rk\""pQq9Nq)|/* of FUNCTION nQ8rk\""pQq9Nq)|/*
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test562629,"public void test562629() throws Throwable {
    Node node0 = new Node(69, 69, 69);
    // Undeclared exception!
    try {
        NodeUtil.maybeAddFinally(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test563630,"public void test563630() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    NodeUtil.maybeAddFinally(node0);
    assertTrue(node0.hasChildren());
}",0,assertTrue(node0.hasChildren())
project,0,test563631,"public void test563631() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    NodeUtil.maybeAddFinally(node0);
    assertEquals(1, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test564632,"public void test564632() throws Throwable {
    Node node0 = new Node(69, 69, 69);
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test565633,"public void test565633() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""|="", ""|="");
    Node node1 = NodeUtil.newVarNode(""|="", node0);
    assertEquals(118, node1.getType());
}",0,"assertEquals(1, node1.getType())"
project,0,test565634,"public void test565634() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""|="", ""|="");
    Node node1 = NodeUtil.newVarNode(""|="", node0);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test565635,"public void test565635() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""|="", ""|="");
    Node node1 = NodeUtil.newVarNode(""|="", node0);
    boolean boolean0 = NodeUtil.tryMergeBlock(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test566636,"public void test566636() throws Throwable {
    Node node0 = new Node(37, 1575, (-57));
    boolean boolean0 = NodeUtil.isCallOrNew(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test567637,"public void test567637() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    boolean boolean0 = NodeUtil.isThis(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test568638,"public void test568638() throws Throwable {
    Node node0 = new Node((byte) 100);
    // Undeclared exception!
    try {
        NodeUtil.isSparseArray(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test569639,"public void test569639() throws Throwable {
    Node node0 = Node.newString(63, ""Number"", 63, 63);
    boolean boolean0 = NodeUtil.isSparseArray(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test570640,"public void test570640() throws Throwable {
    Node node0 = new Node(73);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test571641,"public void test571641() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test572642,"public void test572642() throws Throwable {
    Node node0 = new Node(38, 38, 38);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.isObjectCallMethod(node1, ""NdeUtl"");
    assertFalse(boolean0);
}",0,
project,0,test572643,"public void test572643() throws Throwable {
    Node node0 = new Node(38, 38, 38);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.isObjectCallMethod(node1, ""NdeUtl"");
    assertEquals((-1), node1.getLineno());
}",0,
project,0,test573644,"public void test573644() throws Throwable {
    Node node0 = new Node((-257));
    boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test574645,"public void test574645() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test575646,"public void test575646() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""e>{;uw"", (Node) null);
    boolean boolean0 = NodeUtil.isLhs((Node) null, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test576647,"public void test576647() throws Throwable {
    Node node0 = new Node(86);
    boolean boolean0 = NodeUtil.isLhs(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test577648,"public void test577648() throws Throwable {
    Node node0 = new Node(86);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isLhs(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test578649,"public void test578649() throws Throwable {
    Node node0 = Node.newNumber((double) 53, 160, 160);
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test579650,"public void test579650() throws Throwable {
    Node node0 = Node.newString(148, "".prototype."");
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test580651,"public void test580651() throws Throwable {
    Node node0 = Node.newNumber(0.0, (-638), (-638));
    String string0 = NodeUtil.getObjectLitKeyName(node0);
    assertEquals(""0"", string0);
}",0,
project,0,test581652,"public void test581652() throws Throwable {
    Node node0 = new Node(70, 70, 70);
    // Undeclared exception!
    try {
        NodeUtil.getObjectLitKeyName(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected node type: DEFAULTNAMESPACE 70
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test582653,"public void test582653() throws Throwable {
    Node node0 = Node.newString(""nQ8rk\""pQq9Nq)|/*"");
    String string0 = NodeUtil.getObjectLitKeyName(node0);
    assertEquals(""nQ8rk\""pQq9Nq)|/*"", string0);
}",0,
project,0,test583654,"public void test583654() throws Throwable {
    Node node0 = new Node(102);
    JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
    assertNull(jSType0);
}",0,assertNotNull(jSType0)
project,0,test584655,"public void test584655() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ}isk\""pQq9Nq)|/*"");
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
    assertFalse(jSType0.isBooleanValueType());
}",0,
project,0,test585656,"public void test585656() throws Throwable {
    Node node0 = Node.newString(147, "".prototype."");
    boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test586657,"public void test586657() throws Throwable {
    Node node0 = new Node((-257));
    boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test587658,"public void test587658() throws Throwable {
    Node node0 = Node.newString(148, ""+infinity"");
    boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test588659,"public void test588659() throws Throwable {
    String string0 = NodeUtil.opToStr(9);
    assertEquals(""|"", string0);
}",0,
project,0,test588660,"public void test588660() throws Throwable {
    String string0 = NodeUtil.opToStr(9);
    assertNotNull(string0);
}",0,
project,0,test589661,"public void test589661() throws Throwable {
    String string0 = NodeUtil.opToStr(10);
    assertNotNull(string0);
}",0,
project,0,test589662,"public void test589662() throws Throwable {
    String string0 = NodeUtil.opToStr(10);
    assertEquals(""^"", string0);
}",0,
project,0,test590663,"public void test590663() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(11);
    assertEquals(""&"", string0);
}",1,
project,0,test591664,"public void test591664() throws Throwable {
    String string0 = NodeUtil.opToStr(12);
    assertEquals(""=="", string0);
}",0,
project,0,test592665,"public void test592665() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(13);
    assertEquals(""!="", string0);
}",1,
project,0,test593666,"public void test593666() throws Throwable {
    String string0 = NodeUtil.opToStr(14);
    assertEquals(""<"", string0);
}",0,
project,0,test594667,"public void test594667() throws Throwable {
    String string0 = NodeUtil.opToStr(15);
    assertEquals(""<="", string0);
}",0,
project,0,test595668,"public void test595668() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(16);
    assertEquals("">"", string0);
}",1,
project,0,test596669,"public void test596669() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(17);
    assertEquals("">="", string0);
}",1,
project,0,test597670,"public void test597670() throws Throwable {
    String string0 = NodeUtil.opToStr(18);
    assertEquals(""<<"", string0);
}",0,
project,0,test598671,"public void test598671() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail((byte) 19);
    assertEquals("">>"", string0);
}",1,
project,0,test599672,"public void test599672() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(20);
    assertEquals("">>>"", string0);
}",1,
project,0,test600673,"public void test600673() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(21);
    assertEquals(""+"", string0);
}",1,
project,0,test601674,"public void test601674() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(22);
    assertEquals(""-"", string0);
}",1,
project,0,test602675,"public void test602675() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(23);
    assertEquals(""*"", string0);
}",1,
project,0,test603676,"public void test603676() throws Throwable {
    String string0 = NodeUtil.opToStr(24);
    assertEquals(""/"", string0);
}",0,
project,0,test604677,"public void test604677() throws Throwable {
    String string0 = NodeUtil.opToStr(25);
    assertEquals(""%"", string0);
}",0,
project,0,test605678,"public void test605678() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(26);
    assertEquals(""!"", string0);
}",1,
project,0,test606679,"public void test606679() throws Throwable {
    String string0 = NodeUtil.opToStr(27);
    assertEquals(""~"", string0);
}",0,
project,0,test607680,"public void test607680() throws Throwable {
    String string0 = NodeUtil.opToStr(28);
    assertEquals(""+"", string0);
}",0,
project,0,test608681,"public void test608681() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(29);
    assertEquals(""-"", string0);
}",1,
project,0,test609682,"public void test609682() throws Throwable {
    String string0 = NodeUtil.opToStr(30);
    assertNull(string0);
}",0,
project,0,test610683,"public void test610683() throws Throwable {
    String string0 = NodeUtil.opToStr(31);
    assertNull(string0);
}",0,
project,0,test611684,"public void test611684() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(32);
    assertEquals(""typeof"", string0);
}",1,
project,0,test612685,"public void test612685() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(33);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 33: GETPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test613686,"public void test613686() throws Throwable {
    String string0 = NodeUtil.opToStr(34);
    assertNull(string0);
}",0,
project,0,test614687,"public void test614687() throws Throwable {
    String string0 = NodeUtil.opToStr(35);
    assertNull(string0);
}",0,
project,0,test615688,"public void test615688() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(36);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 36: SETELEM
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test616689,"public void test616689() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(37);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 37: CALL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test617690,"public void test617690() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(39);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 39: NUMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test618691,"public void test618691() throws Throwable {
    String string0 = NodeUtil.opToStr(40);
    assertNull(string0);
}",0,
project,0,test619692,"public void test619692() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(41);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 41: NULL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test620693,"public void test620693() throws Throwable {
    String string0 = NodeUtil.opToStr(42);
    assertNull(string0);
}",0,
project,0,test621694,"public void test621694() throws Throwable {
    String string0 = NodeUtil.opToStr(43);
    assertNull(string0);
}",0,
project,0,test622695,"public void test622695() throws Throwable {
    String string0 = NodeUtil.opToStr(44);
    assertNull(string0);
}",0,
project,0,test623696,"public void test623696() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(45);
    assertEquals(""==="", string0);
}",1,
project,0,test624697,"public void test624697() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(46);
    assertEquals(""!=="", string0);
}",1,
project,0,test625698,"public void test625698() throws Throwable {
    String string0 = NodeUtil.opToStr(47);
    assertNull(string0);
}",0,
project,0,test626699,"public void test626699() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(48);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 48: BINDNAME
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test627700,"public void test627700() throws Throwable {
    String string0 = NodeUtil.opToStr(49);
    assertNull(string0);
}",0,
project,0,test628701,"public void test628701() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 50: RETHROW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test629702,"public void test629702() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail((byte) 51);
    assertEquals(""in"", string0);
}",1,
project,0,test630703,"public void test630703() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(52);
    assertEquals(""instanceof"", string0);
}",1,
project,0,test631704,"public void test631704() throws Throwable {
    String string0 = NodeUtil.opToStr(53);
    assertNull(string0);
}",0,
project,0,test632705,"public void test632705() throws Throwable {
    String string0 = NodeUtil.opToStr(54);
    assertNull(string0);
}",0,
project,0,test633706,"public void test633706() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(55);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 55: SETVAR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test634707,"public void test634707() throws Throwable {
    String string0 = NodeUtil.opToStr(56);
    assertNull(string0);
}",0,
project,0,test635708,"public void test635708() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(57);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 57: ENUM_INIT_KEYS
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test636709,"public void test636709() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 58: ENUM_INIT_VALUES
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test637710,"public void test637710() throws Throwable {
    String string0 = NodeUtil.opToStr(59);
    assertNull(string0);
}",0,
project,0,test638711,"public void test638711() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(60);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 60: ENUM_ID
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test639712,"public void test639712() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 62: RETURN_RESULT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test640713,"public void test640713() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(63);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 63: ARRAYLIT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test641714,"public void test641714() throws Throwable {
    String string0 = NodeUtil.opToStr(64);
    assertNull(string0);
}",0,
project,0,test642715,"public void test642715() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(65);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 65: GET_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test643716,"public void test643716() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 66: SET_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test644717,"public void test644717() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 67: DEL_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test645718,"public void test645718() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 68: REF_CALL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test646719,"public void test646719() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(69);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 69: REF_SPECIAL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test647720,"public void test647720() throws Throwable {
    String string0 = NodeUtil.opToStr(70);
    assertNull(string0);
}",0,
project,0,test648721,"public void test648721() throws Throwable {
    String string0 = NodeUtil.opToStr(71);
    assertNull(string0);
}",0,
project,0,test649722,"public void test649722() throws Throwable {
    String string0 = NodeUtil.opToStr(72);
    assertNull(string0);
}",0,
project,0,test650723,"public void test650723() throws Throwable {
    String string0 = NodeUtil.opToStr(73);
    assertNull(string0);
}",0,
project,0,test651724,"public void test651724() throws Throwable {
    String string0 = NodeUtil.opToStr(74);
    assertNull(string0);
}",0,
project,0,test652725,"public void test652725() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail((byte) 75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 75: REF_NAME
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test653726,"public void test653726() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail((byte) 76);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 76: REF_NS_NAME
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test654727,"public void test654727() throws Throwable {
    String string0 = NodeUtil.opToStr(77);
    assertNull(string0);
}",0,
project,0,test655728,"public void test655728() throws Throwable {
    String string0 = NodeUtil.opToStr(78);
    assertNull(string0);
}",0,
project,0,test656729,"public void test656729() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(79);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 79: LB
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test657730,"public void test657730() throws Throwable {
    String string0 = NodeUtil.opToStr(80);
    assertNull(string0);
}",0,
project,0,test658731,"public void test658731() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 81: LC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test659732,"public void test659732() throws Throwable {
    String string0 = NodeUtil.opToStr(83);
    assertNull(string0);
}",0,
project,0,test660733,"public void test660733() throws Throwable {
    String string0 = NodeUtil.opToStr(84);
    assertNull(string0);
}",0,
project,0,test661734,"public void test661734() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(85);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 85: COMMA
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test662735,"public void test662735() throws Throwable {
    String string0 = NodeUtil.opToStr(86);
    assertEquals(""="", string0);
}",0,
project,0,test663736,"public void test663736() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(87);
    assertEquals(""|="", string0);
}",1,
project,0,test664737,"public void test664737() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(88);
    assertEquals(""^="", string0);
}",1,
project,0,test665738,"public void test665738() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(89);
    assertEquals(""&="", string0);
}",1,
project,0,test666739,"public void test666739() throws Throwable {
    String string0 = NodeUtil.opToStr(90);
    assertEquals(""<<="", string0);
}",0,
project,0,test667740,"public void test667740() throws Throwable {
    String string0 = NodeUtil.opToStr(91);
    assertEquals("">>="", string0);
}",0,
project,0,test668741,"public void test668741() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(92);
    assertEquals("">>>="", string0);
}",1,
project,0,test669742,"public void test669742() throws Throwable {
    String string0 = NodeUtil.opToStr(93);
    assertEquals(""+="", string0);
}",0,
project,0,test670743,"public void test670743() throws Throwable {
    String string0 = NodeUtil.opToStr(94);
    assertEquals(""-="", string0);
}",0,
project,0,test671744,"public void test671744() throws Throwable {
    String string0 = NodeUtil.opToStr(95);
    assertEquals(""*="", string0);
}",0,
project,0,test672745,"public void test672745() throws Throwable {
    String string0 = NodeUtil.opToStr(96);
    assertEquals(""/="", string0);
}",0,
project,0,test673746,"public void test673746() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(97);
    assertEquals(""%="", string0);
}",1,
project,0,test674747,"public void test674747() throws Throwable {
    String string0 = NodeUtil.opToStr(98);
    assertNull(string0);
}",0,
project,0,test675748,"public void test675748() throws Throwable {
    String string0 = NodeUtil.opToStr(99);
    assertNull(string0);
}",0,
project,0,test676749,"public void test676749() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(100);
    assertEquals(""||"", string0);
}",1,
project,0,test677750,"public void test677750() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(101);
    assertEquals(""&&"", string0);
}",1,
project,0,test678751,"public void test678751() throws Throwable {
    String string0 = NodeUtil.opToStr(102);
    assertNull(string0);
}",0,
project,0,test679752,"public void test679752() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(103);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 103: DEC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test680753,"public void test680753() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 104: DOT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test681754,"public void test681754() throws Throwable {
    String string0 = NodeUtil.opToStr(105);
    assertNull(string0);
}",0,
project,0,test682755,"public void test682755() throws Throwable {
    String string0 = NodeUtil.opToStr(106);
    assertNull(string0);
}",0,
project,0,test683756,"public void test683756() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(107);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 107: IMPORT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test684757,"public void test684757() throws Throwable {
    String string0 = NodeUtil.opToStr(108);
    assertNull(string0);
}",0,
project,0,test685758,"public void test685758() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 109: ELSE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test686759,"public void test686759() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(110);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 110: SWITCH
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test687760,"public void test687760() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 111: CASE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test688761,"public void test688761() throws Throwable {
    String string0 = NodeUtil.opToStr(112);
    assertNull(string0);
}",0,
project,0,test689762,"public void test689762() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(113);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 113: WHILE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test690763,"public void test690763() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 114: DO
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test691764,"public void test691764() throws Throwable {
    String string0 = NodeUtil.opToStr(115);
    assertNull(string0);
}",0,
project,0,test692765,"public void test692765() throws Throwable {
    String string0 = NodeUtil.opToStr(116);
    assertNull(string0);
}",0,
project,0,test693766,"public void test693766() throws Throwable {
    String string0 = NodeUtil.opToStr(117);
    assertNull(string0);
}",0,
project,0,test694767,"public void test694767() throws Throwable {
    String string0 = NodeUtil.opToStr(118);
    assertNull(string0);
}",0,
project,0,test695768,"public void test695768() throws Throwable {
    String string0 = NodeUtil.opToStr(119);
    assertNull(string0);
}",0,
project,0,test696769,"public void test696769() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(120);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 120: CATCH
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test697770,"public void test697770() throws Throwable {
    String string0 = NodeUtil.opToStr(121);
    assertNull(string0);
}",0,
project,0,test698771,"public void test698771() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(122);
    assertEquals(""void"", string0);
}",1,
project,0,test699772,"public void test699772() throws Throwable {
    Node node0 = Node.newString("""");
    Node node1 = NodeUtil.newVarNode("""", node0);
    // Undeclared exception!
    try {
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test700773,"public void test700773() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""rD"", ""rD"");
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(1, Node.LEFT);
}",0,
project,0,test701774,"public void test701774() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    NodeUtil.copyNameAnnotations(node0, node0);
    assertEquals(8, Node.CODEOFFSET_PROP);
}",0,
project,0,test702775,"public void test702775() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""I#>Z%n!.M`M,5"", (-2395), (-2395));
    // Undeclared exception!
    try {
        NodeUtil.hasFinally(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test703776,"public void test703776() throws Throwable {
    Node node0 = new Node(38);
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(4095, Node.MAX_COLUMN_NUMBER);
}",0,
project,0,test704777,"public void test704777() throws Throwable {
    Node node0 = Node.newString(""2Z^+?AP#2>i^^1"");
    // Undeclared exception!
    try {
        NodeUtil.getRootOfQualifiedName(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test705778,"public void test705778() throws Throwable {
    Node node0 = Node.newString(33, ""+i~fzniWy"");
    // Undeclared exception!
    try {
        NodeUtil.getRootOfQualifiedName(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test706779,"public void test706779() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""Y{ZQP9"", (-11), (-11));
    assertEquals(0, node0.getSideEffectFlags());
}",0,"assertEquals(1, node0.getSideEffectFlags())"
project,0,test707780,"public void test707780() throws Throwable {
    Node node0 = new Node(85);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""A3J?V"", node0);
    assertEquals(0, node1.getSideEffectFlags());
}",0,"assertEquals(1, node1.getSideEffectFlags())"
project,0,test707781,"public void test707781() throws Throwable {
    Node node0 = new Node(85);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""A3J?V"", node0);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,assertFalse(node1.isUnscopedQualifiedName())
project,0,test708782,"public void test708782() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""Error"");
    String string0 = compiler0.toSource(node0);
    assertEquals(""Error"", string0);
}",0,
project,0,test709783,"public void test709783() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""Hq2l|Ex"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test710784,"public void test710784() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""static"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test711785,"public void test711785() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""prototype"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test712786,"public void test712786() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = new Node(91, 91, 91);
    Node node1 = NodeUtil.newName(googleCodingConvention0, """", node0, """");
    NodeUtil.getVarsDeclaredInBranch(node1);
    assertEquals(91, node1.getLineno());
}",0,"assertEquals(0, node1.getLineno())"
project,0,test712787,"public void test712787() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = new Node(91, 91, 91);
    Node node1 = NodeUtil.newName(googleCodingConvention0, """", node0, """");
    NodeUtil.getVarsDeclaredInBranch(node1);
    assertTrue(node1.isQualifiedName());
}",0,assertTrue(node1.isQualifiedName())
project,0,test712788,"public void test712788() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = new Node(91, 91, 91);
    Node node1 = NodeUtil.newName(googleCodingConvention0, """", node0, """");
    NodeUtil.getVarsDeclaredInBranch(node1);
    assertEquals(38, node1.getType());
}",0,"assertEquals(1, node1.getType())"
project,0,test713789,"public void test713789() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test714790,"public void test714790() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""1"", 22, 22);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test714791,"public void test714791() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""1"", 22, 22);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(22, node0.getCharno());
}",1,
project,0,test714792,"public void test714792() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""1"", 22, 22);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(22, node0.getLineno());
}",1,
project,0,test715793,"public void test715793() throws Throwable {
    Node node0 = new Node(64);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test716794,"public void test716794() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "".prototype."", 94, 64);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(64, node1.getCharno());
}",0,"assertEquals(1, node1.getCharno())"
project,0,test716795,"public void test716795() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "".prototype."", 94, 64);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertNotNull(node1);
}",0,
project,0,test716796,"public void test716796() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "".prototype."", 94, 64);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(94, node1.getLineno());
}",0,
project,0,test716797,"public void test716797() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "".prototype."", 94, 64);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(0, node1.getChildCount());
}",0,"assertEquals(1, node1.getChildCount())"
project,0,test716798,"public void test716798() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "".prototype."", 94, 64);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(94, node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test716799,"public void test716799() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "".prototype."", 94, 64);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(64, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test717800,"public void test717800() throws Throwable {
    Node node0 = new Node((-2118));
    node0.addChildAfter(node0, node0);
    // Undeclared exception!
    try {
        NodeUtil.newVarNode(""-ininity"", node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test718801,"public void test718801() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    Node node1 = NodeUtil.newVarNode(""com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty"", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty"");
    assertEquals(64, node1.getLineno());
}",0,
project,0,test718802,"public void test718802() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    Node node1 = NodeUtil.newVarNode(""com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty"", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test718803,"public void test718803() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    Node node1 = NodeUtil.newVarNode(""com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty"", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty"");
    assertEquals(118, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test719804,"public void test719804() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = Node.newString(159, ""I?Zi1H1]oloU"");
    Node node1 = NodeUtil.newName(defaultCodingConvention0, ""+infinity"", node0);
    int int0 = NodeUtil.getNameReferenceCount(node1, ""I?Zi1H1]oloU"");
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test719805,"public void test719805() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = Node.newString(159, ""I?Zi1H1]oloU"");
    Node node1 = NodeUtil.newName(defaultCodingConvention0, ""+infinity"", node0);
    int int0 = NodeUtil.getNameReferenceCount(node1, ""I?Zi1H1]oloU"");
    assertTrue(node1.isQualifiedName());
}",0,assertTrue(node1.isQualifiedName())
project,0,test720806,"public void test720806() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = NodeUtil.containsFunction(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test727813,"public void test727813() throws Throwable {
    Node node0 = Node.newString(130, ""+infinity"");
    Node node1 = NodeUtil.newVarNode(""+OzEy"", node0);
    assertEquals(118, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test727814,"public void test727814() throws Throwable {
    Node node0 = Node.newString(130, ""+infinity"");
    Node node1 = NodeUtil.newVarNode(""+OzEy"", node0);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
    boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MayBeStringResultPredicate0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test728815,"public void test728815() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""rD"", ""rD"");
    boolean boolean0 = NodeUtil.containsType(node0, 1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test729816,"public void test729816() throws Throwable {
    Node node0 = new Node(0, 0, (-449));
    Node node1 = new Node(23, node0);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    int int0 = NodeUtil.getCount(node1, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test730817,"public void test730817() throws Throwable {
    Node node0 = new Node(13, 13, 104);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_BooleanResultPredicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test731818,"public void test731818() throws Throwable {
    Node node0 = new Node(893, 103, (-120));
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
    Node node1 = new Node(13, node0, node0, node0);
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_BooleanResultPredicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test732819,"public void test732819() throws Throwable {
    Node node0 = Node.newString(98, ""; "");
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test733820,"public void test733820() throws Throwable {
    Node node0 = Node.newString(77, ""JSCompiler_renameProperty"");
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test734821,"public void test734821() throws Throwable {
    Node node0 = Node.newString(63, ""'ED76%W}=Ls-r[Z<A+"");
    // Undeclared exception!
    try {
        NodeUtil.hasCatchHandler(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test735822,"public void test735822() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ8rk\""pQq9Nqn)|/*"");
    boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test736823,"public void test736823() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""nQ8rk\""pQq9Nqn)|/*"");
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test737824,"public void test737824() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    // Undeclared exception!
    try {
        NodeUtil.getFnParameters(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test738825,"public void test738825() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    // Undeclared exception!
    try {
        NodeUtil.getFnParameters(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test739826,"public void test739826() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""com.google.javascript.jscomp.RuntimeTypeCheck"", ""com.google.javascript.jscomp.RuntimeTypeCheck"");
    assertEquals(49, Node.FREE_CALL);
}",0,
project,0,test740827,"public void test740827() throws Throwable {
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    assertNull(jSDocInfo0);
}",0,
project,0,test741828,"public void test741828() throws Throwable {
    Node node0 = Node.newString(63, ""'ED76%W}=Ls-r[Z<A+"");
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}",0,
project,0,test742829,"public void test742829() throws Throwable {
    Node node0 = Node.newString(63, ""'ED76%W}=Ls-r[Z<A+"");
    node0.addSuppression(""'ED76%W}=Ls-r[Z<A+"");
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertFalse(jSDocInfo0.isNoTypeCheck());
}",0,assertTrue(jSDocInfo0.isNoTypeCheck())
project,0,test743830,"public void test743830() throws Throwable {
    Node node0 = Node.newString(111, ""nQ8rk\""pQq9Nq)|/*"");
    AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
    List<Node> list0 = astParallelizer0.split();
    Node node1 = NodeUtil.newFunctionNode(""nQ8rk\""pQq9Nq)|/*"", list0, node0, 38, 4);
    assertEquals(105, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test743831,"public void test743831() throws Throwable {
    Node node0 = Node.newString(111, ""nQ8rk\""pQq9Nq)|/*"");
    AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
    List<Node> list0 = astParallelizer0.split();
    Node node1 = NodeUtil.newFunctionNode(""nQ8rk\""pQq9Nq)|/*"", list0, node0, 38, 4);
    assertEquals(38, node1.getLineno());
}",0,
project,0,test743832,"public void test743832() throws Throwable {
    Node node0 = Node.newString(111, ""nQ8rk\""pQq9Nq)|/*"");
    AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
    List<Node> list0 = astParallelizer0.split();
    Node node1 = NodeUtil.newFunctionNode(""nQ8rk\""pQq9Nq)|/*"", list0, node0, 38, 4);
    assertEquals(3, node1.getChildCount());
}",0,"assertEquals(1, node1.getChildCount())"
project,0,test743833,"public void test743833() throws Throwable {
    Node node0 = Node.newString(111, ""nQ8rk\""pQq9Nq)|/*"");
    AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
    List<Node> list0 = astParallelizer0.split();
    Node node1 = NodeUtil.newFunctionNode(""nQ8rk\""pQq9Nq)|/*"", list0, node0, 38, 4);
    assertEquals(4, node1.getCharno());
}",0,"assertEquals(0, node1.getCharno())"
project,0,test743834,"public void test743834() throws Throwable {
    Node node0 = Node.newString(111, ""nQ8rk\""pQq9Nq)|/*"");
    AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
    List<Node> list0 = astParallelizer0.split();
    Node node1 = NodeUtil.newFunctionNode(""nQ8rk\""pQq9Nq)|/*"", list0, node0, 38, 4);
    NodeUtil.getInfoForNameNode(node0);
    assertFalse(node0.hasChildren());
}",0,assertTrue(node0.hasChildren())
project,0,test744835,"public void test744835() throws Throwable {
    Node node0 = Node.newString(""neg"");
    Node node1 = new Node(24, node0, node0, node0);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}",0,
project,0,test745836,"public void test745836() throws Throwable {
    Node node0 = new Node(47);
    // Undeclared exception!
    try {
        NodeUtil.getFunctionInfo(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test746837,"public void test746837() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    // Undeclared exception!
    try {
        NodeUtil.getFunctionInfo(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test747838,"public void test747838() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""nQ8rk\""pQq9Nq)|/*"", ""nQ8rk\""pQq9Nq)|/*"");
    String string0 = NodeUtil.getSourceName(node0);
    assertNotNull(string0);
}",0,
project,0,test747839,"public void test747839() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""nQ8rk\""pQq9Nq)|/*"", ""nQ8rk\""pQq9Nq)|/*"");
    String string0 = NodeUtil.getSourceName(node0);
    assertEquals(""nQ8rk\""pQq9Nq)|/*"", string0);
}",0,
project,0,test748840,"public void test748840() throws Throwable {
    Node node0 = new Node(68, 68, 68);
    String string0 = NodeUtil.getSourceName(node0);
    assertNull(string0);
}",0,
project,0,test749841,"public void test749841() throws Throwable {
    Node node0 = new Node(38);
    Node[] nodeArray0 = new Node[6];
    // Undeclared exception!
    try {
        NodeUtil.newCallNode(node0, nodeArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test750842,"public void test750842() throws Throwable {
    Node node0 = Node.newString(31, """");
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDELPROP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test751843,"public void test751843() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test752844,"public void test752844() throws Throwable {
    Node node0 = new Node(33);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test753845,"public void test753845() throws Throwable {
    Node node0 = new Node(34, (-3198), 10);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSETPROP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test754846,"public void test754846() throws Throwable {
    Node node0 = new Node((byte) 35);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}",0,
project,0,test755847,"public void test755847() throws Throwable {
    Node node0 = new Node(42);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test756848,"public void test756848() throws Throwable {
    Node node0 = new Node(45);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test757849,"public void test757849() throws Throwable {
    Node node0 = Node.newString(47, ""=="");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test758850,"public void test758850() throws Throwable {
    Node node0 = new Node(48);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeBINDNAME
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test759851,"public void test759851() throws Throwable {
    Node node0 = new Node((byte) 51);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test760852,"public void test760852() throws Throwable {
    Node node0 = Node.newString(58, ""nQ8@k\""pQq9N7)|/*"");
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_INIT_VALUES nQ8@k\""pQq9N7)|/*
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test761853,"public void test761853() throws Throwable {
    Node node0 = new Node(60, 60, 60);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_ID 60
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test762854,"public void test762854() throws Throwable {
    Node node0 = new Node(62);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRETURN_RESULT
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test763855,"public void test763855() throws Throwable {
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test764856,"public void test764856() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,
project,0,test765857,"public void test765857() throws Throwable {
    Node node0 = new Node(65);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeGET_REF
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test766858,"public void test766858() throws Throwable {
    Node node0 = new Node(70, 70, 70);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDEFAULTNAMESPACE 70
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test767859,"public void test767859() throws Throwable {
    Node node0 = Node.newString(73, "";X*s]]]]#S|%Im"");
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_MEMBER ;X*s]]]]#S|%Im
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test768860,"public void test768860() throws Throwable {
    Node node0 = new Node(78);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSEMI
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test769861,"public void test769861() throws Throwable {
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test770862,"public void test770862() throws Throwable {
    Node node0 = new Node(86, 104, 86);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test771863,"public void test771863() throws Throwable {
    Node node0 = new Node(87);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test772864,"public void test772864() throws Throwable {
    Node node0 = new Node(88);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test773865,"public void test773865() throws Throwable {
    Node node0 = new Node(89);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
    assertTrue(boolean0);
}",0,
project,0,test774866,"public void test774866() throws Throwable {
    Node node0 = Node.newString(90, ""KKefsF_]"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test775867,"public void test775867() throws Throwable {
    Node node0 = new Node(91);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,
project,0,test776868,"public void test776868() throws Throwable {
    Node node0 = new Node(92);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test777869,"public void test777869() throws Throwable {
    Node node0 = new Node(93);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test778870,"public void test778870() throws Throwable {
    Node node0 = new Node(94);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test779871,"public void test779871() throws Throwable {
    Node node0 = Node.newString(95, ""nQ8rk\""pQq9Nq)|/*"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test780872,"public void test780872() throws Throwable {
    Node node0 = new Node(96);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test781873,"public void test781873() throws Throwable {
    Node node0 = Node.newString(97, "",1BqCc;i/|tAv)"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,
project,0,test782874,"public void test782874() throws Throwable {
    Node node0 = new Node(98);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test783875,"public void test783875() throws Throwable {
    Node node0 = new Node((byte) 101);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test784876,"public void test784876() throws Throwable {
    Node node0 = new Node(102, 48, 102);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test785877,"public void test785877() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test786878,"public void test786878() throws Throwable {
    Node node0 = new Node((byte) 100);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""Zju5S"", node0);
    node0.addChildToFront(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,assertFalse(node1.isUnscopedQualifiedName())
project,0,test786879,"public void test786879() throws Throwable {
    Node node0 = new Node((byte) 100);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""Zju5S"", node0);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test787880,"public void test787880() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""nQ8rk\""pQq9Nq)|/*"");
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, ""undefined"", node0, ""nQ8rk\""pQq9Nq)|/*"");
    assertEquals(38, node1.getType());
}",0,
project,0,test787881,"public void test787881() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""nQ8rk\""pQq9Nq)|/*"");
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, ""undefined"", node0, ""nQ8rk\""pQq9Nq)|/*"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertTrue(boolean0);
}",0,
project,0,test788882,"public void test788882() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""x+,#@Hz=0e(X(p>"", (-3783), 2101);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test788883,"public void test788883() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""x+,#@Hz=0e(X(p>"", (-3783), 2101);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
    assertTrue(boolean0);
}",0,
project,0,test788884,"public void test788884() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""x+,#@Hz=0e(X(p>"", (-3783), 2101);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
    assertEquals(37, node1.getType());
}",0,"assertEquals(1, node1.getType())"
project,0,test789885,"public void test789885() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test790887,"public void test790887() throws Throwable {
    Node node0 = Node.newNumber(562.242, 103, 3364);
    Vector<Node> vector0 = new Vector<Node>();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""9Cs"", node0);
    vector0.add(node1);
    Node node2 = NodeUtil.newFunctionNode("" xWV["", vector0, node0, 37, 12);
    NodeUtil.getArgumentForFunction(node2, (-2));
    assertEquals(37, node2.getLineno());
}",0,
