project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ObjectType objectType0 = errorFunctionType0.getInstanceType();
    boolean boolean0 = objectType0.matchesObjectContext();
    assertTrue(objectType0.isNativeObjectType());
}",0,assertFalse(objectType0.isNativeObjectType())
project,0,test001,"public void test001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ObjectType objectType0 = errorFunctionType0.getInstanceType();
    boolean boolean0 = objectType0.matchesObjectContext();
    assertFalse(objectType0.hasReferenceName());
}",0,assertTrue(objectType0.hasReferenceName())
project,0,test002,"public void test002() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ObjectType objectType0 = errorFunctionType0.getInstanceType();
    boolean boolean0 = objectType0.matchesObjectContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test013,"public void test013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.canBeCalled();
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test014,"public void test014() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.canBeCalled();
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test025,"public void test025() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.NullType"", (Node) null);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
    functionType0.setExtendedInterfaces(immutableList0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    instanceObjectType0.getSlot(""Unknown class name"");
    assertTrue(functionType0.hasCachedValues());
}",0,
project,0,test026,"public void test026() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.NullType"", (Node) null);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
    functionType0.setExtendedInterfaces(immutableList0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    instanceObjectType0.getSlot(""Unknown class name"");
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test037,"public void test037() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", unknownType0);
    boolean boolean0 = prototypeObjectType0.defineProperty(""P~)&Bnz"", (JSType) null, false, (Node) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test038,"public void test038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", unknownType0);
    boolean boolean0 = prototypeObjectType0.defineProperty(""P~)&Bnz"", (JSType) null, false, (Node) null);
    int int0 = prototypeObjectType0.getPropertiesCount();
    assertFalse(prototypeObjectType0.isNativeObjectType());
}",0,
project,0,test039,"public void test039() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", unknownType0);
    boolean boolean0 = prototypeObjectType0.defineProperty(""P~)&Bnz"", (JSType) null, false, (Node) null);
    int int0 = prototypeObjectType0.getPropertiesCount();
    assertTrue(prototypeObjectType0.hasReferenceName());
}",0,assertTrue(prototypeObjectType0.hasReferenceName())
project,0,test0310,"public void test0310() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", unknownType0);
    boolean boolean0 = prototypeObjectType0.defineProperty(""P~)&Bnz"", (JSType) null, false, (Node) null);
    int int0 = prototypeObjectType0.getPropertiesCount();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,"assertEquals(0, int0)"
project,0,test0411,"public void test0411() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{"");
    Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
    errorFunctionType0.defineSynthesizedProperty(""{"", (JSType) null, node0);
    int int0 = errorFunctionType0.getPropertiesCount();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test0412,"public void test0412() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{"");
    Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
    errorFunctionType0.defineSynthesizedProperty(""{"", (JSType) null, node0);
    int int0 = errorFunctionType0.getPropertiesCount();
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test0513,"public void test0513() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType(""Unknown class name"");
    assertFalse(objectType0.hasReferenceName());
}",0,
project,0,test0514,"public void test0514() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType(""Unknown class name"");
    assertTrue(objectType0.isNativeObjectType());
}",0,assertFalse(objectType0.isNativeObjectType())
project,0,test0615,"public void test0615() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""NOT_NULL"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""NOT_NULL"", jSDocInfo0);
    errorFunctionType0.matchRecordTypeConstraint(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test0716,"public void test0716() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "": "");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""Named type with empty name component"", jSDocInfo0);
    functionType0.matchRecordTypeConstraint(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test0817,"public void test0817() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{"");
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
    Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
    boolean boolean0 = errorFunctionType0.defineSynthesizedProperty(""{"", (JSType) null, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0818,"public void test0818() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{"");
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
    Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
    boolean boolean0 = errorFunctionType0.defineSynthesizedProperty(""{"", (JSType) null, node0);
    errorFunctionType0.matchRecordTypeConstraint(indexedType0);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test0819,"public void test0819() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{"");
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
    Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
    boolean boolean0 = errorFunctionType0.defineSynthesizedProperty(""{"", (JSType) null, node0);
    errorFunctionType0.matchRecordTypeConstraint(indexedType0);
    assertTrue(indexedType0.hasReferenceName());
}",0,assertFalse(indexedType0.hasReferenceName())
project,0,test0820,"public void test0820() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{"");
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
    Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
    boolean boolean0 = errorFunctionType0.defineSynthesizedProperty(""{"", (JSType) null, node0);
    errorFunctionType0.matchRecordTypeConstraint(indexedType0);
    assertTrue(indexedType0.isNominalConstructor());
}",0,
project,0,test0921,"public void test0921() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getPropertyNames();
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test0922,"public void test0922() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getPropertyNames();
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test1023,"public void test1023() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0);
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, """", node0, stringType0);
    enumType0.defineProperty(""iX<K"", stringType0, false, node0);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Set<String> set0 = jSDocInfo0.getSuppressions();
    // Undeclared exception!
    try {
        enumType0.collectPropertyNames(set0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.AbstractCollection"", e);
    }
}",0,
project,0,test1124,"public void test1124() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
    boolean boolean0 = functionType0.defineProperty("", "", recordType0, false, (Node) null);
    boolean boolean1 = functionType0.isPropertyTypeInferred("", "");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1125,"public void test1125() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
    boolean boolean0 = functionType0.defineProperty("", "", recordType0, false, (Node) null);
    boolean boolean1 = functionType0.isPropertyTypeInferred("", "");
    assertFalse(boolean1 == boolean0);
}",0,
project,0,test1126,"public void test1126() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
    boolean boolean0 = functionType0.defineProperty("", "", recordType0, false, (Node) null);
    boolean boolean1 = functionType0.isPropertyTypeInferred("", "");
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test1127,"public void test1127() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
    boolean boolean0 = functionType0.defineProperty("", "", recordType0, false, (Node) null);
    boolean boolean1 = functionType0.isPropertyTypeInferred("", "");
    assertFalse(boolean1);
}",0,assertTrue(boolean1)
project,0,test1228,"public void test1228() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""com.google.common.collect.Iterators$3"");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test1229,"public void test1229() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""com.google.common.collect.Iterators$3"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1330,"public void test1330() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<45KY2"");
    boolean boolean0 = errorFunctionType0.isPropertyInExterns(""<45KY2"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1331,"public void test1331() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<45KY2"");
    boolean boolean0 = errorFunctionType0.isPropertyInExterns(""<45KY2"");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test1432,"public void test1432() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""NOT_NULL"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""NOT_NULL"", jSDocInfo0);
    errorFunctionType0.isPropertyInExterns(""NOT_NULL"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test1533,"public void test1533() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
    boolean boolean0 = recordType0.removeProperty(""Not declared as a constructor"");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1534,"public void test1534() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
    boolean boolean0 = recordType0.removeProperty(""Not declared as a constructor"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1535,"public void test1535() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
    boolean boolean0 = recordType0.removeProperty(""Not declared as a constructor"");
    assertFalse(recordType0.hasReferenceName());
}",0,
project,0,test1636,"public void test1636() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""Not declared as a type name"", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.removeProperty(""Not declared as a type name"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test1637,"public void test1637() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""Not declared as a type name"", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.removeProperty(""Not declared as a type name"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1738,"public void test1738() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getPropertyNode(""BOOLEAN_TYPE"");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1739,"public void test1739() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getPropertyNode(""BOOLEAN_TYPE"");
    assertFalse(recordType0.hasReferenceName());
}",0,
project,0,test1840,"public void test1840() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""NOT_NULL"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""NOT_NULL"", jSDocInfo0);
    errorFunctionType0.getPropertyNode(""NOT_NULL"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test1941,"public void test1941() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "": "");
    errorFunctionType0.getOwnPropertyJSDocInfo("": "");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test2042,"public void test2042() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""Named type with empty name component"", jSDocInfo0);
    errorFunctionType0.getOwnPropertyJSDocInfo(""Named type with empty name component"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test2143,"public void test2143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""N4Qjq4W"");
    errorFunctionType0.setPropertyJSDocInfo(""Not declared as a constructor"", (JSDocInfo) null);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test2144,"public void test2144() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""N4Qjq4W"");
    errorFunctionType0.setPropertyJSDocInfo(""Not declared as a constructor"", (JSDocInfo) null);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,
project,0,test2245,"public void test2245() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""$(aB,.q2I"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""$(aB,.q2I"", jSDocInfo0);
    errorFunctionType0.setPropertyJSDocInfo(""$(aB,.q2I"", jSDocInfo0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test2346,"public void test2346() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.setPropertyJSDocInfo(""^Dke V~@5)kWy#u"", jSDocInfo0);
    assertTrue(recordType0.hasCachedValues());
}",0,assertTrue(recordType0.hasCachedValues())
project,0,test2447,"public void test2447() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""C|PDOa^Q-bG#"");
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2448,"public void test2448() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""C|PDOa^Q-bG#"");
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertFalse(instanceObjectType0.hasReferenceName())
project,0,test2549,"public void test2549() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,
project,0,test2550,"public void test2550() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2651,"public void test2651() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
    Node node0 = Node.newNumber((double) 1);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""toString"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    boolean boolean0 = recordType1.matchesStringContext();
    assertFalse(recordType1.hasReferenceName());
}",0,assertTrue(recordType1.hasReferenceName())
project,0,test2652,"public void test2652() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
    Node node0 = Node.newNumber((double) 1);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""toString"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    boolean boolean0 = recordType1.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2753,"public void test2753() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    boolean boolean0 = functionType0.matchesStringContext();
    assertTrue(functionType0.isNominalConstructor());
}",0,assertTrue(functionType0.isNominalConstructor())
project,0,test2754,"public void test2754() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    boolean boolean0 = functionType0.matchesStringContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2855,"public void test2855() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""c*e{'C$Jcdy\""U:m:y"");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    boolean boolean0 = functionType0.matchesNumberContext();
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test2856,"public void test2856() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""c*e{'C$Jcdy\""U:m:y"");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    boolean boolean0 = functionType0.matchesNumberContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2857,"public void test2857() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""c*e{'C$Jcdy\""U:m:y"");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    boolean boolean0 = functionType0.matchesNumberContext();
    assertFalse(functionType0.isNominalConstructor());
}",0,
project,0,test2958,"public void test2958() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType0.unboxesTo();
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test2959,"public void test2959() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType0.unboxesTo();
    assertNull(jSType0);
}",0,
project,0,test2960,"public void test2960() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType0.unboxesTo();
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test3061,"public void test3061() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    JSType jSType0 = instanceObjectType0.unboxesTo();
    assertNotNull(jSType0);
}",0,assertNotNull(jSType0)
project,0,test3062,"public void test3062() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    JSType jSType0 = instanceObjectType0.unboxesTo();
    assertTrue(instanceObjectType0.isNominalType());
}",0,assertTrue(instanceObjectType0.isNominalType())
project,0,test3163,"public void test3163() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", unknownType0);
    String string0 = prototypeObjectType0.toStringHelper(true);
    assertFalse(prototypeObjectType0.isNativeObjectType());
}",0,assertTrue(prototypeObjectType0.isNativeObjectType())
project,0,test3164,"public void test3164() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", unknownType0);
    String string0 = prototypeObjectType0.toStringHelper(true);
    assertEquals("""", string0);
}",0,
project,0,test3265,"public void test3265() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    String string0 = errorFunctionType0.toStringHelper(false);
    assertEquals(""function (new:{...}, *=, *=, *=): {...}"", string0);
}",0,
project,0,test3266,"public void test3266() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    String string0 = errorFunctionType0.toStringHelper(false);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test3367,"public void test3367() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    Node node0 = Node.newString(0, ""Not declared as a constructor"");
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, node0);
    hashMap0.put(""Not declared as a constructor"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    String string0 = recordType0.toStringHelper(true);
    assertEquals(""{Not declared as a constructor: function (new:?, *=, *=, *=): ?}"", string0);
}",0,
project,0,test3368,"public void test3368() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    Node node0 = Node.newString(0, ""Not declared as a constructor"");
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, node0);
    hashMap0.put(""Not declared as a constructor"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    String string0 = recordType0.toStringHelper(true);
    assertNotNull(string0);
}",0,
project,0,test3469,"public void test3469() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    Node node0 = new Node(1, 1, 105);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.merge(""tR*i:"", recordTypeBuilder_RecordProperty0, biFunction0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Not declared as a constructor"", recordTypeBuilder_RecordProperty1);
    RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
    String string0 = recordType1.toStringHelper(false);
    assertEquals(""{Not declared as a constructor: {}, Not declared as a type name: {}, Unknown class name: {}, tR*i:: {}, ...}"", string0);
}",0,
project,0,test3470,"public void test3470() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    Node node0 = new Node(1, 1, 105);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.merge(""tR*i:"", recordTypeBuilder_RecordProperty0, biFunction0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Not declared as a constructor"", recordTypeBuilder_RecordProperty1);
    RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
    String string0 = recordType1.toStringHelper(false);
    assertNotNull(string0);
}",0,
project,0,test3571,"public void test3571() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    // Undeclared exception!
    try {
        jSTypeRegistry0.resetImplicitPrototype(functionType0, functionType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test3672,"public void test3672() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType[] jSTypeArray0 = new JSType[8];
    jSTypeArray0[7] = (JSType) recordType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, jSTypeArray0);
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test3673,"public void test3673() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType[] jSTypeArray0 = new JSType[8];
    jSTypeArray0[7] = (JSType) recordType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, jSTypeArray0);
    recordType0.setOwnerFunction(functionType0);
    recordType0.getReferenceName();
    assertTrue(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test3774,"public void test3774() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "", ..."");
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    errorFunctionType0.matchRecordTypeConstraint(functionType0);
    assertTrue(functionType0.isNominalConstructor());
}",0,assertTrue(functionType0.isNominalConstructor())
project,0,test3775,"public void test3775() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "", ..."");
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    errorFunctionType0.matchRecordTypeConstraint(functionType0);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test3876,"public void test3876() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""H7Xroxy"", (Node) null);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) instanceObjectType0, (ObjectType) indexedType0, (ObjectType) instanceObjectType0);
    functionType0.setExtendedInterfaces(immutableList0);
    instanceObjectType0.getTypesUnderShallowEquality(indexedType0);
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertFalse(instanceObjectType0.hasReferenceName())
project,0,test3877,"public void test3877() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""H7Xroxy"", (Node) null);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) instanceObjectType0, (ObjectType) indexedType0, (ObjectType) instanceObjectType0);
    functionType0.setExtendedInterfaces(immutableList0);
    instanceObjectType0.getTypesUnderShallowEquality(indexedType0);
    assertFalse(instanceObjectType0.isNativeObjectType());
}",0,assertTrue(instanceObjectType0.isNativeObjectType())
project,0,test3978,"public void test3978() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    Node node0 = new Node(1, 1, 105);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    hashMap0.merge(""tR*i:"", recordTypeBuilder_RecordProperty0, biFunction0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    RecordType recordType2 = jSTypeRegistry0.createRecordType(hashMap0);
    assertFalse(recordType2.hasReferenceName());
}",0,
project,0,test3979,"public void test3979() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    Node node0 = new Node(1, 1, 105);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    hashMap0.merge(""tR*i:"", recordTypeBuilder_RecordProperty0, biFunction0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    RecordType recordType2 = jSTypeRegistry0.createRecordType(hashMap0);
    assertFalse(recordType2.isNativeObjectType());
}",0,assertTrue(recordType2.isNativeObjectType())
project,0,test4080,"public void test4080() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.NullType"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    assertFalse(instanceObjectType0.isNativeObjectType());
}",0,assertTrue(instanceObjectType0.isNativeObjectType())
project,0,test4081,"public void test4081() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.NullType"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    assertFalse(boolean0);
}",0,
project,0,test4082,"public void test4082() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.NullType"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertFalse(instanceObjectType0.hasReferenceName())
project,0,test4183,"public void test4183() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType0.isNumber();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4184,"public void test4184() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType0.isNumber();
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test4285,"public void test4285() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.NullType"", (Node) null);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
    functionType0.setExtendedInterfaces(immutableList0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
    UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
    JSType jSType0 = unionType0.meet(instanceObjectType0);
    boolean boolean0 = instanceObjectType0.isSubtype(jSType0);
    assertTrue(instanceObjectType0.hasCachedValues());
}",0,assertFalse(instanceObjectType0.hasCachedValues())
project,0,test4286,"public void test4286() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.NullType"", (Node) null);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
    functionType0.setExtendedInterfaces(immutableList0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
    UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
    JSType jSType0 = unionType0.meet(instanceObjectType0);
    boolean boolean0 = instanceObjectType0.isSubtype(jSType0);
    assertFalse(boolean0);
}",0,
project,0,test4387,"public void test4387() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    assertTrue(boolean0);
}",0,
project,0,test4388,"public void test4388() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    assertFalse(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test4389,"public void test4389() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    assertFalse(instanceObjectType0.isNativeObjectType());
}",0,assertTrue(instanceObjectType0.isNativeObjectType())
project,0,test4490,"public void test4490() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""    "");
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", templateType0, true);
    PrototypeObjectType prototypeObjectType1 = new PrototypeObjectType(jSTypeRegistry0, (String) null, prototypeObjectType0);
    jSTypeRegistry0.createOptionalType(prototypeObjectType1);
    assertTrue(prototypeObjectType1.hasCachedValues());
}",0,assertFalse(prototypeObjectType1.hasCachedValues())
project,0,test4491,"public void test4491() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""    "");
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", templateType0, true);
    PrototypeObjectType prototypeObjectType1 = new PrototypeObjectType(jSTypeRegistry0, (String) null, prototypeObjectType0);
    jSTypeRegistry0.createOptionalType(prototypeObjectType1);
    assertFalse(prototypeObjectType1.hasReferenceName());
}",0,assertFalse(prototypeObjectType1.hasReferenceName())
project,0,test4592,"public void test4592() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""N4Qjq4W"");
    errorFunctionType0.setOwnerFunction(errorFunctionType0);
    // Undeclared exception!
    try {
        errorFunctionType0.setOwnerFunction(errorFunctionType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test4693,"public void test4693() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", unknownType0);
    prototypeObjectType0.getCtorImplementedInterfaces();
    assertFalse(prototypeObjectType0.isNativeObjectType());
}",0,
project,0,test4694,"public void test4694() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, """", unknownType0);
    prototypeObjectType0.getCtorImplementedInterfaces();
    assertTrue(prototypeObjectType0.hasReferenceName());
}",0,assertFalse(prototypeObjectType0.hasReferenceName())
project,0,test4795,"public void test4795() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""N4Qjq4W"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""N4Qjq4W"", jSDocInfo0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test4796,"public void test4796() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""N4Qjq4W"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""N4Qjq4W"", jSDocInfo0);
    JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test4897,"public void test4897() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.matchConstraint(recordType0);
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test4898,"public void test4898() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.matchConstraint(recordType0);
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test4999,"public void test4999() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Not declared as a constructor"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    instanceObjectType0.matchConstraint(functionType0);
    assertFalse(instanceObjectType0.isNativeObjectType());
}",0,assertTrue(instanceObjectType0.isNativeObjectType())
project,0,test49100,"public void test49100() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Not declared as a constructor"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    instanceObjectType0.matchConstraint(functionType0);
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test50101,"public void test50101() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    Node node0 = new Node(1, (-2231), 1);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, recordType0);
    recordType0.matchConstraint(arrowType0);
    assertFalse(recordType0.isNativeObjectType());
}",0,
project,0,test50102,"public void test50102() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    Node node0 = new Node(1, (-2231), 1);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, recordType0);
    recordType0.matchConstraint(arrowType0);
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
