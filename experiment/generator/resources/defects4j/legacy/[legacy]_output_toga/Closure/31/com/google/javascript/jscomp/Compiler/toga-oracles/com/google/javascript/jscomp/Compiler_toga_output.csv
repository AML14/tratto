project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
    // Undeclared exception!
    try {
        compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource((JSModule) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    Node node0 = Node.newString(""P\""DXNvWV_57W"");
    // Undeclared exception!
    try {
        compiler0.toSource(compiler_CodeBuilder0, 1459, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0055,"public void test0055() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray((JSModule) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0066,"public void test0066() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
    compiler0.disableThreads();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test0067,"public void test0067() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
    compiler0.disableThreads();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
    assertEquals(1.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test0078,"public void test0078() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule[] jSModuleArray0 = new JSModule[0];
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    // Undeclared exception!
    try {
        compiler0.init((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test0089,"public void test0089() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.resetUniqueNameId();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test01011,"public void test01011() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01112,"public void test01112() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01113,"public void test01113() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test01214,"public void test01214() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
    compiler0.setState(compiler_IntermediateState0);
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test01315,"public void test01315() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    // Undeclared exception!
    try {
        compiler0.init((JSSourceFile[]) null, (JSSourceFile[]) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test01517,"public void test01517() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01618,"public void test01618() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01719,"public void test01719() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getPropertyMap();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test01820,"public void test01820() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}",0,
project,0,test01921,"public void test01921() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallableWithLargeStack((Callable<Scope.Var>) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test02022,"public void test02022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.languageMode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02123,"public void test02123() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02224,"public void test02224() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getWarningCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02325,"public void test02325() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getVariableMap();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test02426,"public void test02426() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getFunctionalInformationMap();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test02527,"public void test02527() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02628,"public void test02628() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test02629,"public void test02629() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    compiler0.getAstDotGraph();
    assertEquals(1.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test02730,"public void test02730() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""N.R"", ""PassConfigs must eventually delegate to the DefaultPassConfig"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02831,"public void test02831() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getModuleGraph();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test02932,"public void test02932() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.compile((SourceFile) null, (SourceFile) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test03033,"public void test03033() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getSourceMap();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test03134,"public void test03134() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test03235,"public void test03235() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getInputsForTesting();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test03336,"public void test03336() throws Throwable {
    Compiler compiler0 = new Compiler();
    CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
    compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test03437,"public void test03437() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getInputsById();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableMap"", e);
    }
}",0,
project,0,test03538,"public void test03538() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.setHasRegExpGlobalReferences(true);
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test03639,"public void test03639() throws Throwable {
    Compiler compiler0 = null;
    try {
        compiler0 = new Compiler((ErrorManager) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // the error manager cannot be null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test03740,"public void test03740() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    // Undeclared exception!
    try {
        compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test03841,"public void test03841() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test03942,"public void test03942() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getExternsForTesting();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test04043,"public void test04043() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.removeTryCatchFinally();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test04144,"public void test04144() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getTopScope();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test04750,"public void test04750() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.parseTestCode("""");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertEquals(1.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test04851,"public void test04851() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""!(L6"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    Node node0 = compiler0.parseSyntheticCode(""base"", ""base"");
    assertEquals(""base"", node0.getSourceFileName());
}",0,assertNotNull(node0.getSourceFileName())
project,0,test04852,"public void test04852() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""!(L6"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    Node node0 = compiler0.parseSyntheticCode(""base"", ""base"");
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test04853,"public void test04853() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""!(L6"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    Node node0 = compiler0.parseSyntheticCode(""base"", ""base"");
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test04954,"public void test04954() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    CheckLevel checkLevel0 = CheckLevel.WARNING;
    compilerOptions0.checkGlobalThisLevel = checkLevel0;
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test04955,"public void test04955() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    CheckLevel checkLevel0 = CheckLevel.WARNING;
    compilerOptions0.checkGlobalThisLevel = checkLevel0;
    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
    assertEquals(1.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test05056,"public void test05056() throws Throwable {
    Compiler compiler0 = new Compiler();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test05057,"public void test05057() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<SourceFile> stack0 = new Stack<SourceFile>();
    compilerOptions0.sourceMapOutputPath = ""com.google.javascript.jscomp.Compiler$IntermediateState"";
    compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
    assertEquals(1.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test05158,"public void test05158() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<SourceFile> stack0 = new Stack<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test05259,"public void test05259() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
    JSModule jSModule0 = new JSModule(""-0CBeX'"");
    arrayList0.add(jSModule0);
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    Stack<SourceFile> stack0 = new Stack<SourceFile>();
    compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.ensureLibraryInjected((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.Reader"", e);
    }
}",0,
project,0,test05360,"public void test05360() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) linkedList0, compilerOptions0);
    compiler0.parseInputs();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test05461,"public void test05461() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<AnalyzePrototypeProperties>) null, false, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test05562,"public void test05562() throws Throwable {
    Callable<AnalyzePrototypeProperties> callable0 = (Callable<AnalyzePrototypeProperties>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(callable0).call();
    AnalyzePrototypeProperties analyzePrototypeProperties0 = Compiler.runCallable(callable0, false, true);
    assertNull(analyzePrototypeProperties0);
}",1,
project,0,test05663,"public void test05663() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<AnalyzePrototypeProperties>) null, false, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test05764,"public void test05764() throws Throwable {
    Compiler compiler0 = new Compiler();
    CleanupPasses cleanupPasses0 = new CleanupPasses((CompilerOptions) null);
    compiler0.setPassConfig(cleanupPasses0);
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test05865,"public void test05865() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.getPassConfig();
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test05966,"public void test05966() throws Throwable {
    Compiler compiler0 = new Compiler();
    SourceFile sourceFile0 = SourceFile.fromFile(""\""(|N@HT5v6B*(m$qj"");
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    vector0.add(sourceFile0);
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.check();
    assertEquals(0.25, compiler0.getProgress(), 0.01);
}",0,
project,0,test06067,"public void test06067() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<SourceFile> stack0 = new Stack<SourceFile>();
    compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
    assertEquals(1.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test06068,"public void test06068() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<SourceFile> stack0 = new Stack<SourceFile>();
    compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
    compiler0.stripCode(compilerOptions0.stripTypePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNameSuffixes);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test06169,"public void test06169() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
    compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
    compiler0.startPass(""Dp4}"");
    // Undeclared exception!
    try {
        compiler0.optimize();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test06270,"public void test06270() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test06371,"public void test06371() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.reportCodeChange();
    // Undeclared exception!
    try {
        compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNamePrefixes);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test06472,"public void test06472() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""JSC_OPTIMIZE_LOOP_ERROR"");
    compiler0.areNodesEqualForInlining(node0, node0);
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test06473,"public void test06473() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""JSC_OPTIMIZE_LOOP_ERROR"");
    compiler0.areNodesEqualForInlining(node0, node0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test06574,"public void test06574() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""gq*rw<"");
    InputId inputId0 = node0.getInputId();
    // Undeclared exception!
    try {
        compiler0.removeExternInput(inputId0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Not an extern input: [testcode]
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test06675,"public void test06675() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
    assertEquals(1.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test06676,"public void test06676() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
    compiler0.getSynthesizedExternsInput();
    CompilerInput compilerInput0 = compiler0.getSynthesizedExternsInput();
    assertTrue(compilerInput0.isExtern());
}",0,assertTrue(compilerInput0.isExtern())
project,0,test06777,"public void test06777() throws Throwable {
    Compiler compiler0 = new Compiler();
    File file0 = MockFile.createTempFile(""yG0aF>#M}rSP y"", ""yG0aF>#M}rSP y"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[3];
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(""yG0aF>#M}rSP y"", sourceFile_Generator0);
    jSSourceFileArray0[0] = jSSourceFile0;
    jSSourceFileArray0[1] = jSSourceFile0;
    Charset charset0 = Charset.defaultCharset();
    JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(file0, charset0);
    jSSourceFileArray0[2] = jSSourceFile1;
    JSModule[] jSModuleArray0 = new JSModule[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    SourceFile sourceFile0 = SourceFile.fromFile(file0, charset0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input /var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/yG0aF>#M}rSP y0yG0aF>#M}rSP y
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test06878,"public void test06878() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""ye=Tg(?A|a\""?3!9"");
    File file0 = MockFile.createTempFile(""ye=Tg(?A|a\""?3!9"", ""ye=Tg(?A|a\""?3!9"");
    Charset charset0 = Charset.defaultCharset();
    SourceFile sourceFile0 = SourceFile.fromFile(file0, charset0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    // Undeclared exception!
    try {
        compiler0.addNewScript(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Input already exists: /var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/ye=Tg(?A|a\""?3!90ye=Tg(?A|a\""?3!9
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test06979,"public void test06979() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
    Charset charset0 = Charset.defaultCharset();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""com.google.javascript.jscomp.Compiler$2"", charset0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    compiler0.addNewScript(jsAst0);
    JsAst jsAst1 = new JsAst(jSSourceFile0);
    compiler0.replaceScript(jsAst1);
    assertTrue(compiler0.hasErrors());
}",0,
project,0,test07080,"public void test07080() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getDegenerateModuleGraph();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.JSModuleGraph"", e);
    }
}",0,
project,0,test07181,"public void test07181() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("")/?cz%S:D+^?uv"", "")/?cz%S:D+^?uv"");
    assertEquals("")/?cz%S:D+^?uv"", node0.getSourceFileName());
}",0,assertNotNull(node0.getSourceFileName())
project,0,test07182,"public void test07182() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("")/?cz%S:D+^?uv"", "")/?cz%S:D+^?uv"");
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test07183,"public void test07183() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("")/?cz%S:D+^?uv"", "")/?cz%S:D+^?uv"");
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertNotNull(reverseAbstractInterpreter0);
}",0,assertNotNull(reverseAbstractInterpreter0)
project,0,test07184,"public void test07184() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("")/?cz%S:D+^?uv"", "")/?cz%S:D+^?uv"");
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07185,"public void test07185() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("")/?cz%S:D+^?uv"", "")/?cz%S:D+^?uv"");
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test07286,"public void test07286() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getTypeValidator();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test07387,"public void test07387() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
    compiler0.parseInputs();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07488,"public void test07488() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test07489,"public void test07489() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
    compiler0.processAMDAndCommonJSModules();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07590,"public void test07590() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""q5"");
    compiler0.parseTestCode(""q5"");
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07591,"public void test07591() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""q5"");
    compiler0.parseTestCode(""q5"");
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test08096,"public void test08096() throws Throwable {
    Compiler compiler0 = new Compiler();
    SourceFile sourceFile0 = SourceFile.fromFile(""\""(|N@HT5v6B*(m$qj"");
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    vector0.add(sourceFile0);
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.optimize();
    assertEquals(2, compiler0.getErrorCount());
}",0,
project,0,test08197,"public void test08197() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""u?/=="");
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertFalse(compiler0.isTypeCheckingEnabled())
project,0,test08198,"public void test08198() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""u?/=="");
    boolean boolean0 = compiler0.isInliningForbidden();
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test08199,"public void test08199() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""u?/=="");
    boolean boolean0 = compiler0.isInliningForbidden();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test081100,"public void test081100() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""u?/=="");
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test082101,"public void test082101() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test082102,"public void test082102() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<SourceFile> vector0 = new Vector<SourceFile>();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
    boolean boolean0 = compiler0.acceptEcmaScript5();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test083103,"public void test083103() throws Throwable {
    Compiler compiler0 = new Compiler();
    Charset charset0 = Charset.defaultCharset();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""msg.no.bracket.arg"", charset0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    // Undeclared exception!
    try {
        jsAst0.getAstRoot(compiler0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test084104,"public void test084104() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""k9YE}RV!ie:u;R\"""");
    Stack<NodeTraversal.Callback> stack0 = new Stack<NodeTraversal.Callback>();
    CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, stack0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    String[] stringArray0 = new String[2];
    JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
    compiler0.report(jSError0);
    assertTrue(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test084105,"public void test084105() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""k9YE}RV!ie:u;R\"""");
    Stack<NodeTraversal.Callback> stack0 = new Stack<NodeTraversal.Callback>();
    CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, stack0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    String[] stringArray0 = new String[2];
    JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
    compiler0.report(jSError0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test084106,"public void test084106() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""k9YE}RV!ie:u;R\"""");
    Stack<NodeTraversal.Callback> stack0 = new Stack<NodeTraversal.Callback>();
    CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, stack0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    String[] stringArray0 = new String[2];
    JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
    compiler0.report(jSError0);
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test085107,"public void test085107() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""JSC_DUPLICATE_EXTERN_INPUT"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // JSC_DUPLICATE_EXTERN_INPUT
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test086108,"public void test086108() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""computeCFG"");
    // Undeclared exception!
    try {
        compiler0.check();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test087109,"public void test087109() throws Throwable {
    Compiler compiler0 = new Compiler();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test087110,"public void test087110() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdeMode(true);
    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test088111,"public void test088111() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getSourceLine((String) null, 30);
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test089112,"public void test089112() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""I$Mkr9p qGlln"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[3];
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(""yG0aF>#M}rSP y"", sourceFile_Generator0);
    jSSourceFileArray0[0] = jSSourceFile0;
    jSSourceFileArray0[1] = jSSourceFile0;
    jSSourceFileArray0[2] = jSSourceFileArray0[1];
    JSModule[] jSModuleArray0 = new JSModule[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    assertEquals(3, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test090113,"public void test090113() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""RT-"");
    CompilerOptions compilerOptions0 = compiler0.options;
    // Undeclared exception!
    try {
        compiler0.compile((List<SourceFile>) null, (List<SourceFile>) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test091114,"public void test091114() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getSourceRegion(""only arrays or objects can be accessed"", (-1));
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test092115,"public void test092115() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""ye=Tg(?A|a\""?3!9"");
    compiler0.getSourceRegion(""externExports"", 37);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test092116,"public void test092116() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""ye=Tg(?A|a\""?3!9"");
    compiler0.getSourceRegion(""externExports"", 37);
    assertTrue(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test092117,"public void test092117() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""ye=Tg(?A|a\""?3!9"");
    compiler0.getSourceRegion(""externExports"", 37);
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test093118,"public void test093118() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""y1e=Tg(?A|a\""?3!9"");
    Charset charset0 = Charset.defaultCharset();
    SourceFile sourceFile0 = SourceFile.fromFile("" a?C~,+xZNxDR96r"", charset0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    compiler0.getSourceRegion("" a?C~,+xZNxDR96r"", 29);
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test093119,"public void test093119() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""y1e=Tg(?A|a\""?3!9"");
    Charset charset0 = Charset.defaultCharset();
    SourceFile sourceFile0 = SourceFile.fromFile("" a?C~,+xZNxDR96r"", charset0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    compiler0.getSourceRegion("" a?C~,+xZNxDR96r"", 29);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test093120,"public void test093120() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""y1e=Tg(?A|a\""?3!9"");
    Charset charset0 = Charset.defaultCharset();
    SourceFile sourceFile0 = SourceFile.fromFile("" a?C~,+xZNxDR96r"", charset0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    compiler0.getSourceRegion("" a?C~,+xZNxDR96r"", 29);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test094121,"public void test094121() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule("".\""(jp%ACHm7%:3oY]"");
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root module has no inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test095122,"public void test095122() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""RnC"");
    // Undeclared exception!
    try {
        compiler0.ensureLibraryInjected(""RnC"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test096123,"public void test096123() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSModule> linkedList1 = new LinkedList<JSModule>();
    compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) linkedList1, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test097124,"public void test097124() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""Km}F{qw=jI#5'G*L"");
    File file0 = MockFile.createTempFile(""Km}F{qw=jI#5'G*L"", ""recordFunctionInformation"");
    Charset charset0 = Charset.defaultCharset();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0, charset0);
    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
    jSModule0.addFirst(compilerInput0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test098125,"public void test098125() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getAstDotGraph();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test099126,"public void test099126() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertEquals(0, errorManager0.getErrorCount());
}",0,"assertEquals(0, errorManager0.getErrorCount())"
project,0,test100127,"public void test100127() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertNotNull(errorManager0);
}",0,
project,0,test100128,"public void test100128() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,
project,0,test100129,"public void test100129() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test101130,"public void test101130() throws Throwable {
    Compiler compiler0 = new Compiler();
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    SyntheticAst syntheticAst0 = new SyntheticAst(""Tn'EF,tKqF)"");
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",0,
project,0,test102131,"public void test102131() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newNumber((double) 32, 32, 32);
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences((Map<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>) null, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test103132,"public void test103132() throws Throwable {
    Compiler compiler0 = new Compiler();
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test103133,"public void test103133() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.setProgress(271.7341093);
    assertEquals(1.0, compiler0.getProgress(), 0.01);
}",0,
project,0,test104134,"public void test104134() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.setProgress((-2.147483648E9));
    assertEquals(0.0, compiler0.getProgress(), 0.01);
}",0,
