project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    File file0 = MockFile.createTempFile("" in "", (String) null);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);
    JSModule[] jSModuleArray0 = new JSModule[1];
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""9_<"");
    // Undeclared exception!
    try {
        compiler0.toSource(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.disableThreads();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    String string0 = compiler0.toSource();
    assertEquals("""", string0);
}",0,
project,0,test034,"public void test034() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.disableThreads();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    String string0 = compiler0.toSource();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test035,"public void test035() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.disableThreads();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    String string0 = compiler0.toSource();
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test046,"public void test046() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    // Undeclared exception!
    try {
        compiler0.toSourceArray(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test078,"public void test078() throws Throwable {
    MockFile mockFile0 = new MockFile(""com.google.javascript.jscomp"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test089,"public void test089() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0910,"public void test0910() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""com.google.javascript.jscomp.ControlFlowGraph$Branch"");
    compiler0.parse(jSSourceFile0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test0911,"public void test0911() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""com.google.javascript.jscomp.ControlFlowGraph$Branch"");
    compiler0.parse(jSSourceFile0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test1112,"public void test1112() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.init((JSSourceFile[]) null, (JSSourceFile[]) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1213,"public void test1213() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    assertNull(compilerOptions0);
}",0,assertNotNull(compilerOptions0)
project,0,test1314,"public void test1314() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getPropertyMap();
    assertNull(variableMap0);
}",0,assertNotNull(variableMap0)
project,0,test1617,"public void test1617() throws Throwable {
    Compiler compiler0 = new Compiler();
    ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
    assertNull(scopeCreator0);
}",0,assertNotNull(scopeCreator0)
project,0,test1718,"public void test1718() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseSyntheticCode((String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // a source must have a name
        //
        verifyException(""com.google.javascript.jscomp.SourceFile"", e);
    }
}",0,
project,0,test1819,"public void test1819() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}",0,
project,0,test1920,"public void test1920() throws Throwable {
    Callable<AstValidator> callable0 = (Callable<AstValidator>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(callable0).call();
    AstValidator astValidator0 = Compiler.runCallableWithLargeStack(callable0);
    assertNull(astValidator0);
}",0,assertNotNull(astValidator0)
project,0,test2021,"public void test2021() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.languageMode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2122,"public void test2122() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2223,"public void test2223() throws Throwable {
    Logger logger0 = Logger.getLogger(""w"");
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    int int0 = compiler0.getWarningCount();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test2324,"public void test2324() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getVariableMap();
    assertNull(variableMap0);
}",0,assertNotNull(variableMap0)
project,0,test2425,"public void test2425() throws Throwable {
    Compiler compiler0 = new Compiler();
    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    assertNull(functionInformationMap0);
}",0,assertNotNull(functionInformationMap0)
project,0,test2526,"public void test2526() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    assertNotNull(supplier0);
}",0,assertNotNull(supplier0)
project,0,test2627,"public void test2627() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    Compiler compiler0 = new Compiler();
    SourceMap sourceMap0 = compiler0.getSourceMap();
    assertNull(sourceMap0);
}",0,assertNotNull(sourceMap0)
project,0,test2829,"public void test2829() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2930,"public void test2930() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.getRoot();
    assertNull(node0);
}",0,
project,0,test3031,"public void test3031() throws Throwable {
    Compiler compiler0 = new Compiler();
    List<CompilerInput> list0 = compiler0.getInputsForTesting();
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test3132,"public void test3132() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    File file0 = MockFile.createTempFile("" in "", (String) null);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);
    JSModule[] jSModuleArray0 = new JSModule[1];
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3433,"public void test3433() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3534,"public void test3534() throws Throwable {
    Compiler compiler0 = new Compiler();
    List<CompilerInput> list0 = compiler0.getExternsForTesting();
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test3635,"public void test3635() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.removeTryCatchFinally();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test3736,"public void test3736() throws Throwable {
    Compiler compiler0 = new Compiler();
    Scope scope0 = compiler0.getTopScope();
    assertNull(scope0);
}",0,assertNotNull(scope0)
project,0,test3837,"public void test3837() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
    assertNull(referenceCollectingCallback_ReferenceMap0);
}",0,
project,0,test4342,"public void test4342() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""com.google.javascript.jscomp.Compiler$8"", ""com.google.javascript.jscomp.Compiler$8"");
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parse();
    compiler0.check();
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test4443,"public void test4443() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertNotNull(errorManager0);
}",0,
project,0,test4444,"public void test4444() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test4545,"public void test4545() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[0];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(""Root module has no inputs"", diagnosticGroupArray0);
    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test4546,"public void test4546() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[0];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(""Root module has no inputs"", diagnosticGroupArray0);
    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test4648,"public void test4648() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""~?50iH,fu9(IIR"", ""~?50iH,fu9(IIR"");
    CompilerOptions compilerOptions0 = compiler0.options;
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    compilerOptions0.checkGlobalThisLevel = checkLevel0;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test4749,"public void test4749() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    compilerOptions0.checkSymbols = true;
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test4750,"public void test4750() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    compilerOptions0.checkSymbols = true;
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test4851,"public void test4851() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""j/5Qf`-G%KDV"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    JSModule[] jSModuleArray0 = new JSModule[2];
    jSModuleArray0[0] = jSModule0;
    jSModuleArray0[1] = jSModule0;
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    compiler0.getNodeForCodeInsertion(jSModule0);
    assertEquals(0, jSModule0.getDepth());
}",0,"assertEquals(0, jSModule0.getDepth())"
project,0,test4952,"public void test4952() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""{0} expressions are not callable"");
    arrayList0.add(jSSourceFile0);
    arrayList0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test4953,"public void test4953() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""{0} expressions are not callable"");
    arrayList0.add(jSSourceFile0);
    arrayList0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test5054,"public void test5054() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test5155,"public void test5155() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSModule jSModule0 = new JSModule((String) null);
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    Vector<JSModule> vector0 = new Vector<JSModule>();
    vector0.add(jSModule0);
    compiler0.compileModules(stack0, vector0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test5156,"public void test5156() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSModule jSModule0 = new JSModule((String) null);
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    Vector<JSModule> vector0 = new Vector<JSModule>();
    vector0.add(jSModule0);
    compiler0.compileModules(stack0, vector0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test5257,"public void test5257() throws Throwable {
    Callable<NameAnalyzer> callable0 = (Callable<NameAnalyzer>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(callable0).call();
    NameAnalyzer nameAnalyzer0 = Compiler.runCallable(callable0, false, true);
    assertNull(nameAnalyzer0);
}",1,
project,0,test5358,"public void test5358() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<NameAnalyzer>) null, false, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test5459,"public void test5459() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<NameAnalyzer>) null, false, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test5660,"public void test5660() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig_PassConfigDelegate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test5761,"public void test5761() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test5762,"public void test5762() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
    compiler0.stripCode(compilerOptions0.stripNameSuffixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNamePrefixes);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test5763,"public void test5763() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
    compiler0.stripCode(compilerOptions0.stripNameSuffixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNamePrefixes);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test5864,"public void test5864() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test5965,"public void test5965() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.reportCodeChange();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test5966,"public void test5966() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.reportCodeChange();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test6067,"public void test6067() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    Node node0 = compiler0.parseInputs();
    assertNotNull(node0);
}",0,
project,0,test6068,"public void test6068() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    Node node0 = compiler0.parseInputs();
    assertTrue(node0.isSyntheticBlock());
}",0,assertFalse(node0.isSyntheticBlock())
project,0,test6069,"public void test6069() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    Node node0 = compiler0.parseInputs();
    assertEquals(125, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test6170,"public void test6170() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.areNodesEqualForInlining((Node) null, (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test6271,"public void test6271() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    compiler0.newExternInput((String) null);
    compiler0.removeInput((String) null);
    assertFalse(compiler0.acceptConstKeyword());
}",0,assertFalse(compiler0.acceptConstKeyword())
project,0,test6372,"public void test6372() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    compiler0.removeInput((String) null);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test6373,"public void test6373() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    compiler0.removeInput((String) null);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test6474,"public void test6474() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.newExternInput(""[[singleton]]"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Conflicting externs name: [[singleton]]
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test6575,"public void test6575() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    MockFile mockFile0 = new MockFile((File) null, ""[[singleton]]"");
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input of name [[singleton]]
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test6676,"public void test6676() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""TYobZX?"");
    MockFile mockFile0 = new MockFile(""TYobZX?"");
    SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test6777,"public void test6777() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test6778,"public void test6778() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    char[] charArray0 = new char[7];
    CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
    SourceFile sourceFile0 = SourceFile.fromReader(""[[singleton]]"", charArrayReader0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test6879,"public void test6879() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""Gqsz@:itDX9]k^Y)AJe"");
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    compiler0.replaceIncrementalSourceAst(jsAst0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test6980,"public void test6980() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test6981,"public void test6981() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertNotNull(reverseAbstractInterpreter0);
}",0,assertNotNull(reverseAbstractInterpreter0)
project,0,test7082,"public void test7082() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    defaultPassConfig0.makeTypeCheck(compiler0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test7183,"public void test7183() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    Node node0 = compiler0.parseInputs();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test7184,"public void test7184() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    Node node0 = compiler0.parseInputs();
    assertEquals(125, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test7285,"public void test7285() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""xi|%*USa["");
    ArrayList<JSSourceFile> arrayList1 = new ArrayList<JSSourceFile>();
    arrayList1.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList1, compilerOptions0);
    compiler0.parse();
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(1, compiler0.getErrorCount())"
project,0,test7286,"public void test7286() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""xi|%*USa["");
    ArrayList<JSSourceFile> arrayList1 = new ArrayList<JSSourceFile>();
    arrayList1.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList1, compilerOptions0);
    compiler0.parse();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test7387,"public void test7387() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.parseTestCode((String) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // FAILED ASSERTION
        //
        verifyException(""com.google.javascript.jscomp.mozilla.rhino.Kit"", e);
    }
}",0,
project,0,test7488,"public void test7488() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.disableThreads();
    compiler0.toSource();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test7993,"public void test7993() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""com.google.javascript.jscomp.Compiler$8"", ""com.google.javascript.jscomp.Compiler$8"");
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parse();
    compiler0.optimize();
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test8094,"public void test8094() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test8095,"public void test8095() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertFalse(compiler0.isTypeCheckingEnabled())
project,0,test8196,"public void test8196() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    compilerOptions0.setCodingConvention(closureCodingConvention0);
    compiler0.disableThreads();
    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    assertTrue(result0.success);
}",0,
project,0,test8297,"public void test8297() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    compiler0.acceptEcmaScript5();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test8398,"public void test8398() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSError jSError0 = JSError.make(""com.google.common.collect.Synchronized$SynchronizedSetMultimap"", (-984), (-1394), compilerOptions0.checkGlobalNamesLevel, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
    compiler0.report(jSError0);
    assertEquals((-984), jSError0.lineNumber);
}",0,
project,0,test8499,"public void test8499() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""com.google.javascript.jscomp.Compiler$9"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // com.google.javascript.jscomp.Compiler$9
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test85100,"public void test85100() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.parseTestCode(""/&c@q0zh"");
    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    assertFalse(result0.success);
}",0,
project,0,test86101,"public void test86101() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("".U<pVfLGD|nroI/"", "".U<pVfLGD|nroI/"");
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    arrayList0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test86102,"public void test86102() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("".U<pVfLGD|nroI/"", "".U<pVfLGD|nroI/"");
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    arrayList0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
    assertFalse(result0.success);
}",0,
project,0,test87103,"public void test87103() throws Throwable {
    Compiler compiler0 = new Compiler();
    Region region0 = compiler0.getSourceRegion((String) null, (-708));
    assertNull(region0);
}",0,
project,0,test88104,"public void test88104() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    compiler0.getSourceRegion(""// Input %num%"", 65263);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test89105,"public void test89105() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""com.google.javascript.jscomp.Compiler$CodeBuilder"");
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root module has no inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test90106,"public void test90106() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    assertEquals(2, Node.POST_FLAG);
}",0,
project,0,test91107,"public void test91107() throws Throwable {
    Compiler compiler0 = new Compiler();
    String string0 = compiler0.getAstDotGraph();
    assertEquals("""", string0);
}",0,
project,0,test92108,"public void test92108() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    String string0 = compiler0.getAstDotGraph();
    assertEquals(""digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\""BLOCK\""];\n  node1 [label=\""SCRIPT\""];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> RETURN [label=\""SYN_BLOCK\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> node1 [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n}\n"", string0);
}",0,
project,0,test93109,"public void test93109() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getErrorManager();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test94110,"public void test94110() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    Node node0 = compiler0.parseSyntheticCode(""// Input %num%"");
    compiler0.updateGlobalVarReferences(hashMap0, node0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test95111,"public void test95111() throws Throwable {
    Compiler compiler0 = new Compiler();
    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    Node node0 = new Node(2643);
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test96112,"public void test96112() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
    Node node0 = compiler_IntermediateState0.externsRoot;
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    compiler0.updateGlobalVarReferences(hashMap0, node0);
    compiler0.updateGlobalVarReferences(hashMap0, node0);
    assertFalse(node0.hasChildren());
}",0,
project,0,test96113,"public void test96113() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
    Node node0 = compiler_IntermediateState0.externsRoot;
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    compiler0.updateGlobalVarReferences(hashMap0, node0);
    compiler0.updateGlobalVarReferences(hashMap0, node0);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
