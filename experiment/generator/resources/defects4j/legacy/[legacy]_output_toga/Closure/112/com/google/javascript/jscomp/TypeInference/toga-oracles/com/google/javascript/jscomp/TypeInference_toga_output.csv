project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.jaascript.jscomp.TypeInfeence$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascrpt.jscomp.TyeInfeence$TemplateTypeReplcer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascriyt.jscobp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    Scope scope0 = Scope.createGlobalScope(node0);
    CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
    ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"", codingConvention_AssertionFunctionSpec0);
    TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
    LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
    Node node1 = new Node(6, node0);
    // Undeclared exception!
    try {
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 6
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javasBript.jscomp.TypeInference$emplatTypeRplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInfernnce$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascriyt.jscobp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3030,"public void test3030() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3636,"public void test3636() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3838,"public void test3838() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""prototype"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4040,"public void test4040() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4141,"public void test4141() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.jaascript.jscomp.TypeInfeence$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4343,"public void test4343() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascriyt.jscobp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4444,"public void test4444() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4545,"public void test4545() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4646,"public void test4646() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4747,"public void test4747() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4848,"public void test4848() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.jaascript.jscomp.TypeInfeence$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test4949,"public void test4949() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.jaascript.jscomp.TypeInfeence$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5050,"public void test5050() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5151,"public void test5151() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""prototype"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5353,"public void test5353() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""prototype"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5656,"public void test5656() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5757,"public void test5757() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscom.TypeInferece$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6060,"public void test6060() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.jaascript.jscomp.TypeInfeence$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6161,"public void test6161() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6262,"public void test6262() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6363,"public void test6363() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6464,"public void test6464() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.jaascript.jscomp.TypeInfeence$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6565,"public void test6565() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6666,"public void test6666() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6767,"public void test6767() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6868,"public void test6868() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test6969,"public void test6969() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7070,"public void test7070() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""prototype"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7171,"public void test7171() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7272,"public void test7272() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7373,"public void test7373() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7474,"public void test7474() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7575,"public void test7575() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7676,"public void test7676() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7777,"public void test7777() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javasBript.jscomp.TypeInference$emplatTypeRplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7878,"public void test7878() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test7979,"public void test7979() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8080,"public void test8080() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8181,"public void test8181() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8282,"public void test8282() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8383,"public void test8383() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8484,"public void test8484() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8585,"public void test8585() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8686,"public void test8686() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8787,"public void test8787() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8888,"public void test8888() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test8989,"public void test8989() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test9090,"public void test9090() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test9191,"public void test9191() throws Throwable {
    BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
    BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, true);
    assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet1);
}",0,
project,0,test9292,"public void test9292() throws Throwable {
    BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
    BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
    assertSame(booleanLiteralSet0, booleanLiteralSet1);
}",0,
