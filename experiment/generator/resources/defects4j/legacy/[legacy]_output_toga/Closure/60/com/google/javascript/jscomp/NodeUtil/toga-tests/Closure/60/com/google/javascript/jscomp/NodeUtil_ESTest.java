/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 02:59:52 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("f ?5Ec](Cr5<yy/2", "f ?5Ec](Cr5<yy/2");
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        Node node0 = Node.newString("!");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Node node0 = new Node(30);
        NodeUtil.getArgumentForCallOrNew(node0, 45);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Node node0 = Node.newString("cjF/7<]z#", 22, 22);
        boolean boolean0 = NodeUtil.containsFunction(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Node node0 = new Node(10, 10, 10);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Node node0 = Node.newString("", (-2157), (-1731));
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Node node0 = new Node((byte) 105);
        NodeUtil.redeclareVarsInsideBranch(node0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        NodeUtil.getPrototypePropertyName(node0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Node node0 = new Node(10, 10, 10);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("^=");
        NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        Node node0 = new Node(3042);
        boolean boolean0 = NodeUtil.containsCall(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "0p-W<BH'1rj.PD-tL", (Node) null, "0p-W<BH'1rj.PD-tL");
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        Node node0 = Node.newString(105, "RegExp", 105, 105);
        NodeUtil.getArgumentForFunction(node0, 49);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        Node node0 = new Node(60);
        NodeUtil.isVarArgsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        Node node0 = Node.newString((-35), "");
        int int0 = NodeUtil.getNameReferenceCount(node0, "");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        Node node0 = new Node(41, 3031, 2778);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(77);
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-559), nodeUtil_MatchNodeType0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        Node node0 = new Node(60);
        NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        Node node0 = new Node(17, 17, 17);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        NodeUtil.getFunctionBody((Node) null);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        Node node0 = new Node(46);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02021() throws Throwable {
        Node node0 = new Node(46);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.hasChildren();
        assertFalse(node1.hasChildren());
    }

    @Test(timeout = 4000)
    public void test02122() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "javascript", "javascript");
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        Node node0 = new Node(71);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "undefined", (-165), (-165));
        Node node1 = new Node(26, node0, node0, node0);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test03332() throws Throwable {
        Node node0 = Node.newString("a%xzBsW;[eU/+=o;(");
        Node node1 = new Node(26, node0, 32, 27);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        Node node0 = Node.newString("a%xzBsW;[eU/+=o;(");
        Node node1 = new Node(26, node0, 32, 27);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test04234() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", (-2996), 2);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test04235() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", (-2996), 2);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04236() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", (-2996), 2);
        NodeUtil.getImpureBooleanValue(node0);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test04337() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 8052, (-349));
        NodeUtil.getPureBooleanValue(node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04338() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 8052, (-349));
        NodeUtil.getPureBooleanValue(node0);
        node0.getLineno();
        assertEquals(0, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test04439() throws Throwable {
        Node node0 = Node.newString("a%xzBsW;[eU/+=o;(");
        Node node1 = new Node(26, node0, 32, 27);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04440() throws Throwable {
        Node node0 = Node.newString("a%xzBsW;[eU/+=o;(");
        Node node1 = new Node(26, node0, 32, 27);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test04541() throws Throwable {
        Node node0 = new Node(64);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04542() throws Throwable {
        Node node0 = new Node(64);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04643() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "pototfype", 127, 127);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04644() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "pototfype", 127, 127);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test04645() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "pototfype", 127, 127);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "pototfype", 127, 127);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        node0.isQualifiedName();
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        String string0 = NodeUtil.arrayToString(node0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test04748() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        String string0 = NodeUtil.arrayToString(node0);
    }

    @Test(timeout = 4000)
    public void test04749() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        String string0 = NodeUtil.arrayToString(node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04850() throws Throwable {
        Node node0 = Node.newString("=", 92, 955);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04951() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("-");
        Node node0 = compiler0.parse(jSSourceFile0);
        Node node1 = new Node(41, node0, 1772, (-3028));
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05052() throws Throwable {
        Node node0 = Node.newString(43, "est");
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05153() throws Throwable {
        Node node0 = new Node(44, 21, 44);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05254() throws Throwable {
        Node node0 = new Node(63);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05255() throws Throwable {
        Node node0 = new Node(63);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05356() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05357() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 1877, (byte) 110);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05459() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 1877, (byte) 110);
        String string0 = NodeUtil.getStringValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test05460() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 1877, (byte) 110);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05561() throws Throwable {
        Node node0 = Node.newNumber(2933.3175924983193);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05662() throws Throwable {
        Node node0 = Node.newString(64, "!/D@L+(SKYe`X8V", 64, 64);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05663() throws Throwable {
        Node node0 = Node.newString(64, "!/D@L+(SKYe`X8V", 64, 64);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05664() throws Throwable {
        Node node0 = Node.newString(64, "!/D@L+(SKYe`X8V", 64, 64);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test05765() throws Throwable {
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("javascrupt", "javascrupt");
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parse(jSSourceFile0);
        String string0 = NodeUtil.arrayToString(node0);
    }

    @Test(timeout = 4000)
    public void test05866() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05967() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "W_r4", 2323, 2323);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test05968() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "W_r4", 2323, 2323);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test05969() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "W_r4", 2323, 2323);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06070() throws Throwable {
        Node node0 = new Node(39, 39, 39);
        NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06171() throws Throwable {
        Node node0 = Node.newString("\u000B", 67, 594);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06272() throws Throwable {
        Node node0 = new Node(41);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06373() throws Throwable {
        Node node0 = new Node(43);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06474() throws Throwable {
        Node node0 = new Node(44);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06575() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06576() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06677() throws Throwable {
        Node node0 = new Node(28);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06778() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "infinity", (byte) 105, (byte) 105);
        Node node1 = new Node(26, node0, 32, 27);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06779() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "infinity", (byte) 105, (byte) 105);
        Node node1 = new Node(26, node0, 32, 27);
        Double double0 = NodeUtil.getNumberValue(node1);
        node0.getType();
        assertEquals(1, node0.getType());
    }

    @Test(timeout = 4000)
    public void test06780() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "infinity", (byte) 105, (byte) 105);
        Node node1 = new Node(26, node0, 32, 27);
        Double double0 = NodeUtil.getNumberValue(node1);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test06881() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("&");
    }

    @Test(timeout = 4000)
    public void test06882() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("&");
    }

    @Test(timeout = 4000)
    public void test06983() throws Throwable {
        Node node0 = Node.newString("0W7M,|qoZZ3!Xv4Ox", 114, 114);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06984() throws Throwable {
        Node node0 = Node.newString("0W7M,|qoZZ3!Xv4Ox", 114, 114);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test07085() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("-infinity");
    }

    @Test(timeout = 4000)
    public void test07186() throws Throwable {
        Node node0 = Node.newString("infinity", (-382), 13);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test07287() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("+infinity");
    }

    @Test(timeout = 4000)
    public void test07388() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" type: ");
    }

    @Test(timeout = 4000)
    public void test07389() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" type: ");
    }

    @Test(timeout = 4000)
    public void test08090() throws Throwable {
        Node node0 = Node.newString("infinity");
        Node node1 = new Node(26, node0, 32, 27);
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08191() throws Throwable {
        Node node0 = new Node(29);
        NodeUtil.isImmutableValue(node0);
    }

    @Test(timeout = 4000)
    public void test08292() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "SETTER", 117, 127);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test08293() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "SETTER", 117, 127);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test08294() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "SETTER", 117, 127);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test08395() throws Throwable {
        Node node0 = Node.newString(41, "prototype");
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(18);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test08496() throws Throwable {
        Node node0 = new Node(43);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test08597() throws Throwable {
        Node node0 = new Node(44);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test08698() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
    }

    @Test(timeout = 4000)
    public void test08799() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-1), 16);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test087100() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-1), 16);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        node0.getCharno();
        assertEquals(1, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test087101() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-1), 16);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        node0.getType();
        assertEquals(1, node0.getType());
    }

    @Test(timeout = 4000)
    public void test088102() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 1877, (byte) 110);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test088103() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 1877, (byte) 110);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test088104() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 1877, (byte) 110);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test089105() throws Throwable {
        Node node0 = Node.newNumber((-635.0));
        Node node1 = new Node(63, node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    }

    @Test(timeout = 4000)
    public void test090106() throws Throwable {
        Node node0 = Node.newString(64, "!/D@L+(SKYe`X8V", 64, 64);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        node0.addChildToFront(node1);
        node1.getType();
        assertEquals(1, node1.getType());
    }

    @Test(timeout = 4000)
    public void test090107() throws Throwable {
        Node node0 = Node.newString(64, "!/D@L+(SKYe`X8V", 64, 64);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        node0.addChildToFront(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test090108() throws Throwable {
        Node node0 = Node.newString(64, "!/D@L+(SKYe`X8V", 64, 64);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test091109() throws Throwable {
        Node node0 = new Node((byte) 105);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test092110() throws Throwable {
        Node node0 = new Node((byte) 105);
        Node node1 = new Node(1, node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test093111() throws Throwable {
        Node node0 = new Node(63);
        Node node1 = new Node(11, node0, 1, 43);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test094112() throws Throwable {
        Node node0 = new Node(12, 86, 999);
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test095113() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "JSC_UNDEFINED_NAME", (-4417), 100);
        Node node1 = new Node(13, node0, 4095, 39);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, compilerOptions0.stripTypes);
        node0.getCharno();
        assertEquals(1, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test095114() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "JSC_UNDEFINED_NAME", (-4417), 100);
        Node node1 = new Node(13, node0, 4095, 39);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, compilerOptions0.stripTypes);
    }

    @Test(timeout = 4000)
    public void test095115() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "JSC_UNDEFINED_NAME", (-4417), 100);
        Node node1 = new Node(13, node0, 4095, 39);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, compilerOptions0.stripTypes);
        node0.hasMoreThanOneChild();
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test096116() throws Throwable {
        Node node0 = new Node(15);
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test097117() throws Throwable {
        Node node0 = new Node(16);
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test098118() throws Throwable {
        Node node0 = new Node(17);
        Compiler compiler0 = new Compiler();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test099119() throws Throwable {
        Node node0 = new Node(18);
        Compiler compiler0 = new Compiler();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test100120() throws Throwable {
        Node node0 = Node.newString(10, "pV)]$x~6m]Sm/91$pq");
        Node node1 = new Node(19, 1, 28);
        node0.addChildrenToBack(node1);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
    }

    @Test(timeout = 4000)
    public void test101121() throws Throwable {
        Node node0 = new Node(20);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test102122() throws Throwable {
        Node node0 = new Node(21);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test103123() throws Throwable {
        Node node0 = new Node((byte) (-111));
        Node node1 = new Node(22, node0, 30, 51);
        Compiler compiler0 = new Compiler();
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        Set<String> set0 = gatherRawExports0.getExportedVariableNames();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test104124() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "ZoDlEMUv*wroRqTZ", (byte) 101, (byte) 101);
        Node node1 = new Node(26, node0, 42, 91);
        Compiler compiler0 = new Compiler();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test104125() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "ZoDlEMUv*wroRqTZ", (byte) 101, (byte) 101);
        Node node1 = new Node(26, node0, 42, 91);
        Compiler compiler0 = new Compiler();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test104126() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "ZoDlEMUv*wroRqTZ", (byte) 101, (byte) 101);
        Node node1 = new Node(26, node0, 42, 91);
        Compiler compiler0 = new Compiler();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
        node0.hasMoreThanOneChild();
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test105127() throws Throwable {
        Node node0 = new Node(27, 27, 27);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
    }

    @Test(timeout = 4000)
    public void test106128() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("Expected CALL node, got ");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Expected CALL node, got ", 111, 111);
        Node node1 = new Node(28, node0, (-2329), 2850);
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test106129() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("Expected CALL node, got ");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Expected CALL node, got ", 111, 111);
        Node node1 = new Node(28, node0, (-2329), 2850);
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
        node0.hasMoreThanOneChild();
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test106130() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("Expected CALL node, got ");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Expected CALL node, got ", 111, 111);
        Node node1 = new Node(28, node0, (-2329), 2850);
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test107131() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test108132() throws Throwable {
        Node node0 = new Node(30);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
    }

    @Test(timeout = 4000)
    public void test109133() throws Throwable {
        Node node0 = Node.newString(32, "pV)]$x~6m]Sm/91$pq");
        MockPrintStream mockPrintStream0 = new MockPrintStream("n H:i]_PsR%['0>4l%;");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test110134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods((AbstractCompiler) null);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        Node node1 = new Node(33, node0, node0, 33, 1546);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test111135() throws Throwable {
        Node node0 = Node.newString(1979, "m[x<H+zEYt~0YeA", 181, (-229));
        Node node1 = new Node(34, node0, 90, 11);
        Compiler compiler0 = new Compiler();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test112136() throws Throwable {
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node0 = new Node(35);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test113137() throws Throwable {
        Node node0 = new Node(36);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
    }

    @Test(timeout = 4000)
    public void test114138() throws Throwable {
        Node node0 = new Node(37);
        Compiler compiler0 = new Compiler();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test115139() throws Throwable {
        Node node0 = new Node(46);
        Node node1 = Node.newNumber((double) 8, 6, 1);
        node0.addChildrenToBack(node1);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
    }

    @Test(timeout = 4000)
    public void test116140() throws Throwable {
        Node node0 = Node.newString("0W7M,|qo%Z3!XKv4Ox", 125, 125);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test117141() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("-");
        Node node0 = compiler0.parse(jSSourceFile0);
        Node node1 = new Node(41, node0, 1772, (-3028));
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test118142() throws Throwable {
        Node node0 = new Node(42);
        Compiler compiler0 = new Compiler();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test119143() throws Throwable {
        Node node0 = new Node(43);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
    }

    @Test(timeout = 4000)
    public void test120144() throws Throwable {
        Node node0 = new Node(44, 5, 2);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test121145() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("^=");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test122146() throws Throwable {
        Node node0 = new Node(10, 10, 10);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test123147() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("c:NRJ2x+i}6+7");
        Node node0 = compiler0.parse(jSSourceFile0);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test124148() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test125149() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test126150() throws Throwable {
        Node node0 = new Node(12, 86, 999);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test127151() throws Throwable {
        Node node0 = new Node(94);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        Node node1 = new Node(13, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test128152() throws Throwable {
        Node node0 = new Node(14);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test129153() throws Throwable {
        Node node0 = new Node(127);
        Node node1 = new Node(15, node0, 46, 47);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test130154() throws Throwable {
        Node node0 = new Node(16);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test131155() throws Throwable {
        Node node0 = new Node(17, 17, 17);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test132156() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test133157() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test134158() throws Throwable {
        Node node0 = new Node(20);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test135159() throws Throwable {
        Node node0 = new Node(21);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test136160() throws Throwable {
        Node node0 = new Node(23, 17, 14);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test137161() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test138162() throws Throwable {
        Node node0 = new Node(25, 25, 25);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test139163() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test140164() throws Throwable {
        Node node0 = new Node(112, 3, 3);
        Node node1 = new Node(28, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test141165() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test142166() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test143167() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test144168() throws Throwable {
        Node node0 = Node.newString(32, "pV)]$x~6m]Sm/91$pq");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test145169() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test146170() throws Throwable {
        Node node0 = new Node((byte) (-111));
        Node node1 = new Node(34, node0, node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test147171() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(35, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test148172() throws Throwable {
        Node node0 = new Node(36, 36, 36);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test149173() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test150174() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test151175() throws Throwable {
        Node node0 = new Node(39, 39, 39);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test152176() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test153177() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test154178() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test155179() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test156180() throws Throwable {
        Node node0 = new Node(48, 41, 2027);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test157181() throws Throwable {
        Node node0 = new Node(50, 50, 50);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test158182() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test159183() throws Throwable {
        Node node0 = new Node(52, 631, 631);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(48);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test160184() throws Throwable {
        Node node0 = new Node(53);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test161185() throws Throwable {
        Node node0 = new Node(55);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test162186() throws Throwable {
        Node node0 = new Node(56);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test163187() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test164188() throws Throwable {
        Node node0 = new Node(59);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test165189() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test166190() throws Throwable {
        Node node0 = new Node(61, 61, 61);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test167191() throws Throwable {
        Node node0 = new Node(62, 111, 111);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test168192() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test169193() throws Throwable {
        Node node0 = new Node(66, 8, 12);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test170194() throws Throwable {
        Node node0 = new Node(67, 67, (-4173));
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test171195() throws Throwable {
        Node node0 = new Node(68);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test172196() throws Throwable {
        Node node0 = new Node(69);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test173197() throws Throwable {
        Node node0 = new Node(71);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test174198() throws Throwable {
        Node node0 = new Node(72);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test175199() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test176200() throws Throwable {
        Node node0 = new Node(74);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test177201() throws Throwable {
        Node node0 = new Node(75, 75, 75);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test178202() throws Throwable {
        Node node0 = new Node(76);
        NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
    }

    @Test(timeout = 4000)
    public void test179203() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test180204() throws Throwable {
        Node node0 = new Node(78);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test181205() throws Throwable {
        Node node0 = new Node(79);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test182206() throws Throwable {
        Node node0 = new Node(80);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test183207() throws Throwable {
        Node node0 = new Node(81);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test184208() throws Throwable {
        Node node0 = new Node(82);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test185209() throws Throwable {
        Node node0 = new Node(83);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test186210() throws Throwable {
        Node node0 = new Node(84, 84, 84);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test187211() throws Throwable {
        Node node0 = Node.newString(85, "2hv& Agp", 24, 26);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test188212() throws Throwable {
        Node node0 = new Node(22, 22, 22);
        Node node1 = new Node(86, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test189213() throws Throwable {
        Node node0 = new Node(87);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test190214() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test191215() throws Throwable {
        Node node0 = new Node(89, 4942, 89);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test192216() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test193217() throws Throwable {
        Node node0 = new Node(91, 91, 91);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test194218() throws Throwable {
        Node node0 = new Node(92);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test195219() throws Throwable {
        Node node0 = new Node(93, 102, 93);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test196220() throws Throwable {
        Node node0 = new Node(94);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test197221() throws Throwable {
        Node node0 = new Node(95);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test198222() throws Throwable {
        Node node0 = new Node(96, 96, 96);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test199223() throws Throwable {
        Node node0 = new Node(97);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test200224() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test201225() throws Throwable {
        Node node0 = new Node(99, 115, 115);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test202226() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test203227() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test204228() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test205229() throws Throwable {
        Node node0 = new Node(104, (-2145), 113);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test206230() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType((byte) 105);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test207231() throws Throwable {
        Node node0 = new Node(106);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test208232() throws Throwable {
        Node node0 = new Node(107);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test209233() throws Throwable {
        Node node0 = new Node(108);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test210234() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test211235() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test212236() throws Throwable {
        Node node0 = new Node(46);
        Node node1 = new Node(113, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test213237() throws Throwable {
        Node node0 = new Node(114, 114, 67);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test214238() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test215239() throws Throwable {
        Node node0 = new Node(116, 108, 116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test216240() throws Throwable {
        Node node0 = new Node(117, 65536, 161);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test217241() throws Throwable {
        Node node0 = new Node(118);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test218242() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test219243() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test220244() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test221245() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test222246() throws Throwable {
        Node node0 = new Node(34, 1, 27);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test223247() throws Throwable {
        Node node0 = Node.newString("", (-2157), (-1731));
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test224248() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test225249() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test226250() throws Throwable {
        Node node0 = new Node(44, 21, 44);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test227251() throws Throwable {
        Node node0 = new Node(47, 12, 9);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test228252() throws Throwable {
        Node node0 = new Node(49, 7, 2535);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test229253() throws Throwable {
        Node node0 = new Node((byte) 105);
        Node node1 = new Node(51, node0, node0, node0, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test230254() throws Throwable {
        Node node0 = new Node(52);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test231255() throws Throwable {
        Node node0 = new Node(59);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test232256() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test233257() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test234258() throws Throwable {
        Node node0 = new Node(76, 60, 76);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test235259() throws Throwable {
        Node node0 = new Node(77, 52, 52);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test236260() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test237261() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test238262() throws Throwable {
        Node node0 = new Node(84, 84, 84);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test239263() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test240264() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test241265() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test242266() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test243267() throws Throwable {
        Node node0 = new Node(104, 104, 104);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test244268() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test245269() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test246270() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test247271() throws Throwable {
        Node node0 = new Node(142);
        Node node1 = NodeUtil.newVarNode("Ld16PwWb", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test247272() throws Throwable {
        Node node0 = new Node(142);
        Node node1 = NodeUtil.newVarNode("Ld16PwWb", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getChildCount();
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test247273() throws Throwable {
        Node node0 = new Node(142);
        Node node1 = NodeUtil.newVarNode("Ld16PwWb", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test248274() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test249275() throws Throwable {
        Node node0 = new Node((byte) 123);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test250276() throws Throwable {
        Node node0 = Node.newString(124, "7X*}%");
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test251277() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("^=");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test252278() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = Node.newString(126, ",%muZ\"L^%zo");
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test253279() throws Throwable {
        Node node0 = new Node(128);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test254280() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test256281() throws Throwable {
        Node node0 = new Node((byte) 105, (byte) 105, (byte) 105);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test257282() throws Throwable {
        Node node0 = new Node(65, 43, 43);
        Node node1 = new Node(86, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test258283() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(86, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test259284() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        node0.addChildrenToBack(node0);
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test260285() throws Throwable {
        Node node0 = new Node(73);
        NodeUtil.callHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test261286() throws Throwable {
        Node node0 = new Node((-2157), (-1731), (-1731));
        Node node1 = new Node(37, node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test262287() throws Throwable {
        Node node0 = Node.newNumber(770.0, (-1502), (-1502));
        NodeUtil.newHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test263288() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test264289() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test265290() throws Throwable {
        Node node0 = Node.newString(31, "j,$$");
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test266291() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("", (-2158), (-1731));
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test267292() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Compiler compiler0 = new Compiler();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "E-^D<H[$H865!", (-1814), 98);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test267293() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Compiler compiler0 = new Compiler();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "E-^D<H[$H865!", (-1814), 98);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test267294() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Compiler compiler0 = new Compiler();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "E-^D<H[$H865!", (-1814), 98);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        node0.hasChildren();
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test268295() throws Throwable {
        Node node0 = Node.newString(49, "Or(");
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test269296() throws Throwable {
        Node node0 = Node.newString(102, "0W7M,|qoZZ3!Xv4Ox", (-2340), (-1667));
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test270297() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(103, "3", 916, (-1809));
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test271298() throws Throwable {
        Node node0 = new Node(30);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test272299() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ExploitAssigns", "com.google.javascript.jscomp.ExploitAssigns");
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test273300() throws Throwable {
        Node node0 = Node.newString("", (-2157), (-1731));
        Node node1 = new Node(37, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test274301() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "E-^D<H[$H865!", (-1814), 98);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test274302() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "E-^D<H[$H865!", (-1814), 98);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        node0.getLineno();
        assertEquals(0, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test275303() throws Throwable {
        int int0 = NodeUtil.precedence(9);
    }

    @Test(timeout = 4000)
    public void test276304() throws Throwable {
        int int0 = NodeUtil.precedence(86);
    }

    @Test(timeout = 4000)
    public void test277305() throws Throwable {
        int int0 = NodeUtil.precedence(10);
    }

    @Test(timeout = 4000)
    public void test278306() throws Throwable {
        int int0 = NodeUtil.precedence(11);
    }

    @Test(timeout = 4000)
    public void test279307() throws Throwable {
        int int0 = NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test280308() throws Throwable {
        int int0 = NodeUtil.precedence(13);
    }

    @Test(timeout = 4000)
    public void test281309() throws Throwable {
        int int0 = NodeUtil.precedence(14);
    }

    @Test(timeout = 4000)
    public void test282310() throws Throwable {
        int int0 = NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test283311() throws Throwable {
        int int0 = NodeUtil.precedence(16);
    }

    @Test(timeout = 4000)
    public void test284312() throws Throwable {
        int int0 = NodeUtil.precedence(17);
    }

    @Test(timeout = 4000)
    public void test285313() throws Throwable {
        int int0 = NodeUtil.precedence(18);
    }

    @Test(timeout = 4000)
    public void test286314() throws Throwable {
        int int0 = NodeUtil.precedence(19);
    }

    @Test(timeout = 4000)
    public void test287315() throws Throwable {
        int int0 = NodeUtil.precedence(20);
    }

    @Test(timeout = 4000)
    public void test288316() throws Throwable {
        int int0 = NodeUtil.precedence(21);
    }

    @Test(timeout = 4000)
    public void test289317() throws Throwable {
        int int0 = NodeUtil.precedence(22);
    }

    @Test(timeout = 4000)
    public void test290318() throws Throwable {
        int int0 = NodeUtil.precedence(23);
    }

    @Test(timeout = 4000)
    public void test291319() throws Throwable {
        int int0 = NodeUtil.precedence(24);
    }

    @Test(timeout = 4000)
    public void test292320() throws Throwable {
        int int0 = NodeUtil.precedence(25);
    }

    @Test(timeout = 4000)
    public void test293321() throws Throwable {
        int int0 = NodeUtil.precedence(26);
    }

    @Test(timeout = 4000)
    public void test294322() throws Throwable {
        int int0 = NodeUtil.precedence(27);
    }

    @Test(timeout = 4000)
    public void test295323() throws Throwable {
        int int0 = NodeUtil.precedence(28);
    }

    @Test(timeout = 4000)
    public void test296324() throws Throwable {
        int int0 = NodeUtil.precedence(29);
    }

    @Test(timeout = 4000)
    public void test297325() throws Throwable {
        int int0 = NodeUtil.precedence(30);
    }

    @Test(timeout = 4000)
    public void test298326() throws Throwable {
        int int0 = NodeUtil.precedence(31);
    }

    @Test(timeout = 4000)
    public void test299327() throws Throwable {
        int int0 = NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test300328() throws Throwable {
        int int0 = NodeUtil.precedence(33);
    }

    @Test(timeout = 4000)
    public void test301329() throws Throwable {
        NodeUtil.precedence(34);
    }

    @Test(timeout = 4000)
    public void test302330() throws Throwable {
        int int0 = NodeUtil.precedence(35);
    }

    @Test(timeout = 4000)
    public void test303331() throws Throwable {
        NodeUtil.precedence(36);
    }

    @Test(timeout = 4000)
    public void test304332() throws Throwable {
        int int0 = NodeUtil.precedence(37);
    }

    @Test(timeout = 4000)
    public void test305333() throws Throwable {
        int int0 = NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test306334() throws Throwable {
        int int0 = NodeUtil.precedence(39);
    }

    @Test(timeout = 4000)
    public void test307335() throws Throwable {
        int int0 = NodeUtil.precedence(40);
    }

    @Test(timeout = 4000)
    public void test308336() throws Throwable {
        int int0 = NodeUtil.precedence(41);
    }

    @Test(timeout = 4000)
    public void test309337() throws Throwable {
        int int0 = NodeUtil.precedence(42);
    }

    @Test(timeout = 4000)
    public void test310338() throws Throwable {
        int int0 = NodeUtil.precedence(43);
    }

    @Test(timeout = 4000)
    public void test311339() throws Throwable {
        int int0 = NodeUtil.precedence(44);
    }

    @Test(timeout = 4000)
    public void test312340() throws Throwable {
        int int0 = NodeUtil.precedence(45);
    }

    @Test(timeout = 4000)
    public void test313341() throws Throwable {
        int int0 = NodeUtil.precedence(46);
    }

    @Test(timeout = 4000)
    public void test314342() throws Throwable {
        int int0 = NodeUtil.precedence(47);
    }

    @Test(timeout = 4000)
    public void test315343() throws Throwable {
        NodeUtil.precedence(48);
    }

    @Test(timeout = 4000)
    public void test316344() throws Throwable {
        NodeUtil.precedence(49);
    }

    @Test(timeout = 4000)
    public void test317345() throws Throwable {
        NodeUtil.precedence(50);
    }

    @Test(timeout = 4000)
    public void test318346() throws Throwable {
        int int0 = NodeUtil.precedence(51);
    }

    @Test(timeout = 4000)
    public void test319347() throws Throwable {
        int int0 = NodeUtil.precedence(52);
    }

    @Test(timeout = 4000)
    public void test320348() throws Throwable {
        NodeUtil.precedence(54);
    }

    @Test(timeout = 4000)
    public void test321349() throws Throwable {
        NodeUtil.precedence(56);
    }

    @Test(timeout = 4000)
    public void test322350() throws Throwable {
        NodeUtil.precedence(58);
    }

    @Test(timeout = 4000)
    public void test323351() throws Throwable {
        NodeUtil.precedence(59);
    }

    @Test(timeout = 4000)
    public void test324352() throws Throwable {
        NodeUtil.precedence(62);
    }

    @Test(timeout = 4000)
    public void test325353() throws Throwable {
        int int0 = NodeUtil.precedence(63);
    }

    @Test(timeout = 4000)
    public void test326354() throws Throwable {
        int int0 = NodeUtil.precedence(64);
    }

    @Test(timeout = 4000)
    public void test327355() throws Throwable {
        NodeUtil.precedence(65);
    }

    @Test(timeout = 4000)
    public void test328356() throws Throwable {
        NodeUtil.precedence(66);
    }

    @Test(timeout = 4000)
    public void test329357() throws Throwable {
        NodeUtil.precedence(67);
    }

    @Test(timeout = 4000)
    public void test330358() throws Throwable {
        NodeUtil.precedence(68);
    }

    @Test(timeout = 4000)
    public void test331359() throws Throwable {
        NodeUtil.precedence(69);
    }

    @Test(timeout = 4000)
    public void test332360() throws Throwable {
        NodeUtil.precedence(70);
    }

    @Test(timeout = 4000)
    public void test333361() throws Throwable {
        NodeUtil.precedence(71);
    }

    @Test(timeout = 4000)
    public void test334362() throws Throwable {
        NodeUtil.precedence(72);
    }

    @Test(timeout = 4000)
    public void test335363() throws Throwable {
        NodeUtil.precedence(73);
    }

    @Test(timeout = 4000)
    public void test336364() throws Throwable {
        NodeUtil.precedence(74);
    }

    @Test(timeout = 4000)
    public void test337365() throws Throwable {
        NodeUtil.precedence(75);
    }

    @Test(timeout = 4000)
    public void test338366() throws Throwable {
        NodeUtil.precedence(76);
    }

    @Test(timeout = 4000)
    public void test339367() throws Throwable {
        NodeUtil.precedence(77);
    }

    @Test(timeout = 4000)
    public void test340368() throws Throwable {
        NodeUtil.precedence(78);
    }

    @Test(timeout = 4000)
    public void test341369() throws Throwable {
        NodeUtil.precedence(79);
    }

    @Test(timeout = 4000)
    public void test342370() throws Throwable {
        NodeUtil.precedence(80);
    }

    @Test(timeout = 4000)
    public void test343371() throws Throwable {
        NodeUtil.precedence(81);
    }

    @Test(timeout = 4000)
    public void test344372() throws Throwable {
        NodeUtil.precedence(82);
    }

    @Test(timeout = 4000)
    public void test345373() throws Throwable {
        NodeUtil.precedence(83);
    }

    @Test(timeout = 4000)
    public void test346374() throws Throwable {
        NodeUtil.precedence(84);
    }

    @Test(timeout = 4000)
    public void test347375() throws Throwable {
        int int0 = NodeUtil.precedence(85);
    }

    @Test(timeout = 4000)
    public void test348376() throws Throwable {
        int int0 = NodeUtil.precedence(87);
    }

    @Test(timeout = 4000)
    public void test349377() throws Throwable {
        int int0 = NodeUtil.precedence(88);
    }

    @Test(timeout = 4000)
    public void test350378() throws Throwable {
        int int0 = NodeUtil.precedence(89);
    }

    @Test(timeout = 4000)
    public void test351379() throws Throwable {
        int int0 = NodeUtil.precedence(90);
    }

    @Test(timeout = 4000)
    public void test352380() throws Throwable {
        int int0 = NodeUtil.precedence(91);
    }

    @Test(timeout = 4000)
    public void test353381() throws Throwable {
        int int0 = NodeUtil.precedence(92);
    }

    @Test(timeout = 4000)
    public void test354382() throws Throwable {
        int int0 = NodeUtil.precedence(93);
    }

    @Test(timeout = 4000)
    public void test355383() throws Throwable {
        int int0 = NodeUtil.precedence(94);
    }

    @Test(timeout = 4000)
    public void test356384() throws Throwable {
        int int0 = NodeUtil.precedence(95);
    }

    @Test(timeout = 4000)
    public void test357385() throws Throwable {
        int int0 = NodeUtil.precedence(96);
    }

    @Test(timeout = 4000)
    public void test358386() throws Throwable {
        int int0 = NodeUtil.precedence(97);
    }

    @Test(timeout = 4000)
    public void test359387() throws Throwable {
        int int0 = NodeUtil.precedence(98);
    }

    @Test(timeout = 4000)
    public void test360388() throws Throwable {
        NodeUtil.precedence(99);
    }

    @Test(timeout = 4000)
    public void test361389() throws Throwable {
        int int0 = NodeUtil.precedence(100);
    }

    @Test(timeout = 4000)
    public void test362390() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 101);
    }

    @Test(timeout = 4000)
    public void test363391() throws Throwable {
        int int0 = NodeUtil.precedence(102);
    }

    @Test(timeout = 4000)
    public void test364392() throws Throwable {
        int int0 = NodeUtil.precedence(103);
    }

    @Test(timeout = 4000)
    public void test365393() throws Throwable {
        NodeUtil.precedence(104);
    }

    @Test(timeout = 4000)
    public void test366394() throws Throwable {
        int int0 = NodeUtil.precedence(105);
    }

    @Test(timeout = 4000)
    public void test367395() throws Throwable {
        NodeUtil.precedence(106);
    }

    @Test(timeout = 4000)
    public void test368396() throws Throwable {
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test369397() throws Throwable {
        NodeUtil.precedence(108);
    }

    @Test(timeout = 4000)
    public void test370398() throws Throwable {
        NodeUtil.precedence(109);
    }

    @Test(timeout = 4000)
    public void test371399() throws Throwable {
        NodeUtil.precedence(110);
    }

    @Test(timeout = 4000)
    public void test372400() throws Throwable {
        NodeUtil.precedence(111);
    }

    @Test(timeout = 4000)
    public void test373401() throws Throwable {
        NodeUtil.precedence(112);
    }

    @Test(timeout = 4000)
    public void test374402() throws Throwable {
        NodeUtil.precedence(113);
    }

    @Test(timeout = 4000)
    public void test375403() throws Throwable {
        NodeUtil.precedence(114);
    }

    @Test(timeout = 4000)
    public void test376404() throws Throwable {
        NodeUtil.precedence(115);
    }

    @Test(timeout = 4000)
    public void test377405() throws Throwable {
        NodeUtil.precedence(116);
    }

    @Test(timeout = 4000)
    public void test378406() throws Throwable {
        NodeUtil.precedence(117);
    }

    @Test(timeout = 4000)
    public void test379407() throws Throwable {
        NodeUtil.precedence(118);
    }

    @Test(timeout = 4000)
    public void test380408() throws Throwable {
        NodeUtil.precedence(119);
    }

    @Test(timeout = 4000)
    public void test381409() throws Throwable {
        NodeUtil.precedence(120);
    }

    @Test(timeout = 4000)
    public void test382410() throws Throwable {
        NodeUtil.precedence(121);
    }

    @Test(timeout = 4000)
    public void test383411() throws Throwable {
        int int0 = NodeUtil.precedence(122);
    }

    @Test(timeout = 4000)
    public void test384412() throws Throwable {
        NodeUtil.precedence(123);
    }

    @Test(timeout = 4000)
    public void test385413() throws Throwable {
        int int0 = NodeUtil.precedence(124);
    }

    @Test(timeout = 4000)
    public void test386414() throws Throwable {
        NodeUtil.precedence(4095);
    }

    @Test(timeout = 4000)
    public void test387415() throws Throwable {
        Node node0 = Node.newString(85, "#Jk[@A$iPo#cZ'pM)Oh", 120, 120);
        NodeUtil.mayBeString(node0, false);
    }

    @Test(timeout = 4000)
    public void test388416() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test389417() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test390418() throws Throwable {
        Node node0 = Node.newString("b", 67, 67);
        Node node1 = new Node(100, node0);
        boolean boolean0 = NodeUtil.isBooleanResult(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test391419() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        NodeUtil.isNumericResult(node0);
    }

    @Test(timeout = 4000)
    public void test392420() throws Throwable {
        Node node0 = Node.newString("b", 67, 67);
        Node node1 = new Node(100, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test393421() throws Throwable {
        Node node0 = new Node(9, 33, 2);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test394422() throws Throwable {
        Node node0 = new Node(11);
        boolean boolean0 = NodeUtil.isNumericResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test395423() throws Throwable {
        Node node0 = new Node(18, 18, 18);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test396424() throws Throwable {
        Node node0 = new Node(19);
        boolean boolean0 = NodeUtil.mayBeString(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test397425() throws Throwable {
        Node node0 = new Node(20);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test398426() throws Throwable {
        Node node0 = Node.newString((-1667), "Expected CALL node, got ");
        Node node1 = new Node(21, node0, 2, 12);
        boolean boolean0 = NodeUtil.mayBeString(node1, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test399427() throws Throwable {
        Node node0 = new Node(22);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test400428() throws Throwable {
        Node node0 = new Node(92);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        Node node1 = new Node(23, node0, node0);
        int int0 = NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test401429() throws Throwable {
        Node node0 = new Node(24, 730, 41);
        boolean boolean0 = NodeUtil.mayBeString(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test402430() throws Throwable {
        Node node0 = new Node(25, 25, 25);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test403431() throws Throwable {
        Node node0 = new Node(28);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test404432() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test405433() throws Throwable {
        Node node0 = Node.newNumber((-148.689299441848));
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test406434() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test407435() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.isNumericResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test408436() throws Throwable {
        Node node0 = new Node(12);
        Node node1 = new Node(21, node0, 2, 12);
        boolean boolean0 = NodeUtil.mayBeString(node1, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test409437() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 116, (-2996));
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test409438() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 116, (-2996));
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test410439() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-1), 16);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test410440() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-1), 16);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        node0.getLineno();
        assertEquals(0, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test411441() throws Throwable {
        Node node0 = new Node(13, 5, 2);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test412442() throws Throwable {
        Node node0 = Node.newString("b", 67, 67);
        Node node1 = new Node(14, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test413443() throws Throwable {
        Node node0 = new Node(15);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test414444() throws Throwable {
        Node node0 = new Node(16);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test415445() throws Throwable {
        Node node0 = new Node(18, 3194, 18);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test416446() throws Throwable {
        Node node0 = new Node(20);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test417447() throws Throwable {
        Node node0 = new Node((byte) (-111));
        Node node1 = new Node(22, node0, 30, 51);
        boolean boolean0 = NodeUtil.isBooleanResult(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test418448() throws Throwable {
        Node node0 = new Node(23, 23, 23);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test419449() throws Throwable {
        Node node0 = new Node(24, 33, 41);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test420450() throws Throwable {
        Node node0 = new Node(25, 25, 25);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test421451() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test422452() throws Throwable {
        Node node0 = new Node(27, 27, 27);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test423453() throws Throwable {
        Node node0 = new Node(28, 120, (-32));
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test424454() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test425455() throws Throwable {
        Node node0 = new Node(31, 4, 4);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test426456() throws Throwable {
        Node node0 = new Node(32, 32, 32);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test427457() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".;O`Slcy%_p3X", 127, 127);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test427458() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".;O`Slcy%_p3X", 127, 127);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test427459() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".;O`Slcy%_p3X", 127, 127);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test428460() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test429461() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        node0.setType(35);
        boolean boolean0 = NodeUtil.mayBeString(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test430462() throws Throwable {
        Node node0 = new Node(36);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test431463() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test432464() throws Throwable {
        Node node0 = Node.newNumber(1605.0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test433465() throws Throwable {
        Node node0 = new Node(41, 24, 24);
        boolean boolean0 = NodeUtil.mayBeString(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test434466() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test435467() throws Throwable {
        Node node0 = Node.newString(43, "est");
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test436468() throws Throwable {
        Node node0 = new Node(44, 21, 44);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test437469() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test438470() throws Throwable {
        Node node0 = new Node(47);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test439471() throws Throwable {
        Node node0 = new Node(48);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test440472() throws Throwable {
        Node node0 = new Node(49);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test441473() throws Throwable {
        Node node0 = new Node(50);
        boolean boolean0 = NodeUtil.mayBeString(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test442474() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test443475() throws Throwable {
        Node node0 = new Node(52, 52, 52);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test444476() throws Throwable {
        Node node0 = Node.newString(41, "&");
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test445477() throws Throwable {
        Node node0 = Node.newString("@pnfp");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayBeString(node1, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test446478() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test447479() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test448480() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test449481() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test450482() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test451483() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test452484() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(19);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test453485() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test454486() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test455487() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test456488() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test457489() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative((-1223));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test458490() throws Throwable {
        Node node0 = Node.newString("a%xzBsW;[eU/+=o;(");
        NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test459491() throws Throwable {
        Node node0 = new Node(97);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test460492() throws Throwable {
        Node node0 = Node.newString("0W7M,|qo%Z3!XKv4Ox", 125, 125);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test461493() throws Throwable {
        Node node0 = new Node(114, 114, (-30));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test462494() throws Throwable {
        Node node0 = new Node((byte) 105);
        Node node1 = new Node(51, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.referencesThis(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test463495() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.referencesThis(node0);
    }

    @Test(timeout = 4000)
    public void test464496() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test464497() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test464498() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        node0.hasOneChild();
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test464499() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test465500() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getChildCount();
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test465501() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test465502() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
    }

    @Test(timeout = 4000)
    public void test465503() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test465504() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getLineno();
        assertEquals(0, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test466505() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        Node node1 = NodeUtil.newVarNode("NaN", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test466506() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        Node node1 = NodeUtil.newVarNode("NaN", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        node0.hasChildren();
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test466507() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        Node node1 = NodeUtil.newVarNode("NaN", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        node1.getSourcePosition();
        assertEquals(0, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test467508() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "ptotfype", 98, 98);
        Node node1 = new Node(9, node0, 98, (-2091));
        node0.hasChildren();
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test467509() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "ptotfype", 98, 98);
        Node node1 = new Node(9, node0, 98, (-2091));
        NodeUtil.getAssignedValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test467510() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "ptotfype", 98, 98);
        Node node1 = new Node(9, node0, 98, (-2091));
        NodeUtil.getAssignedValue(node0);
        node0.getLineno();
        assertEquals(1, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test468511() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "javascript", "javascript");
        boolean boolean0 = NodeUtil.isString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test469512() throws Throwable {
        Node node0 = Node.newString("0W7M,|qo%Z3!XKv4Ox", 125, 125);
        boolean boolean0 = NodeUtil.isString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test470513() throws Throwable {
        Node node0 = new Node(114, 2009, 60);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test471514() throws Throwable {
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("jav3ascrupt", "jav3ascrupt");
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parse(jSSourceFile0);
        PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
        Node node1 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
        node1.hasMoreThanOneChild();
        assertTrue(node1.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test472515() throws Throwable {
        Node node0 = Node.newString(86, "UUAq%}");
        boolean boolean0 = NodeUtil.isAssign(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test473516() throws Throwable {
        Node node0 = new Node(18, 18, 18);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test474517() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "y46qHKv--EBMJ", (byte) 100, (-4417));
        Node node1 = new Node(7, node0, 88, 37);
        boolean boolean0 = NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test474518() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "y46qHKv--EBMJ", (byte) 100, (-4417));
        Node node1 = new Node(7, node0, 88, 37);
        boolean boolean0 = NodeUtil.isLValue(node0);
        node0.getCharno();
        assertEquals(0, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test474519() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "y46qHKv--EBMJ", (byte) 100, (-4417));
        Node node1 = new Node(7, node0, 88, 37);
        boolean boolean0 = NodeUtil.isLValue(node0);
        node0.hasChildren();
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test475520() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test476521() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        Node node1 = new Node(113, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test477522() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test478523() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertEquals(node0, node1);
    }

    @Test(timeout = 4000)
    public void test479524() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test480525() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test481526() throws Throwable {
        Compiler compiler0 = new Compiler();
        SyntheticAst syntheticAst0 = new SyntheticAst("Ds");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test482527() throws Throwable {
        Node node0 = new Node(3641, 3641, 3641);
        Node node1 = NodeUtil.newVarNode("{6\"[~", node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test482528() throws Throwable {
        Node node0 = new Node(3641, 3641, 3641);
        Node node1 = NodeUtil.newVarNode("{6\"[~", node0);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test482529() throws Throwable {
        Node node0 = new Node(3641, 3641, 3641);
        Node node1 = NodeUtil.newVarNode("{6\"[~", node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test482530() throws Throwable {
        Node node0 = new Node(3641, 3641, 3641);
        Node node1 = NodeUtil.newVarNode("{6\"[~", node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test483531() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("]@jJ\"*");
        Node node1 = NodeUtil.newFunctionNode("]@jJ\"*", stack0, node0, 4, 4);
        node1.getChildCount();
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test483532() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("]@jJ\"*");
        Node node1 = NodeUtil.newFunctionNode("]@jJ\"*", stack0, node0, 4, 4);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test483533() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("]@jJ\"*");
        Node node1 = NodeUtil.newFunctionNode("]@jJ\"*", stack0, node0, 4, 4);
        node1.getSourcePosition();
        assertEquals(0, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test483534() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("]@jJ\"*");
        Node node1 = NodeUtil.newFunctionNode("]@jJ\"*", stack0, node0, 4, 4);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test484535() throws Throwable {
        Node node0 = Node.newString((int) (byte) 77, "DS(-");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test485536() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test486537() throws Throwable {
        Node node0 = Node.newString((int) (byte) 110, "Na");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test487538() throws Throwable {
        Node node0 = new Node(46);
        Node node1 = new Node(113, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test488539() throws Throwable {
        Node node0 = Node.newString("pV)]$x~6m]Sm/91$pq");
        Node node1 = new Node(114, node0, 1, 40);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test489540() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test490541() throws Throwable {
        Node node0 = new Node(119, 1858, (-928));
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test491542() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test492543() throws Throwable {
        Node node0 = Node.newString(126, "%=", 36, (-3));
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test493544() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test494545() throws Throwable {
        Node node0 = Node.newString(64, "!/D@L+(SKYe`X8V", 64, 64);
        NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test495546() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test496547() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test497548() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test498549() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test499550() throws Throwable {
        Node node0 = Node.newString("pV)]$x~6m]Sm/91$pq");
        Node node1 = new Node(114, node0, 1, 40);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test500551() throws Throwable {
        Node node0 = new Node(119, 1858, (-939));
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test501552() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test502553() throws Throwable {
        Node node0 = new Node(115, 105, 105);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test503554() throws Throwable {
        Node node0 = new Node(114, 2009, 60);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test504555() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test505556() throws Throwable {
        Node node0 = Node.newString((int) (byte) 110, "NaN");
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test506557() throws Throwable {
        Node node0 = Node.newString((int) (byte) 110, "Na");
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test507558() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertEquals(node0, node1);
    }

    @Test(timeout = 4000)
    public void test508559() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test509560() throws Throwable {
        Node node0 = new Node(114, 114, (-30));
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test510561() throws Throwable {
        Node node0 = Node.newString((int) (byte) 77, "DS(-");
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test511562() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "===", "===");
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test511563() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "===", "===");
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test512564() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("c:NRJ2x+i}6+7");
        Node node0 = compiler0.parse(jSSourceFile0);
        boolean boolean0 = NodeUtil.isStatementParent(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test513565() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        Node node0 = compiler0.parseTestCode("");
        boolean boolean0 = NodeUtil.isStatementParent(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test514566() throws Throwable {
        Node node0 = Node.newString(111, "GRQ`7");
        Node node1 = new Node((-2), node0, (-1), 16);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test515567() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        Node node1 = new Node(15, node0, 114, 47);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test516568() throws Throwable {
        Node node0 = new Node(21);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test517569() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "infinity", (-4101), (-4101));
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test518570() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", 30, (-1349));
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test518571() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", 30, (-1349));
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test519572() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test520573() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test521574() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        node0.addChildToFront(node0);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test522575() throws Throwable {
        Node node0 = Node.newString(120, "^l");
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test523576() throws Throwable {
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("javascript");
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parse(jSSourceFile0);
        Node node1 = new Node((-5052), node0, 25, 0);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test524577() throws Throwable {
        Node node0 = Node.newString(63, "Xt,xC*ns_Pswj]");
        Node node1 = new Node(125, node0, 38, 27);
        NodeUtil.removeChild(node1, node0);
        node1.hasChildren();
        assertFalse(node1.hasChildren());
    }

    @Test(timeout = 4000)
    public void test524578() throws Throwable {
        Node node0 = Node.newString(63, "Xt,xC*ns_Pswj]");
        Node node1 = new Node(125, node0, 38, 27);
        NodeUtil.removeChild(node1, node0);
        node1.getChildCount();
        assertEquals(1, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test525579() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        Node node1 = NodeUtil.newVarNode("NaN", node0);
        NodeUtil.removeChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test526580() throws Throwable {
        Node node0 = Node.newString(147, "Unexpected const change.\n  name: ", 147, 147);
        NodeUtil.maybeAddFinally(node0);
    }

    @Test(timeout = 4000)
    public void test527581() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.maybeAddFinally(node0);
        node0.getChildCount();
        assertEquals(0, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test527582() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.maybeAddFinally(node0);
        node0.hasChildren();
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test528583() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test529584() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("=");
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test530585() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test531586() throws Throwable {
        Node node0 = new Node(127);
        NodeUtil.getArgumentForCallOrNew(node0, 28);
    }

    @Test(timeout = 4000)
    public void test532587() throws Throwable {
        Node node0 = new Node(35);
        boolean boolean0 = NodeUtil.isThis(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test533588() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "infinity", (byte) 105, (byte) 105);
        boolean boolean0 = NodeUtil.isArrayLiteral(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test533589() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "infinity", (byte) 105, (byte) 105);
        boolean boolean0 = NodeUtil.isArrayLiteral(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test534590() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.isArrayLiteral(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test535591() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test536592() throws Throwable {
        Node node0 = new Node(114, 114, (-30));
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test537593() throws Throwable {
        Node node0 = new Node((byte) 105);
        Node node1 = new Node(51, node0, node0, node0, node0);
        NodeUtil.isEmptyFunctionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test538594() throws Throwable {
        Node node0 = Node.newString("", (-2157), (-1731));
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test539595() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test540596() throws Throwable {
        Node node0 = NodeUtil.newVarNode("I%*6)5+TI", (Node) null);
    }

    @Test(timeout = 4000)
    public void test540597() throws Throwable {
        Node node0 = NodeUtil.newVarNode("I%*6)5+TI", (Node) null);
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test541598() throws Throwable {
        Node node0 = Node.newString("]@jJ\"*");
        NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test542599() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test543600() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("]@jJ\"*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "]@jJ\"*", node0);
        Node node2 = NodeUtil.newFunctionNode("]@jJ\"*", stack0, node1, 4, 4);
        node2.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test543601() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("]@jJ\"*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "]@jJ\"*", node0);
        Node node2 = NodeUtil.newFunctionNode("]@jJ\"*", stack0, node1, 4, 4);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test543602() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("]@jJ\"*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "]@jJ\"*", node0);
        Node node2 = NodeUtil.newFunctionNode("]@jJ\"*", stack0, node1, 4, 4);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test543603() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("]@jJ\"*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "]@jJ\"*", node0);
        Node node2 = NodeUtil.newFunctionNode("]@jJ\"*", stack0, node1, 4, 4);
        node2.getType();
        assertEquals(0, node2.getType());
    }

    @Test(timeout = 4000)
    public void test543604() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("]@jJ\"*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "]@jJ\"*", node0);
        Node node2 = NodeUtil.newFunctionNode("]@jJ\"*", stack0, node1, 4, 4);
        boolean boolean0 = NodeUtil.isLValue(node1);
    }

    @Test(timeout = 4000)
    public void test544605() throws Throwable {
        Node node0 = Node.newString(147, "Unexpected const change.\n  name: ", 147, 147);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test545606() throws Throwable {
        Node node0 = Node.newString("0W7M,|qo%Z3!XKv4Ox", 125, 125);
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test546607() throws Throwable {
        Node node0 = new Node(30);
        NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test547608() throws Throwable {
        Node node0 = Node.newString(147, "Unexpected const change.\n  name: ", 147, 147);
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test548609() throws Throwable {
        Node node0 = Node.newString(102, ">");
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
        assertNotNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test549610() throws Throwable {
        Node node0 = new Node(102);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNamedType(">", ".!lB_@F\"!", 1, 46);
        JSType jSType1 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType0);
        jSType1.isEnumType();
        assertFalse(jSType1.isEnumType());
    }

    @Test(timeout = 4000)
    public void test550611() throws Throwable {
        Node node0 = new Node(43, 29, 19);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test551612() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(9);
    }

    @Test(timeout = 4000)
    public void test552613() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(88);
    }

    @Test(timeout = 4000)
    public void test553614() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(10);
    }

    @Test(timeout = 4000)
    public void test554615() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(11);
    }

    @Test(timeout = 4000)
    public void test555616() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
    }

    @Test(timeout = 4000)
    public void test556617() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(13);
    }

    @Test(timeout = 4000)
    public void test557618() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(14);
    }

    @Test(timeout = 4000)
    public void test558619() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(15);
    }

    @Test(timeout = 4000)
    public void test559620() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(16);
    }

    @Test(timeout = 4000)
    public void test560621() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(17);
    }

    @Test(timeout = 4000)
    public void test561622() throws Throwable {
        String string0 = NodeUtil.opToStr(18);
    }

    @Test(timeout = 4000)
    public void test562623() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(19);
    }

    @Test(timeout = 4000)
    public void test563624() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
    }

    @Test(timeout = 4000)
    public void test564625() throws Throwable {
        String string0 = NodeUtil.opToStr(21);
    }

    @Test(timeout = 4000)
    public void test565626() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
    }

    @Test(timeout = 4000)
    public void test566627() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(23);
    }

    @Test(timeout = 4000)
    public void test567628() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
    }

    @Test(timeout = 4000)
    public void test568629() throws Throwable {
        String string0 = NodeUtil.opToStr(25);
    }

    @Test(timeout = 4000)
    public void test569630() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
    }

    @Test(timeout = 4000)
    public void test570631() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(27);
    }

    @Test(timeout = 4000)
    public void test571632() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
    }

    @Test(timeout = 4000)
    public void test572633() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(29);
    }

    @Test(timeout = 4000)
    public void test573634() throws Throwable {
        String string0 = NodeUtil.opToStr(30);
    }

    @Test(timeout = 4000)
    public void test574635() throws Throwable {
        NodeUtil.opToStrNoFail(31);
    }

    @Test(timeout = 4000)
    public void test575636() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(32);
    }

    @Test(timeout = 4000)
    public void test576637() throws Throwable {
        NodeUtil.opToStrNoFail(33);
    }

    @Test(timeout = 4000)
    public void test577638() throws Throwable {
        NodeUtil.opToStrNoFail(34);
    }

    @Test(timeout = 4000)
    public void test578639() throws Throwable {
        NodeUtil.opToStrNoFail(35);
    }

    @Test(timeout = 4000)
    public void test579640() throws Throwable {
        String string0 = NodeUtil.opToStr(36);
    }

    @Test(timeout = 4000)
    public void test580641() throws Throwable {
        String string0 = NodeUtil.opToStr(37);
    }

    @Test(timeout = 4000)
    public void test581642() throws Throwable {
        String string0 = NodeUtil.opToStr(38);
    }

    @Test(timeout = 4000)
    public void test582643() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
    }

    @Test(timeout = 4000)
    public void test583644() throws Throwable {
        NodeUtil.opToStrNoFail(40);
    }

    @Test(timeout = 4000)
    public void test584645() throws Throwable {
        String string0 = NodeUtil.opToStr(41);
    }

    @Test(timeout = 4000)
    public void test585646() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
    }

    @Test(timeout = 4000)
    public void test586647() throws Throwable {
        NodeUtil.opToStrNoFail(43);
    }

    @Test(timeout = 4000)
    public void test587648() throws Throwable {
        String string0 = NodeUtil.opToStr(44);
    }

    @Test(timeout = 4000)
    public void test588649() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(45);
    }

    @Test(timeout = 4000)
    public void test589650() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
    }

    @Test(timeout = 4000)
    public void test590651() throws Throwable {
        NodeUtil.opToStrNoFail(47);
    }

    @Test(timeout = 4000)
    public void test591652() throws Throwable {
        String string0 = NodeUtil.opToStr(48);
    }

    @Test(timeout = 4000)
    public void test592653() throws Throwable {
        NodeUtil.opToStrNoFail(49);
    }

    @Test(timeout = 4000)
    public void test593654() throws Throwable {
        NodeUtil.opToStrNoFail(50);
    }

    @Test(timeout = 4000)
    public void test594655() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(51);
    }

    @Test(timeout = 4000)
    public void test595656() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
    }

    @Test(timeout = 4000)
    public void test596657() throws Throwable {
        String string0 = NodeUtil.opToStr(53);
    }

    @Test(timeout = 4000)
    public void test597658() throws Throwable {
        NodeUtil.opToStrNoFail(54);
    }

    @Test(timeout = 4000)
    public void test598659() throws Throwable {
        String string0 = NodeUtil.opToStr(55);
    }

    @Test(timeout = 4000)
    public void test599660() throws Throwable {
        NodeUtil.opToStrNoFail(56);
    }

    @Test(timeout = 4000)
    public void test600661() throws Throwable {
        String string0 = NodeUtil.opToStr(57);
    }

    @Test(timeout = 4000)
    public void test601662() throws Throwable {
        String string0 = NodeUtil.opToStr(59);
    }

    @Test(timeout = 4000)
    public void test602663() throws Throwable {
        String string0 = NodeUtil.opToStr(60);
    }

    @Test(timeout = 4000)
    public void test603664() throws Throwable {
        NodeUtil.opToStrNoFail(61);
    }

    @Test(timeout = 4000)
    public void test604665() throws Throwable {
        NodeUtil.opToStrNoFail(62);
    }

    @Test(timeout = 4000)
    public void test605666() throws Throwable {
        NodeUtil.opToStrNoFail(63);
    }

    @Test(timeout = 4000)
    public void test606667() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
    }

    @Test(timeout = 4000)
    public void test607668() throws Throwable {
        String string0 = NodeUtil.opToStr(65);
    }

    @Test(timeout = 4000)
    public void test608669() throws Throwable {
        NodeUtil.opToStrNoFail(66);
    }

    @Test(timeout = 4000)
    public void test609670() throws Throwable {
        NodeUtil.opToStrNoFail(67);
    }

    @Test(timeout = 4000)
    public void test610671() throws Throwable {
        NodeUtil.opToStrNoFail(68);
    }

    @Test(timeout = 4000)
    public void test611672() throws Throwable {
        String string0 = NodeUtil.opToStr(71);
    }

    @Test(timeout = 4000)
    public void test612673() throws Throwable {
        String string0 = NodeUtil.opToStr(72);
    }

    @Test(timeout = 4000)
    public void test613674() throws Throwable {
        String string0 = NodeUtil.opToStr(73);
    }

    @Test(timeout = 4000)
    public void test614675() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
    }

    @Test(timeout = 4000)
    public void test615676() throws Throwable {
        NodeUtil.opToStrNoFail(75);
    }

    @Test(timeout = 4000)
    public void test616677() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
    }

    @Test(timeout = 4000)
    public void test617678() throws Throwable {
        String string0 = NodeUtil.opToStr(77);
    }

    @Test(timeout = 4000)
    public void test618679() throws Throwable {
        String string0 = NodeUtil.opToStr(78);
    }

    @Test(timeout = 4000)
    public void test619680() throws Throwable {
        String string0 = NodeUtil.opToStr(79);
    }

    @Test(timeout = 4000)
    public void test620681() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
    }

    @Test(timeout = 4000)
    public void test621682() throws Throwable {
        String string0 = NodeUtil.opToStr(81);
    }

    @Test(timeout = 4000)
    public void test622683() throws Throwable {
        String string0 = NodeUtil.opToStr(82);
    }

    @Test(timeout = 4000)
    public void test623684() throws Throwable {
        NodeUtil.opToStrNoFail((byte) 83);
    }

    @Test(timeout = 4000)
    public void test624685() throws Throwable {
        String string0 = NodeUtil.opToStr(84);
    }

    @Test(timeout = 4000)
    public void test625686() throws Throwable {
        NodeUtil.opToStrNoFail(85);
    }

    @Test(timeout = 4000)
    public void test626687() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(86);
    }

    @Test(timeout = 4000)
    public void test627688() throws Throwable {
        String string0 = NodeUtil.opToStr(87);
    }

    @Test(timeout = 4000)
    public void test628689() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
    }

    @Test(timeout = 4000)
    public void test629690() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
    }

    @Test(timeout = 4000)
    public void test630691() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
    }

    @Test(timeout = 4000)
    public void test631692() throws Throwable {
        String string0 = NodeUtil.opToStr(92);
    }

    @Test(timeout = 4000)
    public void test632693() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(94);
    }

    @Test(timeout = 4000)
    public void test633694() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(95);
    }

    @Test(timeout = 4000)
    public void test634695() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(96);
    }

    @Test(timeout = 4000)
    public void test635696() throws Throwable {
        String string0 = NodeUtil.opToStr(97);
    }

    @Test(timeout = 4000)
    public void test636697() throws Throwable {
        NodeUtil.opToStrNoFail(98);
    }

    @Test(timeout = 4000)
    public void test637698() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
    }

    @Test(timeout = 4000)
    public void test638699() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
    }

    @Test(timeout = 4000)
    public void test639700() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
    }

    @Test(timeout = 4000)
    public void test640701() throws Throwable {
        String string0 = NodeUtil.opToStr(102);
    }

    @Test(timeout = 4000)
    public void test641702() throws Throwable {
        String string0 = NodeUtil.opToStr(103);
    }

    @Test(timeout = 4000)
    public void test642703() throws Throwable {
        String string0 = NodeUtil.opToStr(104);
    }

    @Test(timeout = 4000)
    public void test643704() throws Throwable {
        String string0 = NodeUtil.opToStr(105);
    }

    @Test(timeout = 4000)
    public void test644705() throws Throwable {
        String string0 = NodeUtil.opToStr(106);
    }

    @Test(timeout = 4000)
    public void test645706() throws Throwable {
        NodeUtil.opToStrNoFail(107);
    }

    @Test(timeout = 4000)
    public void test646707() throws Throwable {
        NodeUtil.opToStrNoFail(108);
    }

    @Test(timeout = 4000)
    public void test647708() throws Throwable {
        String string0 = NodeUtil.opToStr(109);
    }

    @Test(timeout = 4000)
    public void test648709() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
    }

    @Test(timeout = 4000)
    public void test649710() throws Throwable {
        NodeUtil.opToStrNoFail(111);
    }

    @Test(timeout = 4000)
    public void test650711() throws Throwable {
        NodeUtil.opToStrNoFail(112);
    }

    @Test(timeout = 4000)
    public void test651712() throws Throwable {
        String string0 = NodeUtil.opToStr(113);
    }

    @Test(timeout = 4000)
    public void test652713() throws Throwable {
        NodeUtil.opToStrNoFail(114);
    }

    @Test(timeout = 4000)
    public void test653714() throws Throwable {
        NodeUtil.opToStrNoFail(115);
    }

    @Test(timeout = 4000)
    public void test654715() throws Throwable {
        NodeUtil.opToStrNoFail(116);
    }

    @Test(timeout = 4000)
    public void test655716() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
    }

    @Test(timeout = 4000)
    public void test656717() throws Throwable {
        NodeUtil.opToStrNoFail(118);
    }

    @Test(timeout = 4000)
    public void test657718() throws Throwable {
        NodeUtil.opToStrNoFail(119);
    }

    @Test(timeout = 4000)
    public void test658719() throws Throwable {
        String string0 = NodeUtil.opToStr(120);
    }

    @Test(timeout = 4000)
    public void test659720() throws Throwable {
        NodeUtil.opToStrNoFail(121);
    }

    @Test(timeout = 4000)
    public void test660721() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(122);
    }

    @Test(timeout = 4000)
    public void test661722() throws Throwable {
        NodeUtil.opToStrNoFail((-1382));
    }

    @Test(timeout = 4000)
    public void test662723() throws Throwable {
        Node node0 = new Node(113);
        NodeUtil.copyNameAnnotations(node0, node0);
    }

    @Test(timeout = 4000)
    public void test663724() throws Throwable {
        Node node0 = NodeUtil.newVarNode("+", (Node) null);
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node0;
        Node node1 = new Node(8, nodeArray0);
        NodeUtil.redeclareVarsInsideBranch(node0);
    }

    @Test(timeout = 4000)
    public void test664725() throws Throwable {
        Node node0 = new Node(73);
        Stack<Node> stack0 = new Stack<Node>();
        stack0.add(node0);
        NodeUtil.newFunctionNode("=", stack0, node0, 40, (-1537));
    }

    @Test(timeout = 4000)
    public void test665726() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test665727() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.getSourcePosition();
        assertEquals(1, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test665728() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.hasChildren();
        assertFalse(node1.hasChildren());
    }

    @Test(timeout = 4000)
    public void test665729() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.hasMoreThanOneChild();
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test665730() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1877, 1877);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getType();
        assertEquals(1, node0.getType());
    }

    @Test(timeout = 4000)
    public void test666731() throws Throwable {
        Node node0 = Node.newString(41, "&");
        NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test667732() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.newName(googleCodingConvention0, "X", (Node) null, "Unexpected node type:");
    }

    @Test(timeout = 4000)
    public void test668733() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("google");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test669734() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("hK~feU-.rEMv<ZTc;(");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test670735() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("in");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test671736() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "pototfype", 127, 127);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test671737() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "pototfype", 127, 127);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getLineno();
        assertEquals(1, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test672738() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "javascript", "javascript");
        NodeUtil.redeclareVarsInsideBranch(node0);
    }

    @Test(timeout = 4000)
    public void test673739() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Zio!X(b^2}~s", (-1), (-1));
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test674740() throws Throwable {
        Node node0 = new Node(26);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test675741() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("y|Ld16VPwWb");
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "y|Ld16VPwWb");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test676742() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.referencesThis(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test677743() throws Throwable {
        Node node0 = Node.newNumber(1605.0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test678744() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        Node node1 = NodeUtil.newVarNode("google", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
    }

    @Test(timeout = 4000)
    public void test678745() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        Node node1 = NodeUtil.newVarNode("google", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
        node1.getSourcePosition();
        assertEquals(0, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test679746() throws Throwable {
        Node node0 = new Node((byte) 105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test680747() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "y46qHKv--EBMJ", (byte) 100, (-4417));
        Node node1 = new Node(7, node0, 88, 37);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        node0.hasChildren();
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test680748() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "y46qHKv--EBMJ", (byte) 100, (-4417));
        Node node1 = new Node(7, node0, 88, 37);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test680749() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "y46qHKv--EBMJ", (byte) 100, (-4417));
        Node node1 = new Node(7, node0, 88, 37);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test681750() throws Throwable {
        Node node0 = Node.newString(97, "gq+GBjO");
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        Node node1 = new Node(27, node0, node0);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        boolean boolean0 = NodeUtil.has(node1, nodeUtil_MayBeStringResultPredicate0, predicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test682751() throws Throwable {
        Node node0 = new Node(98);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        int int0 = NodeUtil.getCount(node0, sourceMap_DetailLevel0, nodeUtil_BooleanResultPredicate0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test684752() throws Throwable {
        Node node0 = Node.newString(95, "UUAq*]");
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test685753() throws Throwable {
        Node node0 = new Node(73);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node1 = NodeUtil.newVarNode("void", node0);
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test686754() throws Throwable {
        Node node0 = new Node(84);
        NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test687755() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test688756() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test689757() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test690758() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("%p");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test691759() throws Throwable {
        Node node0 = new Node((byte) 16);
        NodeUtil.getFunctionParameters(node0);
    }

    @Test(timeout = 4000)
    public void test692760() throws Throwable {
        Node node0 = new Node((byte) 105, (byte) 105, (byte) 105);
        NodeUtil.getFunctionParameters(node0);
    }

    @Test(timeout = 4000)
    public void test693761() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test694762() throws Throwable {
        Node node0 = new Node(75, 75, 75);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test695763() throws Throwable {
        Node node0 = new Node(33, 59, 59);
        node0.addSuppression("di6!c");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        jSDocInfo0.getLicense();
    }

    @Test(timeout = 4000)
    public void test696764() throws Throwable {
        Node node0 = new Node(55);
        Node node1 = new Node(55, node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test697765() throws Throwable {
        Node node0 = new Node(115, 105, 105);
        NodeUtil.getFunctionJSDocInfo(node0);
    }

    @Test(timeout = 4000)
    public void test698766() throws Throwable {
        Node node0 = new Node((byte) 105);
        NodeUtil.getFunctionJSDocInfo(node0);
    }

    @Test(timeout = 4000)
    public void test699767() throws Throwable {
        Node node0 = new Node((byte) 105);
        Node node1 = new Node(15, node0, node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getFunctionJSDocInfo(node0);
    }

    @Test(timeout = 4000)
    public void test700768() throws Throwable {
        Node node0 = new Node(46);
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test701769() throws Throwable {
        Node node0 = new Node(33, 59, 59);
        NodeUtil.newCallNode(node0, (Node[]) null);
    }

    @Test(timeout = 4000)
    public void test702770() throws Throwable {
        Node node0 = new Node(37);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        node1.hasOneChild();
        assertTrue(node1.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test702771() throws Throwable {
        Node node0 = new Node(37);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test703772() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node[] nodeArray0 = new Node[3];
        NodeUtil.newCallNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test704773() throws Throwable {
        Node node0 = new Node(31);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test705774() throws Throwable {
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        Node node0 = Node.newString(32, "pV)]$x~6m]Sm/91$pq");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test706775() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        Node node1 = new Node(35, node0, 39, 4095);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(17);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test707776() throws Throwable {
        Node node0 = new Node(36, 36, 36);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test708777() throws Throwable {
        Node node0 = new Node(42, 13, 42);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test709778() throws Throwable {
        Node node0 = new Node(45);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test710779() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test711780() throws Throwable {
        Node node0 = new Node(47);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test712781() throws Throwable {
        Node node0 = new Node(48, 48, 2530);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test713782() throws Throwable {
        Node node0 = new Node(49);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test714783() throws Throwable {
        Node node0 = new Node(50);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test715784() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test716785() throws Throwable {
        Node node0 = new Node(53, 53, 52);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test717786() throws Throwable {
        Node node0 = new Node(55);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test718787() throws Throwable {
        Node node0 = new Node(56);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test719788() throws Throwable {
        Node node0 = new Node(58);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test720789() throws Throwable {
        Node node0 = new Node(63);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test721790() throws Throwable {
        Node node0 = new Node(64);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test722791() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test723792() throws Throwable {
        Node node0 = Node.newString("8u^!EG#/3dG0", 41, (-2241));
        Node node1 = new Node(69, node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test724793() throws Throwable {
        Node node0 = Node.newString(70, "arguments");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test725794() throws Throwable {
        Node node0 = new Node(71);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test726795() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(536870912);
        Node node0 = new Node(72, 536870912, 72);
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test727796() throws Throwable {
        Node node0 = new Node(73);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test728797() throws Throwable {
        Node node0 = new Node(75);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test729798() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test730799() throws Throwable {
        Node node0 = new Node(79, 79, 79);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test731800() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test732801() throws Throwable {
        Node node0 = new Node(82);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test733802() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test734803() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test735804() throws Throwable {
        Node node0 = new Node(87);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test736805() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test737806() throws Throwable {
        Node node0 = new Node(89, (-695), 41);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test738807() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test739808() throws Throwable {
        Node node0 = new Node(91);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test740809() throws Throwable {
        Node node0 = new Node(92, 916, 92);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test741810() throws Throwable {
        Node node0 = new Node(93);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test742811() throws Throwable {
        Node node0 = new Node(94);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test743812() throws Throwable {
        Node node0 = new Node(95);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test744813() throws Throwable {
        Node node0 = new Node(96);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test745814() throws Throwable {
        Node node0 = new Node(97);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test746815() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test747816() throws Throwable {
        Node node0 = new Node(99);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test748817() throws Throwable {
        Node node0 = new Node(101, 101, 117);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test749818() throws Throwable {
        Node node0 = new Node(102);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test750819() throws Throwable {
        Node node0 = Node.newString(103, "1xu$?x^(vY");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test751820() throws Throwable {
        Node node0 = new Node((byte) 105, (byte) 105, (byte) 105);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test752821() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        Node node1 = new Node(27);
        node0.addChildrenToBack(node1);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test753822() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2192));
        Node node0 = Node.newString("", (-2192), (-1720));
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test754823() throws Throwable {
        Node node0 = new Node(30);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }
}
