project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""ul2>|E*M!Z&&"");
    // Undeclared exception!
    try {
        compiler0.toSource(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    Node node0 = new Node((-53));
    // Undeclared exception!
    try {
        compiler0.toSource(compiler_CodeBuilder0, (-53), node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""b`(r|;PI"");
    // Undeclared exception!
    try {
        compiler0.toSourceArray(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.normalize();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypePrefixes);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test108,"public void test108() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""r@tfHZG; $d6"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    JSSourceFile[] jSSourceFileArray1 = new JSSourceFile[2];
    jSSourceFileArray1[0] = jSSourceFile0;
    jSSourceFileArray1[1] = jSSourceFile0;
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray1, compilerOptions0);
    compiler0.parse();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test109,"public void test109() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""r@tfHZG; $d6"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    JSSourceFile[] jSSourceFileArray1 = new JSSourceFile[2];
    jSSourceFileArray1[0] = jSSourceFile0;
    jSSourceFileArray1[1] = jSSourceFile0;
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray1, compilerOptions0);
    compiler0.parse();
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test1211,"public void test1211() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test1312,"public void test1312() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""7}"", ""7}"");
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(1, compiler0.getErrorCount())"
project,0,test1613,"public void test1613() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    ScopeCreator scopeCreator0 = compiler0.getScopeCreator();
    assertNull(scopeCreator0);
}",0,assertNotNull(scopeCreator0)
project,0,test1714,"public void test1714() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test1815,"public void test1815() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.precheck();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1916,"public void test1916() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2017,"public void test2017() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.isNormalized();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2118,"public void test2118() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getPropertyMap();
    assertNull(variableMap0);
}",0,
project,0,test2219,"public void test2219() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseSyntheticCode((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2320,"public void test2320() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}",0,
project,0,test2421,"public void test2421() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.optimize();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test2622,"public void test2622() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2723,"public void test2723() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getWarningCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2824,"public void test2824() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getVariableMap();
    assertNull(variableMap0);
}",0,assertNotNull(variableMap0)
project,0,test2925,"public void test2925() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    assertNull(functionInformationMap0);
}",0,assertNotNull(functionInformationMap0)
project,0,test3026,"public void test3026() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    assertNotNull(supplier0);
}",0,assertNotNull(supplier0)
project,0,test3127,"public void test3127() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3228,"public void test3228() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource((Node) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Cannot build without root node being specified
        //
        verifyException(""com.google.javascript.jscomp.CodePrinter$Builder"", e);
    }
}",0,
project,0,test3329,"public void test3329() throws Throwable {
    Compiler compiler0 = new Compiler();
    SourceMap sourceMap0 = compiler0.getSourceMap();
    assertNull(sourceMap0);
}",0,
project,0,test3430,"public void test3430() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3531,"public void test3531() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.getRoot();
    assertNull(node0);
}",0,
project,0,test3732,"public void test3732() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test3833,"public void test3833() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""r@t<HZG;!$d6"", ""}s"");
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, (JSModule[]) null, (CompilerOptions) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3934,"public void test3934() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test4035,"public void test4035() throws Throwable {
    Compiler compiler0 = new Compiler();
    Scope scope0 = compiler0.getTopScope();
    assertNull(scope0);
}",0,assertNotNull(scope0)
project,0,test4540,"public void test4540() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.acquireSymbolTable();
    // Undeclared exception!
    try {
        compiler0.acquireSymbolTable();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // SymbolTable already acquired
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test4641,"public void test4641() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""value"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    compiler0.initCompilerOptionsIfTesting();
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test4742,"public void test4742() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = ""M,a8X>)j8"";
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""Creating extern file for exports"", (Charset) null);
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test4843,"public void test4843() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    JSModule[] jSModuleArray0 = new JSModule[0];
    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test4944,"public void test4944() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""u?>t]k"");
    JSModule jSModule0 = new JSModule(""u?>t]k"");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("""", ""_?.u)>y!P&@MZ"");
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    CompilerInput compilerInput0 = new CompilerInput(jsAst0);
    jSModule0.addFirst(compilerInput0);
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
    JSModule[] jSModuleArray0 = new JSModule[7];
    jSModuleArray0[0] = jSModule0;
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.JsAst"", e);
    }
}",0,
project,0,test5045,"public void test5045() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSModule jSModule0 = new JSModule((String) null);
    JSModule[] jSModuleArray0 = new JSModule[1];
    jSModuleArray0[0] = jSModule0;
    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test5146,"public void test5146() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""u?>t]k"");
    JSModule jSModule0 = new JSModule(""u?>t]k"");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("""", ""_?.u)>y!P&@MZ"");
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    CompilerInput compilerInput0 = new CompilerInput(jsAst0);
    jSModule0.addFirst(compilerInput0);
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
    jSSourceFileArray0[0] = jSSourceFile0;
    jSSourceFileArray0[1] = jSSourceFile0;
    jSSourceFileArray0[2] = jSSourceFile0;
    jSSourceFileArray0[3] = jSSourceFile0;
    jSSourceFileArray0[4] = jSSourceFile0;
    JSModule[] jSModuleArray0 = new JSModule[7];
    jSModuleArray0[0] = jSModule0;
    jSModuleArray0[1] = jSModule0;
    jSModuleArray0[2] = jSModule0;
    jSModuleArray0[3] = jSModule0;
    jSModuleArray0[4] = jSModule0;
    jSModuleArray0[5] = jSModule0;
    jSModuleArray0[6] = jSModule0;
    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    assertEquals(3, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test5247,"public void test5247() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSModule jSModule0 = new JSModule((String) null);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""]!eUC4{EZ4o"", (String) null);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    CompilerInput compilerInput0 = new CompilerInput(jsAst0);
    jSModule0.addFirst(compilerInput0);
    JSModule[] jSModuleArray0 = new JSModule[1];
    jSModuleArray0[0] = jSModule0;
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // org.evosuite.runtime.mock.java.lang.MockThrowable: FAILED ASSERTION
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test5348,"public void test5348() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    JSModule[] jSModuleArray0 = new JSModule[0];
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test5549,"public void test5549() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.getPassConfig();
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test5650,"public void test5650() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.check();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test5751,"public void test5751() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    compiler0.startPass((String) null);
    // Undeclared exception!
    try {
        compiler0.startPass((String) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test5852,"public void test5852() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test5953,"public void test5953() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.reportCodeChange();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.parse();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test6054,"public void test6054() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertTrue(result0.success);
}",0,
project,0,test6155,"public void test6155() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.common.collect.Iterators$3"");
    boolean boolean0 = compiler0.areNodesEqualForInlining(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test6256,"public void test6256() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    CompilerInput compilerInput0 = compiler0.newExternInput((String) null);
    assertTrue(compilerInput0.isExtern());
}",0,assertTrue(compilerInput0.isExtern())
project,0,test6357,"public void test6357() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[4];
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""// Input %num%"", (String) null);
    jSSourceFileArray0[0] = jSSourceFile0;
    JSSourceFile jSSourceFile1 = JSSourceFile.fromCode((String) null, (String) null);
    jSSourceFileArray0[1] = jSSourceFile1;
    jSSourceFileArray0[2] = jSSourceFile0;
    jSSourceFileArray0[3] = jSSourceFileArray0[2];
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.newExternInput((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Conflicting externs name: null
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test6458,"public void test6458() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""u?>t]k"", ""'?0l.vA$cU?Vki&K"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input of name u?>t]k
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test6559,"public void test6559() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    SourceFile sourceFile0 = SourceFile.fromCode((String) null, """");
    JsAst jsAst0 = new JsAst(sourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test6660,"public void test6660() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
    assertSame(reverseAbstractInterpreter1, reverseAbstractInterpreter0);
}",0,
project,0,test6761,"public void test6761() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    compiler0.parse();
    assertFalse(compiler0.isIdeMode());
}",0,assertTrue(compiler0.isIdeMode())
project,0,test6862,"public void test6862() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""Creating extern file for exports"", (Charset) null);
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parse();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test7468,"public void test7468() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    PropertyRenamingPolicy propertyRenamingPolicy0 = PropertyRenamingPolicy.HEURISTIC;
    compilerOptions0.propertyRenaming = propertyRenamingPolicy0;
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    boolean boolean0 = compiler0.isInliningForbidden();
    assertTrue(boolean0);
}",0,
project,0,test7569,"public void test7569() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test7670,"public void test7670() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""com.google.common.collect.Iterators$3"");
    Node node0 = compiler0.parseTestCode(""com.google.common.collect.Iterators$3"");
    assertEquals(0, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test7771,"public void test7771() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    JSError jSError0 = JSError.make((String) null, (-1305), (-1305), compilerOptions0.checkMethods, compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);
    compiler0.report(jSError0);
    assertFalse(compiler0.isIdeMode());
}",0,assertTrue(compiler0.isIdeMode())
project,0,test7872,"public void test7872() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""Duplicate input: {0}"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Duplicate input: {0}
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test7973,"public void test7973() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    compilerOptions0.ideMode = true;
    Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertTrue(result0.success);
}",0,
project,0,test8074,"public void test8074() throws Throwable {
    Compiler compiler0 = new Compiler();
    Region region0 = compiler0.getSourceRegion(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/Recording function information/Recording function information"", (-1645));
    assertNull(region0);
}",0,assertNotNull(region0)
project,0,test8175,"public void test8175() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    Region region0 = compiler0.getSourceRegion("""", 301);
    assertNull(region0);
}",0,
project,0,test8276,"public void test8276() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(sourceFile_Generator0).getCode();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
    jSSourceFileArray0[0] = jSSourceFile0;
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getSourceRegion((String) null, 7);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.SourceFile"", e);
    }
}",0,
project,0,test8377,"public void test8377() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test8478,"public void test8478() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("""", (Charset) null);
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    jSSourceFileArray0[0] = jSSourceFile0;
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    compiler0.getNodeForCodeInsertion((JSModule) null);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test8579,"public void test8579() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test8680,"public void test8680() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""n"");
    jSModule0.addFirst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test8781,"public void test8781() throws Throwable {
    Compiler compiler0 = new Compiler();
    String string0 = compiler0.getAstDotGraph();
    assertEquals("""", string0);
}",0,
project,0,test8882,"public void test8882() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    String string0 = compiler0.getAstDotGraph();
    assertEquals(""digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\""BLOCK\""];\n  node0 -> RETURN [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n}\n"", string0);
}",0,
project,0,test8983,"public void test8983() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertEquals(0, errorManager0.getWarningCount());
}",0,"assertEquals(0, errorManager0.getWarningCount())"
