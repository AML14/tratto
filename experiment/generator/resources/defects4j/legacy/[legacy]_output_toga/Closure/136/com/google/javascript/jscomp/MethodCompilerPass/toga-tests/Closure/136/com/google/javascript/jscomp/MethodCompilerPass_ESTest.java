/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 06:35:22 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.InlineGetters;
import com.google.javascript.jscomp.MethodCheck;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MethodCompilerPass_ESTest extends MethodCompilerPass_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        InlineGetters inlineGetters0 = new InlineGetters((AbstractCompiler) null);
        inlineGetters0.process((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Node node0 = Node.newString("ZpO4AG}P3");
        Node node1 = new Node(64, node0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Vector<JSType> vector0 = new Vector<JSType>();
        Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
        node1.addChildAfter(node2, node0);
        Node node3 = new Node(0, node1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        MethodCheck methodCheck0 = new MethodCheck((AbstractCompiler) null, checkLevel0);
        methodCheck0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.javvcript.rhinp.jstypeTS=bpleSlot", "com.google.javvcript.rhinp.jstypeTS=bpleSlot");
        CheckLevel checkLevel0 = CheckLevel.OFF;
        MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);
        Node node1 = new Node(2, node0);
        methodCheck0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Node node0 = new Node((-963));
        Node node1 = new Node(45);
        Node node2 = new Node(35, node0, node1, 19, 12);
        Node node3 = new Node(12, node2);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        MethodCheck methodCheck0 = new MethodCheck((AbstractCompiler) null, checkLevel0);
        methodCheck0.process(node2, node0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);
        Node node0 = compiler0.parseSyntheticCode("com.google.java=cript.jscomp.MethodCompilerPass$GatherSignatures", "com.google.java=cript.jscomp.MethodCompilerPass$GatherSignatures");
        Node node1 = new Node((-1719484454), node0);
        methodCheck0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Node node0 = new Node(64);
        Node node1 = new Node(64, node0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Vector<JSType> vector0 = new Vector<JSType>();
        Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
        node1.addChildAfter(node2, node0);
        Node node3 = new Node(0, node1);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        MethodCheck methodCheck0 = new MethodCheck((AbstractCompiler) null, checkLevel0);
        methodCheck0.process(node1, node1);
    }
}
