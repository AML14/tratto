project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""qnH@O@Rg"";
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    commandLineRunner0.initOptionsFromFlags(compilerOptions0);
    assertFalse(compilerOptions0.inlineLocalVariables);
}",0,
project,0,test011,"public void test011() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""qnH@O@Rg"";
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    Compiler compiler0 = commandLineRunner0.getCompiler();
    assertNull(compiler0);
}",0,assertNotNull(compiler0)
project,0,test022,"public void test022() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    try {
        commandLineRunner0.createJsModules(list0, list0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Expected 2-4 colon-delimited parts in module spec: java.class
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",1,
project,0,test077,"public void test077() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = "" from module "";
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    commandLineRunner0.setRunOptions(compilerOptions0);
    assertFalse(compilerOptions0.ideMode);
}",1,
project,0,test088,"public void test088() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""NU(TMkCa"");
    linkedList0.add(jSSourceFile0);
    Supplier<List<JSSourceFile>> supplier0 = (Supplier<List<JSSourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
    doReturn(linkedList0, linkedList0).when(supplier0).get();
    commandLineRunner0.enableTestMode(supplier0, supplier0, (Supplier<List<JSModule>>) null, (Function<Integer, Boolean>) null);
    // Undeclared exception!
    try {
        commandLineRunner0.run();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    String[] stringArray0 = new String[0];
    ArrayList<String> arrayList0 = new ArrayList<String>();
    arrayList0.add(""-"");
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    try {
        commandLineRunner0.createInputs(arrayList0, false);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Can't specify stdin.
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",1,
project,0,test1212,"public void test1212() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    Supplier<List<JSModule>> supplier0 = (Supplier<List<JSModule>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(supplier0).get();
    Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
    commandLineRunner0.enableTestMode((Supplier<List<JSSourceFile>>) null, (Supplier<List<JSSourceFile>>) null, supplier0, function0);
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    List<JSModule> list1 = commandLineRunner0.createJsModules(list0, list0);
    assertNull(list1);
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    // Undeclared exception!
    try {
        commandLineRunner0.createJsModules((List<String>) null, (List<String>) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    LinkedList<String> linkedList0 = new LinkedList<String>();
    // Undeclared exception!
    try {
        commandLineRunner0.createJsModules(linkedList0, linkedList0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    String[] stringArray0 = new String[0];
    JSModule jSModule0 = new JSModule(""}QEjGXC2%_l"");
    List<String> list0 = jSModule0.getProvides();
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    // Undeclared exception!
    try {
        commandLineRunner0.createJsModules(list0, (List<String>) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    String[] stringArray0 = new String[0];
    ArrayList<String> arrayList0 = new ArrayList<String>();
    arrayList0.add(""Z:c_lk|)="");
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    try {
        commandLineRunner0.createJsModules(arrayList0, arrayList0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Invalid js file count 'c_lk|)=' for module: Z
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",1,
project,0,test1717,"public void test1717() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    try {
        commandLineRunner0.checkModuleName("">"");
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Invalid module name: '>'
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",1,
project,0,test1818,"public void test1818() throws Throwable {
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, linkedList0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test1919,"public void test1919() throws Throwable {
    String[] stringArray0 = new String[0];
    JSError[] jSErrorArray0 = new JSError[0];
    MockPrintStream mockPrintStream0 = new MockPrintStream(""j|A,z]Ypxx4pY(+Ur1W"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    Result result0 = new Result(jSErrorArray0, jSErrorArray0, ""j|A,z]Ypxx4pY(+Ur1W"", (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, ""j|A,z]Ypxx4pY(+Ur1W"");
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    CompilerOptions compilerOptions0 = compiler0.options;
    // Undeclared exception!
    try {
        commandLineRunner0.processResults(result0, linkedList0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    JSModule jSModule0 = new JSModule(""XhKqF;P[:N"");
    List<String> list0 = jSModule0.getProvides();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    linkedList0.add(jSModule0);
    try {
        AbstractCommandLineRunner.parseModuleWrappers(list0, linkedList0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unknown module: 'XhKqF;P['
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",1,
project,0,test2121,"public void test2121() throws Throwable {
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    try {
        AbstractCommandLineRunner.parseModuleWrappers(list0, linkedList0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Expected module wrapper to have <name>:<wrapper> format: java.class
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",1,
project,0,test2222,"public void test2222() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.writeOutput((Appendable) null, compiler0, (String) null, """", ""// Input %num%"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    JSError[] jSErrorArray0 = new JSError[0];
    MockPrintStream mockPrintStream0 = new MockPrintStream(""j|A,z]Ypxx4pY(+Ur1W"");
    Result result0 = new Result(jSErrorArray0, jSErrorArray0, ""kYt7=&y0K/?[6b#sx"", (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, ""{ "");
    String[] stringArray0 = new String[9];
    stringArray0[0] = ""{ "";
    stringArray0[1] = ""{ "";
    stringArray0[2] = ""j|A,z]Ypxx4pY(+Ur1W"";
    stringArray0[3] = ""j|A,z]Ypxx4pY(+Ur1W"";
    stringArray0[4] = ""kYt7=&y0K/?[6b#sx"";
    stringArray0[5] = ""j|A,z]Ypxx4pY(+Ur1W"";
    stringArray0[6] = ""{ "";
    stringArray0[7] = ""{ "";
    stringArray0[8] = ""{ "";
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    int int0 = commandLineRunner0.processResults(result0, linkedList0, compilerOptions0);
    assertEquals(0, int0);
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);
    Supplier<List<JSSourceFile>> supplier0 = (Supplier<List<JSSourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null, (Object) null).when(supplier0).get();
    commandLineRunner0.enableTestMode(supplier0, supplier0, (Supplier<List<JSModule>>) null, (Function<Integer, Boolean>) null);
    // Undeclared exception!
    try {
        commandLineRunner0.run();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    String string0 = commandLineRunner0.expandManifest((JSModule) null);
    assertNull(string0);
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream(""VwmI67V5f11$l"");
    assertNotNull(outputStream0);
}",0,assertNotNull(outputStream0)
project,0,test2929,"public void test2929() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream((String) null);
    assertNull(outputStream0);
}",0,assertNotNull(outputStream0)
project,0,test3030,"public void test3030() throws Throwable {
    ArrayList<String> arrayList0 = new ArrayList<String>();
    arrayList0.add("""");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // --define flag syntax invalid:
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    ArrayList<String> arrayList0 = new ArrayList<String>();
    arrayList0.add(""7m=$i4^t"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // --tweak flag syntax invalid: 7m=$i4^t
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    String[] stringArray0 = new String[0];
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    AbstractCommandLineRunner.createDefineOrTweakReplacements(list0, compilerOptions0, true);
    assertFalse(compilerOptions0.gatherCssNames);
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    CompilerOptions compilerOptions0 = new CompilerOptions();
    AbstractCommandLineRunner.createDefineOrTweakReplacements(list0, compilerOptions0, false);
    assertFalse(compilerOptions0.checkCaja);
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    ArrayList<String> arrayList0 = new ArrayList<String>();
    arrayList0.add(""Z:c_lk|)="");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // --define flag syntax invalid: Z:c_lk|)=
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    JSModule jSModule0 = new JSModule(""Xh7KqF;c[:N"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(""Xh7KqF;c[:N"");
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""Xh7KqF;c[:N"";
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
    JSModule jSModule1 = new JSModule(""?RJ]oX"");
    JSModule[] jSModuleArray0 = new JSModule[5];
    jSModuleArray0[0] = jSModule1;
    jSModuleArray0[1] = jSModule0;
    jSModuleArray0[2] = jSModule1;
    jSModuleArray0[3] = jSModule0;
    jSModuleArray0[4] = jSModule1;
    JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
    commandLineRunner0.printModuleGraphManifestTo(jSModuleGraph0, mockPrintStream0);
    assertFalse(commandLineRunner0.shouldRunCompiler());
}",0,
project,0,test3636,"public void test3636() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""8N<21uc"");
    JSModule jSModule0 = new JSModule(""8N<21uc"");
    JSModule[] jSModuleArray0 = new JSModule[3];
    jSModuleArray0[0] = jSModule0;
    jSModuleArray0[1] = jSModule0;
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""8N<21uc"");
    jSModule0.addFirst(jSSourceFile0);
    jSModuleArray0[2] = jSModule0;
    JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
    commandLineRunner0.printModuleGraphManifestTo(jSModuleGraph0, mockPrintStream0);
    assertTrue(commandLineRunner0.shouldRunCompiler());
}",0,assertTrue(commandLineRunner0.shouldRunCompiler())
