/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 02:45:13 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionRewriter_ESTest extends FunctionRewriter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function JSCompiler_emptyFn() {  return function() {}}");
        FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
        functionRewriter0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function JSCompiler_identityF() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
        compiler0.parseSyntheticCode("X|w!wX<\t~G&LpgmSZs");
        FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
        functionRewriter0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}", "function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
        functionRewriter0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}", "function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
        FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
        functionRewriter0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_identityF() {  return function(JSAompiler_identityFn_value) {return JSCompi.er_identityFn_value}}", "function JSCompiler_identityF() {  return function(JSAompiler_identityFn_value) {return JSCompi.er_identityFn_value}}");
        FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
        functionRewriter0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("function JSCompiler_identityFn() {  return function(JSComiler_identityFn_value) {return JSCompiler_identityFn_value}}", "function JSCompiler_identityFn() {  return function(JSComiler_identityFn_value) {return JSCompiler_identityFn_value}}");
        FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
        functionRewriter0.process(node0, node0);
    }
}
