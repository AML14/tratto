project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertEquals(125, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test0001,"public void test0001() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertTrue(node0.isSyntheticBlock());
}",0,assertFalse(node0.isSyntheticBlock())
project,0,test0002,"public void test0002() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNotNull(node0);
}",0,
project,0,test0013,"public void test0013() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource((JSModule) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0024,"public void test0024() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0035,"public void test0035() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0046,"public void test0046() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    Node node0 = compiler0.parseTestCode(""4`rnDcpCv~zUmi("");
    compiler0.toSource(compiler_CodeBuilder0, (-1), node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test0047,"public void test0047() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    Node node0 = compiler0.parseTestCode(""4`rnDcpCv~zUmi("");
    compiler0.toSource(compiler_CodeBuilder0, (-1), node0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test0058,"public void test0058() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray((JSModule) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0069,"public void test0069() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule[] jSModuleArray0 = new JSModule[3];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.init((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test00911,"public void test00911() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01012,"public void test01012() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01313,"public void test01313() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""iDMYQ#U+5.L?@3T-0X"");
    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",0,
project,0,test01414,"public void test01414() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01515,"public void test01515() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.precheck();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01616,"public void test01616() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01717,"public void test01717() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getPropertyMap();
    assertNull(variableMap0);
}",0,assertNotNull(variableMap0)
project,0,test01818,"public void test01818() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseSyntheticCode(""}7OS6NG%(qC "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01919,"public void test01919() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}",0,
project,0,test02020,"public void test02020() throws Throwable {
    Callable<RenameVars> callable0 = (Callable<RenameVars>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(callable0).call();
    RenameVars renameVars0 = Compiler.runCallableWithLargeStack(callable0);
    assertNull(renameVars0);
}",0,
project,0,test02121,"public void test02121() throws Throwable {
    LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    // Undeclared exception!
    try {
        compiler0.languageMode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02222,"public void test02222() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02323,"public void test02323() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getWarningCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02424,"public void test02424() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getVariableMap();
    assertNull(variableMap0);
}",0,
project,0,test02525,"public void test02525() throws Throwable {
    Compiler compiler0 = new Compiler();
    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    assertNull(functionInformationMap0);
}",0,
project,0,test02626,"public void test02626() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parse();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02727,"public void test02727() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    assertNotNull(supplier0);
}",0,assertNotNull(supplier0)
project,0,test02828,"public void test02828() throws Throwable {
    Compiler compiler0 = new Compiler();
    SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
    assertNotNull(symbolTable0);
}",0,
project,0,test02929,"public void test02929() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test03030,"public void test03030() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getExternsInOrder();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",0,
project,0,test03131,"public void test03131() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("" [testcode] "");
    String string0 = compiler0.toSource(node0);
    assertEquals(""[testcode]"", string0);
}",0,
project,0,test03132,"public void test03132() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("" [testcode] "");
    String string0 = compiler0.toSource(node0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test03233,"public void test03233() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();
    assertNull(jSModuleGraph0);
}",0,
project,0,test03334,"public void test03334() throws Throwable {
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SourceMap sourceMap0 = compiler0.getSourceMap();
    assertNull(sourceMap0);
}",0,
project,0,test03435,"public void test03435() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test03536,"public void test03536() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.getRoot();
    assertNull(node0);
}",0,
project,0,test03637,"public void test03637() throws Throwable {
    MockFile mockFile0 = new MockFile(""com.google.javascript.jscomp.Compiler$3"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    List<CompilerInput> list0 = compiler0.getInputsForTesting();
    assertNull(list0);
}",0,
project,0,test03738,"public void test03738() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""H+TSwrUF4lolL?Kgx"", ""eCFG"");
    JSModule[] jSModuleArray0 = new JSModule[5];
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test04039,"public void test04039() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test04140,"public void test04140() throws Throwable {
    Compiler compiler0 = new Compiler();
    List<CompilerInput> list0 = compiler0.getExternsForTesting();
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test04241,"public void test04241() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.removeTryCatchFinally();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test04342,"public void test04342() throws Throwable {
    MockFile mockFile0 = new MockFile(""com.google.javascript.jscomp.Compiler$3"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    Scope scope0 = compiler0.getTopScope();
    assertNull(scope0);
}",0,assertNotNull(scope0)
project,0,test04443,"public void test04443() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
    assertNull(referenceCollectingCallback_ReferenceMap0);
}",0,
project,0,test05049,"public void test05049() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""(?T"", ""(?T"");
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNull(node0);
}",0,
project,0,test05050,"public void test05050() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""(?T"", ""(?T"");
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    compiler0.optimize();
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test05151,"public void test05151() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""toSourceArray"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertNotNull(errorManager0);
}",0,assertNotNull(errorManager0)
project,0,test05152,"public void test05152() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""toSourceArray"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test05253,"public void test05253() throws Throwable {
    Compiler compiler0 = new Compiler();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(""}7OS6NG%(qC "", diagnosticTypeArray0);
    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
    compiler0.parseTestCode(""}7OS6NG%(qC "");
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test05254,"public void test05254() throws Throwable {
    Compiler compiler0 = new Compiler();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(""}7OS6NG%(qC "", diagnosticTypeArray0);
    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
    compiler0.parseTestCode(""}7OS6NG%(qC "");
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05355,"public void test05355() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""yxaVT%'"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""yxaVT%'"");
    jSSourceFileArray0[0] = jSSourceFile0;
    CompilerOptions compilerOptions0 = compiler0.options;
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    compilerOptions0.setCheckGlobalThisLevel(checkLevel0);
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test05456,"public void test05456() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.checkSymbols = true;
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test05457,"public void test05457() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.checkSymbols = true;
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test05558,"public void test05558() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    JSModule jSModule0 = new JSModule("" nzl9y0'|z"");
    stack0.add(jSModule0);
    stack0.add(jSModule0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test05559,"public void test05559() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    JSModule jSModule0 = new JSModule("" nzl9y0'|z"");
    stack0.add(jSModule0);
    stack0.add(jSModule0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test05660,"public void test05660() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""$"", ""$"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = ""$"";
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertTrue(jSSourceFile0.isExtern());
}",0,assertTrue(jSSourceFile0.isExtern())
project,0,test05761,"public void test05761() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""computeCFG"");
    stack0.add(jSSourceFile0);
    stack0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test05762,"public void test05762() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""computeCFG"");
    stack0.add(jSSourceFile0);
    stack0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test05863,"public void test05863() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test05964,"public void test05964() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    // Undeclared exception!
    try {
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test06065,"public void test06065() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    JSModule jSModule0 = new JSModule((String) null);
    linkedList0.add(jSModule0);
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test06166,"public void test06166() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test06267,"public void test06267() throws Throwable {
    Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(callable0).call();
    CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, true);
    assertNull(crossModuleCodeMotion0);
}",1,
project,0,test06368,"public void test06368() throws Throwable {
    Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(callable0).call();
    CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, false);
    assertNull(crossModuleCodeMotion0);
}",0,
project,0,test06469,"public void test06469() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test06670,"public void test06670() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.getPassConfig();
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test06771,"public void test06771() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""$"", ""$"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertTrue(jSSourceFile0.isExtern());
}",0,assertTrue(jSSourceFile0.isExtern())
project,0,test06772,"public void test06772() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""$"", ""$"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.check();
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test06873,"public void test06873() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test06974,"public void test06974() throws Throwable {
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""%name%"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Compiler compiler0 = new Compiler();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.startPass(""XJPu>"");
    // Undeclared exception!
    try {
        compiler0.optimize();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test07075,"public void test07075() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test07176,"public void test07176() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.reportCodeChange();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test07277,"public void test07277() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.areNodesEqualForInlining((Node) null, (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test07378,"public void test07378() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""$"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""$"", ""$"");
    jSSourceFileArray0[0] = jSSourceFile0;
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.removeExternInput(""$"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test07479,"public void test07479() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode("""");
    compiler0.removeExternInput((String) null);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07580,"public void test07580() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.newExternInput((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // a source must have a name
        //
        verifyException(""com.google.javascript.jscomp.SourceFile"", e);
    }
}",0,
project,0,test07681,"public void test07681() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""yxaVT%'"", ""yxaVT%'"");
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    stack0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.newExternInput(""yxaVT%'"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Conflicting externs name: yxaVT%'
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test07782,"public void test07782() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode("""");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("""", """");
    jSSourceFileArray0[0] = jSSourceFile0;
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFileArray0[0]);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input of name 
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test07883,"public void test07883() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""iDMYQ#U+5.L?@3T-0X"");
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""AzLBi"", (Charset) null);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07984,"public void test07984() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("" [testcode] "");
    node0.addChildrenToBack(node0);
    assertEquals(2, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test07985,"public void test07985() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("" [testcode] "");
    node0.addChildrenToBack(node0);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("" [testcode] "", "" [testcode] "");
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertTrue(boolean0);
}",1,
project,0,test08086,"public void test08086() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertNotNull(errorManager0);
}",0,
project,0,test08087,"public void test08087() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,
project,0,test08188,"public void test08188() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test08189,"public void test08189() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertNotNull(reverseAbstractInterpreter0);
}",0,assertNotNull(reverseAbstractInterpreter0)
project,0,test08290,"public void test08290() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getTypeValidator();
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test08291,"public void test08291() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getTypeValidator();
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    assertNotNull(typeValidator0);
}",0,
project,0,test08392,"public void test08392() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Yhy)pH(\""1"");
    compiler0.parseTestCode(""Yhy)pH(\""1"");
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test08897,"public void test08897() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",0,
project,0,test08898,"public void test08898() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test08999,"public void test08999() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    boolean boolean0 = compiler0.acceptEcmaScript5();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test089100,"public void test089100() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    boolean boolean0 = compiler0.acceptEcmaScript5();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test090101,"public void test090101() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    String[] stringArray0 = new String[3];
    JSError jSError0 = JSError.make(""JSC_EMPTY_MODULE_LIST_ERROR"", (-2134), (-2915), checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
    compiler0.report(jSError0);
    assertEquals((-2915), jSError0.getCharno());
}",0,"assertEquals(0, jSError0.getCharno())"
project,0,test091102,"public void test091102() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""o9-`\""+UyN(Zj;n+"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // o9-`\""+UyN(Zj;n+
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test092103,"public void test092103() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""y]`"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.compile((List<JSSourceFile>) null, (List<JSSourceFile>) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test093104,"public void test093104() throws Throwable {
    Compiler compiler0 = new Compiler();
    Region region0 = compiler0.getSourceRegion(""this.passes has already been assigned"", (-2082408384));
    assertNull(region0);
}",0,assertNotNull(region0)
project,0,test094105,"public void test094105() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    compiler0.getSourceRegion(""toSourceArray"", 15);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test095106,"public void test095106() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    Region region0 = compiler0.getSourceRegion("" [testcode] "", 15);
    assertNull(region0);
}",0,
project,0,test095107,"public void test095107() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    Region region0 = compiler0.getSourceRegion("" [testcode] "", 15);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test096108,"public void test096108() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""JSC_MODULE_DEPENDENCY_ERROR"");
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root module has no inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test097109,"public void test097109() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    assertEquals(""[[singleton]]"", node0.getSourceFileName());
}",0,assertNotNull(node0.getSourceFileName())
project,0,test097110,"public void test097110() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test097111,"public void test097111() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    assertEquals(4096, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test098112,"public void test098112() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test099113,"public void test099113() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""JSC_MODULE_DEPENDENCY_ERROR"");
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(sourceFile_Generator0).getCode();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(""JSC_MODULE_DEPENDENCY_ERROR"", sourceFile_Generator0);
    jSModule0.addFirst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test100114,"public void test100114() throws Throwable {
    Compiler compiler0 = new Compiler();
    String string0 = compiler0.getAstDotGraph();
    assertEquals("""", string0);
}",0,
project,0,test101115,"public void test101115() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    String string0 = compiler0.getAstDotGraph();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertFalse(compiler0.isTypeCheckingEnabled())
project,0,test101116,"public void test101116() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    String string0 = compiler0.getAstDotGraph();
    assertEquals(""digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\""BLOCK\""];\n  node1 [label=\""SCRIPT\""];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> RETURN [label=\""SYN_BLOCK\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> node1 [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n}\n"", string0);
}",0,
project,0,test102117,"public void test102117() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    compiler0.getErrorManager();
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test103118,"public void test103118() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.SymbolTable$Symbol"");
    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",0,
project,0,test104119,"public void test104119() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(""I_\""`I'5PT0%MCgP(4"");
    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
