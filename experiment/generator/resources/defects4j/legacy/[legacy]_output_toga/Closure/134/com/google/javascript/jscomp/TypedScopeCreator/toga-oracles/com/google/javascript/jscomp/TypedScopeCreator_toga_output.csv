project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties"");
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    assertFalse(scope0.isLocal());
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(105);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node0, (Scope) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(118, 118, 118);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node0, (Scope) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = compiler0.parseSyntheticCode(""$sg.d=p.label"", ""$sg.d=p.label"");
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    assertFalse(scope0.isLocal());
}",0,assertFalse(scope0.isLocal())
project,0,test044,"public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = Node.newString(""os"");
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""os"", ""os"", 6, 4);
    Node node2 = new Node(24, node1, node0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
    Scope scope0 = new Scope(node0, namedType0);
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node2, scope0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = new Node(106);
    Node node1 = new Node(37, node0, node0, node0);
    Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
    assertEquals(33, scope0.getVarCount());
}",0,
project,0,test066,"public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = compiler0.parseSyntheticCode(""EmZ|TCN4D=jvq"", ""EmZ|TCN4D=jvq"");
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    assertEquals(33, scope0.getVarCount());
}",0,
project,0,test077,"public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = compiler0.parseTestCode(""goog.typedef"");
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    assertFalse(scope0.isLocal());
}",0,assertFalse(scope0.isLocal())
project,0,test088,"public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = new Node(36, node0, node0);
    Scope scope0 = typedScopeCreator0.createInitialScope(node0);
    Node node2 = new Node(42, node1, node1);
    Scope scope1 = typedScopeCreator0.createScope(node2, scope0);
    assertTrue(scope1.isLocal());
}",0,assertFalse(scope1.isLocal())
project,0,test099,"public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(118);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node1 = new Node(20, node0, node0, node0, node0);
    Scope scope0 = typedScopeCreator0.createInitialScope(node0);
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node1, scope0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = Node.newString("""");
    Node node2 = new Node(24, node1, node0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    Scope scope1 = typedScopeCreator0.createScope(node2, scope0);
    assertTrue(scope1.isLocal());
}",0,assertFalse(scope1.isLocal())
project,0,test1111,"public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = Node.newString(""os"");
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""os"", ""os"", 6, 4);
    Node node2 = new Node(24, node1, node0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
    Scope scope0 = new Scope(node0, namedType0);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""Named type with empty name component"");
    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
    scope0.declare(""os"", node0, namedType0, compilerInput0, false);
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node2, scope0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
