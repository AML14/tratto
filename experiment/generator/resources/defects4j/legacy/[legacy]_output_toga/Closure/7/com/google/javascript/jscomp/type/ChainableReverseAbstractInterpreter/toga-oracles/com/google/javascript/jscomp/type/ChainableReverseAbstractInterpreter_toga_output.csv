project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
    assertFalse(jSType1.isStringValueType());
}",0,
project,0,test011,"public void test011() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
    assertEquals(BooleanLiteralSet.BOTH, jSType1.getPossibleToBooleanOutcomes());
}",0,assertNotNull(jSType1.getPossibleToBooleanOutcomes())
project,0,test022,"public void test022() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNamedType(""Unknown class name"", ""Named type with empty name component"", 1, 1);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
    assertTrue(jSType1.matchesStringContext());
}",0,assertFalse(jSType1.matchesStringContext())
project,0,test033,"public void test033() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
    assertTrue(jSType1.matchesStringContext());
}",0,assertFalse(jSType1.matchesStringContext())
project,0,test044,"public void test044() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", (Node) null, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
    assertNull(jSType1);
}",0,
project,0,test055,"public void test055() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoObjectType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
    assertFalse(jSType1.isNominalConstructor());
}",0,assertTrue(jSType1.isNominalConstructor())
project,0,test066,"public void test066() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseBooleanType();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
    assertFalse(jSType1.isVoidType());
}",0,
project,0,test077,"public void test077() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = (FunctionType) closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, functionType0);
    ParameterizedType parameterizedType1 = (ParameterizedType) closureReverseAbstractInterpreter0.getRestrictedWithoutNull(parameterizedType0);
    assertEquals(0, JSType.NOT_ENUMDECL);
}",0,
project,0,test088,"public void test088() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseAllType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
    assertFalse(jSType1.isFunctionType());
}",0,assertTrue(jSType1.isFunctionType())
project,0,test099,"public void test099() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(functionType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test1010,"public void test1010() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
    assertFalse(jSType1.isEnumElementType());
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""_0wU7^>~o6,Tl%D"", (Node) null, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
    assertFalse(jSType1.isParameterizedType());
}",0,assertFalse(jSType1.isParameterizedType())
project,0,test1212,"public void test1212() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoObjectType();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
    JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, ""object"", false);
    assertNull(jSType2);
}",0,"assertEquals(jSType0, jSType2)"
project,0,test1313,"public void test1313() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ""undefined"", true);
    assertFalse(jSType1.isNoType());
}",0,assertTrue(jSType1.isNoType())
project,0,test1414,"public void test1414() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
    JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(parameterizedType0, ""Not declared as a type name"", false);
    assertNull(jSType0);
}",0,assertNotNull(jSType0)
project,0,test1515,"public void test1515() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""object"", (Node) null, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, ""Not declared as a constructor"", true);
    assertFalse(jSType1.isEnumType());
}",0,assertTrue(jSType1.isEnumType())
project,0,test1616,"public void test1616() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseAllType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ""Not declared as a constructor"", true);
    assertFalse(jSType1.isResolved());
}",0,assertTrue(jSType1.isResolved())
project,0,test1717,"public void test1717() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
    ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.getFirst();
    assertSame(chainableReverseAbstractInterpreter0, semanticReverseAbstractInterpreter0);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    Node node0 = new Node(38, 38, 38);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
    FlowScope flowScope0 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
    assertNull(flowScope0);
}",0,assertNotNull(flowScope0)
project,0,test1919,"public void test1919() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, ""Unknown class name"");
    JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType1);
    assertFalse(jSType2.isVoidType());
}",0,assertTrue(jSType2.isVoidType())
project,0,test2020,"public void test2020() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createNamedType(""pypjof"", ""pypjof"", 62, 62);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    assertEquals(BooleanLiteralSet.BOTH, jSType1.getPossibleToBooleanOutcomes());
}",0,assertNotNull(jSType1.getPossibleToBooleanOutcomes())
project,0,test2121,"public void test2121() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a constructor"", (-1575), 0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a type name"", node0, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
    assertFalse(jSType1.matchesObjectContext());
}",0,assertTrue(jSType1.matchesObjectContext())
project,0,test2222,"public void test2222() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseAllType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    assertFalse(jSType1.isRecordType());
}",0,assertTrue(jSType1.isRecordType())
project,0,test2323,"public void test2323() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    assertFalse(jSType1.isConstructor());
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    assertEquals(BooleanLiteralSet.BOTH, jSType1.getPossibleToBooleanOutcomes());
}",0,assertNotNull(jSType1.getPossibleToBooleanOutcomes())
project,0,test2525,"public void test2525() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseBooleanType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    assertFalse(jSType1.isNoObjectType());
}",0,assertTrue(jSType1.isNoObjectType())
project,0,test2626,"public void test2626() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
    JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(parameterizedType0);
    assertFalse(jSType0.isFunctionPrototypeType());
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoObjectType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    assertTrue(jSType1.matchesObjectContext());
}",0,assertTrue(jSType1.matchesObjectContext())
project,0,test2828,"public void test2828() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    assertFalse(jSType1.isFunctionType());
}",0,assertTrue(jSType1.isFunctionType())
project,0,test2929,"public void test2929() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[4];
    jSTypeArray0[2] = jSType0;
    jSTypeArray0[3] = jSType0;
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", node0, jSTypeArray0[2]);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
    assertNull(jSType1);
}",0,
project,0,test3030,"public void test3030() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    assertTrue(jSType1.isNullable());
}",0,assertFalse(jSType1.isNullable())
project,0,test3131,"public void test3131() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
    // Undeclared exception!
    try {
        chainableReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test3232,"public void test3232() throws Throwable {
    Node node0 = new Node(38, 38, 38);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
    closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
    // Undeclared exception!
    try {
        closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME 38 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newNumber((double) 33, 33, 33);
    Node node1 = new Node(33, node0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType0 = closureReverseAbstractInterpreter0.getTypeIfRefinable(node1, (FlowScope) null);
    assertNull(jSType0);
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
    Node node0 = new Node((-4248));
    JSType jSType0 = semanticReverseAbstractInterpreter0.getTypeIfRefinable(node0, (FlowScope) null);
    assertNull(jSType0);
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = new Node(33, 33, 33);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    // Undeclared exception!
    try {
        closureReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, objectType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test3636,"public void test3636() throws Throwable {
    Node node0 = new Node(38);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
    // Undeclared exception!
    try {
        closureReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, (JSType) null);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = new Node(42);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    closureReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, objectType0);
    assertFalse(objectType0.isNoResolvedType());
}",0,assertTrue(objectType0.isNoResolvedType())
project,0,test3838,"public void test3838() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    Node node0 = Node.newString(1, ""Not declared as a type name"");
    // Undeclared exception!
    try {
        closureReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, objectType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 1
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    Node node0 = Node.newString(1, ""Unknown class name"", 1, 1);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a type name"", node0, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    EnumElementType enumElementType1 = (EnumElementType) closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
    assertFalse(enumElementType1.isNativeObjectType());
}",0,assertTrue(enumElementType1.isNativeObjectType())
project,0,test4040,"public void test4040() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", (Node) null, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
    assertFalse(jSType1.isParameterizedType());
}",0,assertFalse(jSType1.isParameterizedType())
project,0,test4141,"public void test4141() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ""function"", true);
    assertEquals(1, JSType.ENUMDECL);
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Unknown class name"", (Node) null, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, ""Named type with empty name component"", false);
    assertNull(jSType1);
}",0,"assertEquals(jSType0, jSType1)"
project,0,test4343,"public void test4343() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
    JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Unknown class name"", (Node) null, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    NoType noType0 = (NoType) closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, ""Not declared as a constructor"", true);
    assertNull(noType0.getReferenceName());
}",0,assertNotNull(noType0.getReferenceName())
project,0,test4444,"public void test4444() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
    JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
    UnknownType unknownType0 = (UnknownType) closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ""Not declared as a constructor"", false);
    assertFalse(unknownType0.hasCachedValues());
}",0,
project,0,test4545,"public void test4545() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
    JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ""function"", false);
    assertNull(jSType1);
}",0,"assertEquals(jSType0, jSType1)"
project,0,test4646,"public void test4646() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ""Not declared as a constructor"", true);
    assertNull(jSType1);
}",0,
project,0,test4747,"public void test4747() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ""Not declared as a type name"", false);
    assertFalse(jSType1.isStringValueType());
}",0,
project,0,test4848,"public void test4848() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseBooleanType();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ""Not declared as a type name"", true);
    assertNull(jSType1);
}",0,"assertEquals(jSType0, jSType1)"
project,0,test4949,"public void test4949() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
    JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
    JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ""Not declared as a type name"", false);
    assertNull(jSType1);
}",0,"assertEquals(jSType0, jSType1)"
project,0,test5050,"public void test5050() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(objectType0, ""function"", false);
    assertFalse(objectType0.hasCachedValues());
}",0,
project,0,test5151,"public void test5151() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(objectType0, ""function"", true);
    assertTrue(objectType0.hasCachedValues());
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined((JSType) null);
    assertNull(jSType0);
}",0,
project,0,test5353,"public void test5353() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
    assertNull(jSType0);
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
    // Undeclared exception!
    try {
        closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, ""function"", true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter"", e);
    }
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
    JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, ""com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByTypeOfResultVisitor"", false);
    assertNull(jSType0);
}",0,assertNotNull(jSType0)
project,0,test5656,"public void test5656() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, ""boolean"", true);
    assertEquals(0, JSType.NOT_ENUMDECL);
}",0,
project,0,test5757,"public void test5757() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
    // Undeclared exception!
    try {
        closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, ""43"", true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter"", e);
    }
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, ""number"", true);
    assertFalse(jSType0.isUnionType());
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
    // Undeclared exception!
    try {
        closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, ""string"", true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter"", e);
    }
}",0,
