project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(35);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    typeCheck0.reportMissingProperties(false);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(16, node0, node0, node0, 151, 19);
    typeCheck0.processForTesting(node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test0022,"public void test0022() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((-36.6706435269342));
    Node node1 = new Node(43, node0);
    typeCheck0.processForTesting(node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.process(node0, node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(30, node0);
    typeCheck0.processForTesting((Node) null, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((-36.6706435269342));
    Node node1 = new Node(43, node0);
    typeCheck0.processForTesting(node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.process(node1, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test0055,"public void test0055() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""vJ"");
    Node node1 = new Node(27, node0, node0, node0, 2, 42);
    typeCheck0.processForTesting(node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node1, node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test0066,"public void test0066() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Node node0 = Node.newNumber(1.1654429604646246);
    Scope scope0 = new Scope(node0, compiler0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.reportUnknownTypes, compilerOptions0.checkShadowVars);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test0077,"public void test0077() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test0088,"public void test0088() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-33.72289608628942));
    Node node1 = new Node(86, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(50, Node.LAST_PROP);
}",0,
project,0,test0099,"public void test0099() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isSyntheticBlock());
}",0,assertFalse(node0.isSyntheticBlock())
project,0,test01010,"public void test01010() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    node0.addSuppression((String) null);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test01111,"public void test01111() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(4);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(12, Node.COLUMN_BITS);
}",0,
project,0,test01212,"public void test01212() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(100.0);
    Node node1 = new Node(5, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test01213,"public void test01213() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(100.0);
    Node node1 = new Node(5, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01314,"public void test01314() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""{8a"");
    Node node1 = new Node(6, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01315,"public void test01315() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""{8a"");
    Node node1 = new Node(6, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test01416,"public void test01416() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(7);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test01417,"public void test01417() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(7);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01518,"public void test01518() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node((-76));
    Node node1 = new Node(8, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01519,"public void test01519() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node((-76));
    Node node1 = new Node(8, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test01620,"public void test01620() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(9, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test01621,"public void test01621() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(9, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test01722,"public void test01722() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(10, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test01723,"public void test01723() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(10, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test01824,"public void test01824() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = compiler0.parseTestCode("" }@'"");
    Node node1 = new Node(11, node0, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(2, compiler0.getErrorCount());
}",0,
project,0,test01925,"public void test01925() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(12);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test02026,"public void test02026() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-33.72289608628942));
    Node node1 = new Node(13, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertFalse(node1.isSyntheticBlock());
}",0,
project,0,test02127,"public void test02127() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(1374.4969655242487);
    Node node1 = new Node(14, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals((-1), Node.CATCH_SCOPE_PROP);
}",0,
project,0,test02228,"public void test02228() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""F>J"");
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02329,"public void test02329() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(17);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test02430,"public void test02430() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(18, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02431,"public void test02431() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(18, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test02532,"public void test02532() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""T[=28Ba1$#{H5n\""Cz"");
    Node node1 = new Node(19, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02533,"public void test02533() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""T[=28Ba1$#{H5n\""Cz"");
    Node node1 = new Node(19, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test02534,"public void test02534() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""T[=28Ba1$#{H5n\""Cz"");
    Node node1 = new Node(19, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test02635,"public void test02635() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(150);
    Node node1 = new Node(20, node0);
    typeCheck0.visit((NodeTraversal) null, node1, node0);
    assertEquals(20, Node.FINALLY_PROP);
}",0,
project,0,test02736,"public void test02736() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(21, node0, node0, node0, node0, 48, 50);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(4095, Node.COLUMN_MASK);
}",0,
project,0,test02837,"public void test02837() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regp"");
    Node node1 = new Node(22, node0, node0, node0, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02838,"public void test02838() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regp"");
    Node node1 = new Node(22, node0, node0, node0, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test02839,"public void test02839() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regp"");
    Node node1 = new Node(22, node0, node0, node0, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test02940,"public void test02940() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString("""");
    Node node1 = new Node(23, node0, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(31, Node.SKIP_INDEXES_PROP);
}",0,
project,0,test03041,"public void test03041() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 105);
    Node node1 = new Node(24, node0, node0, 49, 0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(48, Node.DIRECTIVES);
}",0,
project,0,test03142,"public void test03142() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(25, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test03143,"public void test03143() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(25, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test03244,"public void test03244() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString("" }@'"");
    Node node1 = new Node(26, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
}",0,
project,0,test03345,"public void test03345() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = compiler0.parseTestCode(""vtJ"");
    Node node1 = new Node(27, node0, node0, node0, 2, 42);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, Node.LEFT);
}",0,
project,0,test03446,"public void test03446() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(28, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(11, Node.USES_PROP);
}",0,
project,0,test03547,"public void test03547() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(29);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test03648,"public void test03648() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 105);
    Node node1 = new Node(31, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test03749,"public void test03749() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = new Node(32, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(45, Node.IS_VAR_ARGS_PARAM);
}",0,
project,0,test03850,"public void test03850() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(121);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = new Node(34, node0, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test03851,"public void test03851() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(121);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = new Node(34, node0, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test03952,"public void test03952() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(36, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test03953,"public void test03953() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(36, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test04054,"public void test04054() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((-3109.550227217214));
    Node node1 = new Node(37, node0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test04155,"public void test04155() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseSyntheticCode(""<TS0.1wr&V+'z4fXzE"", ""<TS0.1wr&V+'z4fXzE"");
    Node node1 = new Node(41, node0, node0, node0, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(4, Node.ENUM_PROP);
}",0,
project,0,test04256,"public void test04256() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((double) 88);
    Node node1 = new Node(42, node0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test04357,"public void test04357() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(2705.904);
    Node node1 = new Node(43, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(24, Node.LASTUSE_PROP);
}",0,
project,0,test04559,"public void test04559() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""<TS0.1ir&V+o'z4ftzE"");
    Node node1 = new Node(45, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals((-1), node1.getCharno());
}",0,
project,0,test04660,"public void test04660() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node1 = new Node(46);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04761,"public void test04761() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(48);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test04762,"public void test04762() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(48);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test04863,"public void test04863() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(49, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(49, Node.DIRECT_EVAL);
}",0,
project,0,test04964,"public void test04964() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(51);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test05065,"public void test05065() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(52);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test05166,"public void test05166() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(53);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05167,"public void test05167() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(53);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05268,"public void test05268() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(54);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05269,"public void test05269() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(54);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05370,"public void test05370() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(55, (-1663), 1);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test05471,"public void test05471() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(56);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05472,"public void test05472() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(56);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test05573,"public void test05573() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(57, 57, 57);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05574,"public void test05574() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(57, 57, 57);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test05675,"public void test05675() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(58);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05676,"public void test05676() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(58);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test05777,"public void test05777() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(59);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05778,"public void test05778() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(59);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05879,"public void test05879() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(60);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05880,"public void test05880() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(60);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test05981,"public void test05981() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(61);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05982,"public void test05982() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(61);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test06083,"public void test06083() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(2726.155);
    Node node1 = new Node(62, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test06084,"public void test06084() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(2726.155);
    Node node1 = new Node(62, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06185,"public void test06185() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(63, ""Eq"");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(9, Node.FIXUPS_PROP);
}",0,
project,0,test06286,"public void test06286() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(64);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(46, Node.IS_NAMESPACE);
}",0,
project,0,test06387,"public void test06387() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(65);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test06488,"public void test06488() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
    Node node0 = new Node(66);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test06489,"public void test06489() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
    Node node0 = new Node(66);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test06590,"public void test06590() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(67);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test06591,"public void test06591() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(67);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06692,"public void test06692() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(68);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06693,"public void test06693() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(68);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test06794,"public void test06794() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(69, """");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(69, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test06895,"public void test06895() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(70, 70, 70);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06896,"public void test06896() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(70, 70, 70);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test06997,"public void test06997() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(71);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test06998,"public void test06998() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(71);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test07099,"public void test07099() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(72);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test070100,"public void test070100() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(72);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test071101,"public void test071101() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(73);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test071102,"public void test071102() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(73);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test072103,"public void test072103() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(74);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test072104,"public void test072104() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(74);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test073105,"public void test073105() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(75);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test073106,"public void test073106() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(75);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test074107,"public void test074107() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(76);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test074108,"public void test074108() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(76);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test075109,"public void test075109() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(77);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isVarArgs());
}",0,
project,0,test076110,"public void test076110() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(78);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test076111,"public void test076111() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(78);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test077112,"public void test077112() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(79);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test077113,"public void test077113() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(79);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test078114,"public void test078114() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(80);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test078115,"public void test078115() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(80);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test079116,"public void test079116() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber(Double.NaN);
    Node node1 = new Node(81, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test079117,"public void test079117() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber(Double.NaN);
    Node node1 = new Node(81, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test080118,"public void test080118() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(82, """");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test080119,"public void test080119() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(82, """");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test081120,"public void test081120() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    JSType[] jSTypeArray0 = new JSType[1];
    JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSTypeArray0[0] = jSType0;
    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(16, Node.SOURCENAME_PROP);
}",0,
project,0,test082121,"public void test082121() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(84, 84, 84);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test082122,"public void test082122() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(84, 84, 84);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test083123,"public void test083123() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(85, """");
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test084124,"public void test084124() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-33.72289608628942));
    Node node1 = new Node(87, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test084125,"public void test084125() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-33.72289608628942));
    Node node1 = new Node(87, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test085126,"public void test085126() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(90);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test086127,"public void test086127() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-889.9064));
    Node node1 = new Node(91, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals((-1), Node.CATCH_SCOPE_PROP);
}",0,
project,0,test087128,"public void test087128() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(92);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test088129,"public void test088129() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(94, 94, 94);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test089130,"public void test089130() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-35.17328011595348));
    Node node1 = new Node(96, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(3, Node.CONTINUE_PROP);
}",0,
project,0,test090131,"public void test090131() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(98);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(50, Node.FREE_CALL);
}",0,
project,0,test091132,"public void test091132() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(99, ""d/Joz{w4<if\""o``$z"");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test091133,"public void test091133() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(99, ""d/Joz{w4<if\""o``$z"");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test092134,"public void test092134() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(100, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test092135,"public void test092135() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(100, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test093136,"public void test093136() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(101);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals((-1), node0.getSourcePosition());
}",0,
project,0,test094137,"public void test094137() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(102);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test095138,"public void test095138() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-889.9064));
    Node node1 = new Node(103, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(25, Node.ISNUMBER_PROP);
}",0,
project,0,test096139,"public void test096139() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(104);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test096140,"public void test096140() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(104);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test097141,"public void test097141() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test098142,"public void test098142() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(106);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test098143,"public void test098143() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(106);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test099144,"public void test099144() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(107);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test099145,"public void test099145() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(107);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test100146,"public void test100146() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(108);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isSyntheticBlock());
}",0,
project,0,test101147,"public void test101147() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(109);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test101148,"public void test101148() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(109);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test102149,"public void test102149() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(110);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(47, Node.IS_DISPATCHER);
}",0,
project,0,test103150,"public void test103150() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(111);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test104151,"public void test104151() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(112);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
}",0,
project,0,test105152,"public void test105152() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(113);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(5, Node.FUNCTION_PROP);
}",0,
project,0,test106153,"public void test106153() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(114);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(12, Node.COLUMN_BITS);
}",0,
project,0,test107154,"public void test107154() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(115);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(50, Node.LAST_PROP);
}",0,
project,0,test108155,"public void test108155() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(116);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isUnscopedQualifiedName());
}",0,assertFalse(node0.isUnscopedQualifiedName())
project,0,test109156,"public void test109156() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(117);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(34, Node.NAME_PROP);
}",0,
project,0,test110157,"public void test110157() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(119);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test111158,"public void test111158() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(120);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, Node.RIGHT);
}",0,
project,0,test112159,"public void test112159() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(121);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test112160,"public void test112160() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(121);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test113161,"public void test113161() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(122);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(19, Node.LABEL_PROP);
}",0,
project,0,test114162,"public void test114162() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(123, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test114163,"public void test114163() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(123, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test115164,"public void test115164() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(124);
    typeCheck0.visit(nodeTraversal0, node0, (Node) null);
    assertEquals(0, nodeTraversal0.getLineNumber());
}",0,"assertEquals(0, nodeTraversal0.getLineNumber())"
project,0,test116165,"public void test116165() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(126);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, Node.ATTRIBUTE_FLAG);
}",0,
project,0,test117166,"public void test117166() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Node node0 = new Node(127);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test117167,"public void test117167() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Node node0 = new Node(127);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test118168,"public void test118168() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(128);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test118169,"public void test118169() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(128);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test119170,"public void test119170() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(129);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test119171,"public void test119171() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(129);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test120172,"public void test120172() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(131);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test120173,"public void test120173() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(131);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test121174,"public void test121174() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(133);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test121175,"public void test121175() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(133);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test122176,"public void test122176() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(134);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test122177,"public void test122177() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(134);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test123178,"public void test123178() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(135);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test123179,"public void test123179() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(135);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test124180,"public void test124180() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(136);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test124181,"public void test124181() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(136);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test125182,"public void test125182() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(137);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test125183,"public void test125183() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(137);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test126184,"public void test126184() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(138);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test126185,"public void test126185() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(138);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test127186,"public void test127186() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(139);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test127187,"public void test127187() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(139);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test128188,"public void test128188() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(140);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test128189,"public void test128189() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(140);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test129190,"public void test129190() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(141);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test129191,"public void test129191() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(141);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test130192,"public void test130192() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(142);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test130193,"public void test130193() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(142);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test131194,"public void test131194() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(143);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test131195,"public void test131195() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(143);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test132196,"public void test132196() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(144);
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeTraversal"", e);
    }
}",0,
project,0,test133197,"public void test133197() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(145);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test133198,"public void test133198() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(145);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test134199,"public void test134199() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(146);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test134200,"public void test134200() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(146);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test135201,"public void test135201() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(147);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(42, Node.SIDE_EFFECT_FLAGS);
}",0,
project,0,test136202,"public void test136202() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(148);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(42, Node.SIDE_EFFECT_FLAGS);
}",0,
project,0,test137203,"public void test137203() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(149);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test137204,"public void test137204() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(149);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test138205,"public void test138205() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(78);
    Node node1 = new Node(150);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test138206,"public void test138206() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(78);
    Node node1 = new Node(150);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test139207,"public void test139207() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Node node0 = new Node(151);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // 151
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test140208,"public void test140208() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(152, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test140209,"public void test140209() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(152, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test141210,"public void test141210() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(153);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(49, Node.DIRECT_EVAL);
}",0,
project,0,test142211,"public void test142211() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""/OYJO0LbBJ?7%emi"");
    Node node1 = new Node(3, node0, node0, 153, 45);
    Node node2 = new Node(88, node1);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test142212,"public void test142212() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""/OYJO0LbBJ?7%emi"");
    Node node1 = new Node(3, node0, node0, 153, 45);
    Node node2 = new Node(88, node1);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test143213,"public void test143213() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(83);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test144214,"public void test144214() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(64, node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(27, Node.SPECIALCALL_PROP);
}",0,
project,0,test145215,"public void test145215() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-3109.134516841137));
    Node node1 = new Node(37, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test146216,"public void test146216() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(15, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(34, Node.NAME_PROP);
}",0,
project,0,test147217,"public void test147217() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(47);
    Node node1 = new Node(15, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(7, Node.LOCAL_PROP);
}",0,
project,0,test148218,"public void test148218() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(64);
    node0.addChildToFront(node0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected node type: OBJECTLIT : com.google.javascript.rhino.jstype.UnknownType@0000000163
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test149219,"public void test149219() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(50);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    TypeCheck typeCheck1 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, checkLevel0, checkLevel0);
    typeCheck1.visit(nodeTraversal0, node0, node0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test150220,"public void test150220() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}",0,
project,0,test151221,"public void test151221() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(120);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}",0,
project,0,test152222,"public void test152222() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
    Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
    assertFalse(boolean0);
}",0,
project,0,test153223,"public void test153223() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}",0,
project,0,test154224,"public void test154224() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(16, node0, node0, node0, 23, 19);
    typeCheck0.processForTesting(node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test154225,"public void test154225() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(16, node0, node0, node0, 23, 19);
    typeCheck0.processForTesting(node0, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test155226,"public void test155226() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, ""MLs8xB9TL=eW.*g|X"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
    Node node0 = Node.newString(""km{!"");
    Node node1 = new Node(33, node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test156227,"public void test156227() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(118, node0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // VAR is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test157228,"public void test157228() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(30, node0);
    Node node2 = new Node(15, node1);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test158229,"public void test158229() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(30, node0);
    node1.setSourcePositionForTree(0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test158230,"public void test158230() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(30, node0);
    node1.setSourcePositionForTree(0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test159231,"public void test159231() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(50);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = compiler0.parseTestCode(""com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel"");
    Node node2 = new Node(30, node1, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node2, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test160232,"public void test160232() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(89);
    Node node1 = new Node(89, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, node1.getChildCount());
}",0,"assertEquals(1, node1.getChildCount())"
project,0,test161233,"public void test161233() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(95, """");
    node0.addChildToFront(node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(19, Node.LABEL_PROP);
}",0,
project,0,test162234,"public void test162234() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(97, "" "");
    node0.addChildToFront(node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(43, Node.IS_CONSTANT_NAME);
}",0,
project,0,test163235,"public void test163235() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""  parent:"");
    Node node1 = new Node(93, node0, 18, 2);
    node1.addSuppression(""  parent:"");
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test164236,"public void test164236() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = compiler0.parseTestCode("" }'"");
    Node node1 = Node.newNumber(2826.5521567642);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(100.0, double0, 0.01);
}",0,
project,0,test165237,"public void test165237() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(0.0, double0, 0.01);
}",0,
