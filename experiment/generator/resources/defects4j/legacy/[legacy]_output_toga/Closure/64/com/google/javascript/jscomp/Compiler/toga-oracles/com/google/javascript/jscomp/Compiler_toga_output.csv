project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    JSModule jSModule0 = new JSModule(""stripCode"");
    // Undeclared exception!
    try {
        compiler0.toSource(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    // Undeclared exception!
    try {
        compiler0.toSource(compiler_CodeBuilder0, (-2192), (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test0055,"public void test0055() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray((JSModule) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0066,"public void test0066() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
    JSModule[] jSModuleArray0 = new JSModule[0];
    // Undeclared exception!
    try {
        compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.JsAst"", e);
    }
}",0,
project,0,test0077,"public void test0077() throws Throwable {
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    compiler0.resetUniqueNameId();
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test0099,"public void test0099() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01010,"public void test01010() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01211,"public void test01211() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    assertNull(compilerOptions0);
}",0,
project,0,test01312,"public void test01312() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01413,"public void test01413() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test01514,"public void test01514() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getPropertyMap();
    assertNull(variableMap0);
}",0,assertNotNull(variableMap0)
project,0,test01615,"public void test01615() throws Throwable {
    Compiler compiler0 = new Compiler();
    ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
    assertNull(scopeCreator0);
}",0,
project,0,test01716,"public void test01716() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.check();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test01817,"public void test01817() throws Throwable {
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    // Undeclared exception!
    try {
        compiler0.parseSyntheticCode((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01918,"public void test01918() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}",0,
project,0,test02019,"public void test02019() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallableWithLargeStack((Callable<TightenTypes>) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02120,"public void test02120() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.languageMode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02221,"public void test02221() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02322,"public void test02322() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getWarningCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02423,"public void test02423() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getVariableMap();
    assertNull(variableMap0);
}",0,
project,0,test02524,"public void test02524() throws Throwable {
    Compiler compiler0 = new Compiler();
    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    assertNull(functionInformationMap0);
}",0,
project,0,test02625,"public void test02625() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    assertNotNull(supplier0);
}",0,assertNotNull(supplier0)
project,0,test02726,"public void test02726() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02827,"public void test02827() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource((Node) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Cannot build without root node being specified
        //
        verifyException(""com.google.javascript.jscomp.CodePrinter$Builder"", e);
    }
}",0,
project,0,test02928,"public void test02928() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.ideMode = true;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.optimize();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test02929,"public void test02929() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.ideMode = true;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.optimize();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test03030,"public void test03030() throws Throwable {
    Compiler compiler0 = new Compiler();
    SourceMap sourceMap0 = compiler0.getSourceMap();
    assertNull(sourceMap0);
}",0,
project,0,test03131,"public void test03131() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test03232,"public void test03232() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.getRoot();
    assertNull(node0);
}",0,
project,0,test03333,"public void test03333() throws Throwable {
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    List<CompilerInput> list0 = compiler0.getInputsForTesting();
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test03534,"public void test03534() throws Throwable {
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    compiler0.setHasRegExpGlobalReferences(false);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test03635,"public void test03635() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test03736,"public void test03736() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test03837,"public void test03837() throws Throwable {
    MockFile mockFile0 = new MockFile(""1f :5WD-yg@*Yk8"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    List<CompilerInput> list0 = compiler0.getExternsForTesting();
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test03938,"public void test03938() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.removeTryCatchFinally();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04039,"public void test04039() throws Throwable {
    Compiler compiler0 = new Compiler();
    Scope scope0 = compiler0.getTopScope();
    assertNull(scope0);
}",0,assertNotNull(scope0)
project,0,test04240,"public void test04240() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
    assertNull(referenceCollectingCallback_ReferenceMap0);
}",0,
project,0,test04846,"public void test04846() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""KLv{ih+iw>:|$A@"");
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNull(node0);
}",0,
project,0,test04847,"public void test04847() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""KLv{ih+iw>:|$A@"");
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test04948,"public void test04948() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("";{XKm^MP3)|n`KzC"");
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    // Undeclared exception!
    try {
        compiler0.initOptions((CompilerOptions) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test05049,"public void test05049() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""5"", ""5"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    compilerOptions0.checkGlobalThisLevel = checkLevel0;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05050,"public void test05050() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""5"", ""5"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    compilerOptions0.checkGlobalThisLevel = checkLevel0;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test05151,"public void test05151() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = """";
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNotNull(node0);
}",0,
project,0,test05152,"public void test05152() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = """";
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertTrue(node0.isSyntheticBlock());
}",0,assertTrue(node0.isSyntheticBlock())
project,0,test05153,"public void test05153() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = """";
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertEquals(125, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test05254,"public void test05254() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
    jSSourceFileArray0[0] = jSSourceFile0;
    jSSourceFileArray0[1] = jSSourceFile0;
    jSSourceFileArray0[2] = jSSourceFile0;
    jSSourceFileArray0[3] = jSSourceFile0;
    jSSourceFileArray0[4] = jSSourceFile0;
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test05255,"public void test05255() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
    jSSourceFileArray0[0] = jSSourceFile0;
    jSSourceFileArray0[1] = jSSourceFile0;
    jSSourceFileArray0[2] = jSSourceFile0;
    jSSourceFileArray0[3] = jSSourceFile0;
    jSSourceFileArray0[4] = jSSourceFile0;
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test05356,"public void test05356() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Stack<JSModule> stack0 = new Stack<JSModule>();
    // Undeclared exception!
    try {
        compiler0.compileModules(vector0, stack0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test05457,"public void test05457() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();
    JSModule jSModule0 = new JSModule("""");
    linkedList0.offer(jSModule0);
    compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test05458,"public void test05458() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();
    JSModule jSModule0 = new JSModule("""");
    linkedList0.offer(jSModule0);
    compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test05559,"public void test05559() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    compiler0.startPass((String) null);
    // Undeclared exception!
    try {
        compiler0.startPass((String) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test05660,"public void test05660() throws Throwable {
    Compiler compiler0 = new Compiler();
    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
    Callable<OptimizeArgumentsArray> callable0 = (Callable<OptimizeArgumentsArray>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn(optimizeArgumentsArray0).when(callable0).call();
    OptimizeArgumentsArray optimizeArgumentsArray1 = Compiler.runCallable(callable0, false, true);
    assertSame(optimizeArgumentsArray1, optimizeArgumentsArray0);
}",0,
project,0,test05761,"public void test05761() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<OptimizeArgumentsArray>) null, false, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test05862,"public void test05862() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<OptimizeArgumentsArray>) null, false, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test06063,"public void test06063() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.getPassConfig();
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test06164,"public void test06164() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test06165,"public void test06165() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test06166,"public void test06166() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test06267,"public void test06267() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test06368,"public void test06368() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""D"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    compiler0.parseInputs();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test06469,"public void test06469() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""Can't negate non-numeric value: {0}"");
    compiler0.areNodesEqualForInlining(node0, node0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test06570,"public void test06570() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""f#;"", ""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.removeInput(""f#;"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test06671,"public void test06671() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""x0<D.~TXd;W"");
    compiler0.removeInput(""x0<D.~TXd;W"");
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test06772,"public void test06772() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.removeInput(""f#;"");
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test06873,"public void test06873() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""x0<D./~TXd;W"");
    // Undeclared exception!
    try {
        compiler0.newExternInput(""x0<D./~TXd;W"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test06974,"public void test06974() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Invalid token: "");
    // Undeclared exception!
    try {
        compiler0.newExternInput("" [testcode] "");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Conflicting externs name:  [testcode]
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test07075,"public void test07075() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input of name p(LGM#\""#FgRE`M$K3G
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test07176,"public void test07176() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""d8zVMy"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("" [synthetic] "", (String) null);
    JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test07177,"public void test07177() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""d8zVMy"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("" [synthetic] "", (String) null);
    JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07278,"public void test07278() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test07279,"public void test07279() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertFalse(boolean0);
}",1,
project,0,test07380,"public void test07380() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.ideMode = true;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07381,"public void test07381() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.ideMode = true;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test07482,"public void test07482() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""J*dYUPT&tcqx"", ""com.google.javascript.jscomp.PeepholeFoldWithTypes"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    JSSourceFile jSSourceFile1 = JSSourceFile.fromInputStream(""$7"", (InputStream) sequenceInputStream0);
    compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile1);
    compiler0.replaceIncrementalSourceAst(jsAst0);
    assertFalse(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test07583,"public void test07583() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Mmo$/E+*"");
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertNotNull(reverseAbstractInterpreter0);
}",0,assertNotNull(reverseAbstractInterpreter0)
project,0,test07584,"public void test07584() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Mmo$/E+*"");
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07685,"public void test07685() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test07686,"public void test07686() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07787,"public void test07787() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions.DevMode compilerOptions_DevMode0 = CompilerOptions.DevMode.START_AND_END;
    compilerOptions0.devMode = compilerOptions_DevMode0;
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test07888,"public void test07888() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertEquals(125, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test07889,"public void test07889() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07890,"public void test07890() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertTrue(node0.isSyntheticBlock());
}",0,
project,0,test07991,"public void test07991() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    compiler0.parseInputs();
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test07992,"public void test07992() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    compiler0.parseInputs();
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test07993,"public void test07993() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    compiler0.parseInputs();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test08094,"public void test08094() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    compiler0.parseTestCode(""H|D\""^(%5>3q-"");
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test08599,"public void test08599() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""'joe[O([q5"", ""'joe[O([q5"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.optimize();
    assertEquals(2, compiler0.getErrorCount());
}",0,
project,0,test086100,"public void test086100() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""6>%a$Ls>/r"");
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",0,
project,0,test086101,"public void test086101() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""6>%a$Ls>/r"");
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertFalse(compiler0.isTypeCheckingEnabled())
project,0,test088102,"public void test088102() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""f#;"", ""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    boolean boolean0 = compiler0.acceptEcmaScript5();
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test088103,"public void test088103() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""f#;"", ""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    boolean boolean0 = compiler0.acceptEcmaScript5();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test089104,"public void test089104() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.disableThreads();
    CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
    compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    assertTrue(result0.success);
}",0,
project,0,test090105,"public void test090105() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Compiler compiler0 = new Compiler();
    String[] stringArray0 = new String[1];
    JSError jSError0 = JSError.make((String) null, (-778), (-778), compilerOptions0.checkUnreachableCode, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
    compiler0.report(jSError0);
    assertEquals((-778), jSError0.lineNumber);
}",0,
project,0,test091106,"public void test091106() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""JSC_EMPTY_MODULE_LIST_ERROR"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // JSC_EMPTY_MODULE_LIST_ERROR
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test092107,"public void test092107() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""// Input %num%"");
    // Undeclared exception!
    try {
        compiler0.check();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test093108,"public void test093108() throws Throwable {
    Compiler compiler0 = new Compiler();
    Region region0 = compiler0.getSourceRegion((String) null, (-1108));
    assertNull(region0);
}",0,
project,0,test094109,"public void test094109() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""d8zVMy"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.getSourceRegion((String) null, 2148);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test095110,"public void test095110() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""D"", ""D"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.getSourceRegion(""D"", 132);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test095111,"public void test095111() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""D"", ""D"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.getSourceRegion(""D"", 132);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test095112,"public void test095112() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""D"", ""D"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.getSourceRegion(""D"", 132);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test096113,"public void test096113() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""!h8[tF![V[!{"");
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root module has no inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test097114,"public void test097114() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    compiler0.getNodeForCodeInsertion((JSModule) null);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test098115,"public void test098115() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();
    compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test099116,"public void test099116() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""@'`0Od|u.G9ftNKQ"");
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(sourceFile_Generator0).getCode();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(""@'`0Od|u.G9ftNKQ"", sourceFile_Generator0);
    jSModule0.addFirst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test100117,"public void test100117() throws Throwable {
    Compiler compiler0 = new Compiler();
    String string0 = compiler0.getAstDotGraph();
    assertEquals("""", string0);
}",0,
project,0,test101118,"public void test101118() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""f#;"", ""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.getAstDotGraph();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test102119,"public void test102119() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Can't negate non-numeric value: {0}"");
    compiler0.getErrorManager();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test103120,"public void test103120() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test103121,"public void test103121() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertNotNull(errorManager0);
}",0,assertNotNull(errorManager0)
project,0,test104122,"public void test104122() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""3"");
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",0,
project,0,test105123,"public void test105123() throws Throwable {
    Compiler compiler0 = new Compiler();
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    Node node0 = Node.newString(""GETPROP"");
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test106124,"public void test106124() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""RE7V4W1:olT8;)VZH\"""");
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",0,
