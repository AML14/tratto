/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 07:40:26 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.InlineFunctions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.SpecializeModule;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class InlineFunctions_ESTest extends InlineFunctions_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        InlineFunctions inlineFunctions0 = null;
        inlineFunctions0 = new InlineFunctions((AbstractCompiler) null, (Supplier<String>) null, false, false, false);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Compiler compiler0 = new Compiler();
        InlineFunctions inlineFunctions0 = null;
        inlineFunctions0 = new InlineFunctions(compiler0, (Supplier<String>) null, false, false, false);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, false, false, false);
        Node node0 = Node.newString("M");
        inlineFunctions0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        InlineFunctions inlineFunctions0 = new InlineFunctions(compiler0, supplier0, true, true, true);
        Node node0 = compiler0.parseTestCode("aB()");
        inlineFunctions0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
        InlineFunctions.isCandidateUsage(node0);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        Node node1 = new Node(118, node0, node0, node0);
        boolean boolean0 = InlineFunctions.isCandidateUsage(node0);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Node node0 = new Node(38);
        Node node1 = new Node(2, node0, node0, node0);
        boolean boolean0 = InlineFunctions.isCandidateUsage(node0);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Node node0 = new Node(38);
        Node node1 = new Node(105, node0, node0, node0);
        boolean boolean0 = InlineFunctions.isCandidateUsage(node0);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        Node node1 = new Node(37, node0, node0, node0);
        boolean boolean0 = InlineFunctions.isCandidateUsage(node0);
    }
}
