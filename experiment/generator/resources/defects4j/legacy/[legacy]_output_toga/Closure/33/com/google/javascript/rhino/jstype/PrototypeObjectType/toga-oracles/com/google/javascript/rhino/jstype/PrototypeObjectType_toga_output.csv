project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    errorFunctionType0.toStringHelper(false);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test011,"public void test011() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""]aYq]:O]t~;X8:W"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    assertFalse(boolean0);
}",0,
project,0,test012,"public void test012() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""]aYq]:O]t~;X8:W"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    assertFalse(instanceObjectType0.isNativeObjectType());
}",0,assertTrue(instanceObjectType0.isNativeObjectType())
project,0,test013,"public void test013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""]aYq]:O]t~;X8:W"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test024,"public void test024() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""W8%Q&dA}l\""6)L}yU1}("", unknownType0, false);
    JSType[] jSTypeArray0 = new JSType[3];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) prototypeObjectType0, false, jSTypeArray0);
    boolean boolean0 = functionType0.matchesObjectContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test025,"public void test025() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""W8%Q&dA}l\""6)L}yU1}("", unknownType0, false);
    JSType[] jSTypeArray0 = new JSType[3];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) prototypeObjectType0, false, jSTypeArray0);
    boolean boolean0 = functionType0.matchesObjectContext();
    assertFalse(prototypeObjectType0.isNativeObjectType());
}",0,assertTrue(prototypeObjectType0.isNativeObjectType())
project,0,test026,"public void test026() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""W8%Q&dA}l\""6)L}yU1}("", unknownType0, false);
    JSType[] jSTypeArray0 = new JSType[3];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) prototypeObjectType0, false, jSTypeArray0);
    boolean boolean0 = functionType0.matchesObjectContext();
    assertTrue(prototypeObjectType0.hasReferenceName());
}",0,assertTrue(prototypeObjectType0.hasReferenceName())
project,0,test037,"public void test037() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.canBeCalled();
    assertFalse(recordType0.isNativeObjectType());
}",0,
project,0,test038,"public void test038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.canBeCalled();
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test049,"public void test049() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""H#i{8*"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""H#i{8*"", jSDocInfo0);
    int int0 = errorFunctionType0.getPropertiesCount();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test0410,"public void test0410() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""H#i{8*"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""H#i{8*"", jSDocInfo0);
    int int0 = errorFunctionType0.getPropertiesCount();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test0511,"public void test0511() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType((String) null);
    assertFalse(objectType0.isNominalType());
}",0,assertTrue(objectType0.isNominalType())
project,0,test0512,"public void test0512() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType((String) null);
    assertTrue(objectType0.isNativeObjectType());
}",0,assertFalse(objectType0.isNativeObjectType())
project,0,test0613,"public void test0613() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""bind"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""bind"", jSDocInfo0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test0714,"public void test0714() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    noType0.matchConstraint(recordType0);
    assertFalse(recordType0.hasReferenceName());
}",0,
project,0,test0715,"public void test0715() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    noType0.matchConstraint(recordType0);
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test0816,"public void test0816() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""P^"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""P^"", jSDocInfo0);
    Node node0 = errorFunctionType0.getParametersNode();
    boolean boolean0 = errorFunctionType0.defineProperty(""P^"", (JSType) null, false, node0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test0817,"public void test0817() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""P^"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""P^"", jSDocInfo0);
    Node node0 = errorFunctionType0.getParametersNode();
    boolean boolean0 = errorFunctionType0.defineProperty(""P^"", (JSType) null, false, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0918,"public void test0918() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""{"", jSDocInfo0);
    errorFunctionType0.getPropertyNames();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test1019,"public void test1019() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""Unknown class name"", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""Unknown class name"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test1020,"public void test1020() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""Unknown class name"", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""Unknown class name"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1121,"public void test1121() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    boolean boolean0 = recordType0.isPropertyTypeInferred("":7NM~88QYJbI7/=\""'Q"");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1122,"public void test1122() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    boolean boolean0 = recordType0.isPropertyTypeInferred("":7NM~88QYJbI7/=\""'Q"");
    assertFalse(boolean0);
}",0,
project,0,test1123,"public void test1123() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    boolean boolean0 = recordType0.isPropertyTypeInferred("":7NM~88QYJbI7/=\""'Q"");
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test1224,"public void test1224() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.isPropertyInExterns(""Unknown class name"");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1225,"public void test1225() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.isPropertyInExterns(""Unknown class name"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1226,"public void test1226() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.isPropertyInExterns(""Unknown class name"");
    assertFalse(recordType0.hasReferenceName());
}",0,
project,0,test1327,"public void test1327() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.isPropertyInExterns(""Named type with empty name component"");
    assertFalse(recordType0.hasReferenceName());
}",0,
project,0,test1328,"public void test1328() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.isPropertyInExterns(""Named type with empty name component"");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1429,"public void test1429() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = errorFunctionType0.removeProperty(""vQw'Fifhnd"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1430,"public void test1430() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = errorFunctionType0.removeProperty(""vQw'Fifhnd"");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test1531,"public void test1531() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""zX@T\""uf-c E;.5Bw0%"", (Node) null);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    functionType0.setPropertyJSDocInfo(""Named type with empty name component"", jSDocInfo0);
    boolean boolean0 = functionType0.removeProperty(""Named type with empty name component"");
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test1532,"public void test1532() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""zX@T\""uf-c E;.5Bw0%"", (Node) null);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    functionType0.setPropertyJSDocInfo(""Named type with empty name component"", jSDocInfo0);
    boolean boolean0 = functionType0.removeProperty(""Named type with empty name component"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1633,"public void test1633() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    errorFunctionType0.getPropertyNode(""Unknown class name"");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test1734,"public void test1734() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "":6_)or3WKzv+g/!i*|~"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo("":6_)or3WKzv+g/!i*|~"", jSDocInfo0);
    errorFunctionType0.getPropertyNode("":6_)or3WKzv+g/!i*|~"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test1835,"public void test1835() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zX@T\""uf-c E;.5Bw0%"");
    errorFunctionType0.getOwnPropertyJSDocInfo(""Unknown class name"");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test1936,"public void test1936() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getOwnPropertyJSDocInfo(""Unknown class name"");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1937,"public void test1937() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getOwnPropertyJSDocInfo(""Unknown class name"");
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test2038,"public void test2038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""NWQ%bp0qR"");
    errorFunctionType0.setPropertyJSDocInfo(""NWQ%bp0qR"", (JSDocInfo) null);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test2039,"public void test2039() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""NWQ%bp0qR"");
    errorFunctionType0.setPropertyJSDocInfo(""NWQ%bp0qR"", (JSDocInfo) null);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test2140,"public void test2140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.common.base.CharMatcher$Or"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""com.google.common.base.CharMatcher$Or"", jSDocInfo0);
    errorFunctionType0.setPropertyJSDocInfo(""com.google.common.base.CharMatcher$Or"", jSDocInfo0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test2241,"public void test2241() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.setPropertyJSDocInfo(""Not declared as a constructor"", jSDocInfo0);
    assertTrue(recordType0.hasCachedValues());
}",0,assertTrue(recordType0.hasCachedValues())
project,0,test2342,"public void test2342() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesUint32Context();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2343,"public void test2343() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesUint32Context();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test2444,"public void test2444() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesNumberContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2445,"public void test2445() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesNumberContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test2546,"public void test2546() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""valueOf"");
    JSType[] jSTypeArray0 = new JSType[1];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, node0);
    hashMap0.put(""valueOf"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesNumberContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2547,"public void test2547() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""valueOf"");
    JSType[] jSTypeArray0 = new JSType[1];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, node0);
    hashMap0.put(""valueOf"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesNumberContext();
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test2648,"public void test2648() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""NX\""t"");
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2649,"public void test2649() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""NX\""t"");
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(instanceObjectType0.isNominalType());
}",0,assertTrue(instanceObjectType0.isNominalType())
project,0,test2750,"public void test2750() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test2751,"public void test2751() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2852,"public void test2852() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2853,"public void test2853() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test2954,"public void test2954() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    Node node0 = Node.newNumber((-1079.03800214));
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
    hashMap0.put(""toString"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesStringContext();
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test2955,"public void test2955() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    Node node0 = Node.newNumber((-1079.03800214));
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
    hashMap0.put(""toString"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3056,"public void test3056() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType0.matchesStringContext();
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test3057,"public void test3057() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType0.matchesStringContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3158,"public void test3158() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, """", (Node) null);
    boolean boolean0 = functionType0.matchesNumberContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3159,"public void test3159() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, """", (Node) null);
    boolean boolean0 = functionType0.matchesNumberContext();
    assertFalse(functionType0.isNominalConstructor());
}",0,
project,0,test3260,"public void test3260() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    JSType jSType1 = jSType0.unboxesTo();
    assertTrue(jSType0.isNominalType());
}",0,assertTrue(jSType0.isNominalType())
project,0,test3261,"public void test3261() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    JSType jSType1 = jSType0.unboxesTo();
    assertNotNull(jSType1);
}",0,
project,0,test3362,"public void test3362() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    JSType jSType0 = instanceObjectType0.unboxesTo();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertFalse(instanceObjectType0.hasReferenceName())
project,0,test3363,"public void test3363() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    JSType jSType0 = instanceObjectType0.unboxesTo();
    assertNotNull(jSType0);
}",0,
project,0,test3464,"public void test3464() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.unboxesTo();
    assertNull(jSType0);
}",0,assertNotNull(jSType0)
project,0,test3565,"public void test3565() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    JSType[] jSTypeArray0 = new JSType[2];
    jSTypeArray0[1] = (JSType) recordType0;
    FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(recordType0, jSTypeArray0);
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test3566,"public void test3566() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    JSType[] jSTypeArray0 = new JSType[2];
    jSTypeArray0[1] = (JSType) recordType0;
    FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(recordType0, jSTypeArray0);
    recordType0.setOwnerFunction(functionType0);
    String string0 = recordType0.toStringHelper(true);
    assertEquals(""null.prototype"", string0);
}",0,
project,0,test3667,"public void test3667() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    Node node0 = Node.newString(""com.google.javascript.jscomp.SemanticReverseAbstractInterpreter$RestrictByTrueInstanceOfResultVisitor"", 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, node0);
    hashMap0.putIfAbsent(""Not declared as a constructor"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    String string0 = recordType0.toStringHelper(true);
    assertNotNull(string0);
}",0,
project,0,test3668,"public void test3668() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    Node node0 = Node.newString(""com.google.javascript.jscomp.SemanticReverseAbstractInterpreter$RestrictByTrueInstanceOfResultVisitor"", 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, node0);
    hashMap0.putIfAbsent(""Not declared as a constructor"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    String string0 = recordType0.toStringHelper(true);
    assertEquals(""{Not declared as a constructor: number}"", string0);
}",0,
project,0,test3769,"public void test3769() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty1);
    hashMap0.put(""SP<ufA,)hesR@3"", recordTypeBuilder_RecordProperty1);
    hashMap0.put(""MC7E1F4:3"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    String string0 = recordType0.toStringHelper(false);
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test3770,"public void test3770() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty1);
    hashMap0.put(""SP<ufA,)hesR@3"", recordTypeBuilder_RecordProperty1);
    hashMap0.put(""MC7E1F4:3"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    String string0 = recordType0.toStringHelper(false);
    assertNotNull(string0);
}",0,
project,0,test3871,"public void test3871() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    errorFunctionType0.toAnnotationString();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test3972,"public void test3972() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
    jSTypeNativeArray0[0] = jSTypeNative0;
    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
    // Undeclared exception!
    try {
        jSTypeRegistry0.resetImplicitPrototype(jSType0, noType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test4073,"public void test4073() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""@iM"");
    ObjectType objectType0 = errorFunctionType0.getParentScope();
    boolean boolean0 = errorFunctionType0.isSubtype(objectType0);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test4074,"public void test4074() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""@iM"");
    ObjectType objectType0 = errorFunctionType0.getParentScope();
    boolean boolean0 = errorFunctionType0.isSubtype(objectType0);
    assertTrue(boolean0);
}",0,
project,0,test4175,"public void test4175() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.isString();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4176,"public void test4176() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.isString();
    assertTrue(instanceObjectType0.isNativeObjectType());
}",0,
project,0,test4177,"public void test4177() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.isString();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertFalse(instanceObjectType0.hasReferenceName())
project,0,test4278,"public void test4278() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
    hashMap0.put("")jh<s/7x.|.}DA/:$"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    errorFunctionType0.matchConstraint(recordType1);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test4379,"public void test4379() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""VHGIOk|KPWJ"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
    assertTrue(instanceObjectType0.hasCachedValues());
}",0,
project,0,test4380,"public void test4380() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""VHGIOk|KPWJ"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
    assertFalse(boolean0);
}",0,
project,0,test4481,"public void test4481() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    assertFalse(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test4482,"public void test4482() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    assertTrue(boolean0);
}",0,
project,0,test4483,"public void test4483() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    assertFalse(instanceObjectType0.isNativeObjectType());
}",0,assertTrue(instanceObjectType0.isNativeObjectType())
project,0,test4584,"public void test4584() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ObjectType objectType0 = errorFunctionType0.getInstanceType();
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""p<#_N&~"", objectType0, false);
    boolean boolean0 = prototypeObjectType0.isSubtype(errorFunctionType0);
    assertTrue(prototypeObjectType0.hasCachedValues());
}",0,assertFalse(prototypeObjectType0.hasCachedValues())
project,0,test4585,"public void test4585() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ObjectType objectType0 = errorFunctionType0.getInstanceType();
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""p<#_N&~"", objectType0, false);
    boolean boolean0 = prototypeObjectType0.isSubtype(errorFunctionType0);
    assertTrue(boolean0);
}",0,
project,0,test4686,"public void test4686() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""?"");
    errorFunctionType0.setOwnerFunction(errorFunctionType0);
    errorFunctionType0.setOwnerFunction((FunctionType) null);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test4787,"public void test4787() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    errorFunctionType0.setOwnerFunction(noResolvedType0);
    // Undeclared exception!
    try {
        errorFunctionType0.setOwnerFunction(noResolvedType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test4888,"public void test4888() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getCtorImplementedInterfaces();
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test4889,"public void test4889() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getCtorImplementedInterfaces();
    assertFalse(recordType0.hasReferenceName());
}",0,
project,0,test4990,"public void test4990() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""toString"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""toString"", jSDocInfo0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test4991,"public void test4991() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""toString"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""toString"", jSDocInfo0);
    JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test5092,"public void test5092() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""a"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
    instanceObjectType0.matchConstraint(errorFunctionType0);
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertFalse(instanceObjectType0.hasReferenceName())
project,0,test5093,"public void test5093() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""a"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
    instanceObjectType0.matchConstraint(errorFunctionType0);
    assertTrue(instanceObjectType0.isNativeObjectType());
}",0,assertTrue(instanceObjectType0.isNativeObjectType())
project,0,test5194,"public void test5194() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NoType noType0 = new NoType(jSTypeRegistry0);
    Node node0 = new Node(1, 108, 1);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
    hashMap0.put(""f@q?7H.}cJ>'Wpmq"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.matchConstraint(recordType0);
    assertFalse(recordType0.hasReferenceName());
}",0,
project,0,test5195,"public void test5195() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NoType noType0 = new NoType(jSTypeRegistry0);
    Node node0 = new Node(1, 108, 1);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
    hashMap0.put(""f@q?7H.}cJ>'Wpmq"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.matchConstraint(recordType0);
    assertFalse(recordType0.hasCachedValues());
}",0,assertFalse(recordType0.hasCachedValues())
project,0,test5196,"public void test5196() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NoType noType0 = new NoType(jSTypeRegistry0);
    Node node0 = new Node(1, 108, 1);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
    hashMap0.put(""f@q?7H.}cJ>'Wpmq"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.matchConstraint(recordType0);
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
