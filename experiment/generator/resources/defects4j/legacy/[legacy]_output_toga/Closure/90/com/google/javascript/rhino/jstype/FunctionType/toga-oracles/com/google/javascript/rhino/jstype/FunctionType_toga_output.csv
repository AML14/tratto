project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[2];
    jSTypeArray0[1] = (JSType) noObjectType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], true, jSTypeArray0);
    functionType0.getGreatestSubtype(noObjectType0);
    assertFalse(functionType0.hasInstanceType());
}",0,
project,0,test001,"public void test001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[2];
    jSTypeArray0[1] = (JSType) noObjectType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], true, jSTypeArray0);
    functionType0.getGreatestSubtype(noObjectType0);
    assertTrue(functionType0.isFunctionType());
}",0,assertTrue(functionType0.isFunctionType())
project,0,test012,"public void test012() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(errorFunctionType0, errorFunctionType0);
    assertFalse(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test023,"public void test023() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.hasEqualCallType(noObjectType0);
    assertFalse(noType0.isInterface());
}",0,assertTrue(noType0.isInterface())
project,0,test024,"public void test024() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.hasEqualCallType(noObjectType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test035,"public void test035() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.isReturnTypeInferred();
    assertFalse(noType0.isInterface());
}",0,assertFalse(noType0.isInterface())
project,0,test046,"public void test046() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noObjectType0.isInstanceType();
    assertFalse(noObjectType0.isInterface());
}",0,assertFalse(noObjectType0.isInterface())
project,0,test057,"public void test057() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
    boolean boolean0 = parameterizedType0.canBeCalled();
    assertFalse(parameterizedType0.isInterface());
}",0,
project,0,test058,"public void test058() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
    boolean boolean0 = parameterizedType0.canBeCalled();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test069,"public void test069() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.setSource((Node) null);
    assertFalse(noType0.isInterface());
}",0,assertFalse(noType0.isInterface())
project,0,test0710,"public void test0710() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) noType0, (JSType) noType0, (List<JSType>) linkedList0);
    jSType0.getLeastSupertype(jSType0);
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test0811,"public void test0811() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    List<FunctionType> list0 = noType0.getSubTypes();
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test0912,"public void test0912() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
    // Undeclared exception!
    try {
        jSTypeRegistry0.createConstructorType(""Not declared as a type name"", node0, node0, (JSType) noType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1013,"public void test1013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""0h *k,G X`Pp(JP_a"");
    Node node0 = new Node(105);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, errorFunctionType0);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""0h *k,G X`Pp(JP_a"", node0, arrowType0, errorFunctionType0, ""Named type with empty name component"", false, false);
    functionType0.toString();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test1014,"public void test1014() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""0h *k,G X`Pp(JP_a"");
    Node node0 = new Node(105);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, errorFunctionType0);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""0h *k,G X`Pp(JP_a"", node0, arrowType0, errorFunctionType0, ""Named type with empty name component"", false, false);
    functionType0.toString();
    assertEquals(""Named type with empty name component"", functionType0.getTemplateTypeName());
}",0,assertNotNull(functionType0.getTemplateTypeName())
project,0,test1115,"public void test1115() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newString(105, ""kGx:6k9\""){A+?Wm"");
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""kGx:6k9\""){A+?Wm"", node0);
    assertTrue(functionType0.hasCachedValues());
}",0,
project,0,test1216,"public void test1216() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newString(100, "")Yi`cSds?9"");
    // Undeclared exception!
    try {
        FunctionType.forInterface(jSTypeRegistry0, "")Yi`cSds?9"", node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1317,"public void test1317() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
    // Undeclared exception!
    try {
        jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1418,"public void test1418() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    int int0 = noType0.getMinArguments();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1519,"public void test1519() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    int int0 = errorFunctionType0.getMinArguments();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1620,"public void test1620() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    int int0 = functionType0.getMinArguments();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test1621,"public void test1621() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    int int0 = functionType0.getMinArguments();
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test1722,"public void test1722() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    int int0 = noType0.getMaxArguments();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,"assertEquals(0, int0)"
project,0,test1823,"public void test1823() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) linkedList0);
    int int0 = functionType0.getMaxArguments();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1824,"public void test1824() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) linkedList0);
    int int0 = functionType0.getMaxArguments();
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test1925,"public void test1925() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""apply"");
    int int0 = errorFunctionType0.getMaxArguments();
    assertEquals(3, int0);
}",0,"assertEquals(0, int0)"
project,0,test2026,"public void test2026() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.hasUnknownSupertype();
    noType0.setPrototypeBasedOn((ObjectType) null);
    assertTrue(noType0.isNoType());
}",0,assertTrue(noType0.isNoType())
project,0,test2127,"public void test2127() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.setPrototype((FunctionPrototypeType) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2228,"public void test2228() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""kU_G.s0z'ag"", (Node) null);
    assertTrue(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test2229,"public void test2229() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""kU_G.s0z'ag"", (Node) null);
    boolean boolean0 = functionType0.hasUnknownSupertype();
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test2230,"public void test2230() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""kU_G.s0z'ag"", (Node) null);
    boolean boolean0 = functionType0.hasUnknownSupertype();
    assertFalse(boolean0);
}",1,
project,0,test2331,"public void test2331() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType(""call"");
    functionType0.getPrototype();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test2432,"public void test2432() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
    linkedList0.add((ObjectType) functionType0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.setImplementedInterfaces(linkedList0);
    noType0.getAllImplementedInterfaces();
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test2533,"public void test2533() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
    linkedList0.add((ObjectType) noObjectType0);
    noObjectType0.setImplementedInterfaces(linkedList0);
    noObjectType0.getAllImplementedInterfaces();
    assertTrue(noObjectType0.hasCachedValues());
}",0,
project,0,test2634,"public void test2634() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) noType0, (JSType) noType0, (List<JSType>) linkedList0);
    functionType0.getAllImplementedInterfaces();
    assertFalse(functionType0.hasCachedValues());
}",0,
project,0,test2735,"public void test2735() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.defineInferredProperty(""prototype"", functionType0, false);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2836,"public void test2836() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""w}fYz"");
    errorFunctionType0.defineInferredProperty(""w}fYz"", errorFunctionType0, true);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""w}fYz"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2937,"public void test2937() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    errorFunctionType0.getPropertyType(""call"");
    errorFunctionType0.getPropertyType(""call"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test3038,"public void test3038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""]"");
    boolean boolean0 = errorFunctionType0.hasOwnProperty(""prototype"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3139,"public void test3139() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""apply"");
    errorFunctionType0.getPropertyType(""apply"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test3240,"public void test3240() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<unknown="");
    errorFunctionType0.getPropertyType(""<unknown="");
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test3341,"public void test3341() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""prototype"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3442,"public void test3442() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""w}fYz"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""w}fYz"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3543,"public void test3543() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
    JSType jSType0 = errorFunctionType0.getPropertyType(""call"");
    functionType0.getGreatestSubtype(jSType0);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test3644,"public void test3644() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
    assertFalse(functionType2.hasCachedValues());
}",0,assertTrue(functionType2.hasCachedValues())
project,0,test3645,"public void test3645() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
    assertTrue(functionType2.isOrdinaryFunction());
}",0,assertTrue(functionType2.isOrdinaryFunction())
project,0,test3646,"public void test3646() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
    assertFalse(functionType2.isConstructor());
}",0,assertTrue(functionType2.isConstructor())
project,0,test3647,"public void test3647() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
    assertNotSame(functionType2, functionType0);
}",1,
project,0,test3648,"public void test3648() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
    assertFalse(functionType1.hasCachedValues());
}",0,assertTrue(functionType1.hasCachedValues())
project,0,test3749,"public void test3749() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getGreatestSubtype(functionType0);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test3750,"public void test3750() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getGreatestSubtype(functionType0);
    assertTrue(functionType0.isOrdinaryFunction());
}",0,assertTrue(functionType0.isOrdinaryFunction())
project,0,test3851,"public void test3851() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) noType0, (JSType) noType0, (List<JSType>) linkedList0);
    JSType[] jSTypeArray0 = new JSType[0];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, true, jSTypeArray0);
    functionType0.getLeastSupertype(jSType0);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test3952,"public void test3952() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
    assertTrue(functionType1.hasCachedValues());
}",0,assertTrue(functionType1.hasCachedValues())
project,0,test3953,"public void test3953() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
    assertSame(functionType0, functionType2);
}",1,
project,0,test4054,"public void test4054() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) noType0, (JSType) noType0, (List<JSType>) linkedList0);
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getLeastSupertype(functionType0);
    assertTrue(functionType1.hasCachedValues());
}",0,assertFalse(functionType1.hasCachedValues())
project,0,test4155,"public void test4155() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getGreatestSubtype(functionType0);
    assertTrue(functionType1.hasCachedValues());
}",0,assertFalse(functionType1.hasCachedValues())
project,0,test4256,"public void test4256() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getLeastSupertype(functionType0);
    assertFalse(functionType1.hasInstanceType());
}",0,assertTrue(functionType1.hasInstanceType())
project,0,test4257,"public void test4257() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getLeastSupertype(functionType0);
    assertFalse(functionType1.hasCachedValues());
}",0,assertTrue(functionType1.hasCachedValues())
project,0,test4258,"public void test4258() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getLeastSupertype(functionType0);
    assertFalse(functionType1.equals((Object) functionType0));
}",0,
project,0,test4259,"public void test4259() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getLeastSupertype(functionType0);
    assertTrue(functionType1.isOrdinaryFunction());
}",0,assertTrue(functionType1.isOrdinaryFunction())
project,0,test4360,"public void test4360() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    errorFunctionType0.getGreatestSubtype(functionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test4461,"public void test4461() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    functionType0.getGreatestSubtype(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test4562,"public void test4562() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    JSType jSType0 = errorFunctionType0.getPropertyType(""call"");
    errorFunctionType0.getLeastSupertype(jSType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test4663,"public void test4663() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    errorFunctionType0.getLeastSupertype(noType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test4764,"public void test4764() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) errorFunctionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
    assertTrue(functionType1.hasCachedValues());
}",0,assertTrue(functionType1.hasCachedValues())
project,0,test4765,"public void test4765() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) errorFunctionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
    assertFalse(functionType2.equals((Object) functionType0));
}",0,
project,0,test4866,"public void test4866() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<unknown="");
    JSType[] jSTypeArray0 = new JSType[0];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, false, jSTypeArray0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, false, jSTypeArray0);
    functionType1.getGreatestSubtype(functionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test4867,"public void test4867() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<unknown="");
    JSType[] jSTypeArray0 = new JSType[0];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, false, jSTypeArray0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, false, jSTypeArray0);
    functionType1.getGreatestSubtype(functionType0);
    assertFalse(functionType0.equals((Object) functionType1));
}",0,
project,0,test4968,"public void test4968() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) linkedList0);
    // Undeclared exception!
    try {
        functionType0.getSuperClassConstructor();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test5069,"public void test5069() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.setPrototypeBasedOn((ObjectType) null);
    boolean boolean0 = noType0.hasUnknownSupertype();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test5170,"public void test5170() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    AllType allType0 = new AllType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) allType0, (List<JSType>) linkedList0);
    // Undeclared exception!
    try {
        functionType0.hasUnknownSupertype();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test5271,"public void test5271() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a type name"");
    noObjectType0.setPrototypeBasedOn(templateType0);
    boolean boolean0 = noObjectType0.hasUnknownSupertype();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test5372,"public void test5372() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType(""call"");
    // Undeclared exception!
    try {
        functionType0.getTopMostDefiningType(""Unknown class name"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test5473,"public void test5473() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0);
    noType0.setPrototype(functionPrototypeType0);
    JSType jSType0 = noType0.getTopMostDefiningType(""Not declared as a constructor"");
    assertFalse(jSType0.isUnionType());
}",0,assertFalse(jSType0.isUnionType())
project,0,test5574,"public void test5574() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = noType0.getPrototype();
    functionPrototypeType0.defineProperty(""Named type with empty name component"", noType0, true, true);
    JSType jSType0 = noType0.getTopMostDefiningType(""Named type with empty name component"");
    assertSame(jSType0, noType0);
}",0,
project,0,test5675,"public void test5675() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""Not declared as a type name"", (Node) null);
    FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(functionType0);
    assertTrue(functionType0.isFunctionType());
}",0,
project,0,test5676,"public void test5676() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""Not declared as a type name"", (Node) null);
    FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(functionType0);
    assertFalse(functionType1.isConstructor());
}",0,assertTrue(functionType1.isConstructor())
project,0,test5677,"public void test5677() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""Not declared as a type name"", (Node) null);
    FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(functionType0);
    assertTrue(functionType1.hasInstanceType());
}",0,
project,0,test5878,"public void test5878() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    String string0 = functionType0.toString();
    assertEquals(""Function"", string0);
}",0,
project,0,test5979,"public void test5979() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""LPlJPjQ^uHN']"");
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    linkedList0.add((JSType) errorFunctionType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
    functionType0.toString();
    assertFalse(functionType0.hasCachedValues());
}",0,
project,0,test6080,"public void test6080() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[2];
    jSTypeArray0[0] = (JSType) noObjectType0;
    jSTypeArray0[1] = (JSType) noObjectType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], true, jSTypeArray0);
    functionType0.toString();
    assertFalse(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test6181,"public void test6181() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""qeHdwIM$fto"", (Node) null);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
    JSType jSType0 = JSType.getGreatestSubtype((JSType) functionType1, (JSType) functionType0);
    assertTrue(functionType1.isFunctionType());
}",0,assertTrue(functionType1.isFunctionType())
project,0,test6182,"public void test6182() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""qeHdwIM$fto"", (Node) null);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
    JSType jSType0 = JSType.getGreatestSubtype((JSType) functionType1, (JSType) functionType0);
    assertTrue(jSType0.isOrdinaryFunction());
}",0,assertFalse(jSType0.isOrdinaryFunction())
project,0,test6183,"public void test6183() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""qeHdwIM$fto"", (Node) null);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
    JSType jSType0 = JSType.getGreatestSubtype((JSType) functionType1, (JSType) functionType0);
    assertFalse(jSType0.equals((Object) functionType0));
}",0,
project,0,test6284,"public void test6284() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""Not declared as a type name"", (Node) null);
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertTrue(functionType1.isFunctionType());
}",0,assertTrue(functionType1.isFunctionType())
project,0,test6285,"public void test6285() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""Not declared as a type name"", (Node) null);
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertFalse(functionType1.hasInstanceType());
}",0,assertFalse(functionType1.hasInstanceType())
project,0,test6286,"public void test6286() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""Not declared as a type name"", (Node) null);
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertFalse(boolean0);
}",0,
project,0,test6387,"public void test6387() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
    JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) errorFunctionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
    functionType1.getGreatestSubtype(jSType0);
    assertTrue(functionType1.hasCachedValues());
}",0,assertFalse(functionType1.hasCachedValues())
project,0,test6488,"public void test6488() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Named type with empty name component"", (Node) null);
    FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
    functionPrototypeType0.defineProperty(""Named type with empty name component"", functionType0, true, true);
    assertTrue(functionType0.hasInstanceType());
}",0,
project,0,test6489,"public void test6489() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Named type with empty name component"", (Node) null);
    FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
    functionPrototypeType0.defineProperty(""Named type with empty name component"", functionType0, true, true);
    functionType0.getTopMostDefiningType(""Named type with empty name component"");
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test6590,"public void test6590() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
    Node node0 = new Node(0, 1, 0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unknownType0, node0);
    // Undeclared exception!
    try {
        functionType0.getInstanceType();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test6691,"public void test6691() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    ObjectType objectType0 = noObjectType0.getTypeOfThis();
    assertEquals(0, JSType.NOT_ENUMDECL);
}",0,
project,0,test6792,"public void test6792() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
    ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
    // Undeclared exception!
    try {
        noType0.setImplicitPrototype(objectType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test6893,"public void test6893() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    // Undeclared exception!
    try {
        errorFunctionType0.setImplicitPrototype(instanceObjectType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test6994,"public void test6994() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
    ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    EmptyScope emptyScope0 = new EmptyScope();
    ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
    assertTrue(errorFunctionType1.hasCachedValues());
}",0,assertTrue(errorFunctionType1.hasCachedValues())
project,0,test7095,"public void test7095() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);
    String string0 = functionType0.toDebugHashCodeString();
    assertFalse(functionType0.hasCachedValues());
}",0,assertFalse(functionType0.hasCachedValues())
project,0,test7096,"public void test7096() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);
    String string0 = functionType0.toDebugHashCodeString();
    assertEquals(""function (): {18}"", string0);
}",0,
project,0,test7197,"public void test7197() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    JSType jSType0 = errorFunctionType0.getPropertyType(""call"");
    String string0 = jSType0.toDebugHashCodeString();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test7198,"public void test7198() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    JSType jSType0 = errorFunctionType0.getPropertyType(""call"");
    String string0 = jSType0.toDebugHashCodeString();
    assertEquals(""function ({({3045982},{11},{6})}, {12}, {12}, {12}): {3045982}"", string0);
}",0,
project,0,test7299,"public void test7299() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.toDebugHashCodeString();
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
