/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:25:38 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.RenamePrototypes;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class RenamePrototypes_ESTest extends RenamePrototypes_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
        Node node0 = Node.newString("KN");
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node1 = new Node(64, node0, node0, node0);
        renamePrototypes0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes", "cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes");
        renamePrototypes0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "cm.google.javascrnp.jscomp.RenmeProWotypes$ProcessPropertes", "cm.google.javascrnp.jscomp.RenmeProWotypes$ProcessPropertes");
        Node node1 = Node.newString(".B-nmF}S]~", 262, (-1548));
        char[] charArray0 = new char[5];
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, charArray0, (VariableMap) null);
        Node node2 = new Node(35, node0, node1, node1);
        renamePrototypes0.process(node0, node2);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
        Node node0 = Node.newString(64, "com.google.javascript.jscomp.PureFunctionIdentifier$FunctionInformation", 2534, 2534);
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node1 = compiler0.parseSyntheticCode("vMzVZ");
        Node node2 = new Node(35, node0, node0, node1);
        renamePrototypes0.process(node2, node2);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
        Node node0 = new Node(64, 64, 64);
        Node node1 = Node.newNumber((double) 0, 17, 16);
        node0.addChildToBack(node1);
        renamePrototypes0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
        VariableMap variableMap0 = new VariableMap(treeMap0);
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, variableMap0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes", "cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes");
        Node node1 = compiler0.parseTestCode("cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes");
        node1.addChildToBack(node0);
        renamePrototypes0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Compiler compiler0 = new Compiler();
        RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
        VariableMap variableMap0 = renamePrototypes0.getPropertyMap();
    }
}
