project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
    Node node0 = Node.newString(""KN"");
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    Node node1 = new Node(64, node0, node0, node0);
    renamePrototypes0.process(node0, node1);
    assertEquals(26, Node.DIRECTCALL_PROP);
}",0,
project,0,test11,"public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes"", ""cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes"");
    renamePrototypes0.process(node0, node0);
    assertEquals(31, Node.INCRDECR_PROP);
}",0,
project,0,test22,"public void test22() throws Throwable {
    Compiler compiler0 = new Compiler();
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""cm.google.javascrnp.jscomp.RenmeProWotypes$ProcessPropertes"", ""cm.google.javascrnp.jscomp.RenmeProWotypes$ProcessPropertes"");
    Node node1 = Node.newString("".B-nmF}S]~"", 262, (-1548));
    char[] charArray0 = new char[5];
    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, charArray0, (VariableMap) null);
    Node node2 = new Node(35, node0, node1, node1);
    renamePrototypes0.process(node0, node2);
    assertEquals(18, Node.SPECIAL_PROP_PROP);
}",0,
project,0,test33,"public void test33() throws Throwable {
    Compiler compiler0 = new Compiler();
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);
    Node node0 = Node.newString(64, ""com.google.javascript.jscomp.PureFunctionIdentifier$FunctionInformation"", 2534, 2534);
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    Node node1 = compiler0.parseSyntheticCode(""vMzVZ"");
    Node node2 = new Node(35, node0, node0, node1);
    renamePrototypes0.process(node2, node2);
    assertEquals((-1), node2.getCharno());
}",0,
project,0,test44,"public void test44() throws Throwable {
    Compiler compiler0 = new Compiler();
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
    Node node0 = new Node(64, 64, 64);
    Node node1 = Node.newNumber((double) 0, 17, 16);
    node0.addChildToBack(node1);
    renamePrototypes0.process(node0, node0);
    assertEquals(23, Node.VARIABLE_PROP);
}",0,
project,0,test55,"public void test55() throws Throwable {
    Compiler compiler0 = new Compiler();
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
    VariableMap variableMap0 = new VariableMap(treeMap0);
    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, variableMap0);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes"", ""cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes"");
    Node node1 = compiler0.parseTestCode(""cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes"");
    node1.addChildToBack(node0);
    renamePrototypes0.process(node1, node1);
    assertEquals(22, Node.TARGETBLOCK_PROP);
}",0,
project,0,test66,"public void test66() throws Throwable {
    Compiler compiler0 = new Compiler();
    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);
    VariableMap variableMap0 = renamePrototypes0.getPropertyMap();
    assertNotNull(variableMap0);
}",0,
