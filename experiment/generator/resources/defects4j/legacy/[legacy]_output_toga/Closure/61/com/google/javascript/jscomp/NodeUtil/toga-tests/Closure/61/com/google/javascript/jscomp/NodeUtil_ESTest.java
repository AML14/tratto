/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:03:20 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NameReferenceGraphConstruction;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.ByteArrayOutputStream;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        Node node0 = new Node(105, 962, 4);
        boolean boolean0 = nodeUtil_MatchNotFunction0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.referencesThis(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        NodeUtil.getArgumentForCallOrNew(node0, 1233);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Node node0 = new Node(21, 21, 21);
        NodeUtil.mayBeString(node0, false);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", 71, 1176);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", 71, 1176);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.isUnscopedQualifiedName();
        assertFalse(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", 71, 1176);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        NodeUtil.getPrototypePropertyName((Node) null);
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        Node node0 = Node.newNumber((double) 64);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        boolean boolean0 = NodeUtil.containsCall(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        Node node0 = new Node(118, 118, 329);
        NodeUtil.getArgumentForFunction(node0, 6);
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "===", (-849), 45);
        Node node1 = NodeUtil.newName(closureCodingConvention0, "===", node0, "===");
        node1.isQualifiedName();
        assertFalse(node1.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "===", (-849), 45);
        Node node1 = NodeUtil.newName(closureCodingConvention0, "===", node0, "===");
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01215() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "===", (-849), 45);
        Node node1 = NodeUtil.newName(closureCodingConvention0, "===", node0, "===");
    }

    @Test(timeout = 4000)
    public void test01216() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "===", (-849), 45);
        Node node1 = NodeUtil.newName(closureCodingConvention0, "===", node0, "===");
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test01317() throws Throwable {
        Node node0 = new Node(31);
        NodeUtil.isVarArgsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test01418() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test01419() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 47, sourceMap_DetailLevel0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01420() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 47, sourceMap_DetailLevel0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01521() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01622() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01723() throws Throwable {
        NodeUtil.getFunctionBody((Node) null);
    }

    @Test(timeout = 4000)
    public void test01824() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01925() throws Throwable {
        Node node0 = Node.newNumber((-2216.365954));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test01926() throws Throwable {
        Node node0 = Node.newNumber((-2216.365954));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02027() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02128() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node0 = Node.newString(24, "goog.tweak.registerString", 30, 2);
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02229() throws Throwable {
        Node node0 = new Node(22, 3315, 3315);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test02430() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02531() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test02532() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        NodeUtil.getImpureBooleanValue(node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test02833() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02934() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03035() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03136() throws Throwable {
        Node node0 = Node.newString(100, "2");
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03237() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03938() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04039() throws Throwable {
        Node node0 = new Node(1976);
        Node node1 = new Node(26, node0, node0, node0, node0, 91, 3);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test04140() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(442);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "undefined", 51, 122);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(442);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "undefined", 51, 122);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-1605), 100);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test04243() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-1605), 100);
        NodeUtil.getImpureBooleanValue(node0);
        node0.isQualifiedName();
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test04244() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-1605), 100);
        NodeUtil.getImpureBooleanValue(node0);
        node0.isUnscopedQualifiedName();
        assertFalse(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test04345() throws Throwable {
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 26, 2676);
        Node node1 = new Node(26, node0, node0, node0, node0, 12, 3);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04346() throws Throwable {
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 26, 2676);
        Node node1 = new Node(26, node0, node0, node0, node0, 12, 3);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04447() throws Throwable {
        Node node0 = new Node(64);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04448() throws Throwable {
        Node node0 = new Node(64);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04549() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\naent:", 803, 803);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test04550() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\naent:", 803, 803);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test04551() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\naent:", 803, 803);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test04552() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\naent:", 803, 803);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        node0.isQualifiedName();
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test04653() throws Throwable {
        Node node0 = new Node(41);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04754() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04855() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04956() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04957() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05058() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05059() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05160() throws Throwable {
        Node node0 = new Node(2679);
        Node node1 = new Node(26, node0, node0, node0, node0, 12, 3);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05261() throws Throwable {
        String string0 = NodeUtil.getStringValue(2877.36018564);
    }

    @Test(timeout = 4000)
    public void test05362() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05363() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05364() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test05465() throws Throwable {
        Node node0 = new Node(124, 124, (-27));
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05566() throws Throwable {
        Node node0 = Node.newNumber(8233.0);
        Node node1 = new Node(0, node0, node0, 49, 12);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test05567() throws Throwable {
        Node node0 = Node.newNumber(8233.0);
        Node node1 = new Node(0, node0, node0, 49, 12);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test05668() throws Throwable {
        Node node0 = new Node(135, 135, 135);
        Node node1 = new Node(11, node0, node0, 110, 4095);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test05769() throws Throwable {
        Node node0 = Node.newString("Cmo<a@LP)", 18, 118);
        Node node1 = node0.cloneNode();
        Node node2 = new Node(38, node1, node0);
        String string0 = NodeUtil.arrayToString(node2);
    }

    @Test(timeout = 4000)
    public void test05770() throws Throwable {
        Node node0 = Node.newString("Cmo<a@LP)", 18, 118);
        Node node1 = node0.cloneNode();
        Node node2 = new Node(38, node1, node0);
        String string0 = NodeUtil.arrayToString(node2);
    }

    @Test(timeout = 4000)
    public void test05871() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05972() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 2836, 101);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05973() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 2836, 101);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05974() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 2836, 101);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test06075() throws Throwable {
        Node node0 = new Node(39);
        NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06176() throws Throwable {
        Node node0 = Node.newString("+infinity");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06277() throws Throwable {
        Node node0 = new Node(41);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06378() throws Throwable {
        Node node0 = new Node(43);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06479() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06480() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06581() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06682() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test06683() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06684() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test06785() throws Throwable {
        Node node0 = Node.newNumber((double) 26, 1957, 1957);
        Node node1 = new Node(26, node0, node0, node0, node0, 91, 3);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06786() throws Throwable {
        Node node0 = Node.newNumber((double) 26, 1957, 1957);
        Node node1 = new Node(26, node0, node0, node0, node0, 91, 3);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06887() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("g1");
    }

    @Test(timeout = 4000)
    public void test06888() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("g1");
    }

    @Test(timeout = 4000)
    public void test06989() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("infinity");
    }

    @Test(timeout = 4000)
    public void test07090() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("-infinity");
    }

    @Test(timeout = 4000)
    public void test07191() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" invalidated ");
    }

    @Test(timeout = 4000)
    public void test07192() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" invalidated ");
    }

    @Test(timeout = 4000)
    public void test08293() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test08294() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test08295() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test08296() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test08297() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test08398() throws Throwable {
        Node node0 = new Node(145);
        Node node1 = new Node(26, node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    }

    @Test(timeout = 4000)
    public void test08499() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        NodeUtil.isImmutableValue(node0);
    }

    @Test(timeout = 4000)
    public void test085100() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test085101() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test085102() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test086103() throws Throwable {
        Node node0 = Node.newString("Remove try/catch/finally");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test087104() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test088105() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test089106() throws Throwable {
        Node node0 = new Node(44, 80, 44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test090107() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test091108() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", (-3815), (-518));
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test092109() throws Throwable {
        Node node0 = new Node(45);
        node0.setType(47);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test093110() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test094111() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test095112() throws Throwable {
        Node node0 = Node.newNumber((double) 71, 71, 71);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("common", vector0, node0, 50, 1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    }

    @Test(timeout = 4000)
    public void test095113() throws Throwable {
        Node node0 = Node.newNumber((double) 71, 71, 71);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("common", vector0, node0, 50, 1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
        node1.getChildCount();
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test095114() throws Throwable {
        Node node0 = Node.newNumber((double) 71, 71, 71);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("common", vector0, node0, 50, 1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test095115() throws Throwable {
        Node node0 = Node.newNumber((double) 71, 71, 71);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("common", vector0, node0, 50, 1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
        node1.getSourcePosition();
        assertEquals(0, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test097116() throws Throwable {
        Node node0 = Node.newNumber((double) 71, 71, 71);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("common", vector0, node0, 50, 1);
        Node node2 = new Node(42, node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
    }

    @Test(timeout = 4000)
    public void test097117() throws Throwable {
        Node node0 = Node.newNumber((double) 71, 71, 71);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("common", vector0, node0, 50, 1);
        Node node2 = new Node(42, node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
        node1.getSourcePosition();
        assertEquals(0, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test097118() throws Throwable {
        Node node0 = Node.newNumber((double) 71, 71, 71);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("common", vector0, node0, 50, 1);
        Node node2 = new Node(42, node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
        node1.getChildCount();
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test098119() throws Throwable {
        Node node0 = new Node(113, (-2175), 941);
        Node node1 = new Node(9, node0, node0, 2, 16);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test099120() throws Throwable {
        Node node0 = new Node(10);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test100121() throws Throwable {
        Node node0 = new Node(12, 12, (-387));
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test101122() throws Throwable {
        Node node0 = new Node(13);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test102123() throws Throwable {
        Node node0 = new Node(14);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test103124() throws Throwable {
        Node node0 = new Node(15, 15, 15);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test104125() throws Throwable {
        Node node0 = new Node(85, (-399), (-120));
        Node node1 = new Node(16, node0, node0, node0, (-2159), (-399));
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test105126() throws Throwable {
        Node node0 = new Node(18);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test106127() throws Throwable {
        Node node0 = new Node(19);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test107128() throws Throwable {
        Node node0 = Node.newNumber((double) 26, 26, 26);
        Node node1 = new Node(20, node0, node0, node0, node0, 25, 35);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    }

    @Test(timeout = 4000)
    public void test108129() throws Throwable {
        Node node0 = new Node(21);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test109130() throws Throwable {
        Node node0 = new Node(22, 884, 884);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test110131() throws Throwable {
        Node node0 = new Node(24);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test111132() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test112133() throws Throwable {
        Node node0 = new Node(27);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test113134() throws Throwable {
        Node node0 = new Node(28, 28, 28);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test114135() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test115136() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test116137() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test117138() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test118139() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "?y.`ze<N3[ZiYI[gK'", 6, 6);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test118140() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "?y.`ze<N3[ZiYI[gK'", 6, 6);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        node0.getType();
        assertEquals(1, node0.getType());
    }

    @Test(timeout = 4000)
    public void test118141() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "?y.`ze<N3[ZiYI[gK'", 6, 6);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test118142() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "?y.`ze<N3[ZiYI[gK'", 6, 6);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        node0.getChildCount();
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test119143() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Node node1 = new Node(34, node0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    }

    @Test(timeout = 4000)
    public void test120144() throws Throwable {
        Node node0 = Node.newString("Y3$thk3h8iMyq2", (-861), (-861));
        Node node1 = new Node(36, node0, node0, node0, 26, 23);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, compilerOptions0.aliasableStrings);
    }

    @Test(timeout = 4000)
    public void test121145() throws Throwable {
        Node node0 = new Node(37);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test122146() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Qgc", 1550, 1550);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test123147() throws Throwable {
        Node node0 = Node.newString("Y3$thk3h8iMyq2", (-886), (-886));
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
    }

    @Test(timeout = 4000)
    public void test124148() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test125149() throws Throwable {
        Node node0 = new Node(43);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
    }

    @Test(timeout = 4000)
    public void test126150() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = new Node(44, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test127151() throws Throwable {
        Node node0 = new Node(45);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test128152() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties", 803, 803);
        node0.removeFirstChild();
        node0.hasOneChild();
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test128153() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties", 803, 803);
        node0.removeFirstChild();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test129154() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "?y.`ze<N3[ZiYI[gK'", 6, 6);
        HashSet<String> hashSet0 = new HashSet<String>();
        hashSet0.add("?y.`ze<N3[ZiYI[gK'");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test129155() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "?y.`ze<N3[ZiYI[gK'", 6, 6);
        HashSet<String> hashSet0 = new HashSet<String>();
        hashSet0.add("?y.`ze<N3[ZiYI[gK'");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test129156() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "?y.`ze<N3[ZiYI[gK'", 6, 6);
        HashSet<String> hashSet0 = new HashSet<String>();
        hashSet0.add("?y.`ze<N3[ZiYI[gK'");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
        node0.hasChildren();
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test130157() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "&=", "&=");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test131158() throws Throwable {
        Node node0 = new Node(9, 9, 9);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test132159() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test133160() throws Throwable {
        Node node0 = new Node(11);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test134161() throws Throwable {
        Node node0 = new Node(12);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test135162() throws Throwable {
        Node node0 = new Node(13);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test136163() throws Throwable {
        Node node0 = new Node(14, 88, 80);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test137164() throws Throwable {
        Node node0 = new Node(15);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test138165() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(16, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test139166() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test140167() throws Throwable {
        Node node0 = new Node(18, 18, 18);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test141168() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test142169() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test143170() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test144171() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test145172() throws Throwable {
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test146173() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test147174() throws Throwable {
        Node node0 = new Node(25);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test148175() throws Throwable {
        Node node0 = new Node(26);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test149176() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        Node node1 = new Node(27, node0);
        NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test150177() throws Throwable {
        Node node0 = new Node(28, 28, 28);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test151178() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test152179() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test153180() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test154181() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test155182() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        Node node1 = new Node(33, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test156183() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test157184() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test158185() throws Throwable {
        Node node0 = new Node(36);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test159186() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test160187() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test161188() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test162189() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test163190() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test164191() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test165192() throws Throwable {
        Node node0 = new Node(48);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test166193() throws Throwable {
        Node node0 = new Node(49);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test167194() throws Throwable {
        Node node0 = new Node(50);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test168195() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test169196() throws Throwable {
        Node node0 = new Node(2119, 2119, 2119);
        Node node1 = new Node(52, node0, node0, node0, 403, 2);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test170197() throws Throwable {
        Node node0 = new Node(53);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test171198() throws Throwable {
        Node node0 = new Node(54, 54, 54);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test172199() throws Throwable {
        Node node0 = new Node(56, 56, 56);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test173200() throws Throwable {
        Node node0 = Node.newString(57, "ExpectdCALL node, got");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test174201() throws Throwable {
        Node node0 = new Node(58);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test175202() throws Throwable {
        Node node0 = new Node(59);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test176203() throws Throwable {
        Node node0 = new Node(60);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test177204() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(61);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test178205() throws Throwable {
        Node node0 = new Node(62);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test179206() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test180207() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test181208() throws Throwable {
        Node node0 = new Node(65);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test182209() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test183210() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test184211() throws Throwable {
        Node node0 = Node.newString(68, "JSCompiler_renameProperty");
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test185212() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(69);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test186213() throws Throwable {
        Node node0 = new Node(70);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test187214() throws Throwable {
        Node node0 = new Node(71);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test188215() throws Throwable {
        Node node0 = Node.newString(72, "mf0cU]UM]Dt", 72, 72);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test189216() throws Throwable {
        Node node0 = new Node(73);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test190217() throws Throwable {
        Node node0 = new Node(74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test191218() throws Throwable {
        Node node0 = new Node(75, 120, 122);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test192219() throws Throwable {
        Node node0 = new Node(76);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test193220() throws Throwable {
        Node node0 = new Node(77, (-8), 77);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test194221() throws Throwable {
        Node node0 = new Node(79, 79, 79);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test195222() throws Throwable {
        Node node0 = new Node(80, 80, 80);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test196223() throws Throwable {
        Node node0 = new Node(81);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test197224() throws Throwable {
        Node node0 = new Node(82);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test198225() throws Throwable {
        Node node0 = new Node(83);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test199226() throws Throwable {
        Node node0 = new Node(84, 483, (-1894));
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test200227() throws Throwable {
        Node node0 = new Node(85);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test201228() throws Throwable {
        Node node0 = new Node(87);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test202229() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test203230() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1547, 1547);
        Node node1 = new Node(89, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test204231() throws Throwable {
        Node node0 = new Node(90);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test205232() throws Throwable {
        Node node0 = new Node(91);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test206233() throws Throwable {
        Node node0 = new Node(92);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test207234() throws Throwable {
        Node node0 = new Node(93, 51, 91);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test208235() throws Throwable {
        Node node0 = new Node(95, 95, 425);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test209236() throws Throwable {
        Node node0 = new Node(96);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test210237() throws Throwable {
        Node node0 = new Node(97);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test211238() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test212239() throws Throwable {
        Node node0 = new Node(99, (-2311), 99);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test213240() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test214241() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test215242() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test216243() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test217244() throws Throwable {
        Node node0 = new Node(104);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test218245() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test219246() throws Throwable {
        Node node0 = new Node(106);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test220247() throws Throwable {
        Node node0 = new Node(108);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test221248() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test222249() throws Throwable {
        Node node0 = new Node(110);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test223250() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test224251() throws Throwable {
        Node node0 = new Node(113, (-2175), 967);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test225252() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test226253() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test227254() throws Throwable {
        Node node0 = new Node(116);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test228255() throws Throwable {
        Node node0 = new Node(117);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test229256() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test230257() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test231258() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test232259() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test233260() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test234261() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test235262() throws Throwable {
        Node node0 = Node.newNumber((double) 64);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test235263() throws Throwable {
        Node node0 = Node.newNumber((double) 64);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test236264() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 2836, 101);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test236265() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 2836, 101);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test237266() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test238267() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test239268() throws Throwable {
        Node node0 = new Node(43, 1535, 43);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test240269() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test241270() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test242271() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test243272() throws Throwable {
        Node node0 = Node.newNumber(0.0, 144, 144);
        Node node1 = new Node(49, node0, node0, 84, 31);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test244273() throws Throwable {
        Node node0 = new Node(50);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test245274() throws Throwable {
        Node node0 = Node.newString(51, "W(%UJ7s`vyd<%##5", 51, 51);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test246275() throws Throwable {
        Node node0 = new Node(52, 52, 105);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test247276() throws Throwable {
        Node node0 = new Node(56);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test248277() throws Throwable {
        Node node0 = new Node(59);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test249278() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test250279() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test251280() throws Throwable {
        Node node0 = Node.newString(68, "3EF|WB+c#<&");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test252281() throws Throwable {
        Node node0 = new Node(70);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test253282() throws Throwable {
        Node node0 = new Node(71, 71, 71);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test254283() throws Throwable {
        Node node0 = Node.newNumber(1.0, 118, (-2083));
        Node node1 = new Node(72, node0, node0, 2, 39);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test255284() throws Throwable {
        Node node0 = new Node(75);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test256285() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test257286() throws Throwable {
        Node node0 = Node.newString(77, "3EF|WB+c#<&");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test258287() throws Throwable {
        Node node0 = Node.newString(79, "msg.unexpected.eof");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test259288() throws Throwable {
        Node node0 = new Node(80, 80, 80);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test260289() throws Throwable {
        Node node0 = new Node(82, 103, 103);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test261290() throws Throwable {
        Node node0 = Node.newString(83, "1bDRjaVE");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test262291() throws Throwable {
        Node node0 = new Node(84, 84, 84);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test263292() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test264293() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test265294() throws Throwable {
        Node node0 = new Node(101, 118, 1227);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test266295() throws Throwable {
        Node node0 = new Node(104, 104, 104);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test267296() throws Throwable {
        Node node0 = Node.newString(107, ":qkXl");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test268297() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test269298() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test270299() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test271300() throws Throwable {
        Node node0 = new Node(117);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test272301() throws Throwable {
        Node node0 = new Node(123);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test273302() throws Throwable {
        Node node0 = new Node(124, 124, 124);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test274303() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("CGUL||Nl*k$5%z)h");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test275304() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test276305() throws Throwable {
        Node node0 = new Node(127);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test277306() throws Throwable {
        Node node0 = new Node(128, 128, 128);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test278307() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test279308() throws Throwable {
        Node node0 = new Node(64);
        node0.addChildrenToBack(node0);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test280309() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test281310() throws Throwable {
        Node node0 = new Node(99);
        Node node1 = new Node(38, node0, node0, node0, 15, (-1));
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test282311() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test282312() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        node1.getChildCount();
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test282313() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test283314() throws Throwable {
        Node node0 = new Node(688, 99, (-1774));
        Node node1 = new Node(86, node0, node0, 33, (-41));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test284315() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties", 803, 803);
        Compiler compiler0 = new Compiler();
        NodeUtil.constructorCallHasSideEffects(node0, compiler0);
    }

    @Test(timeout = 4000)
    public void test285316() throws Throwable {
        Node node0 = new Node(76);
        NodeUtil.callHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test286317() throws Throwable {
        Node node0 = Node.newNumber((double) 51);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test286318() throws Throwable {
        Node node0 = Node.newNumber((double) 51);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test287319() throws Throwable {
        Node node0 = new Node(115);
        NodeUtil.newHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test288320() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test289321() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test290322() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test291323() throws Throwable {
        Node node0 = Node.newNumber((double) 64);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test292324() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "undefined", node0, "undefined");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test292325() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "undefined", node0, "undefined");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        node1.getCharno();
        assertEquals(0, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test292326() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "undefined", node0, "undefined");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test293327() throws Throwable {
        Node node0 = Node.newString(49, "9k[g@a(avp:M");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test294328() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test295329() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "msg.let.redecl", 3127, 3127);
        NodeUtil.canBeSideEffected(node0);
        node0.getType();
        assertEquals(1, node0.getType());
    }

    @Test(timeout = 4000)
    public void test295330() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "msg.let.redecl", 3127, 3127);
        NodeUtil.canBeSideEffected(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test295331() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "msg.let.redecl", 3127, 3127);
        NodeUtil.canBeSideEffected(node0);
        node0.getLineno();
        assertEquals(0, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test296332() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test297333() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test298334() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test299335() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "II>#M", 114, 158);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test299336() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "II>#M", 114, 158);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test300337() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        Node node1 = new Node(31, node0, node0, 17, 35);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test301338() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("kH", "kH");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test302339() throws Throwable {
        int int0 = NodeUtil.precedence(9);
    }

    @Test(timeout = 4000)
    public void test303340() throws Throwable {
        int int0 = NodeUtil.precedence(44);
    }

    @Test(timeout = 4000)
    public void test304341() throws Throwable {
        int int0 = NodeUtil.precedence(10);
    }

    @Test(timeout = 4000)
    public void test305342() throws Throwable {
        int int0 = NodeUtil.precedence(11);
    }

    @Test(timeout = 4000)
    public void test306343() throws Throwable {
        int int0 = NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test307344() throws Throwable {
        int int0 = NodeUtil.precedence(13);
    }

    @Test(timeout = 4000)
    public void test308345() throws Throwable {
        int int0 = NodeUtil.precedence(14);
    }

    @Test(timeout = 4000)
    public void test309346() throws Throwable {
        int int0 = NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test310347() throws Throwable {
        int int0 = NodeUtil.precedence(16);
    }

    @Test(timeout = 4000)
    public void test311348() throws Throwable {
        int int0 = NodeUtil.precedence(17);
    }

    @Test(timeout = 4000)
    public void test312349() throws Throwable {
        int int0 = NodeUtil.precedence(18);
    }

    @Test(timeout = 4000)
    public void test313350() throws Throwable {
        int int0 = NodeUtil.precedence(19);
    }

    @Test(timeout = 4000)
    public void test314351() throws Throwable {
        int int0 = NodeUtil.precedence(20);
    }

    @Test(timeout = 4000)
    public void test315352() throws Throwable {
        int int0 = NodeUtil.precedence(21);
    }

    @Test(timeout = 4000)
    public void test316353() throws Throwable {
        int int0 = NodeUtil.precedence(22);
    }

    @Test(timeout = 4000)
    public void test317354() throws Throwable {
        int int0 = NodeUtil.precedence(23);
    }

    @Test(timeout = 4000)
    public void test318355() throws Throwable {
        int int0 = NodeUtil.precedence(24);
    }

    @Test(timeout = 4000)
    public void test319356() throws Throwable {
        int int0 = NodeUtil.precedence(25);
    }

    @Test(timeout = 4000)
    public void test320357() throws Throwable {
        int int0 = NodeUtil.precedence(26);
    }

    @Test(timeout = 4000)
    public void test321358() throws Throwable {
        int int0 = NodeUtil.precedence(27);
    }

    @Test(timeout = 4000)
    public void test322359() throws Throwable {
        int int0 = NodeUtil.precedence(28);
    }

    @Test(timeout = 4000)
    public void test323360() throws Throwable {
        int int0 = NodeUtil.precedence(29);
    }

    @Test(timeout = 4000)
    public void test324361() throws Throwable {
        int int0 = NodeUtil.precedence(30);
    }

    @Test(timeout = 4000)
    public void test325362() throws Throwable {
        int int0 = NodeUtil.precedence(31);
    }

    @Test(timeout = 4000)
    public void test326363() throws Throwable {
        int int0 = NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test327364() throws Throwable {
        int int0 = NodeUtil.precedence(33);
    }

    @Test(timeout = 4000)
    public void test328365() throws Throwable {
        NodeUtil.precedence(34);
    }

    @Test(timeout = 4000)
    public void test329366() throws Throwable {
        int int0 = NodeUtil.precedence(35);
    }

    @Test(timeout = 4000)
    public void test330367() throws Throwable {
        NodeUtil.precedence(36);
    }

    @Test(timeout = 4000)
    public void test331368() throws Throwable {
        int int0 = NodeUtil.precedence(37);
    }

    @Test(timeout = 4000)
    public void test332369() throws Throwable {
        int int0 = NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test333370() throws Throwable {
        int int0 = NodeUtil.precedence(39);
    }

    @Test(timeout = 4000)
    public void test334371() throws Throwable {
        int int0 = NodeUtil.precedence(40);
    }

    @Test(timeout = 4000)
    public void test335372() throws Throwable {
        int int0 = NodeUtil.precedence(41);
    }

    @Test(timeout = 4000)
    public void test336373() throws Throwable {
        int int0 = NodeUtil.precedence(42);
    }

    @Test(timeout = 4000)
    public void test337374() throws Throwable {
        int int0 = NodeUtil.precedence(43);
    }

    @Test(timeout = 4000)
    public void test338375() throws Throwable {
        int int0 = NodeUtil.precedence(45);
    }

    @Test(timeout = 4000)
    public void test339376() throws Throwable {
        int int0 = NodeUtil.precedence(46);
    }

    @Test(timeout = 4000)
    public void test340377() throws Throwable {
        int int0 = NodeUtil.precedence(47);
    }

    @Test(timeout = 4000)
    public void test341378() throws Throwable {
        NodeUtil.precedence(48);
    }

    @Test(timeout = 4000)
    public void test342379() throws Throwable {
        NodeUtil.precedence(49);
    }

    @Test(timeout = 4000)
    public void test343380() throws Throwable {
        NodeUtil.precedence(50);
    }

    @Test(timeout = 4000)
    public void test344381() throws Throwable {
        int int0 = NodeUtil.precedence(51);
    }

    @Test(timeout = 4000)
    public void test345382() throws Throwable {
        int int0 = NodeUtil.precedence(52);
    }

    @Test(timeout = 4000)
    public void test346383() throws Throwable {
        NodeUtil.precedence(53);
    }

    @Test(timeout = 4000)
    public void test347384() throws Throwable {
        NodeUtil.precedence(56);
    }

    @Test(timeout = 4000)
    public void test348385() throws Throwable {
        NodeUtil.precedence((byte) 57);
    }

    @Test(timeout = 4000)
    public void test349386() throws Throwable {
        NodeUtil.precedence(58);
    }

    @Test(timeout = 4000)
    public void test350387() throws Throwable {
        NodeUtil.precedence(59);
    }

    @Test(timeout = 4000)
    public void test351388() throws Throwable {
        NodeUtil.precedence(60);
    }

    @Test(timeout = 4000)
    public void test352389() throws Throwable {
        NodeUtil.precedence(61);
    }

    @Test(timeout = 4000)
    public void test353390() throws Throwable {
        NodeUtil.precedence(62);
    }

    @Test(timeout = 4000)
    public void test354391() throws Throwable {
        int int0 = NodeUtil.precedence(63);
    }

    @Test(timeout = 4000)
    public void test355392() throws Throwable {
        int int0 = NodeUtil.precedence(64);
    }

    @Test(timeout = 4000)
    public void test356393() throws Throwable {
        NodeUtil.precedence(65);
    }

    @Test(timeout = 4000)
    public void test357394() throws Throwable {
        NodeUtil.precedence(66);
    }

    @Test(timeout = 4000)
    public void test358395() throws Throwable {
        NodeUtil.precedence(67);
    }

    @Test(timeout = 4000)
    public void test359396() throws Throwable {
        NodeUtil.precedence(68);
    }

    @Test(timeout = 4000)
    public void test360397() throws Throwable {
        NodeUtil.precedence(69);
    }

    @Test(timeout = 4000)
    public void test361398() throws Throwable {
        NodeUtil.precedence(70);
    }

    @Test(timeout = 4000)
    public void test362399() throws Throwable {
        NodeUtil.precedence(71);
    }

    @Test(timeout = 4000)
    public void test363400() throws Throwable {
        NodeUtil.precedence(72);
    }

    @Test(timeout = 4000)
    public void test364401() throws Throwable {
        NodeUtil.precedence(73);
    }

    @Test(timeout = 4000)
    public void test365402() throws Throwable {
        NodeUtil.precedence(74);
    }

    @Test(timeout = 4000)
    public void test366403() throws Throwable {
        NodeUtil.precedence(75);
    }

    @Test(timeout = 4000)
    public void test367404() throws Throwable {
        NodeUtil.precedence(76);
    }

    @Test(timeout = 4000)
    public void test368405() throws Throwable {
        NodeUtil.precedence(77);
    }

    @Test(timeout = 4000)
    public void test369406() throws Throwable {
        NodeUtil.precedence(78);
    }

    @Test(timeout = 4000)
    public void test370407() throws Throwable {
        NodeUtil.precedence(79);
    }

    @Test(timeout = 4000)
    public void test371408() throws Throwable {
        NodeUtil.precedence(80);
    }

    @Test(timeout = 4000)
    public void test372409() throws Throwable {
        NodeUtil.precedence(81);
    }

    @Test(timeout = 4000)
    public void test373410() throws Throwable {
        NodeUtil.precedence(82);
    }

    @Test(timeout = 4000)
    public void test374411() throws Throwable {
        NodeUtil.precedence(83);
    }

    @Test(timeout = 4000)
    public void test375412() throws Throwable {
        NodeUtil.precedence(84);
    }

    @Test(timeout = 4000)
    public void test376413() throws Throwable {
        int int0 = NodeUtil.precedence(85);
    }

    @Test(timeout = 4000)
    public void test377414() throws Throwable {
        int int0 = NodeUtil.precedence(86);
    }

    @Test(timeout = 4000)
    public void test378415() throws Throwable {
        int int0 = NodeUtil.precedence(87);
    }

    @Test(timeout = 4000)
    public void test379416() throws Throwable {
        int int0 = NodeUtil.precedence(88);
    }

    @Test(timeout = 4000)
    public void test380417() throws Throwable {
        int int0 = NodeUtil.precedence(89);
    }

    @Test(timeout = 4000)
    public void test381418() throws Throwable {
        int int0 = NodeUtil.precedence(90);
    }

    @Test(timeout = 4000)
    public void test382419() throws Throwable {
        int int0 = NodeUtil.precedence(91);
    }

    @Test(timeout = 4000)
    public void test383420() throws Throwable {
        int int0 = NodeUtil.precedence(92);
    }

    @Test(timeout = 4000)
    public void test384421() throws Throwable {
        int int0 = NodeUtil.precedence(93);
    }

    @Test(timeout = 4000)
    public void test385422() throws Throwable {
        int int0 = NodeUtil.precedence(94);
    }

    @Test(timeout = 4000)
    public void test386423() throws Throwable {
        int int0 = NodeUtil.precedence(95);
    }

    @Test(timeout = 4000)
    public void test387424() throws Throwable {
        int int0 = NodeUtil.precedence(96);
    }

    @Test(timeout = 4000)
    public void test388425() throws Throwable {
        int int0 = NodeUtil.precedence(97);
    }

    @Test(timeout = 4000)
    public void test389426() throws Throwable {
        int int0 = NodeUtil.precedence(98);
    }

    @Test(timeout = 4000)
    public void test390427() throws Throwable {
        NodeUtil.precedence(99);
    }

    @Test(timeout = 4000)
    public void test391428() throws Throwable {
        int int0 = NodeUtil.precedence(100);
    }

    @Test(timeout = 4000)
    public void test392429() throws Throwable {
        int int0 = NodeUtil.precedence(101);
    }

    @Test(timeout = 4000)
    public void test393430() throws Throwable {
        int int0 = NodeUtil.precedence(102);
    }

    @Test(timeout = 4000)
    public void test394431() throws Throwable {
        int int0 = NodeUtil.precedence(103);
    }

    @Test(timeout = 4000)
    public void test395432() throws Throwable {
        NodeUtil.precedence(104);
    }

    @Test(timeout = 4000)
    public void test396433() throws Throwable {
        int int0 = NodeUtil.precedence(105);
    }

    @Test(timeout = 4000)
    public void test397434() throws Throwable {
        NodeUtil.precedence(106);
    }

    @Test(timeout = 4000)
    public void test398435() throws Throwable {
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test399436() throws Throwable {
        NodeUtil.precedence(108);
    }

    @Test(timeout = 4000)
    public void test400437() throws Throwable {
        NodeUtil.precedence(109);
    }

    @Test(timeout = 4000)
    public void test401438() throws Throwable {
        NodeUtil.precedence(110);
    }

    @Test(timeout = 4000)
    public void test402439() throws Throwable {
        NodeUtil.precedence(111);
    }

    @Test(timeout = 4000)
    public void test403440() throws Throwable {
        NodeUtil.precedence(112);
    }

    @Test(timeout = 4000)
    public void test404441() throws Throwable {
        NodeUtil.precedence(113);
    }

    @Test(timeout = 4000)
    public void test405442() throws Throwable {
        NodeUtil.precedence(114);
    }

    @Test(timeout = 4000)
    public void test406443() throws Throwable {
        NodeUtil.precedence(115);
    }

    @Test(timeout = 4000)
    public void test407444() throws Throwable {
        NodeUtil.precedence(116);
    }

    @Test(timeout = 4000)
    public void test408445() throws Throwable {
        NodeUtil.precedence(117);
    }

    @Test(timeout = 4000)
    public void test409446() throws Throwable {
        NodeUtil.precedence(118);
    }

    @Test(timeout = 4000)
    public void test410447() throws Throwable {
        NodeUtil.precedence(119);
    }

    @Test(timeout = 4000)
    public void test411448() throws Throwable {
        NodeUtil.precedence(120);
    }

    @Test(timeout = 4000)
    public void test412449() throws Throwable {
        NodeUtil.precedence(121);
    }

    @Test(timeout = 4000)
    public void test413450() throws Throwable {
        int int0 = NodeUtil.precedence(122);
    }

    @Test(timeout = 4000)
    public void test414451() throws Throwable {
        NodeUtil.precedence(123);
    }

    @Test(timeout = 4000)
    public void test415452() throws Throwable {
        int int0 = NodeUtil.precedence(124);
    }

    @Test(timeout = 4000)
    public void test416453() throws Throwable {
        NodeUtil.precedence((-37));
    }

    @Test(timeout = 4000)
    public void test417454() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        NodeUtil.isNumericResult(node0);
    }

    @Test(timeout = 4000)
    public void test418455() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.isNumericResult(node0);
    }

    @Test(timeout = 4000)
    public void test419456() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test420457() throws Throwable {
        Node node0 = new Node(101);
        NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test421458() throws Throwable {
        Node node0 = new Node(100);
        Node node1 = new Node(37);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test422459() throws Throwable {
        Node node0 = new Node(9, 9, 9);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test423460() throws Throwable {
        Node node0 = new Node(10);
        boolean boolean0 = NodeUtil.isNumericResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test424461() throws Throwable {
        Node node0 = new Node(18);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test425462() throws Throwable {
        Node node0 = new Node(95, 110, 425);
        Node node1 = new Node(19, node0, node0, node0, node0, 3966, 31);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test426463() throws Throwable {
        Node node0 = Node.newNumber((double) 26, 26, 26);
        Node node1 = new Node(20, node0, node0, node0, node0, 25, 35);
        boolean boolean0 = NodeUtil.isNumericResult(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test427464() throws Throwable {
        Node node0 = new Node(23, 23, 147);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test428465() throws Throwable {
        Node node0 = new Node(25, (-2639), 4114);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test429466() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        Node node1 = new Node(27, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test430467() throws Throwable {
        Node node0 = Node.newString(28, "Muy`^e)u[Af");
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test431468() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test432469() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "#G!A.jNM<#_H/vx6?5", 23, 147);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test432470() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "#G!A.jNM<#_H/vx6?5", 23, 147);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test432471() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "#G!A.jNM<#_H/vx6?5", 23, 147);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        node0.isQualifiedName();
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test433472() throws Throwable {
        Node node0 = Node.newNumber((double) 26, 1957, 1957);
        boolean boolean0 = NodeUtil.isNumericResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test434473() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.isNumericResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test435474() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test436475() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 98, 47);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test436476() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 98, 47);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test437477() throws Throwable {
        Node node0 = new Node(37);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node1 = NodeUtil.newName(defaultCodingConvention0, "Infinity", node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test437478() throws Throwable {
        Node node0 = new Node(37);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node1 = NodeUtil.newName(defaultCodingConvention0, "Infinity", node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        node1.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test438479() throws Throwable {
        Node node0 = new Node(12, 12, 12);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test439480() throws Throwable {
        Node node0 = new Node(13, 94, 65535);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test440481() throws Throwable {
        Node node0 = new Node(14);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test441482() throws Throwable {
        Node node0 = new Node(15);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test442483() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(16, node0, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test443484() throws Throwable {
        Node node0 = new Node(113, (-2247), (-2247));
        Node node1 = new Node(17, node0, node0, node0, 49, 23);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test444485() throws Throwable {
        Node node0 = new Node(18, 23, 98);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test445486() throws Throwable {
        Node node0 = new Node(95, 110, 425);
        Node node1 = new Node(19, node0, node0, node0, node0, 3966, 281);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test446487() throws Throwable {
        Node node0 = new Node(102, (-664), 102);
        Node node1 = new Node(20, node0, node0, 4, 0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test447488() throws Throwable {
        Node node0 = new Node(21, 21, 4114);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test448489() throws Throwable {
        Node node0 = new Node(22, 22, 136);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test449490() throws Throwable {
        Node node0 = new Node(24, 97, 4886);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test450491() throws Throwable {
        Node node0 = new Node(25, (-2639), 4114);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test451492() throws Throwable {
        Node node0 = new Node(26);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test452493() throws Throwable {
        Node node0 = new Node(27, 27, 37);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test453494() throws Throwable {
        Node node0 = Node.newString(28, "Z*|Y5BtckE-JB");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test454495() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test455496() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test456497() throws Throwable {
        Node node0 = new Node(31);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test457498() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Node node1 = new Node(34, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test458499() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test459500() throws Throwable {
        Node node0 = new Node(36, (-534), 11);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test460501() throws Throwable {
        Node node0 = Node.newNumber((double) 51);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test461502() throws Throwable {
        Node node0 = new Node(42, 17, 4095);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test462503() throws Throwable {
        Node node0 = new Node(43, 1397, 1535);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test463504() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = new Node(44, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test464505() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test465506() throws Throwable {
        Node node0 = new Node(46, (-1743), 38);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test466507() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test467508() throws Throwable {
        Node node0 = Node.newString(48, "Muy`^e)u[af");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test468509() throws Throwable {
        Node node0 = Node.newString(49, "9k[g@a(avp:M");
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test469510() throws Throwable {
        Node node0 = new Node(50, 50, 50);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test470511() throws Throwable {
        Node node0 = Node.newString(51, "W(%UJ7s`vyd<%##5", 51, 51);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test471512() throws Throwable {
        Node node0 = new Node(2119, 2119, 2119);
        Node node1 = new Node(52, node0, node0, node0, 403, 2);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test472513() throws Throwable {
        Node node0 = new Node(122);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test473514() throws Throwable {
        Node node0 = new Node(41);
        Node node1 = new Node(0, node0, node0, 49, 12);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test473515() throws Throwable {
        Node node0 = new Node(41);
        Node node1 = new Node(0, node0, node0, 49, 12);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test474516() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test475517() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test476518() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test477519() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test478520() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test479521() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test480522() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(30);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test481523() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test482524() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test483525() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test484526() throws Throwable {
        Node node0 = new Node(87, 87, 65);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test485527() throws Throwable {
        Node node0 = new Node(123);
        NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test486528() throws Throwable {
        Node node0 = Node.newString("case expresmion doesn't match switch", 1547, 1547);
        Node node1 = new Node(89, node0, node0, node0, node0);
        int int0 = NodeUtil.getOpFromAssignmentOp(node1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test487529() throws Throwable {
        Node node0 = Node.newString(90, "test", 109, 109);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test488530() throws Throwable {
        Node node0 = new Node(91);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test489531() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test490532() throws Throwable {
        Node node0 = new Node(95, 95, 425);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test491533() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = new Node(97, node0, node0, 1, 76);
        int int0 = NodeUtil.getOpFromAssignmentOp(node1);
    }

    @Test(timeout = 4000)
    public void test492534() throws Throwable {
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 26, 2676);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test493535() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "my", 58, 10);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test493536() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "my", 58, 10);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        node1.getSourcePosition();
        assertEquals(0, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test494537() throws Throwable {
        Node node0 = new Node(41);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("ze{EzS+}", stack0, node0, 38, 4095);
        boolean boolean0 = NodeUtil.referencesThis(node1);
        node1.getSourcePosition();
        assertEquals(1, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test494538() throws Throwable {
        Node node0 = new Node(41);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("ze{EzS+}", stack0, node0, 38, 4095);
        boolean boolean0 = NodeUtil.referencesThis(node1);
        node1.getChildCount();
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test494539() throws Throwable {
        Node node0 = new Node(41);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("ze{EzS+}", stack0, node0, 38, 4095);
        boolean boolean0 = NodeUtil.referencesThis(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test494540() throws Throwable {
        Node node0 = new Node(41);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("ze{EzS+}", stack0, node0, 38, 4095);
        boolean boolean0 = NodeUtil.referencesThis(node1);
        node1.getType();
        assertEquals(1, node1.getType());
    }

    @Test(timeout = 4000)
    public void test495541() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "?y.`ze<N3[ZiYI[gK'", 6, 6);
        Node[] nodeArray0 = new Node[2];
        NodeUtil.newCallNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test496542() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test497543() throws Throwable {
        Node node0 = Node.newString("y[@>az[*wUri@", 1429, (-987));
        Node node1 = new Node(33, node0, node0, node0, node0);
        Node node2 = NodeUtil.getPrototypeClassName(node1);
    }

    @Test(timeout = 4000)
    public void test498544() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", 71, 1176);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test498545() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", 71, 1176);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test499546() throws Throwable {
        Node node0 = new Node(30, 8, (-865));
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test500547() throws Throwable {
        Node node0 = new Node(53, 29, 148);
        Node node1 = NodeUtil.newVarNode("valueOf", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test500548() throws Throwable {
        Node node0 = new Node(53, 29, 148);
        Node node1 = NodeUtil.newVarNode("valueOf", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        node0.getChildCount();
        assertEquals(0, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test500549() throws Throwable {
        Node node0 = new Node(53, 29, 148);
        Node node1 = NodeUtil.newVarNode("valueOf", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test501550() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate", "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate");
    }

    @Test(timeout = 4000)
    public void test502551() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Z*|Y5BtckE-JB", 2486, 2486);
        Node node1 = NodeUtil.newExpr(node0);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test502552() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Z*|Y5BtckE-JB", 2486, 2486);
        Node node1 = NodeUtil.newExpr(node0);
        NodeUtil.getAssignedValue(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test503553() throws Throwable {
        Node node0 = Node.newString("3EF|WB+c#<&");
        boolean boolean0 = NodeUtil.isString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test504554() throws Throwable {
        Node node0 = new Node(97);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test505555() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
    }

    @Test(timeout = 4000)
    public void test505556() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test506557() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "#G!A.jNM<#_H/vx6?5", 23, 147);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test506558() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "#G!A.jNM<#_H/vx6?5", 23, 147);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test506559() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "#G!A.jNM<#_H/vx6?5", 23, 147);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        node0.hasChildren();
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test506560() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "#G!A.jNM<#_H/vx6?5", 23, 147);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        node0.isUnscopedQualifiedName();
        assertFalse(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test507561() throws Throwable {
        Node node0 = Node.newNumber((double) 92);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
    }

    @Test(timeout = 4000)
    public void test507562() throws Throwable {
        Node node0 = Node.newNumber((double) 92);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test508563() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        Node node1 = new Node(2, node0);
        boolean boolean0 = NodeUtil.isLValue(node0);
        node0.getSourcePosition();
        assertEquals(0, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test508564() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        Node node1 = new Node(2, node0);
        boolean boolean0 = NodeUtil.isLValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test509565() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test510566() throws Throwable {
        Node node0 = new Node(113, (-2247), (-2247));
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test511567() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        Node node1 = new Node(27, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test512568() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test513569() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test514570() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test515571() throws Throwable {
        Node node0 = Node.newString(114, "J]!m|?pMddgw qX5%");
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test516572() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test517573() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString(1237, "g=");
        Node node1 = NodeUtil.newFunctionNode("g=", linkedList0, node0, (-2102), 4);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test517574() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString(1237, "g=");
        Node node1 = NodeUtil.newFunctionNode("g=", linkedList0, node0, (-2102), 4);
        node1.getChildCount();
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test517575() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString(1237, "g=");
        Node node1 = NodeUtil.newFunctionNode("g=", linkedList0, node0, (-2102), 4);
        node1.getLineno();
        assertEquals(0, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test517576() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString(1237, "g=");
        Node node1 = NodeUtil.newFunctionNode("g=", linkedList0, node0, (-2102), 4);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test518577() throws Throwable {
        Node node0 = Node.newString(77, "x'}|ECbh\"&O");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test519578() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test520579() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test521580() throws Throwable {
        Node node0 = new Node(111, (-2100), (-2100));
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test522581() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test523582() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test524583() throws Throwable {
        Node node0 = Node.newString(114, "Imls\"*Bw2+zmM^{w");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test525584() throws Throwable {
        Node node0 = new Node(115);
        node0.addChildToBack(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test526585() throws Throwable {
        Node node0 = Node.newString(119, "NaN");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test527586() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test528587() throws Throwable {
        Node node0 = Node.newString(77, "x'}|ECbh\"&O");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test529588() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test530589() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test531590() throws Throwable {
        Node node0 = Node.newString(112, "JSC_EGATING_A_NON_NUBER_ERROR", 112, 112);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test532591() throws Throwable {
        Node node0 = new Node(113, (-2247), (-2247));
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test533592() throws Throwable {
        Node node0 = Node.newString(114, "II>#M");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test534593() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test535594() throws Throwable {
        Node node0 = Node.newString(119, "NaN");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test536595() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test537596() throws Throwable {
        Node node0 = new Node(43, 1535, 43);
        NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test538597() throws Throwable {
        Node node0 = new Node(77, 77, 23);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test539598() throws Throwable {
        Node node0 = new Node(120);
        node0.addChildrenToFront(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test540599() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test541600() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test542601() throws Throwable {
        Node node0 = new Node(48);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test543602() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test544603() throws Throwable {
        Node node0 = Node.newString(110, "JSC_EATING_A_NON_NUBER_ERROR", 110, 110);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test545604() throws Throwable {
        Node node0 = new Node(113, (-2247), (-2247));
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test546605() throws Throwable {
        Node node0 = Node.newString(114, "I>.#M");
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test547606() throws Throwable {
        Node node0 = new Node(115);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test548607() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("g6glO<^H9[u[1UhXn", "g6glO<^H9[u[1UhXn");
        boolean boolean0 = NodeUtil.isStatementParent(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test549608() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("kH", "kH");
        NameReferenceGraphConstruction nameReferenceGraphConstruction0 = new NameReferenceGraphConstruction(compiler0);
        nameReferenceGraphConstruction0.process(node0, node0);
        node0.getType();
        assertEquals(0, node0.getType());
    }

    @Test(timeout = 4000)
    public void test550609() throws Throwable {
        Node node0 = new Node(111, 111, 967);
        boolean boolean0 = NodeUtil.isSwitchCase(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test551610() throws Throwable {
        Node node0 = Node.newString("W(%UJ7s`vyd<%##5");
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test552611() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(442);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "undefined", 51, 122);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test552612() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(442);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "undefined", 51, 122);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test553613() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test554614() throws Throwable {
        Node node0 = Node.newNumber(0.0, 144, 144);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test555615() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        Node node1 = new Node(27, node0);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test556616() throws Throwable {
        Node node0 = new Node(73);
        NodeUtil.maybeAddFinally(node0);
    }

    @Test(timeout = 4000)
    public void test557617() throws Throwable {
        Node node0 = Node.newString(77, "x'}|ECbh\"&O");
        NodeUtil.maybeAddFinally(node0);
        node0.hasOneChild();
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test557618() throws Throwable {
        Node node0 = Node.newString(77, "x'}|ECbh\"&O");
        NodeUtil.maybeAddFinally(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test558619() throws Throwable {
        Node node0 = new Node(43, 1397, 1397);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test559620() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("PR}`e)Hc(cA7v<0W", "Recording function information");
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test560621() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.isThis(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test561622() throws Throwable {
        Node node0 = Node.newString(42, "NaN");
        boolean boolean0 = NodeUtil.isThis(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test562623() throws Throwable {
        Node node0 = new Node(44, 80, 44);
        boolean boolean0 = NodeUtil.isArrayLiteral(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test563624() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.isArrayLiteral(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test564625() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test565626() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node1);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test565627() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test565628() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test565629() throws Throwable {
        Node node0 = Node.newString("#em~3+7r8o]#f#|ijf");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("+?Q=+)\"|7>-X", stack0, node0, 28, 48);
        Node node2 = new Node(34, node1);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node1);
        node1.getChildCount();
        assertEquals(1, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test566630() throws Throwable {
        Node node0 = Node.newNumber((double) 64);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        node1.getChildCount();
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test566631() throws Throwable {
        Node node0 = Node.newNumber((double) 64);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test567632() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test568633() throws Throwable {
        Node node0 = NodeUtil.newVarNode("-", (Node) null);
    }

    @Test(timeout = 4000)
    public void test568634() throws Throwable {
        Node node0 = NodeUtil.newVarNode("-", (Node) null);
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test569635() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test570636() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "#G!A.jNM<#_H/vx6?5", 1717, 147);
        NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test571637() throws Throwable {
        Node node0 = new Node(2119, 2119, 2119);
        Node node1 = new Node(35, node0, node0, node0, 405, 2);
        NodeUtil.isLValue(node1);
    }

    @Test(timeout = 4000)
    public void test572638() throws Throwable {
        Node node0 = new Node(147);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test573639() throws Throwable {
        Node node0 = Node.newString("Y3$thk3h8iMyq2", (-886), (-886));
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test574640() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test575641() throws Throwable {
        Node node0 = new Node(147);
        NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test576642() throws Throwable {
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType((Node) null, (JSType) null);
        assertNotNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test577643() throws Throwable {
        Node node0 = Node.newString(90, "test", 109, 109);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNamedType("test", "+", 0, 8);
        JSType jSType1 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType0);
        jSType1.isTemplateType();
        assertFalse(jSType1.isTemplateType());
    }

    @Test(timeout = 4000)
    public void test578644() throws Throwable {
        Node node0 = new Node(113, (-2175), 967);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test579645() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
    }

    @Test(timeout = 4000)
    public void test579646() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
    }

    @Test(timeout = 4000)
    public void test580647() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
    }

    @Test(timeout = 4000)
    public void test581648() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
    }

    @Test(timeout = 4000)
    public void test581649() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
    }

    @Test(timeout = 4000)
    public void test582650() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(11);
    }

    @Test(timeout = 4000)
    public void test583651() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
    }

    @Test(timeout = 4000)
    public void test584652() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(13);
    }

    @Test(timeout = 4000)
    public void test585653() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
    }

    @Test(timeout = 4000)
    public void test586654() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
    }

    @Test(timeout = 4000)
    public void test587655() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(16);
    }

    @Test(timeout = 4000)
    public void test588656() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(17);
    }

    @Test(timeout = 4000)
    public void test589657() throws Throwable {
        String string0 = NodeUtil.opToStr(18);
    }

    @Test(timeout = 4000)
    public void test590658() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
    }

    @Test(timeout = 4000)
    public void test591659() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
    }

    @Test(timeout = 4000)
    public void test592660() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(21);
    }

    @Test(timeout = 4000)
    public void test593661() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
    }

    @Test(timeout = 4000)
    public void test594662() throws Throwable {
        String string0 = NodeUtil.opToStr(23);
    }

    @Test(timeout = 4000)
    public void test595663() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
    }

    @Test(timeout = 4000)
    public void test596664() throws Throwable {
        String string0 = NodeUtil.opToStr(25);
    }

    @Test(timeout = 4000)
    public void test597665() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
    }

    @Test(timeout = 4000)
    public void test598666() throws Throwable {
        String string0 = NodeUtil.opToStr(27);
    }

    @Test(timeout = 4000)
    public void test599667() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(28);
    }

    @Test(timeout = 4000)
    public void test600668() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
    }

    @Test(timeout = 4000)
    public void test600669() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
    }

    @Test(timeout = 4000)
    public void test601670() throws Throwable {
        NodeUtil.opToStrNoFail(30);
    }

    @Test(timeout = 4000)
    public void test602671() throws Throwable {
        String string0 = NodeUtil.opToStr(31);
    }

    @Test(timeout = 4000)
    public void test603672() throws Throwable {
        String string0 = NodeUtil.opToStr(32);
    }

    @Test(timeout = 4000)
    public void test604673() throws Throwable {
        NodeUtil.opToStrNoFail(33);
    }

    @Test(timeout = 4000)
    public void test605674() throws Throwable {
        NodeUtil.opToStrNoFail(34);
    }

    @Test(timeout = 4000)
    public void test606675() throws Throwable {
        String string0 = NodeUtil.opToStr(35);
    }

    @Test(timeout = 4000)
    public void test607676() throws Throwable {
        String string0 = NodeUtil.opToStr(36);
    }

    @Test(timeout = 4000)
    public void test608677() throws Throwable {
        NodeUtil.opToStrNoFail(37);
    }

    @Test(timeout = 4000)
    public void test609678() throws Throwable {
        String string0 = NodeUtil.opToStr(38);
    }

    @Test(timeout = 4000)
    public void test610679() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
    }

    @Test(timeout = 4000)
    public void test611680() throws Throwable {
        String string0 = NodeUtil.opToStr(40);
    }

    @Test(timeout = 4000)
    public void test612681() throws Throwable {
        NodeUtil.opToStrNoFail(41);
    }

    @Test(timeout = 4000)
    public void test613682() throws Throwable {
        NodeUtil.opToStrNoFail(42);
    }

    @Test(timeout = 4000)
    public void test614683() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
    }

    @Test(timeout = 4000)
    public void test615684() throws Throwable {
        NodeUtil.opToStrNoFail(44);
    }

    @Test(timeout = 4000)
    public void test616685() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
    }

    @Test(timeout = 4000)
    public void test616686() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
    }

    @Test(timeout = 4000)
    public void test617687() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
    }

    @Test(timeout = 4000)
    public void test617688() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
    }

    @Test(timeout = 4000)
    public void test618689() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
    }

    @Test(timeout = 4000)
    public void test619690() throws Throwable {
        String string0 = NodeUtil.opToStr(48);
    }

    @Test(timeout = 4000)
    public void test620691() throws Throwable {
        NodeUtil.opToStrNoFail(49);
    }

    @Test(timeout = 4000)
    public void test621692() throws Throwable {
        NodeUtil.opToStrNoFail(50);
    }

    @Test(timeout = 4000)
    public void test622693() throws Throwable {
        String string0 = NodeUtil.opToStr(51);
    }

    @Test(timeout = 4000)
    public void test622694() throws Throwable {
        String string0 = NodeUtil.opToStr(51);
    }

    @Test(timeout = 4000)
    public void test623695() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
    }

    @Test(timeout = 4000)
    public void test623696() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
    }

    @Test(timeout = 4000)
    public void test624697() throws Throwable {
        NodeUtil.opToStrNoFail(53);
    }

    @Test(timeout = 4000)
    public void test625698() throws Throwable {
        String string0 = NodeUtil.opToStr(54);
    }

    @Test(timeout = 4000)
    public void test626699() throws Throwable {
        String string0 = NodeUtil.opToStr(55);
    }

    @Test(timeout = 4000)
    public void test627700() throws Throwable {
        String string0 = NodeUtil.opToStr(56);
    }

    @Test(timeout = 4000)
    public void test628701() throws Throwable {
        String string0 = NodeUtil.opToStr(57);
    }

    @Test(timeout = 4000)
    public void test629702() throws Throwable {
        NodeUtil.opToStrNoFail(58);
    }

    @Test(timeout = 4000)
    public void test630703() throws Throwable {
        String string0 = NodeUtil.opToStr(59);
    }

    @Test(timeout = 4000)
    public void test631704() throws Throwable {
        NodeUtil.opToStrNoFail(61);
    }

    @Test(timeout = 4000)
    public void test632705() throws Throwable {
        NodeUtil.opToStrNoFail(62);
    }

    @Test(timeout = 4000)
    public void test633706() throws Throwable {
        String string0 = NodeUtil.opToStr(63);
    }

    @Test(timeout = 4000)
    public void test634707() throws Throwable {
        String string0 = NodeUtil.opToStr(65);
    }

    @Test(timeout = 4000)
    public void test635708() throws Throwable {
        NodeUtil.opToStrNoFail(66);
    }

    @Test(timeout = 4000)
    public void test636709() throws Throwable {
        NodeUtil.opToStrNoFail(67);
    }

    @Test(timeout = 4000)
    public void test637710() throws Throwable {
        String string0 = NodeUtil.opToStr(69);
    }

    @Test(timeout = 4000)
    public void test638711() throws Throwable {
        NodeUtil.opToStrNoFail(70);
    }

    @Test(timeout = 4000)
    public void test639712() throws Throwable {
        String string0 = NodeUtil.opToStr(71);
    }

    @Test(timeout = 4000)
    public void test640713() throws Throwable {
        NodeUtil.opToStrNoFail(72);
    }

    @Test(timeout = 4000)
    public void test641714() throws Throwable {
        NodeUtil.opToStrNoFail(73);
    }

    @Test(timeout = 4000)
    public void test642715() throws Throwable {
        NodeUtil.opToStrNoFail(74);
    }

    @Test(timeout = 4000)
    public void test643716() throws Throwable {
        NodeUtil.opToStrNoFail(75);
    }

    @Test(timeout = 4000)
    public void test644717() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
    }

    @Test(timeout = 4000)
    public void test645718() throws Throwable {
        String string0 = NodeUtil.opToStr(77);
    }

    @Test(timeout = 4000)
    public void test646719() throws Throwable {
        String string0 = NodeUtil.opToStr(78);
    }

    @Test(timeout = 4000)
    public void test647720() throws Throwable {
        String string0 = NodeUtil.opToStr(79);
    }

    @Test(timeout = 4000)
    public void test648721() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
    }

    @Test(timeout = 4000)
    public void test649722() throws Throwable {
        NodeUtil.opToStrNoFail(81);
    }

    @Test(timeout = 4000)
    public void test650723() throws Throwable {
        NodeUtil.opToStrNoFail(82);
    }

    @Test(timeout = 4000)
    public void test651724() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
    }

    @Test(timeout = 4000)
    public void test652725() throws Throwable {
        NodeUtil.opToStrNoFail(84);
    }

    @Test(timeout = 4000)
    public void test653726() throws Throwable {
        String string0 = NodeUtil.opToStr(85);
    }

    @Test(timeout = 4000)
    public void test654727() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
    }

    @Test(timeout = 4000)
    public void test654728() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
    }

    @Test(timeout = 4000)
    public void test655729() throws Throwable {
        String string0 = NodeUtil.opToStr(87);
    }

    @Test(timeout = 4000)
    public void test656730() throws Throwable {
        String string0 = NodeUtil.opToStr(88);
    }

    @Test(timeout = 4000)
    public void test657731() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
    }

    @Test(timeout = 4000)
    public void test658732() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(90);
    }

    @Test(timeout = 4000)
    public void test659733() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
    }

    @Test(timeout = 4000)
    public void test660734() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(92);
    }

    @Test(timeout = 4000)
    public void test661735() throws Throwable {
        String string0 = NodeUtil.opToStr(93);
    }

    @Test(timeout = 4000)
    public void test662736() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(94);
    }

    @Test(timeout = 4000)
    public void test663737() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(95);
    }

    @Test(timeout = 4000)
    public void test664738() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(96);
    }

    @Test(timeout = 4000)
    public void test665739() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(97);
    }

    @Test(timeout = 4000)
    public void test666740() throws Throwable {
        String string0 = NodeUtil.opToStr(98);
    }

    @Test(timeout = 4000)
    public void test667741() throws Throwable {
        NodeUtil.opToStrNoFail(99);
    }

    @Test(timeout = 4000)
    public void test668742() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(100);
    }

    @Test(timeout = 4000)
    public void test669743() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
    }

    @Test(timeout = 4000)
    public void test670744() throws Throwable {
        NodeUtil.opToStrNoFail(102);
    }

    @Test(timeout = 4000)
    public void test671745() throws Throwable {
        String string0 = NodeUtil.opToStr(103);
    }

    @Test(timeout = 4000)
    public void test672746() throws Throwable {
        String string0 = NodeUtil.opToStr(104);
    }

    @Test(timeout = 4000)
    public void test673747() throws Throwable {
        NodeUtil.opToStrNoFail(105);
    }

    @Test(timeout = 4000)
    public void test674748() throws Throwable {
        String string0 = NodeUtil.opToStr(106);
    }

    @Test(timeout = 4000)
    public void test675749() throws Throwable {
        NodeUtil.opToStrNoFail(107);
    }

    @Test(timeout = 4000)
    public void test676750() throws Throwable {
        NodeUtil.opToStrNoFail(108);
    }

    @Test(timeout = 4000)
    public void test677751() throws Throwable {
        NodeUtil.opToStrNoFail(109);
    }

    @Test(timeout = 4000)
    public void test678752() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
    }

    @Test(timeout = 4000)
    public void test679753() throws Throwable {
        NodeUtil.opToStrNoFail(111);
    }

    @Test(timeout = 4000)
    public void test680754() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
    }

    @Test(timeout = 4000)
    public void test681755() throws Throwable {
        String string0 = NodeUtil.opToStr(113);
    }

    @Test(timeout = 4000)
    public void test682756() throws Throwable {
        NodeUtil.opToStrNoFail(114);
    }

    @Test(timeout = 4000)
    public void test683757() throws Throwable {
        NodeUtil.opToStrNoFail(115);
    }

    @Test(timeout = 4000)
    public void test684758() throws Throwable {
        String string0 = NodeUtil.opToStr(116);
    }

    @Test(timeout = 4000)
    public void test685759() throws Throwable {
        NodeUtil.opToStrNoFail(117);
    }

    @Test(timeout = 4000)
    public void test686760() throws Throwable {
        NodeUtil.opToStrNoFail(118);
    }

    @Test(timeout = 4000)
    public void test687761() throws Throwable {
        NodeUtil.opToStrNoFail(119);
    }

    @Test(timeout = 4000)
    public void test688762() throws Throwable {
        String string0 = NodeUtil.opToStr(120);
    }

    @Test(timeout = 4000)
    public void test689763() throws Throwable {
        String string0 = NodeUtil.opToStr(121);
    }

    @Test(timeout = 4000)
    public void test690764() throws Throwable {
        String string0 = NodeUtil.opToStr(122);
    }

    @Test(timeout = 4000)
    public void test691765() throws Throwable {
        String string0 = NodeUtil.opToStr((-2405));
    }

    @Test(timeout = 4000)
    public void test692766() throws Throwable {
        Node node0 = Node.newString("case expression doesn't match switch", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("case expression doesn't match switch", node0);
        Node node2 = new Node((-2082), 38, 24);
        Node node3 = new Node(97, node2, node1, 1, 76);
        NodeUtil.redeclareVarsInsideBranch(node3);
    }

    @Test(timeout = 4000)
    public void test693767() throws Throwable {
        Node node0 = new Node(64);
        NodeUtil.copyNameAnnotations(node0, node0);
    }

    @Test(timeout = 4000)
    public void test694768() throws Throwable {
        Node node0 = Node.newString(100, "2");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        linkedList0.addLast(node0);
        NodeUtil.newFunctionNode("2", linkedList0, node0, 10, 2);
    }

    @Test(timeout = 4000)
    public void test695769() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "!1.J", 118, 118);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test695770() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "!1.J", 118, 118);
        node0.getType();
        assertEquals(1, node0.getType());
    }

    @Test(timeout = 4000)
    public void test695771() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "!1.J", 118, 118);
        node0.hasMoreThanOneChild();
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test696772() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "B&?r/.gcJFr+')AJ", 800, (-959));
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getType();
        assertEquals(1, node0.getType());
    }

    @Test(timeout = 4000)
    public void test696773() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "B&?r/.gcJFr+')AJ", 800, (-959));
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.hasMoreThanOneChild();
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test696774() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "B&?r/.gcJFr+')AJ", 800, (-959));
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.getSourcePosition();
        assertEquals(0, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test696775() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "B&?r/.gcJFr+')AJ", 800, (-959));
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.hasChildren();
        assertFalse(node1.hasChildren());
    }

    @Test(timeout = 4000)
    public void test696776() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "B&?r/.gcJFr+')AJ", 800, (-959));
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getLineno();
        assertEquals(0, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test697777() throws Throwable {
        Node node0 = new Node(82, 103, 103);
        NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test698778() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.newName(googleCodingConvention0, "ERROR_FUNCTION_TYPE", (Node) null);
    }

    @Test(timeout = 4000)
    public void test699779() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName(".prototype");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test700780() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("Kpiw");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test701781() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("true");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test702782() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".toV[|/Lse9bBNi|2", 33, 160);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test702783() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".toV[|/Lse9bBNi|2", 33, 160);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.hasChildren();
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test703784() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "eX'`", 2805, 2805);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test703785() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "eX'`", 2805, 2805);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test704786() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test705787() throws Throwable {
        Node node0 = new Node(2119);
        Node node1 = Node.newNumber((-467.49), (-2), 15);
        Node node2 = new Node(54, node0, node1, node0, 405, 2);
        NodeUtil.newVarNode("il2XA_c+TPIY+", node1);
    }

    @Test(timeout = 4000)
    public void test706788() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "1bARjaVIE", 85, 93);
        int int0 = NodeUtil.getNameReferenceCount(node0, "#cc[3bQ");
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test706789() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "1bARjaVIE", 85, 93);
        int int0 = NodeUtil.getNameReferenceCount(node0, "#cc[3bQ");
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test707790() throws Throwable {
        Node node0 = new Node(113, (-2175), 967);
        boolean boolean0 = NodeUtil.containsType(node0, 113);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test708791() throws Throwable {
        Node node0 = new Node(111, (-2100), (-2100));
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test709792() throws Throwable {
        Node node0 = new Node(26);
        Node node1 = NodeUtil.newVarNode("Z1<{#GlM", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
    }

    @Test(timeout = 4000)
    public void test709793() throws Throwable {
        Node node0 = new Node(26);
        Node node1 = NodeUtil.newVarNode("Z1<{#GlM", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
        node0.getChildCount();
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test710794() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("CGUL||Nl*k$5%z)h");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MatchShallowStatement0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test711795() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test712796() throws Throwable {
        Node node0 = Node.newString("aLZoHT6", 10, 10);
        Node node1 = new Node(0, node0, node0, node0, 50, 17);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test713797() throws Throwable {
        Node node0 = Node.newString("valueOf", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("valueOf", node0);
        boolean boolean0 = NodeUtil.containsFunction(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test713798() throws Throwable {
        Node node0 = Node.newString("valueOf", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("valueOf", node0);
        boolean boolean0 = NodeUtil.containsFunction(node1);
        node1.getType();
        assertEquals(1, node1.getType());
    }

    @Test(timeout = 4000)
    public void test713799() throws Throwable {
        Node node0 = Node.newString("valueOf", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("valueOf", node0);
        boolean boolean0 = NodeUtil.containsFunction(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test713800() throws Throwable {
        Node node0 = Node.newString("valueOf", 1536, 1536);
        Node node1 = NodeUtil.newVarNode("valueOf", node0);
        boolean boolean0 = NodeUtil.containsFunction(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test714801() throws Throwable {
        Node node0 = new Node((-1084));
        Node node1 = NodeUtil.newVarNode("split", node0);
        Node node2 = new Node(4096, node1);
        boolean boolean0 = NodeUtil.isNameReferenced(node2, "split");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test714802() throws Throwable {
        Node node0 = new Node((-1084));
        Node node1 = NodeUtil.newVarNode("split", node0);
        Node node2 = new Node(4096, node1);
        boolean boolean0 = NodeUtil.isNameReferenced(node2, "split");
        node0.getChildCount();
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test714803() throws Throwable {
        Node node0 = new Node((-1084));
        Node node1 = NodeUtil.newVarNode("split", node0);
        Node node2 = new Node(4096, node1);
        boolean boolean0 = NodeUtil.isNameReferenced(node2, "split");
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test715804() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test716805() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, predicate0);
    }

    @Test(timeout = 4000)
    public void test717806() throws Throwable {
        Node node0 = new Node(78);
        NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test718807() throws Throwable {
        Node node0 = new Node(115);
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test719808() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test720809() throws Throwable {
        Node node0 = new Node(87);
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test721810() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("CGUL||Nl*k$5%z)h");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test722811() throws Throwable {
        Node node0 = new Node((-5619));
        NodeUtil.getFunctionParameters(node0);
    }

    @Test(timeout = 4000)
    public void test723812() throws Throwable {
        Node node0 = new Node(1545, 1545, 1545);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("vWZ", stack0, node0, (-1418), 89);
        node1.getType();
        assertEquals(1, node1.getType());
    }

    @Test(timeout = 4000)
    public void test723813() throws Throwable {
        Node node0 = new Node(1545, 1545, 1545);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("vWZ", stack0, node0, (-1418), 89);
        Node node2 = NodeUtil.getFunctionParameters(node1);
        node2.getType();
        assertEquals(0, node2.getType());
    }

    @Test(timeout = 4000)
    public void test723814() throws Throwable {
        Node node0 = new Node(1545, 1545, 1545);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("vWZ", stack0, node0, (-1418), 89);
        Node node2 = NodeUtil.getFunctionParameters(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test723815() throws Throwable {
        Node node0 = new Node(1545, 1545, 1545);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("vWZ", stack0, node0, (-1418), 89);
        Node node2 = NodeUtil.getFunctionParameters(node1);
        node2.hasChildren();
        assertFalse(node2.hasChildren());
    }

    @Test(timeout = 4000)
    public void test723816() throws Throwable {
        Node node0 = new Node(1545, 1545, 1545);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("vWZ", stack0, node0, (-1418), 89);
        Node node2 = NodeUtil.getFunctionParameters(node1);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test724817() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "substr", "substr");
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test725818() throws Throwable {
        Node node0 = new Node(74);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test726819() throws Throwable {
        Node node0 = new Node(74);
        node0.addSuppression("Kci");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        jSDocInfo0.getImplementedInterfaceCount();
    }

    @Test(timeout = 4000)
    public void test727820() throws Throwable {
        Node node0 = new Node(41);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("ze{EzS+}", stack0, node0, 38, 4095);
        node1.getChildCount();
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test727821() throws Throwable {
        Node node0 = new Node(41);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("ze{EzS+}", stack0, node0, 38, 4095);
        node1.getSourcePosition();
        assertEquals(1, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test727822() throws Throwable {
        Node node0 = new Node(41);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("ze{EzS+}", stack0, node0, 38, 4095);
        NodeUtil.getInfoForNameNode(node0);
        node0.hasChildren();
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test728823() throws Throwable {
        Node node0 = Node.newString("0*U", 94, 94);
        Node node1 = NodeUtil.newVarNode("0*U", node0);
        node1.getType();
        assertEquals(0, node1.getType());
    }

    @Test(timeout = 4000)
    public void test728824() throws Throwable {
        Node node0 = Node.newString("0*U", 94, 94);
        Node node1 = NodeUtil.newVarNode("0*U", node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test728825() throws Throwable {
        Node node0 = Node.newString("0*U", 94, 94);
        Node node1 = NodeUtil.newVarNode("0*U", node0);
        NodeUtil.getInfoForNameNode(node0);
        node0.hasChildren();
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test728826() throws Throwable {
        Node node0 = Node.newString("0*U", 94, 94);
        Node node1 = NodeUtil.newVarNode("0*U", node0);
        NodeUtil.getInfoForNameNode(node0);
        node0.hasOneChild();
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test729827() throws Throwable {
        Node node0 = new Node((-640));
        NodeUtil.getFunctionJSDocInfo(node0);
    }

    @Test(timeout = 4000)
    public void test730828() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.getFunctionJSDocInfo(node0);
    }

    @Test(timeout = 4000)
    public void test731829() throws Throwable {
        Node node0 = new Node(105);
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, false);
        List<Node> list0 = astParallelizer0.split();
        Node node1 = NodeUtil.newFunctionNode("this.", list0, node0, 48, 4);
        node1.getChildCount();
        assertEquals(1, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test731830() throws Throwable {
        Node node0 = new Node(105);
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, false);
        List<Node> list0 = astParallelizer0.split();
        Node node1 = NodeUtil.newFunctionNode("this.", list0, node0, 48, 4);
        node1.getSourcePosition();
        assertEquals(0, node1.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test731831() throws Throwable {
        Node node0 = new Node(105);
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, false);
        List<Node> list0 = astParallelizer0.split();
        Node node1 = NodeUtil.newFunctionNode("this.", list0, node0, 48, 4);
        NodeUtil.getFunctionJSDocInfo(node0);
        node0.getChildCount();
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test732832() throws Throwable {
        Node node0 = new Node(2108);
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test733833() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test734834() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties", (-1342), (-1342));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test734835() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties", (-1342), (-1342));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.getType();
        assertEquals(1, node0.getType());
    }

    @Test(timeout = 4000)
    public void test735836() throws Throwable {
        Node node0 = new Node(34);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test736837() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test737838() throws Throwable {
        Node node0 = new Node(36);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test738839() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test739840() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test740841() throws Throwable {
        Node node0 = new Node(48, 48, 48);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test741842() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test742843() throws Throwable {
        Node node0 = new Node(53, 27591, 27591);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test743844() throws Throwable {
        Node node0 = new Node(54, 54, 54);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test744845() throws Throwable {
        Node node0 = new Node((byte) 57, 133, 133);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test745846() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test746847() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test747848() throws Throwable {
        Node node0 = new Node(65);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test748849() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test749850() throws Throwable {
        Node node0 = new Node(73);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test750851() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test751852() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test752853() throws Throwable {
        Node node0 = new Node(81);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test753854() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test754855() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test755856() throws Throwable {
        Node node0 = new Node(87);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test756857() throws Throwable {
        Node node0 = new Node(88);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test757858() throws Throwable {
        Node node0 = new Node(89);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test758859() throws Throwable {
        Node node0 = Node.newString(90, "test", 109, 109);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test759860() throws Throwable {
        Node node0 = new Node(91);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test760861() throws Throwable {
        Node node0 = Node.newString(93, "3EF|WB+c#<&");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test761862() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test762863() throws Throwable {
        Node node0 = new Node(95, 95, 425);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test763864() throws Throwable {
        Node node0 = new Node(96, 74, 96);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test764865() throws Throwable {
        Node node0 = new Node(97);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test765866() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test766867() throws Throwable {
        Node node0 = new Node(99);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test767868() throws Throwable {
        Node node0 = new Node(101, 118, 1227);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test768869() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test769870() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test770871() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test771872() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        Node node1 = new Node(47);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test772873() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\naent:", 803, 803);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test772874() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\naent:", 803, 803);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        node0.getSourcePosition();
        assertEquals(1, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test773875() throws Throwable {
        Node node0 = Node.newNumber(8233.0);
        Node node1 = new Node(41);
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node1;
        Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
        Node node3 = NodeUtil.getArgumentForCallOrNew(node2, 12);
    }

    @Test(timeout = 4000)
    public void test773876() throws Throwable {
        Node node0 = Node.newNumber(8233.0);
        Node node1 = new Node(41);
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node1;
        Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
        Node node3 = NodeUtil.getArgumentForCallOrNew(node2, 12);
        node2.getChildCount();
        assertEquals(1, node2.getChildCount());
    }

    @Test(timeout = 4000)
    public void test773877() throws Throwable {
        Node node0 = Node.newNumber(8233.0);
        Node node1 = new Node(41);
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node1;
        Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
        Node node3 = NodeUtil.getArgumentForCallOrNew(node2, 12);
        node2.hasMoreThanOneChild();
        assertTrue(node2.hasMoreThanOneChild());
    }
}
