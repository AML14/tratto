project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive("""");
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    String string0 = jsonTreeReader0.nextString();
    assertEquals("""", string0);
}",1,
project,0,test011,"public void test011() throws Throwable {
    Double double0 = new Double((-0.14075010792600606));
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    long long0 = jsonTreeReader0.nextLong();
    assertEquals(0L, long0);
}",1,
project,0,test022,"public void test022() throws Throwable {
    Double double0 = new Double((-22.89672307759168));
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    long long0 = jsonTreeReader0.nextLong();
    assertEquals((-22L), long0);
}",1,
project,0,test033,"public void test033() throws Throwable {
    Float float0 = new Float(0.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    int int0 = jsonTreeReader0.nextInt();
    assertEquals(0, int0);
}",1,
project,0,test044,"public void test044() throws Throwable {
    Double double0 = new Double(0.8883198299669907);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    double double1 = jsonTreeReader0.nextDouble();
    assertEquals(0.8883198299669907, double1, 0.01);
}",1,
project,0,test055,"public void test055() throws Throwable {
    Boolean boolean0 = Boolean.valueOf(true);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    boolean boolean1 = jsonTreeReader0.nextBoolean();
    assertTrue(boolean1);
}",1,
project,0,test066,"public void test066() throws Throwable {
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonNull0);
    jsonTreeReader0.close();
    // Undeclared exception!
    try {
        jsonTreeReader0.skipValue();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JsonReader is closed
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test077,"public void test077() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.skipValue();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test088,"public void test088() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.promoteNameToValue();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.promoteNameToValue();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextString();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextString();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test1212,"public void test1212() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextNull();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    Double double0 = new Double(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextNull();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NULL but was NUMBER at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextNull();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextName();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",1,
project,0,test1616,"public void test1616() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextName();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test1717,"public void test1717() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextLong();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",1,
project,0,test1818,"public void test1818() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextLong();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test1919,"public void test1919() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextInt();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test2020,"public void test2020() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextDouble();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test2121,"public void test2121() throws Throwable {
    Float float0 = new Float(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextBoolean();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected BOOLEAN but was NUMBER at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test2222,"public void test2222() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextBoolean();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test2323,"public void test2323() throws Throwable {
    Boolean boolean0 = Boolean.TRUE;
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.endObject();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected END_OBJECT but was BOOLEAN at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test2424,"public void test2424() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.endObject();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test2525,"public void test2525() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.endArray();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test2626,"public void test2626() throws Throwable {
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(""vb.Fsa#"");
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.beginObject();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected BEGIN_OBJECT but was STRING at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test2727,"public void test2727() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.beginObject();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test2828,"public void test2828() throws Throwable {
    Character character0 = Character.valueOf('2');
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.beginArray();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected BEGIN_ARRAY but was STRING at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test2929,"public void test2929() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.beginArray();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test3030,"public void test3030() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    jsonTreeReader0.beginObject();
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$."", string0);
}",0,assertNotNull(string0)
project,0,test3131,"public void test3131() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$"", string0);
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$[0]"", string0);
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$"", string0);
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$"", string0);
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.peek();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test3636,"public void test3636() throws Throwable {
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonNull0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.NULL, jsonToken0);
}",1,
project,0,test3737,"public void test3737() throws Throwable {
    Character character0 = Character.valueOf('2');
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.STRING, jsonToken0);
}",1,
project,0,test3838,"public void test3838() throws Throwable {
    Double double0 = new Double(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    jsonTreeReader0.close();
    // Undeclared exception!
    try {
        jsonTreeReader0.peek();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JsonReader is closed
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test3939,"public void test3939() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.BEGIN_ARRAY, jsonToken0);
}",1,
project,0,test4040,"public void test4040() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.BEGIN_OBJECT, jsonToken0);
}",1,
project,0,test4141,"public void test4141() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Float float0 = new Float(306.01129);
    jsonTreeReader0.beginArray();
    jsonArray0.add((Number) float0);
    // Undeclared exception!
    try {
        jsonTreeReader0.peek();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",1,
project,0,test4242,"public void test4242() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.END_ARRAY, jsonToken0);
}",1,
project,0,test4343,"public void test4343() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextString();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected STRING but was BEGIN_OBJECT at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test4444,"public void test4444() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    jsonArray0.add((Character) null);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    // Undeclared exception!
    try {
        jsonTreeReader0.nextString();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected STRING but was NULL at path $[0]
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test4545,"public void test4545() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    // Undeclared exception!
    try {
        jsonTreeReader0.nextLong();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NUMBER but was END_ARRAY at path $[0]
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test4646,"public void test4646() throws Throwable {
    Boolean boolean0 = Boolean.valueOf(false);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.skipValue();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test4747,"public void test4747() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextInt();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NUMBER but was BEGIN_ARRAY at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test4848,"public void test4848() throws Throwable {
    Character character0 = Character.valueOf('W');
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextInt();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""W\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",1,
project,0,test4949,"public void test4949() throws Throwable {
    Float float0 = new Float(162.708089555);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    int int0 = jsonTreeReader0.nextInt();
    assertEquals(162, int0);
}",1,
project,0,test5050,"public void test5050() throws Throwable {
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(""JSON forbids NaN and infinities: "");
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextLong();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""JSON forbids NaN and infinities: \""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",1,
project,0,test5151,"public void test5151() throws Throwable {
    Double double0 = new Double(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    long long0 = jsonTreeReader0.nextLong();
    assertEquals(1L, long0);
}",1,
project,0,test5252,"public void test5252() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextDouble();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NUMBER but was BEGIN_ARRAY at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test5353,"public void test5353() throws Throwable {
    Character character0 = new Character('`');
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextDouble();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
    }
}",1,
project,0,test5454,"public void test5454() throws Throwable {
    Double double0 = new Double(0.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    double double1 = jsonTreeReader0.nextDouble();
    assertEquals(0.0, double1, 0.01);
}",1,
project,0,test5555,"public void test5555() throws Throwable {
    Boolean boolean0 = Boolean.valueOf(false);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    boolean boolean1 = jsonTreeReader0.nextBoolean();
    assertFalse(boolean1);
}",1,
project,0,test5656,"public void test5656() throws Throwable {
    Double double0 = new Double(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    String string0 = jsonTreeReader0.nextString();
    assertNotNull(string0);
}",1,
project,0,test5757,"public void test5757() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.hasNext();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonNull0);
    jsonTreeReader0.close();
    // Undeclared exception!
    try {
        jsonTreeReader0.hasNext();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JsonReader is closed
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    Boolean boolean0 = new Boolean(""cwA{pGf]Mg1l"");
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.BOOLEAN, jsonToken0);
}",1,
project,0,test6060,"public void test6060() throws Throwable {
    Double double0 = new Double(0.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.NUMBER, jsonToken0);
}",1,
project,0,test6161,"public void test6161() throws Throwable {
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(""JSON forbids NaN and infinities: "");
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    boolean boolean0 = jsonTreeReader0.hasNext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test6262,"public void test6262() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.endArray();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",1,
project,0,test6363,"public void test6363() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    boolean boolean0 = jsonTreeReader0.hasNext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test6464,"public void test6464() throws Throwable {
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonNull0);
    jsonTreeReader0.nextNull();
    assertFalse(jsonTreeReader0.isLenient());
}",0,assertTrue(jsonTreeReader0.isLenient())
project,0,test6565,"public void test6565() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    String string0 = jsonTreeReader0.toString();
    assertEquals(""JsonTreeReader"", string0);
}",0,
project,0,test6666,"public void test6666() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextName();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NAME but was BEGIN_ARRAY at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test6767,"public void test6767() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    jsonTreeReader0.beginObject();
    // Undeclared exception!
    try {
        jsonTreeReader0.endArray();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected END_ARRAY but was END_OBJECT at path $.
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",1,
project,0,test6868,"public void test6868() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    jsonTreeReader0.endArray();
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.END_DOCUMENT, jsonToken0);
}",1,
project,0,test6969,"public void test6969() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    // Undeclared exception!
    try {
        jsonTreeReader0.promoteNameToValue();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NAME but was BEGIN_ARRAY at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",0,
