project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
    ReflectiveTypeAdapterFactory.Adapter<Integer> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Integer>((ObjectConstructor<Integer>) null, hashMap0);
    Gson gson0 = new Gson();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
    JsonWriter jsonWriter0 = gson0.newJsonWriter(mockPrintWriter0);
    Integer integer0 = new Integer(1985);
    reflectiveTypeAdapterFactory_Adapter0.write(jsonWriter0, integer0);
    assertFalse(jsonWriter0.isHtmlSafe());
}",0,
project,0,test22,"public void test22() throws Throwable {
    Excluder excluder0 = new Excluder();
    // Undeclared exception!
    try {
        ReflectiveTypeAdapterFactory.excludeField((Field) null, true, excluder0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.ReflectiveTypeAdapterFactory"", e);
    }
}",0,
project,0,test33,"public void test33() throws Throwable {
    FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
    Gson gson0 = new Gson();
    Excluder excluder0 = gson0.excluder();
    ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingPolicy0, excluder0);
    Class<Object> class0 = Object.class;
    TypeToken<Object> typeToken0 = TypeToken.get(class0);
    // Undeclared exception!
    try {
        reflectiveTypeAdapterFactory0.create(gson0, typeToken0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.ReflectiveTypeAdapterFactory"", e);
    }
}",0,
project,0,test44,"public void test44() throws Throwable {
    FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    Gson gson0 = new Gson();
    Excluder excluder0 = gson0.excluder();
    ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingPolicy0, excluder0);
    // Undeclared exception!
    try {
        reflectiveTypeAdapterFactory0.excludeField((Field) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.ReflectiveTypeAdapterFactory"", e);
    }
}",0,
project,0,test55,"public void test55() throws Throwable {
    Gson gson0 = new Gson();
    Boolean boolean0 = new Boolean(false);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    Class<Type> class0 = Type.class;
    // Undeclared exception!
    try {
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Register an InstanceCreator with Gson for this type may fix this problem.
        //
        verifyException(""com.google.gson.internal.ConstructorConstructor$14"", e);
    }
}",0,
project,0,test66,"public void test66() throws Throwable {
    HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
    ReflectiveTypeAdapterFactory.Adapter<InstanceCreator<Integer>> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<InstanceCreator<Integer>>((ObjectConstructor<InstanceCreator<Integer>>) null, hashMap0);
    Gson gson0 = new Gson();
    PipedReader pipedReader0 = new PipedReader();
    PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
    gson0.toJson((Object) reflectiveTypeAdapterFactory_Adapter0, (Appendable) pipedWriter0);
    assertFalse(gson0.serializeNulls());
}",0,assertFalse(gson0.serializeNulls())
