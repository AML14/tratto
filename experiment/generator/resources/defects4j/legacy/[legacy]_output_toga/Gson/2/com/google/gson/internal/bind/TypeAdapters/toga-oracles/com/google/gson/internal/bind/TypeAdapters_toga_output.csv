project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Gson gson0 = new Gson();
    Class<Calendar> class0 = Calendar.class;
    Class<GregorianCalendar> class1 = GregorianCalendar.class;
    TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, (TypeAdapter<Calendar>) null, class1);
    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Calendar>) class1, (TypeAdapter<? super Calendar>) typeAdapterRuntimeTypeWrapper0);
    assertNotNull(typeAdapterFactory0);
}",1,
project,0,test011,"public void test011() throws Throwable {
    Class<Boolean> class0 = Boolean.class;
    Class<Calendar> class1 = Calendar.class;
    TypeToken<Calendar> typeToken0 = TypeToken.get(class1);
    TypeAdapter<Calendar> typeAdapter0 = TypeAdapters.CALENDAR;
    TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>((Gson) null, typeAdapter0, class0);
    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Calendar>) typeAdapterRuntimeTypeWrapper0);
    assertNotNull(typeAdapterFactory0);
}",1,
project,0,test022,"public void test022() throws Throwable {
    Class<UUID> class0 = UUID.class;
    Gson gson0 = new Gson();
    Class<Calendar> class1 = Calendar.class;
    TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class1);
    TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);
    PipedReader pipedReader0 = new PipedReader();
    JsonReader jsonReader0 = new JsonReader(pipedReader0);
    try {
        typeAdapterRuntimeTypeWrapper0.read(jsonReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    Gson gson0 = new Gson();
    TypeAdapter<ChronoLocalDate> typeAdapter0 = gson0.getAdapter(class0);
    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
    assertNotNull(typeAdapterFactory0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    Class<Boolean> class0 = Boolean.class;
    Gson gson0 = new Gson();
    TypeAdapter<Boolean> typeAdapter0 = gson0.getAdapter(class0);
    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Boolean>) typeAdapter0);
    assertNotNull(typeAdapterFactory0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    Gson gson0 = new Gson();
    Class<GregorianCalendar> class0 = GregorianCalendar.class;
    TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(class0);
    assertNotNull(typeAdapter0);
}",0,assertNotNull(typeAdapter0)
project,0,test066,"public void test066() throws Throwable {
    Gson gson0 = new Gson();
    Class<Object> class0 = Object.class;
    TypeToken<Object> typeToken0 = TypeToken.get(class0);
    TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
    String string0 = gson0.toJson((Object) typeAdapter0);
    assertNotNull(string0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    Gson gson0 = new Gson();
    JsonObject jsonObject0 = new JsonObject();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
    gson0.toJson((JsonElement) jsonObject0, (Appendable) mockPrintWriter0);
    assertFalse(jsonObject0.isJsonArray());
}",0,assertFalse(jsonObject0.isJsonArray())
project,0,test088,"public void test088() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    // Undeclared exception!
    try {
        jsonArray0.getAsJsonObject();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Not a JSON Object: []
        //
        verifyException(""com.google.gson.JsonElement"", e);
    }
}",1,
project,0,test099,"public void test099() throws Throwable {
    Gson gson0 = new Gson();
    String string0 = gson0.toJson((Object) null);
    assertEquals(""null"", string0);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Gson gson0 = new Gson();
    Character character0 = Character.valueOf('c');
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
    String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
    assertEquals(""\""c\"""", string0);
}",0,assertNotNull(string0)
project,0,test1111,"public void test1111() throws Throwable {
    Gson gson0 = new Gson();
    String string0 = gson0.toJson((JsonElement) null);
    assertEquals(""null"", string0);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Class<Object> class0 = Object.class;
    Gson gson0 = new Gson();
    JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
    Class<JsonArray> class1 = JsonArray.class;
    // Undeclared exception!
    try {
        gson0.fromJson(jsonElement0, class1);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    Gson gson0 = new Gson();
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(""Qu"");
    Class<JsonArray> class0 = JsonArray.class;
    // Undeclared exception!
    try {
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    Class<Object> class0 = Object.class;
    Excluder excluder0 = Excluder.DEFAULT;
    Gson gson0 = new Gson();
    JsonElement jsonElement0 = gson0.toJsonTree((Object) excluder0, (Type) class0);
    Class<JsonArray> class1 = JsonArray.class;
    // Undeclared exception!
    try {
        gson0.fromJson(jsonElement0, class1);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
    Gson gson0 = new Gson();
    TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
    TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
    Locale locale0 = Locale.PRC;
    JsonPrimitive jsonPrimitive0 = (JsonPrimitive) typeAdapterRuntimeTypeWrapper0.toJsonTree(locale0);
    assertFalse(jsonPrimitive0.isBoolean());
}",0,assertTrue(jsonPrimitive0.isBoolean())
project,0,test1616,"public void test1616() throws Throwable {
    Class<Locale> class0 = Locale.class;
    Gson gson0 = new Gson();
    TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, (TypeAdapter<Object>) null, class0);
    URL uRL0 = MockURL.getFileExample();
    // Undeclared exception!
    try {
        typeAdapterRuntimeTypeWrapper0.toJson((Object) uRL0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JSON must start with an array or an object.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    Class<URL> class0 = URL.class;
    Gson gson0 = new Gson();
    TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(class0);
    TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    URL uRL0 = typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonNull0);
    assertNull(uRL0);
}",1,
project,0,test1818,"public void test1818() throws Throwable {
    Class<StringBuffer> class0 = StringBuffer.class;
    Gson gson0 = new Gson();
    try {
        gson0.fromJson(""Expected name"", (Type) class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 11 path $
        //
        verifyException(""com.google.gson.Gson"", e);
    }
}",1,
project,0,test1919,"public void test1919() throws Throwable {
    Gson gson0 = new Gson();
    Boolean boolean0 = new Boolean(""/s*XB$;,$>m0)"");
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    Class<Long> class0 = Long.TYPE;
    try {
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BOOLEAN
        //
        verifyException(""com.google.gson.Gson"", e);
    }
}",1,
project,0,test2020,"public void test2020() throws Throwable {
    Gson gson0 = new Gson();
    Class<Short> class0 = Short.class;
    try {
        gson0.fromJson(""Expected "", (Type) class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected an int but was STRING at line 1 column 1 path $
        //
        verifyException(""com.google.gson.Gson"", e);
    }
}",1,
project,0,test2121,"public void test2121() throws Throwable {
    Class<Byte> class0 = Byte.class;
    Gson gson0 = new Gson();
    JsonObject jsonObject0 = new JsonObject();
    try {
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT
        //
        verifyException(""com.google.gson.Gson"", e);
    }
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    Gson gson0 = new Gson();
    Class<Boolean> class0 = Boolean.TYPE;
    String string0 = gson0.toJson((Object) null, (Type) class0);
    assertEquals(""null"", string0);
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    Gson gson0 = new Gson();
    BitSet bitSet0 = new BitSet();
    bitSet0.flip(12);
    JsonArray jsonArray0 = (JsonArray) gson0.toJsonTree((Object) bitSet0);
    assertEquals(13, jsonArray0.size());
}",0,"assertEquals(1, jsonArray0.size())"
project,0,test2424,"public void test2424() throws Throwable {
    Gson gson0 = new Gson();
    BitSet bitSet0 = new BitSet();
    JsonElement jsonElement0 = gson0.toJsonTree((Object) bitSet0);
    Class<StringBuilder> class0 = StringBuilder.class;
    try {
        gson0.fromJson(jsonElement0, class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY
        //
        verifyException(""com.google.gson.Gson"", e);
    }
}",1,
project,0,test2525,"public void test2525() throws Throwable {
    Class<Byte> class0 = Byte.class;
    Gson gson0 = new Gson();
    // Undeclared exception!
    try {
        gson0.toJson((Object) class0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Attempted to serialize java.lang.Class: java.lang.Byte. Forgot to register a type adapter?
        //
        verifyException(""com.google.gson.internal.bind.TypeAdapters$1"", e);
    }
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<MockGregorianCalendar>) null);
    assertNotNull(typeAdapterFactory0);
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    Gson gson0 = new Gson();
    String string0 = gson0.toString();
    assertNotNull(string0);
}",0,
