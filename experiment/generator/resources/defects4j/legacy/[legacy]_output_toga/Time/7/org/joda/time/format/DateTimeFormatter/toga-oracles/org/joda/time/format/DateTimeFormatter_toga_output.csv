project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    dateTimeFormatter0.getPivotYear();
    UTCProvider uTCProvider0 = new UTCProvider();
    ZoneId.getAvailableZoneIds();
    StringWriter stringWriter0 = new StringWriter(2275);
    stringWriter0.append('O');
    MutableDateTime.now();
    dateTimeFormatter0.parseMutableDateTime(""O-Y1EtX /r)6t63A1{I"");
    dateTimeFormatter0.withZoneUTC();
    String string0 = """";
    LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string0);
    dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadablePartial) localTime0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.getChronolgy();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""O-Y1EtX /r)6t63A1{I\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test0181,"public void test0181() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
    Partial partial0 = new Partial(localDate0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    MockPrintStream mockPrintStream0 = new MockPrintStream(""w"");
    Object[] objectArray0 = new Object[8];
    objectArray0[0] = (Object) ""|"";
    objectArray0[2] = (Object) ""|"";
    objectArray0[3] = (Object) ""w"";
    objectArray0[4] = (Object) localDate0;
    objectArray0[5] = (Object) ""w"";
    objectArray0[6] = (Object) dateTimeFormatter1;
    PrintStream printStream0 = mockPrintStream0.printf(""|"", objectArray0);
    dateTimeFormatter1.printTo((Appendable) printStream0, (ReadablePartial) partial0);
    dateTimeFormatter1.getChronology();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
    PrintWriter printWriter0 = mockPrintWriter0.append('Y');
    MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
    dateTimeFormatter1.printTo((Writer) mockPrintWriter1, (ReadablePartial) localDate0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    dateTimeFormatter1.printTo((Appendable) printStream0, (ReadableInstant) mutableDateTime0);
    dateTimeFormatter1.parseLocalTime(""w"");
    String string0 = """";
    dateTimeFormatter0.parseLocalTime(string0);
    StringBuffer stringBuffer0 = null;
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) partial0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""w\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test0262,"public void test0262() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    int int0 = 65;
    dateTimeFormatter0.withDefaultYear(65);
    StringWriter stringWriter0 = new StringWriter();
    stringWriter0.getBuffer();
    LocalDateTime localDateTime0 = LocalDateTime.parse("""");
    // Undeclared exception!
    try {
        localDateTime0.withYear(int0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test0324,"public void test0324() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
    Locale locale0 = Locale.UK;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
    int int0 = (-1);
    dateTimeFormatter1.withLocale(locale0);
    dateTimeFormatter0.withDefaultYear((-1));
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1));
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
    UTCProvider uTCProvider0 = new UTCProvider();
    String string0 = ""Parsing not supported"";
    dateTimeFormatter0.parseMutableDateTime(""Parsing not supported"");
    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
    // Undeclared exception!
    try {
        dateTimeFormatter5.print((long) int0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""Parsing not supported\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test0395,"public void test0395() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 47, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(47);
    Integer integer0 = new Integer(245);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    dateTimeFormatter3.withZone(fixedDateTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer();
    LocalDateTime localDateTime0 = LocalDateTime.parse(""E+b^jb2^~g<$<4v!-u|"");
    int int0 = 1;
    LocalDateTime localDateTime1 = localDateTime0.plusDays(int0);
    LocalDate localDate0 = localDateTime1.toLocalDate();
    // Undeclared exception!
    try {
        localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""E+b^jb2^~g<$<4v!-u|\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test0498,"public void test0498() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-826), false);
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
    Locale locale0 = Locale.KOREAN;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    Instant instant0 = new Instant((long) (-826));
    Chronology chronology0 = instant0.getChronology();
    DateTime dateTime0 = new DateTime(0L);
    instant0.isBefore(dateTime0);
    LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
    LocalDateTime localDateTime1 = localDateTime0.minusHours((-826));
    Integer integer0 = new Integer((-826));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-11L), chronology0, locale0, integer0, (-826));
    Integer.toUnsignedLong((-826));
    dateTimeParserBucket0.computeMillis(false);
    Integer.compare((-826), (-826));
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    dateTimeFormatter3.withZone(dateTimeZone0);
    localDateTime1.toLocalDate();
    dateTimeFormatter2.print((ReadablePartial) localDateTime1);
    dateTimeFormatter2.print((ReadablePartial) localDateTime1);
    long long0 = 1L;
    dateTimeFormatter3.print(long0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.withChronology(chronology0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.lang.AbstractStringBuilder"", e);
    }
}",0,
project,0,test0539,"public void test0539() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1027, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
    dateTimeFormatter0.withDefaultYear(10080);
    int int0 = 292271022;
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
    fixedDateTimeZone0.getName((long) 10080);
    String string0 = ""5b`o@6e,FTZ0"";
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(""5b`o@6e,FTZ0"");
    String string1 = ""org.joda.time.chrono.GJYearOfEraDateTimeField"";
    int int1 = 0;
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseInto(mutableDateTime0, string1, int1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""5b`o@6e,FTZ0\"" is malformed at \""b`o@6e,FTZ0\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test05510,"public void test05510() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(0);
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1505));
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    int int0 = (-955);
    Integer integer0 = Integer.valueOf(""Instant must not be null"", (-955));
    dateTimeFormatter3.withPivotYear(integer0);
    long long0 = (-2836L);
    // Undeclared exception!
    try {
        DateTimeUtils.setCurrentMillisOffset(long0);
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // radix -955 less than Character.MIN_RADIX
        //
        verifyException(""java.lang.Integer"", e);
    }
}",1,
project,0,test05811,"public void test05811() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    int int0 = 1;
    dateTimeFormatter0.withDefaultYear(1);
    String string0 = ""(>TC|[5nkz p1^"";
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalTime(""(>TC|[5nkz p1^"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",1,
project,0,test05912,"public void test05912() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    linkedList0.add((Object) dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    Chronology chronology0 = buddhistChronology0.withZone(fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    linkedList0.forEach(consumer0);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeZone.setNameProvider(defaultNameProvider0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-527));
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withPivotYear(2000);
    Locale locale0 = Locale.TAIWAN;
    DateTimeZone.forTimeZone((TimeZone) null);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale0);
    dateTimeFormatter5.getLocale();
    DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withOffsetParsed();
    dateTimeFormatter0.getZone();
    dateTimeFormatter4.withPivotYear(1023);
    dateTimeFormatter6.isOffsetParsed();
    DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withChronology(buddhistChronology0);
    dateTimeFormatter7.parseLocalDateTime(""The datetime zone id '"");
    String string0 = ""VADxWbj"";
    dateTimeFormatter7.parseMutableDateTime(string0);
    Writer writer0 = null;
    Instant instant0 = Instant.now();
    // Undeclared exception!
    try {
        dateTimeFormatter1.printTo(writer0, (ReadableInstant) instant0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",0,
project,0,test06313,"public void test06313() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('J');
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
    dateTimeFormatter1.getChronolgy();
    int int0 = 12740625;
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTime dateTime0 = DateTime.parse("""");
    LimitChronology limitChronology0 = LimitChronology.getInstance(copticChronology0, dateTime0, dateTime0);
    // Undeclared exception!
    try {
        limitChronology0.getUpperLimit();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test06514,"public void test06514() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 623191204, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) null);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
    dateTimeFieldType0.getRangeDurationType();
    fixedDateTimeZone0.getNameKey(623191204);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-311));
    dateTimeFormatter2.getChronolgy();
    Integer integer0 = new Integer(623191204);
    dateTimeFormatter1.withPivotYear(integer0);
    dateTimeFormatter0.withOffsetParsed();
    String string0 = ""Instant must not be null"";
    StringBuffer stringBuffer0 = new StringBuffer(""Instant must not be null"");
    LocalDateTime localDateTime0 = new LocalDateTime((-1699L));
    LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(192);
    String string1 = ""Parsing not supported"";
    Locale locale0 = new Locale(string1, string1, string0);
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDateTime1, locale0);
    dateTimeFormatter1.getLocale();
    dateTimeFormatter0.getChronology();
    // Undeclared exception!
    try {
        dateTimeFormatter2.isOffsetParsed();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 192 for yearOfCentury must be in the range [0,99]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test06615,"public void test06615() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1900);
    dateTimeFormatter4.parseDateTime((String) null);
    String string0 = ""subtrahend"";
    Locale locale0 = new Locale(string0);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
    dateTimeFormatter5.getDefaultYear();
    // Undeclared exception!
    try {
        dateTimeFormatter2.getLocale();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter"", e);
    }
}",1,
project,0,test06817,"public void test06817() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-2317));
    Integer.getInteger(""$BxB)A)a^.Zjn.5If-E"");
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) null);
    Locale locale0 = new Locale(""$BxB)A)a^.Zjn.5If-E"", (String) null);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
    String string0 = null;
    // Undeclared exception!
    try {
        dateTimeFormatter5.parseMutableDateTime(string0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Locale"", e);
    }
}",1,
project,0,test07018,"public void test07018() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    dateTimeFormatter0.getPivotYear();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getZone((String) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
    StringWriter stringWriter0 = new StringWriter(2275);
    StringWriter stringWriter1 = stringWriter0.append('O');
    StringBuffer stringBuffer0 = stringWriter1.getBuffer();
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) mutableDateTime0);
    dateTimeFormatter1.parseLocalTime((String) null);
    String string0 = ""O-Y1EtX /r)6t63A1{I"";
    dateTimeFormatter0.parseMutableDateTime(string0);
    String string1 = """";
    LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string1);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadablePartial) localTime0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName"", e);
    }
}",0,
project,0,test07319,"public void test07319() throws Throwable {
    int int0 = (-63);
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-63), hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    int int1 = 694;
    Integer integer0 = new Integer(694);
    FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
    Integer.toUnsignedLong(694);
    Writer writer0 = null;
    GJChronology.getInstance();
    int int2 = 2700;
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Writer) null, 694L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName"", e);
    }
}",0,
project,0,test07420,"public void test07420() throws Throwable {
    String string0 = ""8"";
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""8"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = (-365);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    dateTimeFormatter0.parseLocalTime(""8"");
    // Undeclared exception!
    try {
        EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-365));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid min days in first week: -365
        //
        verifyException(""org.joda.time.chrono.EthiopicChronology"", e);
    }
}",0,
project,0,test08623,"public void test08623() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    int int0 = 115;
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 115, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""No instant converter found for type: "");
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(115);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(115);
    Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
    dateTimeFormatter4.withChronology(chronology0);
    Locale locale0 = Locale.FRENCH;
    dateTimeFormatter4.withLocale(locale0);
    Object object0 = new Object();
    DateTime dateTime0 = new DateTime(object0);
    DateTime dateTime1 = dateTime0.plusMonths(int0);
    DateTime dateTime2 = dateTime1.withMillis(int0);
    int int1 = 86400;
    // Undeclared exception!
    try {
        dateTime2.minusYears(int1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No instant converter found for type: java.lang.Object
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}",0,
project,0,test09224,"public void test09224() throws Throwable {
    int int0 = 7;
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""^,"", """", false, 7, 7);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
    Integer integer0 = new Integer(2128);
    dateTimeFormatter0.withPivotYear(integer0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    MonthDay monthDay0 = MonthDay.parse(""=1tR*"", dateTimeFormatter0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    int int1 = 0;
    MonthDay monthDay1 = monthDay0.withField(dateTimeFieldType0, int1);
    LocalDate localDate0 = monthDay1.toLocalDate(int0);
    // Undeclared exception!
    try {
        localDate0.withMonthOfYear(int0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""=1tR\\*\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test09626,"public void test09626() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    Locale locale0 = Locale.TAIWAN;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
    dateTimeFormatter1.withOffsetParsed();
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('k');
    DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(6);
    DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withDefaultYear(523);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter6.printTo((Appendable) charArrayWriter0, (-28801249L));
    LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) null);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    int int0 = 3116;
    Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
    ReadablePeriod readablePeriod0 = null;
    // Undeclared exception!
    try {
        partial1.minus(readablePeriod0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // Zone must not be null
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test10027,"public void test10027() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
    dateTimeFormatter0.getPivotYear();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    String string0 = null;
    uTCProvider0.getZone((String) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
    StringWriter stringWriter0 = new StringWriter(2275);
    StringWriter stringWriter1 = stringWriter0.append('O');
    StringBuffer stringBuffer0 = stringWriter1.getBuffer();
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) mutableDateTime0);
    dateTimeFormatter1.parseLocalTime(string0);
    String string1 = ""O-Y1EtX /r)6t63A1{I"";
    dateTimeFormatter0.parseMutableDateTime(string1);
    String string2 = """";
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalTime(string2);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",1,
project,0,test10128,"public void test10128() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 560, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    String string0 = ""Z"";
    int int0 = 9;
    Integer integer0 = Integer.getInteger(""Z"", 9);
    dateTimeFieldType0.getRangeDurationType();
    StringBuffer stringBuffer0 = new StringBuffer();
    dateTimeFormatter0.printTo(stringBuffer0, 3L);
    dateTimeFormatter1.withPivotYear(integer0);
    int int1 = (-3298);
    long long0 = (-2492L);
    LocalDate localDate0 = null;
    try {
        localDate0 = new LocalDate(long0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",1,
project,0,test10629,"public void test10629() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldType0.getDurationType();
    int int0 = 2428;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
    dateTimeFormatter1.parseInto(mutableDateTime0, ""Multiplication overflows a long: "", 17887500);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
    dateTimeFormatter5.withDefaultYear(2428);
    dateTimeFormatter3.parseLocalDateTime("""");
    dateTimeFormatter5.withLocale(locale0);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    // Undeclared exception!
    try {
        dateTimeFormatter2.getParser();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test10830,"public void test10830() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = 314;
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    dateTimeFormatter1.parseDateTime("""");
    int int1 = 0;
    StringBuffer stringBuffer0 = new StringBuffer(0);
    dateTimeFormatter0.printTo(stringBuffer0, 0L);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    Chronology chronology0 = gregorianChronology0.withUTC();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
    stringBuffer0.setLength((-2714));
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
    int int2 = 1;
    int int3 = 0;
    PeriodType periodType0 = PeriodType.yearMonthDay();
    Period period0 = null;
    try {
        period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -2714
        //
        verifyException(""java.lang.AbstractStringBuilder"", e);
    }
}",0,
project,0,test11132,"public void test11132() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    int int0 = (-1480);
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1480), (-1480));
    dateTimeFieldType0.getDurationType();
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    Locale locale0 = Locale.ENGLISH;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
    dateTimeFormatter1.getParser();
    int int1 = 1953;
    dateTimeFormatter1.withPivotYear(1953);
    StringWriter stringWriter0 = new StringWriter();
    StringWriter stringWriter1 = stringWriter0.append('u');
    stringWriter1.getBuffer();
    LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) null);
    LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(int0);
    // Undeclared exception!
    try {
        localDateTime1.minusHours(int1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // Zone must not be null
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test11334,"public void test11334() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldType0.getDurationType();
    int int0 = 2428;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
    dateTimeFormatter1.parseInto(mutableDateTime0, ""Multiplication overflows a long: "", 17887500);
    dateTimeFormatter3.print((ReadablePartial) null);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
    dateTimeFormatter5.withDefaultYear(int0);
    String string0 = """";
    dateTimeFormatter3.parseLocalDateTime(string0);
    dateTimeFormatter5.withLocale(locale0);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The partial must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",1,
project,0,test11535,"public void test11535() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = 314;
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    dateTimeFormatter1.parseDateTime("""");
    int int1 = 0;
    StringBuffer stringBuffer0 = new StringBuffer(0);
    dateTimeFormatter0.printTo(stringBuffer0, 0L);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    Chronology chronology0 = gregorianChronology0.withUTC();
    gJChronology0.withUTC();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
    dateTimeFormatter1.parseLocalDate("""");
    stringBuffer0.setLength((-2714));
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
    int int2 = 1;
    int int3 = 0;
    PeriodType periodType0 = PeriodType.yearMonthDay();
    Period period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
    // Undeclared exception!
    try {
        period0.minusMillis(int3);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -2714
        //
        verifyException(""java.lang.AbstractStringBuilder"", e);
    }
}",0,
project,0,test11736,"public void test11736() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = 314;
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    dateTimeFormatter1.parseDateTime("""");
    int int1 = 0;
    StringBuffer stringBuffer0 = new StringBuffer(0);
    dateTimeFormatter0.printTo(stringBuffer0, 0L);
    GJChronology.getInstanceUTC();
    dateTimeFormatter0.parseLocalTime("""");
    Locale locale0 = Locale.GERMANY;
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
    stringBuffer0.setLength((-2714));
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
    int int2 = 1;
    int int3 = 0;
    PeriodType periodType0 = PeriodType.yearMonthDay();
    Period period0 = null;
    try {
        period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -2714
        //
        verifyException(""java.lang.AbstractStringBuilder"", e);
    }
}",1,
project,0,test11837,"public void test11837() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldType0.getDurationType();
    int int0 = 2428;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
    dateTimeFormatter1.parseInto(mutableDateTime0, ""Multiplication overflows a long: "", 17887500);
    dateTimeFieldType0.getRangeDurationType();
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
    dateTimeFormatter5.withDefaultYear(2428);
    String string0 = """";
    StringBuffer stringBuffer0 = new StringBuffer(0);
    dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
    dateTimeFormatter3.parseLocalDateTime(string0);
    dateTimeFormatter5.withLocale(locale0);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The partial must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",1,
project,0,test12438,"public void test12438() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    dateTimeFieldType0.getRangeDurationType();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime(""5+5&Nq'Q=6Y_YwNr8?b"", ethiopicChronology0);
    dateTimeFormatter1.withZoneUTC();
    // Undeclared exception!
    try {
        localDateTime0.withHourOfDay(ethiopicChronology0.EE);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""5+5&Nq'Q=6Y_YwNr8?b\"" is malformed at \""+5&Nq'Q=6Y_YwNr8?b\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test12740,"public void test12740() throws Throwable {
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
    PipedWriter pipedWriter0 = new PipedWriter();
    LocalTime localTime0 = new LocalTime(0, 0, 0);
    LocalTime localTime1 = localTime0.minusSeconds(0);
    int int0 = (-605);
    localTime1.plusHours((-605));
    localTime1.getFieldType(0);
    LocalTime localTime2 = localTime1.withFields(localTime0);
    LocalTime localTime3 = localTime2.minusMinutes(1512);
    dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) localTime3);
    String string0 = ""-k[cc%:%@/z]&_"";
    dateTimeFormatter0.parseDateTime(string0);
    String string1 = ""HW|{3"";
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseDateTime(string1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",1,
project,0,test13142,"public void test13142() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    int int0 = 0;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeFieldType0.getRangeDurationType();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ethiopicChronology0.withZone(fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeZone.getDefault();
    dateTimeFormatter1.withPivotYear(1);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1);
    MockFileWriter mockFileWriter0 = new MockFileWriter("".uUz1ti80"");
    MutableDateTime mutableDateTime0 = new MutableDateTime((-28799686L), (Chronology) ethiopicChronology0);
    dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, 3081);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
    long long0 = 86400000L;
    DateTime dateTime0 = new DateTime(long0);
    dateTimeFormatter2.printTo((Appendable) mockPrintWriter0, (ReadableInstant) dateTime0);
    // Undeclared exception!
    try {
        dateTimeFormatter1.isOffsetParsed();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear"", e);
    }
}",0,
project,0,test13343,"public void test13343() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList1);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    Chronology chronology0 = null;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
    String string0 = ""centuryOfEra"";
    // Undeclared exception!
    try {
        dateTimeFormatter1.parseMutableDateTime(""centuryOfEra"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",1,
project,0,test13544,"public void test13544() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('.');
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
    Integer integer0 = new Integer(3);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
    Chronology chronology0 = null;
    LocalDate localDate0 = new LocalDate(2325L, (Chronology) null);
    DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
    DateTime dateTime1 = dateTime0.toDateTimeISO();
    DateTime dateTime2 = dateTime1.withYearOfCentury(13);
    DateTime dateTime3 = dateTime2.withDayOfMonth(13);
    dateTimeFormatter4.printTo((Appendable) null, (ReadableInstant) dateTime3);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(chronology0);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    dateTimeFormatter5.withZone(fixedDateTimeZone0);
    // Undeclared exception!
    try {
        dateTimeFormatter5.isPrinter();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test14145,"public void test14145() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
    dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
    DateTimeFieldType.yearOfCentury();
    dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DurationField durationField0 = buddhistChronology0.hours();
    UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
    DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
    dateTimeFieldTypeArray0[4] = dateTimeFieldType2;
    DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
    dateTimeFieldTypeArray0[5] = dateTimeFieldType3;
    int[] intArray0 = new int[3];
    FileSystemHandling.shouldAllThrowIOExceptions();
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, (-1));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
    Integer integer0 = new Integer((-2145318844));
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
    Locale locale0 = Locale.CANADA;
    StringBuffer stringBuffer0 = new StringBuffer(1);
    StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
    dateTimeFormatter4.printTo(stringBuffer1, 918518400000L);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
    ReadablePartial readablePartial0 = null;
    dateTimeFormatter5.print(readablePartial0);
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No datetime pattern for locale: en
        //
        verifyException(""org.joda.time.format.DateTimeFormat$StyleFormatter"", e);
    }
}",0,
project,0,test14946,"public void test14946() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(90);
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
    PipedWriter pipedWriter0 = new PipedWriter();
    BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 1);
    LocalDateTime localDateTime0 = new LocalDateTime((-1656L));
    dateTimeFormatter1.printTo((Appendable) bufferedWriter0, (ReadablePartial) localDateTime0);
    String string0 = """";
    int int0 = (-2866);
    // Undeclared exception!
    try {
        dateTimeFormatter1.parseInto(mutableDateTime1, string0, int0);
        fail(""Expecting exception: IOException"");
    } catch (Throwable e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedWriter"", e);
    }
}",0,
