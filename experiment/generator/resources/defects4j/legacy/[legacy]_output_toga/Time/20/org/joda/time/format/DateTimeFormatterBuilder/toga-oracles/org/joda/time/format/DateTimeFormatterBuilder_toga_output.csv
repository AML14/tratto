project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00011,"public void test00011() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
    StringBuffer stringBuffer0 = new StringBuffer(2224);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
    assertNotNull(gregorianChronology0);
}",0,assertNotNull(gregorianChronology0)
project,0,test00131,"public void test00131() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test00132,"public void test00132() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test00133,"public void test00133() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test00134,"public void test00134() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test00135,"public void test00135() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    assertNotNull(dateTimeFormatterBuilder2);
}",0,"assertEquals(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2)"
project,0,test00136,"public void test00136() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
}",0,
project,0,test00137,"public void test00137() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test00138,"public void test00138() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
}",0,
project,0,test00139,"public void test00139() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
}",0,
project,0,test00140,"public void test00140() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildPrinter();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
}",0,
project,0,test00141,"public void test00141() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildPrinter();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test00142,"public void test00142() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildPrinter();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
}",0,
project,0,test00143,"public void test00143() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildPrinter();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test00144,"public void test00144() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(""vRAX$:X}6FxLJ"", true, 1862, 1862);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildPrinter();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test00245,"public void test00245() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test00246,"public void test00246() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test00247,"public void test00247() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test00248,"public void test00248() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test00249,"public void test00249() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
}",0,assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0)
project,0,test00250,"public void test00250() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test00251,"public void test00251() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test00254,"public void test00254() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test00255,"public void test00255() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    assertEquals(""millisOfSecond"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test00256,"public void test00256() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    assertEquals(""millisOfSecond"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test00258,"public void test00258() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    assertEquals(""millisOfSecond"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test00259,"public void test00259() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    assertEquals(""millisOfSecond"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test00262,"public void test00262() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
    assertNotNull(dateTimeFormatter0);
}",0,
project,0,test00263,"public void test00263() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
    assertEquals(5, dateTimeParserArray0.length);
}",0,
project,0,test00266,"public void test00266() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test00267,"public void test00267() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
    assertTrue(dateTimeFormatter0.isParser());
}",0,assertTrue(dateTimeFormatter0.isParser())
project,0,test00268,"public void test00268() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
    assertTrue(dateTimeFormatter0.isPrinter());
}",0,assertTrue(dateTimeFormatter0.isPrinter())
project,0,test00269,"public void test00269() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,
project,0,test00270,"public void test00270() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
    assertNull(dateTimeFormatter0.getPivotYear());
}",0,assertNotNull(dateTimeFormatter0.getPivotYear())
project,0,test00271,"public void test00271() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
    // Undeclared exception!
    try {
        Instant.parse(""coIRk'*JYu"", dateTimeFormatter0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""coIRk'*JYu\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test00372,"public void test00372() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    assertNotNull(gJChronology0);
}",0,
project,0,test00380,"public void test00380() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    assertNotNull(dateTimeFieldType0);
}",0,
project,0,test00381,"public void test00381() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test00382,"public void test00382() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test00385,"public void test00385() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test00392,"public void test00392() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    assertEquals((-1027), (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test00393,"public void test00393() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test00394,"public void test00394() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test00396,"public void test00396() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test00397,"public void test00397() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test003107,"public void test003107() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, ""org.joda.time.format.DateTimeFormatterBuilder"", 1440);
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test003108,"public void test003108() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, ""org.joda.time.format.DateTimeFormatterBuilder"", 1440);
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test003109,"public void test003109() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, ""org.joda.time.format.DateTimeFormatterBuilder"", 1440);
    assertEquals((-1027), (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test003110,"public void test003110() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, ""org.joda.time.format.DateTimeFormatterBuilder"", 1440);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test003111,"public void test003111() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Integer integer0 = new Integer((-1027));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, ""org.joda.time.format.DateTimeFormatterBuilder"", 1440);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test004117,"public void test004117() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertNotNull(dateTimeZone0);
}",0,
project,0,test004118,"public void test004118() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,
project,0,test004119,"public void test004119() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,
project,0,test004127,"public void test004127() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertNotNull(dateTimeFieldType0);
}",0,
project,0,test004128,"public void test004128() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test004129,"public void test004129() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test004131,"public void test004131() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test004132,"public void test004132() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test004135,"public void test004135() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    assertNotNull(buddhistChronology0);
}",0,assertNotNull(buddhistChronology0)
project,0,test004136,"public void test004136() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    assertEquals(1, BuddhistChronology.BE);
}",0,
project,0,test004140,"public void test004140() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,
project,0,test004141,"public void test004141() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",1,
project,0,test004148,"public void test004148() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test004149,"public void test004149() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.FRANCE;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,
project,0,test005152,"public void test005152() throws Throwable {
    Instant instant0 = null;
    try {
        instant0 = new Instant(""DFdI~^pqIY$sv"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""DFdI~^pqIY$sv\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test006153,"public void test006153() throws Throwable {
    Instant instant0 = null;
    try {
        instant0 = new Instant("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test008157,"public void test008157() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test008158,"public void test008158() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test008159,"public void test008159() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    assertEquals(""yearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test008160,"public void test008160() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    assertEquals(""yearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test008161,"public void test008161() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, (-2537));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal number of digits: -2537
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test009162,"public void test009162() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test009163,"public void test009163() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test009164,"public void test009164() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test009165,"public void test009165() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test009166,"public void test009166() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal number of digits: 0
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test010167,"public void test010167() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test010168,"public void test010168() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    assertEquals(""yearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test010169,"public void test010169() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    assertEquals(""yearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test010171,"public void test010171() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    assertEquals(""yearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test010172,"public void test010172() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    assertEquals(""yearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test010176,"public void test010176() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    assertEquals(""yearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test010177,"public void test010177() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    assertEquals(""yearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test011180,"public void test011180() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test011181,"public void test011181() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test011182,"public void test011182() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test011184,"public void test011184() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test011185,"public void test011185() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test011189,"public void test011189() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test011190,"public void test011190() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test014205,"public void test014205() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test014206,"public void test014206() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    assertEquals(""centuryOfEra"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test014207,"public void test014207() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    assertEquals(""centuryOfEra"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test014209,"public void test014209() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    assertEquals(""centuryOfEra"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test014210,"public void test014210() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    assertEquals(""centuryOfEra"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test014214,"public void test014214() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    assertEquals(""centuryOfEra"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test014215,"public void test014215() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    assertEquals(""centuryOfEra"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test015221,"public void test015221() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""&ac/"");
    GJChronology gJChronology0 = GJChronology.getInstance();
    assertNotNull(gJChronology0);
}",0,
project,0,test015222,"public void test015222() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""&ac/"");
    GJChronology gJChronology0 = GJChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    assertNotNull(lenientChronology0);
}",1,
project,0,test015232,"public void test015232() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""&ac/"");
    GJChronology gJChronology0 = GJChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    Locale locale0 = Locale.GERMAN;
    Integer integer0 = new Integer(0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
    assertNotNull(dateTimeParserBucket0);
}",0,
project,0,test015239,"public void test015239() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""&ac/"");
    GJChronology gJChronology0 = GJChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    Locale locale0 = Locale.GERMAN;
    Integer integer0 = new Integer(0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test015240,"public void test015240() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""&ac/"");
    GJChronology gJChronology0 = GJChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    Locale locale0 = Locale.GERMAN;
    Integer integer0 = new Integer(0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",1,
project,0,test015241,"public void test015241() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""&ac/"");
    GJChronology gJChronology0 = GJChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    Locale locale0 = Locale.GERMAN;
    Integer integer0 = new Integer(0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
    assertEquals(0, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test015251,"public void test015251() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""&ac/"");
    GJChronology gJChronology0 = GJChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    Locale locale0 = Locale.GERMAN;
    Integer integer0 = new Integer(0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
    int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, ""9LwO4!^S6wB"", (-1054));
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test015252,"public void test015252() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""&ac/"");
    GJChronology gJChronology0 = GJChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    Locale locale0 = Locale.GERMAN;
    Integer integer0 = new Integer(0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
    int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, ""9LwO4!^S6wB"", (-1054));
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test015253,"public void test015253() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""&ac/"");
    GJChronology gJChronology0 = GJChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    Locale locale0 = Locale.GERMAN;
    Integer integer0 = new Integer(0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
    int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, ""9LwO4!^S6wB"", (-1054));
    assertEquals(0, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test018266,"public void test018266() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test018267,"public void test018267() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test018268,"public void test018268() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test018270,"public void test018270() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test018271,"public void test018271() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test018275,"public void test018275() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
    int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test018276,"public void test018276() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
    int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test019279,"public void test019279() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test019280,"public void test019280() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    assertEquals(""minuteOfHour"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test019281,"public void test019281() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    assertEquals(""minuteOfHour"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test019283,"public void test019283() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
    assertEquals(""minuteOfHour"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test019284,"public void test019284() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
    assertEquals(""minuteOfHour"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test019288,"public void test019288() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
    int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    assertEquals(""minuteOfHour"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test019289,"public void test019289() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
    int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    assertEquals(""minuteOfHour"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test020302,"public void test020302() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    assertNotNull(buddhistChronology0);
}",0,assertNotNull(buddhistChronology0)
project,0,test020303,"public void test020303() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    assertEquals(1, BuddhistChronology.BE);
}",0,
project,0,test020304,"public void test020304() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    assertNotNull(lenientChronology0);
}",1,
project,0,test020305,"public void test020305() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    assertEquals(1, BuddhistChronology.BE);
}",1,
project,0,test020306,"public void test020306() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
    assertNotNull(dateTimeParserBucket0);
}",0,
project,0,test020307,"public void test020307() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
    assertEquals(1, BuddhistChronology.BE);
}",0,
project,0,test020314,"public void test020314() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test020315,"public void test020315() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",1,
project,0,test020316,"public void test020316() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test020327,"public void test020327() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
    int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, ""vRA@$:X}66xJ"", 23);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test020328,"public void test020328() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
    int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, ""vRA@$:X}66xJ"", 23);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",1,
project,0,test020329,"public void test020329() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
    int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, ""vRA@$:X}66xJ"", 23);
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test021330,"public void test021330() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test021331,"public void test021331() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test021332,"public void test021332() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test021334,"public void test021334() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test021335,"public void test021335() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test021339,"public void test021339() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test021340,"public void test021340() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test027385,"public void test027385() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test027386,"public void test027386() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,
project,0,test027387,"public void test027387() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test027389,"public void test027389() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test027390,"public void test027390() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test027396,"public void test027396() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
    StringBuffer stringBuffer0 = new StringBuffer(58);
    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
    assertNotNull(localTime0);
}",0,assertNotNull(localTime0)
project,0,test027397,"public void test027397() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
    StringBuffer stringBuffer0 = new StringBuffer(58);
    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
    assertEquals(4, localTime0.size());
}",0,"assertEquals(0, localTime0.size())"
project,0,test027405,"public void test027405() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
    StringBuffer stringBuffer0 = new StringBuffer(58);
    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
    Locale locale0 = Locale.CHINA;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test027406,"public void test027406() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
    StringBuffer stringBuffer0 = new StringBuffer(58);
    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
    Locale locale0 = Locale.CHINA;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test027411,"public void test027411() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
    StringBuffer stringBuffer0 = new StringBuffer(58);
    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
    Locale locale0 = Locale.CHINA;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
    assertEquals(4, localTime0.size());
}",0,"assertEquals(0, localTime0.size())"
project,0,test028454,"public void test028454() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    assertNotNull(gregorianChronology0);
}",0,
project,0,test028464,"public void test028464() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    assertNotNull(dateTimeParserBucket0);
}",0,
project,0,test028471,"public void test028471() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test028472,"public void test028472() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    assertEquals((-1816), (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test028473,"public void test028473() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test028474,"public void test028474() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    assertNotNull(dateTimeZone0);
}",0,
project,0,test028481,"public void test028481() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,"assertEquals(integer0, dateTimeParserBucket0.getOffsetInteger())"
project,0,test028482,"public void test028482() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    assertEquals((-1816), (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test028483,"public void test028483() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test028484,"public void test028484() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,
project,0,test028485,"public void test028485() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,
project,0,test028503,"public void test028503() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,"assertEquals(integer0, dateTimeParserBucket0.getOffsetInteger())"
project,0,test028504,"public void test028504() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
    assertEquals((-1816), (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test028505,"public void test028505() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test028506,"public void test028506() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test028507,"public void test028507() throws Throwable {
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Locale locale0 = Locale.ITALY;
    Integer integer0 = new Integer((-1816));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test029508,"public void test029508() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test029509,"public void test029509() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test029510,"public void test029510() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test029514,"public void test029514() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    assertNotNull(ethiopicChronology0);
}",0,assertNotNull(ethiopicChronology0)
project,0,test029515,"public void test029515() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    assertEquals(1, EthiopicChronology.EE);
}",0,
project,0,test029516,"public void test029516() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    assertNotNull(dateTimeZone0);
}",0,assertNotNull(dateTimeZone0)
project,0,test029517,"public void test029517() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    assertEquals(""+00:00:00.445"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test029518,"public void test029518() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test029519,"public void test029519() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    assertEquals(""+00:00:00.445"", dateTimeZone0.getID());
}",0,
project,0,test029528,"public void test029528() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test029529,"public void test029529() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test029533,"public void test029533() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test029534,"public void test029534() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test029537,"public void test029537() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
    assertEquals(""+00:00:00.445"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test029538,"public void test029538() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test029539,"public void test029539() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
    assertEquals(""+00:00:00.445"", dateTimeZone0.getID());
}",0,
project,0,test030556,"public void test030556() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    assertNotNull(ethiopicChronology0);
}",0,assertNotNull(ethiopicChronology0)
project,0,test030557,"public void test030557() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    assertEquals(1, EthiopicChronology.EE);
}",0,
project,0,test030565,"public void test030565() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    Locale locale0 = Locale.FRENCH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test030566,"public void test030566() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    Locale locale0 = Locale.FRENCH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
    assertEquals(1, EthiopicChronology.EE);
}",0,
project,0,test030573,"public void test030573() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    Locale locale0 = Locale.FRENCH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test030574,"public void test030574() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    Locale locale0 = Locale.FRENCH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
    assertNull(dateTimeParserBucket0.getPivotYear());
}",0,assertNotNull(dateTimeParserBucket0.getPivotYear())
project,0,test030575,"public void test030575() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    Locale locale0 = Locale.FRENCH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test031577,"public void test031577() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test031578,"public void test031578() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test031579,"public void test031579() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test031581,"public void test031581() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test031582,"public void test031582() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test031588,"public void test031588() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    assertNotNull(dateTimeZone0);
}",0,assertNotNull(dateTimeZone0)
project,0,test031589,"public void test031589() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test031590,"public void test031590() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    assertEquals(""+02:00"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test031591,"public void test031591() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    assertEquals(""+02:00"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test031592,"public void test031592() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    assertNotNull(yearMonth0);
}",0,assertNotNull(yearMonth0)
project,0,test031593,"public void test031593() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    assertEquals(1, YearMonth.MONTH_OF_YEAR);
}",0,
project,0,test031594,"public void test031594() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    assertEquals(0, YearMonth.YEAR);
}",0,
project,0,test031595,"public void test031595() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test031596,"public void test031596() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    assertEquals(""+02:00"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test031597,"public void test031597() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    assertEquals(""+02:00"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test031598,"public void test031598() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    assertEquals(2014, yearMonth0.getYear());
}",0,"assertEquals(1, yearMonth0.getYear())"
project,0,test031599,"public void test031599() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    assertEquals(2, yearMonth0.size());
}",0,"assertEquals(0, yearMonth0.size())"
project,0,test031600,"public void test031600() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    assertEquals(2, yearMonth0.getMonthOfYear());
}",0,"assertEquals(1, yearMonth0.getMonthOfYear())"
project,0,test031610,"public void test031610() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    Locale locale0 = Locale.TAIWAN;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test031611,"public void test031611() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    Locale locale0 = Locale.TAIWAN;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test031616,"public void test031616() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    Locale locale0 = Locale.TAIWAN;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
    assertTrue(dateTimeZone0.isFixed());
}",0,
project,0,test031617,"public void test031617() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    Locale locale0 = Locale.TAIWAN;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(""+02:00"", dateTimeZone0.toString());
}",1,
project,0,test031618,"public void test031618() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    Locale locale0 = Locale.TAIWAN;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(""+02:00"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test031619,"public void test031619() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    Locale locale0 = Locale.TAIWAN;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(2014, yearMonth0.getYear());
}",0,"assertEquals(1, yearMonth0.getYear())"
project,0,test031620,"public void test031620() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    Locale locale0 = Locale.TAIWAN;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(2, yearMonth0.size());
}",0,"assertEquals(0, yearMonth0.size())"
project,0,test031621,"public void test031621() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    StringBuffer stringBuffer0 = new StringBuffer(""56YZ0]vD<'tk9?n0L"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    Locale locale0 = Locale.TAIWAN;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(2, yearMonth0.getMonthOfYear());
}",0,"assertEquals(1, yearMonth0.getMonthOfYear())"
project,0,test032628,"public void test032628() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    assertNotNull(dateTimeFieldType0);
}",0,
project,0,test032629,"public void test032629() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    assertEquals(""minuteOfHour"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test032630,"public void test032630() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    assertEquals(""minuteOfHour"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test032632,"public void test032632() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    assertEquals(""minuteOfHour"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test032633,"public void test032633() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    assertEquals(""minuteOfHour"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test032666,"public void test032666() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    assertNotNull(buddhistChronology0);
}",0,assertNotNull(buddhistChronology0)
project,0,test032667,"public void test032667() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    assertEquals(1, BuddhistChronology.BE);
}",0,
project,0,test032668,"public void test032668() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    assertNotNull(dateTimeZone0);
}",0,assertNotNull(dateTimeZone0)
project,0,test032669,"public void test032669() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test032670,"public void test032670() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test032671,"public void test032671() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",1,
project,0,test032682,"public void test032682() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    Locale locale0 = Locale.US;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
    assertEquals(""minuteOfHour"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test032683,"public void test032683() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    Locale locale0 = Locale.US;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
    assertEquals(""minuteOfHour"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test032699,"public void test032699() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    Locale locale0 = Locale.US;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test032700,"public void test032700() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    Locale locale0 = Locale.US;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test032701,"public void test032701() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    Locale locale0 = Locale.US;
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",1,
project,0,test033708,"public void test033708() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    assertNotNull(dateTimeFieldType0);
}",0,
project,0,test033709,"public void test033709() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test033710,"public void test033710() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test033712,"public void test033712() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test033713,"public void test033713() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test033719,"public void test033719() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    assertNotNull(ethiopicChronology0);
}",0,assertNotNull(ethiopicChronology0)
project,0,test033720,"public void test033720() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    assertEquals(1, EthiopicChronology.EE);
}",0,
project,0,test033721,"public void test033721() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    assertNotNull(dateTimeZone0);
}",0,assertNotNull(dateTimeZone0)
project,0,test033722,"public void test033722() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    assertEquals(""+00:00:00.445"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test033723,"public void test033723() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    assertEquals(""+00:00:00.445"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test033724,"public void test033724() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test033733,"public void test033733() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test033734,"public void test033734() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test033739,"public void test033739() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
    assertEquals(""+00:00:00.445"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test033740,"public void test033740() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
    assertEquals(""+00:00:00.445"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test033741,"public void test033741() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    StringBuffer stringBuffer0 = new StringBuffer(85);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    Locale locale0 = Locale.CHINESE;
    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test034748,"public void test034748() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test034749,"public void test034749() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(34);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test034750,"public void test034750() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(34);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test034751,"public void test034751() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(34);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test035752,"public void test035752() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test035753,"public void test035753() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(6);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test035754,"public void test035754() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(6);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test035755,"public void test035755() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(6);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test036756,"public void test036756() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test036757,"public void test036757() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern("""");
    assertNotNull(dateTimeFormatterBuilder1);
}",0,
project,0,test036758,"public void test036758() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern("""");
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test036759,"public void test036759() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern("""");
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test037760,"public void test037760() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test037761,"public void test037761() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(329);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test037762,"public void test037762() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(329);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test037763,"public void test037763() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(329);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test038764,"public void test038764() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test038765,"public void test038765() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(2224, 2);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test038766,"public void test038766() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(2224, 2);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test038767,"public void test038767() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(2224, 2);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test039768,"public void test039768() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test039769,"public void test039769() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour(5, (-309));
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test039770,"public void test039770() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour(5, (-309));
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test039771,"public void test039771() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour(5, (-309));
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test040772,"public void test040772() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test040773,"public void test040773() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(366, 366);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test040774,"public void test040774() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(366, 366);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test040775,"public void test040775() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(366, 366);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test041776,"public void test041776() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test041777,"public void test041777() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(0);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test041778,"public void test041778() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test041779,"public void test041779() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test042780,"public void test042780() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test042781,"public void test042781() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeek(2139);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test042782,"public void test042782() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeek(2139);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test042783,"public void test042783() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeek(2139);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test043784,"public void test043784() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test043785,"public void test043785() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(65533);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,
project,0,test043786,"public void test043786() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(65533);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test043787,"public void test043787() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(65533);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test044788,"public void test044788() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test044789,"public void test044789() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(366, 15356250);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test044790,"public void test044790() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(366, 15356250);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test044791,"public void test044791() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(366, 15356250);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test045792,"public void test045792() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test045793,"public void test045793() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendYearOfCentury((-2450), 2986);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test046794,"public void test046794() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test046795,"public void test046795() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendYear(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test047796,"public void test047796() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test047797,"public void test047797() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendWeekyear(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test048798,"public void test048798() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test048799,"public void test048799() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendWeekOfWeekyear((-758));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test049800,"public void test049800() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test049801,"public void test049801() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendTimeZoneOffset((String) null, true, (-1293), 913);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset"", e);
    }
}",0,
project,0,test050802,"public void test050802() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test050803,"public void test050803() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendPattern((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormat"", e);
    }
}",0,
project,0,test051804,"public void test051804() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test051805,"public void test051805() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendOptional((DateTimeParser) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No parser supplied
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test052806,"public void test052806() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test052807,"public void test052807() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendMonthOfYear((-2155));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test053808,"public void test053808() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test053809,"public void test053809() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendMinuteOfHour((-204));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test054810,"public void test054810() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test054811,"public void test054811() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendMinuteOfDay((-2801));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test055812,"public void test055812() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test055813,"public void test055813() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendMillisOfSecond((-504));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test056814,"public void test056814() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test056815,"public void test056815() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendHourOfHalfday((-674));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test057816,"public void test057816() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test057817,"public void test057817() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendHourOfDay((-215));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test058818,"public void test058818() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test058819,"public void test058819() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFractionOfSecond(0, (-1861));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test059820,"public void test059820() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test059821,"public void test059821() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendDayOfMonth((-632));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test060822,"public void test060822() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test060823,"public void test060823() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendClockhourOfHalfday((-3258));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test061824,"public void test061824() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test061825,"public void test061825() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test061826,"public void test061826() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test061828,"public void test061828() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test061829,"public void test061829() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test061832,"public void test061832() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test061833,"public void test061833() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, dateTimeParserArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test062834,"public void test062834() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test062835,"public void test062835() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.append((DateTimePrinter) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No printer supplied
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test063836,"public void test063836() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test063837,"public void test063837() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test063838,"public void test063838() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    assertEquals(""dayOfMonth"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test063839,"public void test063839() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    assertEquals(""dayOfMonth"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test063840,"public void test063840() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test064841,"public void test064841() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test064842,"public void test064842() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test064843,"public void test064843() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    assertEquals(""minuteOfHour"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test064844,"public void test064844() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    assertEquals(""minuteOfHour"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test064845,"public void test064845() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, (-594), (-594));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test065846,"public void test065846() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test065847,"public void test065847() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test065848,"public void test065848() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    assertEquals(""secondOfMinute"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test065849,"public void test065849() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    assertEquals(""secondOfMinute"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test065850,"public void test065850() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test065851,"public void test065851() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test065852,"public void test065852() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test065853,"public void test065853() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);
    assertEquals(""secondOfMinute"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test065854,"public void test065854() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);
    assertEquals(""secondOfMinute"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test066855,"public void test066855() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test066856,"public void test066856() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test066857,"public void test066857() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test066858,"public void test066858() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test066859,"public void test066859() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test066860,"public void test066860() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test066861,"public void test066861() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test066862,"public void test066862() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test066863,"public void test066863() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test067864,"public void test067864() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test067865,"public void test067865() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test067866,"public void test067866() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test067867,"public void test067867() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test067868,"public void test067868() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test067869,"public void test067869() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test067870,"public void test067870() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test067871,"public void test067871() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test067872,"public void test067872() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test068873,"public void test068873() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test068874,"public void test068874() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test068875,"public void test068875() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    assertEquals(""secondOfMinute"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test068876,"public void test068876() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    assertEquals(""secondOfMinute"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test068877,"public void test068877() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, (-3430), 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test069878,"public void test069878() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test069879,"public void test069879() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test069880,"public void test069880() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    assertEquals(""clockhourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test069881,"public void test069881() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    assertEquals(""clockhourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test069882,"public void test069882() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test069883,"public void test069883() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test069884,"public void test069884() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test069885,"public void test069885() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);
    assertEquals(""clockhourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test069886,"public void test069886() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);
    assertEquals(""clockhourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test070887,"public void test070887() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test070888,"public void test070888() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,
project,0,test070889,"public void test070889() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test070890,"public void test070890() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test070891,"public void test070891() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test070892,"public void test070892() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test070893,"public void test070893() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test070894,"public void test070894() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test070895,"public void test070895() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test071896,"public void test071896() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test071897,"public void test071897() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test071898,"public void test071898() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test071899,"public void test071899() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test071900,"public void test071900() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, (-513), 65533);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test072901,"public void test072901() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test072902,"public void test072902() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test072903,"public void test072903() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test072904,"public void test072904() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test072905,"public void test072905() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test072906,"public void test072906() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test072907,"public void test072907() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test072908,"public void test072908() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test072909,"public void test072909() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test073910,"public void test073910() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test073911,"public void test073911() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test073912,"public void test073912() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    assertEquals(""monthOfYear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test073913,"public void test073913() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    assertEquals(""monthOfYear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test073914,"public void test073914() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test074915,"public void test074915() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test074916,"public void test074916() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(""org.joda.time.DateTime"");
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test074917,"public void test074917() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(""org.joda.time.DateTime"");
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test074918,"public void test074918() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(""org.joda.time.DateTime"");
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test075919,"public void test075919() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test075920,"public void test075920() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[8];
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.append((DateTimePrinter) null, dateTimeParserArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Incomplete parser array
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test076921,"public void test076921() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test076927,"public void test076927() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    assertNotNull(localDateTime0);
}",0,
project,0,test076932,"public void test076932() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    assertEquals(4, localDateTime0.size());
}",0,"assertEquals(0, localDateTime0.size())"
project,0,test076933,"public void test076933() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    assertNotNull(partial0);
}",1,
project,0,test076938,"public void test076938() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    assertEquals(4, localDateTime0.size());
}",0,"assertEquals(0, localDateTime0.size())"
project,0,test076939,"public void test076939() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    assertEquals(4, partial0.size());
}",0,"assertEquals(1, partial0.size())"
project,0,test076940,"public void test076940() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertNotNull(dateTimeFormatter0);
}",0,
project,0,test076945,"public void test076945() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertEquals(4, localDateTime0.size());
}",0,"assertEquals(0, localDateTime0.size())"
project,0,test076946,"public void test076946() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertEquals(4, partial0.size());
}",0,"assertEquals(0, partial0.size())"
project,0,test076947,"public void test076947() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test076948,"public void test076948() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertTrue(dateTimeFormatter0.isPrinter());
}",0,assertTrue(dateTimeFormatter0.isPrinter())
project,0,test076949,"public void test076949() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test076950,"public void test076950() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertTrue(dateTimeFormatter0.isParser());
}",0,assertTrue(dateTimeFormatter0.isParser())
project,0,test076951,"public void test076951() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertNull(dateTimeFormatter0.getPivotYear());
}",0,assertNotNull(dateTimeFormatter0.getPivotYear())
project,0,test076952,"public void test076952() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test076953,"public void test076953() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test076954,"public void test076954() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test076959,"public void test076959() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertEquals(4, localDateTime0.size());
}",0,"assertEquals(0, localDateTime0.size())"
project,0,test076960,"public void test076960() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertEquals(4, partial0.size());
}",0,"assertEquals(1, partial0.size())"
project,0,test076961,"public void test076961() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test076962,"public void test076962() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertTrue(dateTimeFormatter0.isPrinter());
}",0,assertTrue(dateTimeFormatter0.isPrinter())
project,0,test076963,"public void test076963() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test076964,"public void test076964() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertTrue(dateTimeFormatter0.isParser());
}",0,assertTrue(dateTimeFormatter0.isParser())
project,0,test076965,"public void test076965() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    assertNull(dateTimeFormatter0.getPivotYear());
}",0,assertNotNull(dateTimeFormatter0.getPivotYear())
project,0,test077966,"public void test077966() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test077970,"public void test077970() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test077971,"public void test077971() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test077972,"public void test077972() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test077975,"public void test077975() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
    assertNotNull(dateTimeFormatter0);
}",0,
project,0,test077976,"public void test077976() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test077977,"public void test077977() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
    assertTrue(dateTimeFormatter0.isPrinter());
}",0,assertTrue(dateTimeFormatter0.isPrinter())
project,0,test077978,"public void test077978() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test077979,"public void test077979() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
    assertNull(dateTimeFormatter0.getPivotYear());
}",0,assertNotNull(dateTimeFormatter0.getPivotYear())
project,0,test077980,"public void test077980() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test077981,"public void test077981() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
    assertTrue(dateTimeFormatter0.isParser());
}",0,assertTrue(dateTimeFormatter0.isParser())
project,0,test078982,"public void test078982() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test078983,"public void test078983() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(122);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,
project,0,test078984,"public void test078984() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(122);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test078985,"public void test078985() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(122);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test079986,"public void test079986() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test079987,"public void test079987() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfDay(10209375);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test079988,"public void test079988() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfDay(10209375);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test079989,"public void test079989() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfDay(10209375);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test080990,"public void test080990() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test080991,"public void test080991() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendSecondOfMinute((-1310));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test081992,"public void test081992() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test081993,"public void test081993() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(10209375);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test081994,"public void test081994() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(10209375);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test081995,"public void test081995() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(10209375);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test082996,"public void test082996() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test082997,"public void test082997() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(59);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test082998,"public void test082998() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(59);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test082999,"public void test082999() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(59);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test0831000,"public void test0831000() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test0831001,"public void test0831001() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test0831002,"public void test0831002() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test0831003,"public void test0831003() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test0841004,"public void test0841004() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test0841005,"public void test0841005() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendDayOfWeek((-1000));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test0851006,"public void test0851006() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test0851007,"public void test0851007() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(11, true);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,
project,0,test0851008,"public void test0851008() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(11, true);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test0851009,"public void test0851009() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(11, true);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test0861010,"public void test0861010() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test0861011,"public void test0861011() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFractionOfHour((-1156), (-2589));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test0871012,"public void test0871012() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test0871013,"public void test0871013() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(0);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test0871014,"public void test0871014() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test0871015,"public void test0871015() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test0881016,"public void test0881016() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test0881017,"public void test0881017() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendDayOfYear((-2001));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test0891018,"public void test0891018() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test0891019,"public void test0891019() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(';');
    assertNotNull(dateTimeFormatterBuilder1);
}",0,
project,0,test0891020,"public void test0891020() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(';');
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test0891021,"public void test0891021() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(';');
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test0901022,"public void test0901022() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test0901023,"public void test0901023() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test0901024,"public void test0901024() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test0901025,"public void test0901025() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test0901032,"public void test0901032() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    assertNotNull(dateTimeFormatterBuilder2);
}",1,
project,0,test0901033,"public void test0901033() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
}",1,
project,0,test0901034,"public void test0901034() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test0901035,"public void test0901035() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
}",1,
project,0,test0901036,"public void test0901036() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test0901037,"public void test0901037() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
}",1,
project,0,test0901038,"public void test0901038() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
}",1,
project,0,test0901042,"public void test0901042() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
}",0,
project,0,test0901043,"public void test0901043() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test0901044,"public void test0901044() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
}",0,
project,0,test0901045,"public void test0901045() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test0901046,"public void test0901046() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
    assertTrue(boolean0);
}",0,
project,0,test0911047,"public void test0911047() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test0911048,"public void test0911048() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test0911049,"public void test0911049() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test0911050,"public void test0911050() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test0911051,"public void test0911051() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    assertNotNull(dateTimeFormatterBuilder2);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2)"
project,0,test0911052,"public void test0911052() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
}",0,
project,0,test0911053,"public void test0911053() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test0911054,"public void test0911054() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test0911055,"public void test0911055() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
}",0,
project,0,test0911056,"public void test0911056() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
}",0,
project,0,test0911057,"public void test0911057() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
}",0,
project,0,test0911058,"public void test0911058() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
}",1,
project,0,test0911059,"public void test0911059() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test0911060,"public void test0911060() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test0911061,"public void test0911061() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
}",1,
project,0,test0911062,"public void test0911062() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    assertTrue(boolean0);
}",1,
project,0,test0921069,"public void test0921069() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    assertNotNull(copticChronology0);
}",0,assertNotNull(copticChronology0)
project,0,test0921070,"public void test0921070() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    assertEquals(1, CopticChronology.AM);
}",0,
project,0,test0921078,"public void test0921078() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    Locale locale0 = Locale.PRC;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test0921079,"public void test0921079() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    Locale locale0 = Locale.PRC;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
    assertEquals(1, CopticChronology.AM);
}",0,
project,0,test0921086,"public void test0921086() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    Locale locale0 = Locale.PRC;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test0921087,"public void test0921087() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    Locale locale0 = Locale.PRC;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test0921088,"public void test0921088() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    Locale locale0 = Locale.PRC;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test0931100,"public void test0931100() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter"", false);
    MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    assertEquals(3, localDate0.size());
}",0,"assertEquals(0, localDate0.size())"
project,0,test0951116,"public void test0951116() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    assertNotNull(gJChronology0);
}",0,
project,0,test0951123,"public void test0951123() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
    assertNotNull(dateTimeZone0);
}",0,assertNotNull(dateTimeZone0)
project,0,test0951124,"public void test0951124() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
    assertEquals(""-00:00:00.511"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test0951125,"public void test0951125() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test0951126,"public void test0951126() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
    assertEquals(""-00:00:00.511"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test0961135,"public void test0961135() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    assertNotNull(copticChronology0);
}",0,
project,0,test0961136,"public void test0961136() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    assertEquals(1, CopticChronology.AM);
}",0,
project,0,test0961146,"public void test0961146() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    StringBuffer stringBuffer0 = new StringBuffer(1);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    assertNotNull(gJChronology0);
}",0,
project,0,test0961147,"public void test0961147() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    StringBuffer stringBuffer0 = new StringBuffer(1);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    assertNotNull(dateTimeZone0);
}",0,
project,0,test0961148,"public void test0961148() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    StringBuffer stringBuffer0 = new StringBuffer(1);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test0961149,"public void test0961149() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    StringBuffer stringBuffer0 = new StringBuffer(1);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test0961150,"public void test0961150() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    StringBuffer stringBuffer0 = new StringBuffer(1);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test0971159,"public void test0971159() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    assertNotNull(iSOChronology0);
}",0,assertNotNull(iSOChronology0)
project,0,test0971164,"public void test0971164() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    Integer integer0 = new Integer(9);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test0971171,"public void test0971171() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    Integer integer0 = new Integer(9);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
    assertEquals(9, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test0971172,"public void test0971172() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    Integer integer0 = new Integer(9);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test0971173,"public void test0971173() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    Integer integer0 = new Integer(9);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,"assertEquals(0, dateTimeParserBucket0.getOffset())"
project,0,test0971183,"public void test0971183() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    Integer integer0 = new Integer(9);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
    int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, ""vRA@$:X}66xJ"", 0);
    assertEquals(9, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test0971184,"public void test0971184() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    Integer integer0 = new Integer(9);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
    int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, ""vRA@$:X}66xJ"", 0);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test0971185,"public void test0971185() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    Integer integer0 = new Integer(9);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
    int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, ""vRA@$:X}66xJ"", 0);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,"assertEquals(0, dateTimeParserBucket0.getOffset())"
project,0,test0981194,"public void test0981194() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    assertNotNull(iSOChronology0);
}",0,assertNotNull(iSOChronology0)
project,0,test0981195,"public void test0981195() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertNotNull(dateTimeZone0);
}",0,
project,0,test0981196,"public void test0981196() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test0981197,"public void test0981197() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,
project,0,test0981210,"public void test0981210() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.ENGLISH;
    dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test0981211,"public void test0981211() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.ENGLISH;
    dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,
project,0,test0991226,"public void test0991226() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    assertNotNull(iSOChronology0);
}",0,assertNotNull(iSOChronology0)
project,0,test1001232,"public void test1001232() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1001233,"public void test1001233() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,
project,0,test1001234,"public void test1001234() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1001235,"public void test1001235() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test1001236,"public void test1001236() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    assertNotNull(dateTimeFormatterBuilder2);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2)"
project,0,test1001237,"public void test1001237() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
}",0,
project,0,test1001238,"public void test1001238() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1001239,"public void test1001239() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
}",0,
project,0,test1001240,"public void test1001240() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test1001241,"public void test1001241() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
}",0,
project,0,test1001242,"public void test1001242() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
}",0,
project,0,test1001243,"public void test1001243() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
    assertNotNull(dateTimeFormatterBuilder_Composite0);
}",0,assertNotNull(dateTimeFormatterBuilder_Composite0)
project,0,test1001244,"public void test1001244() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
}",0,
project,0,test1001245,"public void test1001245() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1001246,"public void test1001246() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
}",0,
project,0,test1001247,"public void test1001247() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test1001248,"public void test1001248() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
}",0,
project,0,test1001249,"public void test1001249() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
    assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
}",0,
project,0,test1021268,"public void test1021268() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    assertNotNull(julianChronology0);
}",0,assertNotNull(julianChronology0)
project,0,test1021278,"public void test1021278() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREA;
    Integer integer0 = new Integer((-463));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
    assertNotNull(dateTimeParserBucket0);
}",0,
project,0,test1021285,"public void test1021285() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREA;
    Integer integer0 = new Integer((-463));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test1021286,"public void test1021286() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREA;
    Integer integer0 = new Integer((-463));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1021287,"public void test1021287() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREA;
    Integer integer0 = new Integer((-463));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
    assertEquals((-463), (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1021297,"public void test1021297() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREA;
    Integer integer0 = new Integer((-463));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
    int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, ""UTC(-`)=,c{y"", 60000);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test1021298,"public void test1021298() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREA;
    Integer integer0 = new Integer((-463));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
    int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, ""UTC(-`)=,c{y"", 60000);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1021299,"public void test1021299() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREA;
    Integer integer0 = new Integer((-463));
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
    int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, ""UTC(-`)=,c{y"", 60000);
    assertEquals((-463), (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1031306,"public void test1031306() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertNotNull(dateTimeZone0);
}",0,assertNotNull(dateTimeZone0)
project,0,test1031307,"public void test1031307() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1031308,"public void test1031308() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1031309,"public void test1031309() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1031310,"public void test1031310() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertNotNull(gJChronology0);
}",0,
project,0,test1031311,"public void test1031311() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1031312,"public void test1031312() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1031313,"public void test1031313() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1031318,"public void test1031318() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1031319,"public void test1031319() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1031320,"public void test1031320() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", false, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1041327,"public void test1041327() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertNotNull(dateTimeZone0);
}",0,
project,0,test1041328,"public void test1041328() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1041329,"public void test1041329() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test1041330,"public void test1041330() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1041331,"public void test1041331() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertNotNull(gJChronology0);
}",0,
project,0,test1041332,"public void test1041332() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1041333,"public void test1041333() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1041334,"public void test1041334() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1041339,"public void test1041339() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1041340,"public void test1041340() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test1041341,"public void test1041341() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1051348,"public void test1051348() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
    assertNotNull(gJChronology0);
}",0,
project,0,test1061359,"public void test1061359() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertNotNull(dateTimeZone0);
}",0,
project,0,test1061360,"public void test1061360() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1061361,"public void test1061361() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1061362,"public void test1061362() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1061363,"public void test1061363() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertNotNull(gJChronology0);
}",0,
project,0,test1061364,"public void test1061364() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1061365,"public void test1061365() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1061366,"public void test1061366() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1061371,"public void test1061371() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1061372,"public void test1061372() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1061373,"public void test1061373() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1071384,"public void test1071384() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    assertNotNull(iSOChronology0);
}",0,assertNotNull(iSOChronology0)
project,0,test1081404,"public void test1081404() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertNotNull(dateTimeZone0);
}",0,assertNotNull(dateTimeZone0)
project,0,test1081405,"public void test1081405() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1081406,"public void test1081406() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1081407,"public void test1081407() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1081408,"public void test1081408() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertNotNull(gJChronology0);
}",0,
project,0,test1081409,"public void test1081409() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1081410,"public void test1081410() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1081411,"public void test1081411() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1081423,"public void test1081423() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    Locale locale0 = Locale.ENGLISH;
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1081424,"public void test1081424() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    Locale locale0 = Locale.ENGLISH;
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
    assertEquals(""+00:01"", dateTimeZone0.getID());
}",0,
project,0,test1081425,"public void test1081425() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""UTC(-`)=,c{y"", ""--ct(=6mk5'v"", true, 60000, 60000);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    Locale locale0 = Locale.ENGLISH;
    dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1101433,"public void test1101433() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    assertNotNull(dateTimeFieldType0);
}",0,
project,0,test1101434,"public void test1101434() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    assertEquals(""dayOfWeek"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1101435,"public void test1101435() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    assertEquals(""dayOfWeek"", dateTimeFieldType0.toString());
}",0,
project,0,test1101437,"public void test1101437() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    assertEquals(""dayOfWeek"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1101438,"public void test1101438() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    assertEquals(""dayOfWeek"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1101441,"public void test1101441() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    assertNotNull(dateTimeZone0);
}",0,assertNotNull(dateTimeZone0)
project,0,test1101442,"public void test1101442() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    assertEquals(""+20:00"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test1101443,"public void test1101443() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1101444,"public void test1101444() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    assertEquals(""+20:00"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1101445,"public void test1101445() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    assertNotNull(buddhistChronology0);
}",0,assertNotNull(buddhistChronology0)
project,0,test1101446,"public void test1101446() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    assertEquals(1, BuddhistChronology.BE);
}",0,
project,0,test1101447,"public void test1101447() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    assertEquals(""+20:00"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test1101448,"public void test1101448() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1101449,"public void test1101449() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    assertEquals(""+20:00"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1101450,"public void test1101450() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test1101451,"public void test1101451() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
    assertEquals(1, BuddhistChronology.BE);
}",0,
project,0,test1101452,"public void test1101452() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
    assertEquals(""+20:00"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test1101453,"public void test1101453() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1101454,"public void test1101454() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
    assertEquals(""+20:00"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1101455,"public void test1101455() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1101456,"public void test1101456() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1101457,"public void test1101457() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test1111459,"public void test1111459() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1111460,"public void test1111460() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1111461,"public void test1111461() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1111463,"public void test1111463() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1111464,"public void test1111464() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1111467,"public void test1111467() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    assertNotNull(copticChronology0);
}",1,
project,0,test1111468,"public void test1111468() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    assertEquals(1, CopticChronology.AM);
}",1,
project,0,test1111476,"public void test1111476() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test1111477,"public void test1111477() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    assertEquals(1, CopticChronology.AM);
}",0,
project,0,test1111484,"public void test1111484() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test1111485,"public void test1111485() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1111486,"public void test1111486() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1111489,"public void test1111489() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, ""];"", 99);
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1111490,"public void test1111490() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, ""];"", 99);
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1111499,"public void test1111499() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, ""];"", 99);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test1111500,"public void test1111500() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, ""];"", 99);
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1111501,"public void test1111501() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, ""];"", 99);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1121502,"public void test1121502() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1121503,"public void test1121503() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    assertEquals(""weekyear"", dateTimeFieldType0.toString());
}",0,
project,0,test1121504,"public void test1121504() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    assertEquals(""weekyear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1121506,"public void test1121506() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    assertEquals(""weekyear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1121507,"public void test1121507() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    assertEquals(""weekyear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1121514,"public void test1121514() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertNotNull(dateTimeZone0);
}",0,
project,0,test1121515,"public void test1121515() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1121516,"public void test1121516() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test1121517,"public void test1121517() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    assertNotNull(buddhistChronology0);
}",0,assertNotNull(buddhistChronology0)
project,0,test1121518,"public void test1121518() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    assertEquals(1, BuddhistChronology.BE);
}",0,
project,0,test1121519,"public void test1121519() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1121520,"public void test1121520() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test1121522,"public void test1121522() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
    assertEquals(""weekyear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1121523,"public void test1121523() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
    assertEquals(""weekyear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1121528,"public void test1121528() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1121529,"public void test1121529() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    StringBuffer stringBuffer0 = new StringBuffer();
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test1131530,"public void test1131530() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1131531,"public void test1131531() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1131532,"public void test1131532() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1131534,"public void test1131534() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1131535,"public void test1131535() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1131538,"public void test1131538() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    assertNotNull(dateTimeFormatter0);
}",0,
project,0,test1131539,"public void test1131539() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1131540,"public void test1131540() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1131543,"public void test1131543() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test1131544,"public void test1131544() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    assertTrue(dateTimeFormatter0.isParser());
}",0,assertTrue(dateTimeFormatter0.isParser())
project,0,test1131545,"public void test1131545() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test1131546,"public void test1131546() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    assertNull(dateTimeFormatter0.getPivotYear());
}",0,assertNotNull(dateTimeFormatter0.getPivotYear())
project,0,test1131547,"public void test1131547() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    assertTrue(dateTimeFormatter0.isPrinter());
}",0,assertTrue(dateTimeFormatter0.isPrinter())
project,0,test1131548,"public void test1131548() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    // Undeclared exception!
    try {
        LocalDate.parse(""EET"", dateTimeFormatter0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""EET\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test1141549,"public void test1141549() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1141550,"public void test1141550() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1141551,"public void test1141551() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1141552,"public void test1141552() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1141554,"public void test1141554() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1141555,"public void test1141555() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1141558,"public void test1141558() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test1141559,"public void test1141559() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test1141560,"public void test1141560() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test1141561,"public void test1141561() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.getName());
}",1,
project,0,test1141562,"public void test1141562() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1151565,"public void test1151565() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    assertNotNull(gJChronology0);
}",0,
project,0,test1151566,"public void test1151566() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    assertNotNull(localDateTime0);
}",0,assertNotNull(localDateTime0)
project,0,test1151567,"public void test1151567() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    assertEquals(4, localDateTime0.size());
}",0,"assertEquals(0, localDateTime0.size())"
project,0,test1151575,"public void test1151575() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    assertNotNull(dateTimeFieldType0);
}",0,
project,0,test1151576,"public void test1151576() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    assertEquals(""secondOfMinute"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1151577,"public void test1151577() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    assertEquals(""secondOfMinute"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1151579,"public void test1151579() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
    assertEquals(""secondOfMinute"", dateTimeFieldType0.toString());
}",1,
project,0,test1151580,"public void test1151580() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
    assertEquals(""secondOfMinute"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1151584,"public void test1151584() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""|54j#IjT\u0006c;:M"", false);
    dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
    assertEquals(4, localDateTime0.size());
}",0,"assertEquals(0, localDateTime0.size())"
project,0,test1151591,"public void test1151591() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""|54j#IjT\u0006c;:M"", false);
    dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
    assertEquals(""secondOfMinute"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1151592,"public void test1151592() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    Locale locale0 = Locale.CHINA;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""|54j#IjT\u0006c;:M"", false);
    dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
    assertEquals(""secondOfMinute"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1161595,"public void test1161595() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1161596,"public void test1161596() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    assertEquals(""secondOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1161597,"public void test1161597() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    assertEquals(""secondOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1161599,"public void test1161599() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    assertEquals(""secondOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1161600,"public void test1161600() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    assertEquals(""secondOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1161606,"public void test1161606() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    assertNotNull(islamicChronology0);
}",0,assertNotNull(islamicChronology0)
project,0,test1161607,"public void test1161607() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    assertEquals(1, IslamicChronology.AH);
}",0,
project,0,test1161608,"public void test1161608() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
    assertNotNull(partial0);
}",0,assertNotNull(partial0)
project,0,test1161609,"public void test1161609() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
    assertEquals(1, IslamicChronology.AH);
}",0,
project,0,test1161610,"public void test1161610() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
    assertEquals(""secondOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1161611,"public void test1161611() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
    assertEquals(""secondOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1161612,"public void test1161612() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
    assertEquals(1, partial0.size());
}",0,"assertEquals(0, partial0.size())"
project,0,test1161621,"public void test1161621() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
    Locale locale0 = Locale.FRANCE;
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
    assertEquals(""secondOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1161622,"public void test1161622() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
    Locale locale0 = Locale.FRANCE;
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
    assertEquals(""secondOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1161627,"public void test1161627() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    StringBuffer stringBuffer0 = new StringBuffer();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
    Locale locale0 = Locale.FRANCE;
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
    assertEquals(1, partial0.size());
}",0,"assertEquals(0, partial0.size())"
project,0,test1171634,"public void test1171634() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1171635,"public void test1171635() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1171636,"public void test1171636() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1171637,"public void test1171637() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    assertNotNull(ethiopicChronology0);
}",0,
project,0,test1171638,"public void test1171638() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    assertEquals(1, EthiopicChronology.EE);
}",0,
project,0,test1171647,"public void test1171647() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1171648,"public void test1171648() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1171651,"public void test1171651() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test1171652,"public void test1171652() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertEquals(1, EthiopicChronology.EE);
}",0,
project,0,test1171659,"public void test1171659() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1171660,"public void test1171660() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1171661,"public void test1171661() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test1171664,"public void test1171664() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1171665,"public void test1171665() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1171674,"public void test1171674() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1171675,"public void test1171675() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1171676,"public void test1171676() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test1181677,"public void test1181677() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1181678,"public void test1181678() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    assertEquals(""dayOfMonth"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1181679,"public void test1181679() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    assertEquals(""dayOfMonth"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1181687,"public void test1181687() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    assertNotNull(iSOChronology0);
}",0,assertNotNull(iSOChronology0)
project,0,test1181689,"public void test1181689() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
    assertEquals(""dayOfMonth"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1181690,"public void test1181690() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
    assertEquals(""dayOfMonth"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1181695,"public void test1181695() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
    Integer integer0 = new Integer(275);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test1181702,"public void test1181702() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
    Integer integer0 = new Integer(275);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    assertEquals(275, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1181703,"public void test1181703() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
    Integer integer0 = new Integer(275);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,"assertEquals(0, dateTimeParserBucket0.getOffset())"
project,0,test1181704,"public void test1181704() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
    Integer integer0 = new Integer(275);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test1191706,"public void test1191706() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1191707,"public void test1191707() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1191708,"public void test1191708() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1191709,"public void test1191709() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    assertNotNull(ethiopicChronology0);
}",0,
project,0,test1191710,"public void test1191710() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    assertEquals(1, EthiopicChronology.EE);
}",0,
project,0,test1191719,"public void test1191719() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1191720,"public void test1191720() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1191723,"public void test1191723() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test1191724,"public void test1191724() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertEquals(1, EthiopicChronology.EE);
}",0,
project,0,test1191731,"public void test1191731() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1191732,"public void test1191732() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test1191733,"public void test1191733() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1191736,"public void test1191736() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1191737,"public void test1191737() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertEquals(""minuteOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1191746,"public void test1191746() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1191747,"public void test1191747() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test1191748,"public void test1191748() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Locale locale0 = Locale.ITALIAN;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, ""US/Central"", 214);
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1201749,"public void test1201749() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1201750,"public void test1201750() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    assertEquals(""dayOfMonth"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1201751,"public void test1201751() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    assertEquals(""dayOfMonth"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1201759,"public void test1201759() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    assertNotNull(iSOChronology0);
}",0,assertNotNull(iSOChronology0)
project,0,test1201761,"public void test1201761() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
    assertEquals(""dayOfMonth"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1201762,"public void test1201762() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
    assertEquals(""dayOfMonth"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1201767,"public void test1201767() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
    Integer integer0 = new Integer(275);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test1201774,"public void test1201774() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
    Integer integer0 = new Integer(275);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,"assertEquals(0, dateTimeParserBucket0.getOffset())"
project,0,test1201775,"public void test1201775() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
    Integer integer0 = new Integer(275);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test1201776,"public void test1201776() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
    Integer integer0 = new Integer(275);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    assertEquals(275, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1211778,"public void test1211778() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1211779,"public void test1211779() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1211780,"public void test1211780() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1211782,"public void test1211782() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1211783,"public void test1211783() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1211786,"public void test1211786() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    assertNotNull(iSOChronology0);
}",0,assertNotNull(iSOChronology0)
project,0,test1211794,"public void test1211794() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test1211801,"public void test1211801() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test1211802,"public void test1211802() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1211803,"public void test1211803() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1211805,"public void test1211805() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, ""kFdI~^pqIY}sv"", 1);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1211806,"public void test1211806() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, ""kFdI~^pqIY}sv"", 1);
    assertEquals(""weekyearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1211815,"public void test1211815() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, ""kFdI~^pqIY}sv"", 1);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,assertNotNull(dateTimeParserBucket0.getOffsetInteger())
project,0,test1211816,"public void test1211816() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, ""kFdI~^pqIY}sv"", 1);
    assertEquals(1, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1211817,"public void test1211817() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, ""kFdI~^pqIY}sv"", 1);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1221818,"public void test1221818() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1221819,"public void test1221819() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    assertEquals(""yearOfEra"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1221820,"public void test1221820() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    assertEquals(""yearOfEra"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1221822,"public void test1221822() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    assertEquals(""yearOfEra"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1221823,"public void test1221823() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    assertEquals(""yearOfEra"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1221828,"public void test1221828() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    assertNotNull(islamicChronology0);
}",0,assertNotNull(islamicChronology0)
project,0,test1221829,"public void test1221829() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    assertEquals(1, IslamicChronology.AH);
}",0,
project,0,test1221830,"public void test1221830() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    assertNotNull(lenientChronology0);
}",1,
project,0,test1221831,"public void test1221831() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    assertEquals(1, IslamicChronology.AH);
}",1,
project,0,test1221832,"public void test1221832() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    assertNotNull(yearMonth0);
}",0,assertNotNull(yearMonth0)
project,0,test1221833,"public void test1221833() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    assertEquals(1, IslamicChronology.AH);
}",0,
project,0,test1221834,"public void test1221834() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    assertEquals(0, YearMonth.YEAR);
}",0,
project,0,test1221835,"public void test1221835() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    assertEquals(1, YearMonth.MONTH_OF_YEAR);
}",0,
project,0,test1221836,"public void test1221836() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    assertEquals(1389, yearMonth0.getYear());
}",0,"assertEquals(0, yearMonth0.getYear())"
project,0,test1221837,"public void test1221837() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    assertEquals(2, yearMonth0.size());
}",0,
project,0,test1221838,"public void test1221838() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    assertEquals(10, yearMonth0.getMonthOfYear());
}",0,"assertEquals(1, yearMonth0.getMonthOfYear())"
project,0,test1221849,"public void test1221849() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    Locale locale0 = Locale.KOREA;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(""yearOfEra"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1221850,"public void test1221850() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    Locale locale0 = Locale.KOREA;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(""yearOfEra"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1221869,"public void test1221869() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    Locale locale0 = Locale.KOREA;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(1389, yearMonth0.getYear());
}",0,"assertEquals(0, yearMonth0.getYear())"
project,0,test1221870,"public void test1221870() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    Locale locale0 = Locale.KOREA;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(2, yearMonth0.size());
}",0,
project,0,test1221871,"public void test1221871() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    MockFile mockFile0 = new MockFile(""US/MountainvRA@$:X}66xJ"", ""B@\""*wvnr^%9/"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    Locale locale0 = Locale.KOREA;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
    assertEquals(10, yearMonth0.getMonthOfYear());
}",0,"assertEquals(0, yearMonth0.getMonthOfYear())"
project,0,test1231878,"public void test1231878() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1231879,"public void test1231879() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    assertEquals(""yearOfEra"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1231880,"public void test1231880() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    assertEquals(""yearOfEra"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1231882,"public void test1231882() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    assertEquals(""yearOfEra"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1231883,"public void test1231883() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    assertEquals(""yearOfEra"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1231892,"public void test1231892() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertNotNull(dateTimeZone0);
}",0,
project,0,test1231898,"public void test1231898() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1231899,"public void test1231899() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test1231900,"public void test1231900() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1231901,"public void test1231901() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    assertNotNull(copticChronology0);
}",0,assertNotNull(copticChronology0)
project,0,test1231902,"public void test1231902() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    assertEquals(1, CopticChronology.AM);
}",0,
project,0,test1231908,"public void test1231908() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1231909,"public void test1231909() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test1231910,"public void test1231910() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1231911,"public void test1231911() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
    assertNotNull(localDate0);
}",0,assertNotNull(localDate0)
project,0,test1231912,"public void test1231912() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
    assertEquals(1, CopticChronology.AM);
}",0,
project,0,test1231918,"public void test1231918() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test1231919,"public void test1231919() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test1231920,"public void test1231920() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test1231921,"public void test1231921() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""=(+MHG_'zofC_^5@|"", 10, 10, 0, 85, 10, 0, 10, 85);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
    assertEquals(3, localDate0.size());
}",0,"assertEquals(0, localDate0.size())"
project,0,test1241930,"public void test1241930() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1241931,"public void test1241931() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    assertEquals(""year"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1241932,"public void test1241932() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    assertEquals(""year"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1241934,"public void test1241934() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    assertEquals(""year"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1241935,"public void test1241935() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    assertEquals(""year"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1241964,"public void test1241964() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    assertNotNull(monthDay0);
}",0,assertNotNull(monthDay0)
project,0,test1241965,"public void test1241965() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    assertEquals(0, MonthDay.MONTH_OF_YEAR);
}",0,
project,0,test1241966,"public void test1241966() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    assertEquals(1, MonthDay.DAY_OF_MONTH);
}",0,
project,0,test1241967,"public void test1241967() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    assertEquals(14, monthDay0.getDayOfMonth());
}",0,"assertEquals(0, monthDay0.getDayOfMonth())"
project,0,test1241968,"public void test1241968() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    assertEquals(2, monthDay0.size());
}",0,
project,0,test1241969,"public void test1241969() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    assertEquals(2, monthDay0.getMonthOfYear());
}",0,"assertEquals(0, monthDay0.getMonthOfYear())"
project,0,test1241979,"public void test1241979() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
    assertEquals(""year"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1241980,"public void test1241980() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
    assertEquals(""year"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1241996,"public void test1241996() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
    assertEquals(14, monthDay0.getDayOfMonth());
}",0,"assertEquals(0, monthDay0.getDayOfMonth())"
project,0,test1241997,"public void test1241997() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
    assertEquals(2, monthDay0.size());
}",0,
project,0,test1241998,"public void test1241998() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    MonthDay monthDay0 = new MonthDay();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
    assertEquals(2, monthDay0.getMonthOfYear());
}",0,
project,0,test1252005,"public void test1252005() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1252006,"public void test1252006() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1252007,"public void test1252007() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,
project,0,test1252009,"public void test1252009() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1252010,"public void test1252010() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1252013,"public void test1252013() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    assertNotNull(gJChronology0);
}",0,
project,0,test1252023,"public void test1252023() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    Integer integer0 = new Integer(11);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test1252030,"public void test1252030() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    Integer integer0 = new Integer(11);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1252031,"public void test1252031() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    Integer integer0 = new Integer(11);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    assertEquals(11, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1252032,"public void test1252032() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    Integer integer0 = new Integer(11);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test1252034,"public void test1252034() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    Integer integer0 = new Integer(11);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, ""--ct(=6mk5'v"", 1103);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1252035,"public void test1252035() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    Integer integer0 = new Integer(11);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, ""--ct(=6mk5'v"", 1103);
    assertEquals(""halfdayOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1252044,"public void test1252044() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    Integer integer0 = new Integer(11);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, ""--ct(=6mk5'v"", 1103);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1252045,"public void test1252045() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    Integer integer0 = new Integer(11);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, ""--ct(=6mk5'v"", 1103);
    assertEquals(11, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1252046,"public void test1252046() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.ENGLISH;
    Integer integer0 = new Integer(11);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, ""--ct(=6mk5'v"", 1103);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test1262047,"public void test1262047() throws Throwable {
    // Undeclared exception!
    try {
        MonthDay.parse(""fVct(=6MK5'V"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""fVct(=6MK5'V\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test1272051,"public void test1272051() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
    GJChronology gJChronology0 = GJChronology.getInstance();
    assertNotNull(gJChronology0);
}",0,assertNotNull(gJChronology0)
project,0,test1272061,"public void test1272061() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.UK;
    Integer integer0 = new Integer(2049);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
    assertNotNull(dateTimeParserBucket0);
}",0,assertNotNull(dateTimeParserBucket0)
project,0,test1272068,"public void test1272068() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.UK;
    Integer integer0 = new Integer(2049);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1272069,"public void test1272069() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.UK;
    Integer integer0 = new Integer(2049);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test1272070,"public void test1272070() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.UK;
    Integer integer0 = new Integer(2049);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
    assertEquals(2049, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1272080,"public void test1272080() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.UK;
    Integer integer0 = new Integer(2049);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
    int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "" 3.(:"", 116);
    assertEquals(0, dateTimeParserBucket0.getOffset());
}",0,
project,0,test1272081,"public void test1272081() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.UK;
    Integer integer0 = new Integer(2049);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
    int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "" 3.(:"", 116);
    assertNull(dateTimeParserBucket0.getOffsetInteger());
}",0,
project,0,test1272082,"public void test1272082() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
    GJChronology gJChronology0 = GJChronology.getInstance();
    Locale locale0 = Locale.UK;
    Integer integer0 = new Integer(2049);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
    int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "" 3.(:"", 116);
    assertEquals(2049, (int) dateTimeParserBucket0.getPivotYear());
}",0,
project,0,test1282083,"public void test1282083() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1282084,"public void test1282084() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1282085,"public void test1282085() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1282087,"public void test1282087() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1282088,"public void test1282088() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1282092,"public void test1282092() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""TkXj<+"", false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    assertNotNull(buddhistChronology0);
}",0,assertNotNull(buddhistChronology0)
project,0,test1282093,"public void test1282093() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""TkXj<+"", false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    assertEquals(1, BuddhistChronology.BE);
}",0,
project,0,test1282094,"public void test1282094() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""TkXj<+"", false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
    assertNotNull(localDateTime0);
}",0,assertNotNull(localDateTime0)
project,0,test1282095,"public void test1282095() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""TkXj<+"", false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
    assertEquals(1, BuddhistChronology.BE);
}",0,
project,0,test1282096,"public void test1282096() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""TkXj<+"", false);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
    assertEquals(4, localDateTime0.size());
}",0,"assertEquals(1, localDateTime0.size())"
project,0,test1302109,"public void test1302109() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1302110,"public void test1302110() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFractionOfMinute(0, (-76));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1312111,"public void test1312111() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1312112,"public void test1312112() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendShortText((DateTimeFieldType) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field type must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1322113,"public void test1322113() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1322114,"public void test1322114() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1322115,"public void test1322115() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    assertEquals(""secondOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1322116,"public void test1322116() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    assertEquals(""secondOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1322117,"public void test1322117() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal number of digits: 0
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1332118,"public void test1332118() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1332119,"public void test1332119() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFixedSignedDecimal((DateTimeFieldType) null, 259);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field type must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1342120,"public void test1342120() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1342121,"public void test1342121() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1342122,"public void test1342122() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    assertEquals(""yearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1342123,"public void test1342123() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    assertEquals(""yearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1342124,"public void test1342124() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test1342125,"public void test1342125() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test1342126,"public void test1342126() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test1342127,"public void test1342127() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);
    assertEquals(""yearOfCentury"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1342128,"public void test1342128() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);
    assertEquals(""yearOfCentury"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1352129,"public void test1352129() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1352130,"public void test1352130() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(1, 1);
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test1352131,"public void test1352131() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(1, 1);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1352132,"public void test1352132() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(1, 1);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test1362133,"public void test1362133() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1362134,"public void test1362134() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1362135,"public void test1362135() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    assertEquals(""millisOfSecond"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1362136,"public void test1362136() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    assertEquals(""millisOfSecond"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1362137,"public void test1362137() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1372138,"public void test1372138() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1372139,"public void test1372139() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(5, 0);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test1372140,"public void test1372140() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(5, 0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test1372141,"public void test1372141() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(5, 0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test1382142,"public void test1382142() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1382143,"public void test1382143() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendSignedDecimal((DateTimeFieldType) null, 210, 210);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field type must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1392144,"public void test1392144() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1392145,"public void test1392145() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1392146,"public void test1392146() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1392147,"public void test1392147() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    assertEquals(""weekOfWeekyear"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1392148,"public void test1392148() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, (-2123));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal number of digits: -2123
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1402149,"public void test1402149() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1402150,"public void test1402150() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1402151,"public void test1402151() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    assertEquals(""clockhourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1402152,"public void test1402152() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    assertEquals(""clockhourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1402153,"public void test1402153() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test1402154,"public void test1402154() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test1402155,"public void test1402155() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test1402156,"public void test1402156() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);
    assertEquals(""clockhourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1402157,"public void test1402157() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);
    assertEquals(""clockhourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1412158,"public void test1412158() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1412159,"public void test1412159() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendYearOfEra(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test1422160,"public void test1422160() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1422161,"public void test1422161() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendDecimal((DateTimeFieldType) null, 1, (-2317));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field type must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1432162,"public void test1432162() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1432163,"public void test1432163() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(""S"");
    assertNotNull(dateTimeFormatterBuilder1);
}",0,"assertEquals(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1)"
project,0,test1432164,"public void test1432164() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(""S"");
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1432165,"public void test1432165() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(""S"");
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test1442166,"public void test1442166() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1442167,"public void test1442167() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendLiteral((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Literal must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test1452168,"public void test1452168() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1452172,"public void test1452172() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.append((DateTimePrinter) null, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No printer supplied
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1462173,"public void test1462173() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,assertNotNull(dateTimeFormatterBuilder0)
project,0,test1462174,"public void test1462174() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.append((DateTimeParser) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No parser supplied
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1472175,"public void test1472175() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1472182,"public void test1472182() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
    assertNotNull(dateTimeFormatterBuilder1);
}",1,
project,0,test1472183,"public void test1472183() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test1472184,"public void test1472184() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",1,
project,0,test1472185,"public void test1472185() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
    assertEquals(1, dateTimeParserArray0.length);
}",1,
project,0,test1482189,"public void test1482189() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1482196,"public void test1482196() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No parser supplied
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1492197,"public void test1492197() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    assertNotNull(dateTimeFormatterBuilder0);
}",0,
project,0,test1492198,"public void test1492198() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.toParser();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Parsing is not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test1502199,"public void test1502199() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertNotNull(dateTimeFieldType0);
}",0,assertNotNull(dateTimeFieldType0)
project,0,test1502200,"public void test1502200() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1502201,"public void test1502201() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1502203,"public void test1502203() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1502204,"public void test1502204() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1502207,"public void test1502207() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    assertNotNull(copticChronology0);
}",1,
project,0,test1502208,"public void test1502208() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    assertEquals(1, CopticChronology.AM);
}",1,
project,0,test1502219,"public void test1502219() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    MockFileWriter mockFileWriter0 = new MockFileWriter(""V*5{`cp )y~EvNag"", false);
    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
    assertNotNull(localTime0);
}",0,assertNotNull(localTime0)
project,0,test1502220,"public void test1502220() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    MockFileWriter mockFileWriter0 = new MockFileWriter(""V*5{`cp )y~EvNag"", false);
    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
    assertEquals(1, CopticChronology.AM);
}",0,
project,0,test1502221,"public void test1502221() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    MockFileWriter mockFileWriter0 = new MockFileWriter(""V*5{`cp )y~EvNag"", false);
    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
    assertEquals(4, localTime0.size());
}",0,"assertEquals(0, localTime0.size())"
project,0,test1502223,"public void test1502223() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    MockFileWriter mockFileWriter0 = new MockFileWriter(""V*5{`cp )y~EvNag"", false);
    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
    dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
    assertEquals(""hourOfDay"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test1502224,"public void test1502224() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    MockFileWriter mockFileWriter0 = new MockFileWriter(""V*5{`cp )y~EvNag"", false);
    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
    dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
    assertEquals(""hourOfDay"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test1502233,"public void test1502233() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Locale locale0 = Locale.KOREAN;
    MockFileWriter mockFileWriter0 = new MockFileWriter(""V*5{`cp )y~EvNag"", false);
    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
    dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
    assertEquals(4, localTime0.size());
}",0,"assertEquals(0, localTime0.size())"
project,0,test1682255,"public void test1682255() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendClockhourOfDay((-1988));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test1692256,"public void test1692256() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test1702257,"public void test1702257() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(2946);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1712258,"public void test1712258() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(16);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1722259,"public void test1722259() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(5, 431);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1742262,"public void test1742262() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendTimeZoneOffset(""f"", ""pVYM$2rx"", false, 719482, (-945));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset"", e);
    }
}",0,
project,0,test1752263,"public void test1752263() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendMillisOfDay((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test1762264,"public void test1762264() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test1772265,"public void test1772265() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    boolean boolean0 = dateTimeFormatterBuilder0.canBuildPrinter();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1782266,"public void test1782266() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(574);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1792267,"public void test1792267() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1802268,"public void test1802268() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendSecondOfDay((-286));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",0,
project,0,test1812269,"public void test1812269() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test1842276,"public void test1842276() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendPattern(""EU["");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: U
        //
        verifyException(""org.joda.time.format.DateTimeFormat"", e);
    }
}",0,
project,0,test1852277,"public void test1852277() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    dateTimeFormatterBuilder0.appendDayOfWeekText();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(260, true);
    boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
    assertTrue(boolean0);
}",0,
project,0,test1862278,"public void test1862278() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendFractionOfDay((-241), (-241));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1872279,"public void test1872279() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
    assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
}",0,
project,0,test1882280,"public void test1882280() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1892281,"public void test1892281() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(12825000);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1912284,"public void test1912284() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    // Undeclared exception!
    try {
        dateTimeFormatterBuilder0.appendCenturyOfEra((-457), (-457));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder"", e);
    }
}",1,
project,0,test1922285,"public void test1922285() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(5, 574);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",0,
project,0,test1932286,"public void test1932286() throws Throwable {
    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(0);
    assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
}",1,
project,0,test1972291,"public void test1972291() throws Throwable {
    Instant instant0 = null;
    try {
        instant0 = new Instant(""kFdI~^pqIY}sv"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""kFdI~^pqIY}sv\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
