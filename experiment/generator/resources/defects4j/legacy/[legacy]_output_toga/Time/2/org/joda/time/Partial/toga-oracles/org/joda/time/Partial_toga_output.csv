project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test081,"public void test081() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    // Undeclared exception!
    try {
        partial0.property(dateTimeFieldType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'minuteOfHour' is not supported
        //
        verifyException(""org.joda.time.base.AbstractPartial"", e);
    }
}",0,
project,0,test092,"public void test092() throws Throwable {
    long long0 = 0L;
    LocalTime localTime0 = new LocalTime(0L);
    Partial partial0 = new Partial(localTime0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
    int int0 = 5;
    partial_Property0.setCopy(5);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    partial_Property0.setCopy("""", locale0);
    // Undeclared exception!
    try {
        DateTimeUtils.setCurrentMillisFixed(long0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value \""\"" for hourOfDay is not supported
        //
        verifyException(""org.joda.time.field.BaseDateTimeField"", e);
    }
}",1,
project,0,test133,"public void test133() throws Throwable {
    int int0 = 0;
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    int[] intArray0 = new int[0];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Values array must be the same length as the types array
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test525,"public void test525() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    int[] intArray0 = new int[2];
    intArray0[1] = 0;
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        DurationFieldType.hours();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must not contain duplicate: millisOfSecond and millisOfSecond
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test556,"public void test556() throws Throwable {
    Days days0 = Days.MAX_VALUE;
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.centuryOfEra();
    dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
    DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
    int[] intArray0 = new int[4];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: secondOfMinute < centuryOfEra
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test567,"public void test567() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
    int[] intArray0 = new int[2];
    intArray0[1] = 0;
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        DurationFieldType.hours();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must not contain null: index 0
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test588,"public void test588() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    int[] intArray0 = new int[2];
    int int0 = 0;
    intArray0[1] = 0;
    Partial partial1 = null;
    try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: secondOfMinute < secondOfDay
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test6610,"public void test6610() throws Throwable {
    long long0 = 1017L;
    System.setCurrentTimeMillis(1017L);
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
    dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
    int[] intArray0 = new int[3];
    int int0 = 32;
    int int1 = (-1892);
    intArray0[1] = (-1892);
    int int2 = 1552;
    intArray0[2] = 1552;
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: yearOfEra < year
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
