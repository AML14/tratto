project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    // Undeclared exception!
    try {
        dateTimeZone0.adjustOffset(9223372036854775807L, true);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Adding time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.convertLocalToUTC((-21477600001L), true);
    assertEquals((-21452400001L), long0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""-18:00"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test033,"public void test033() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertSame(dateTimeZone0, dateTimeZone1);
}",0,
project,0,test044,"public void test044() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 59);
    assertEquals(""+00:59"", dateTimeZone0.getID());
}",0,
project,0,test055,"public void test055() throws Throwable {
    try {
        DateTimeZone.forOffsetHoursMinutes(0, (-2002));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: -2002
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test087,"public void test087() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
    dateTimeZone0.UTC.previousTransition(0L);
    assertEquals(""-00:00:02.988"", dateTimeZone0.getID());
}",0,
project,0,test088,"public void test088() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
    dateTimeZone0.UTC.previousTransition(0L);
    assertEquals(""-00:00:02.988"", dateTimeZone0.toString());
}",0,
project,0,test099,"public void test099() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.UTC.previousTransition(1);
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test1010,"public void test1010() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.previousTransition(10800000L);
    assertEquals((-5756400001L), long0);
}",0,"assertEquals(0, long0)"
project,0,test1111,"public void test1111() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
    dateTimeZone0.nextTransition(0L);
    assertEquals(""+572:01"", dateTimeZone0.toString());
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.nextTransition(0L);
    assertEquals(9972000000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1313,"public void test1313() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.UTC.nextTransition((-1714L));
    assertEquals((-1714L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1414,"public void test1414() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    boolean boolean0 = dateTimeZone0.isFixed();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1515,"public void test1515() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
    int int0 = dateTimeZone0.getStandardOffset(0L);
    assertEquals(""+572:01"", dateTimeZone0.toString());
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
    int int0 = dateTimeZone0.getStandardOffset(0L);
    assertEquals(2059260000, int0);
}",0,"assertEquals(1, int0)"
project,0,test1617,"public void test1617() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    int int0 = dateTimeZone0.getStandardOffset((-324L));
    assertEquals((-28800000), int0);
}",0,"assertEquals(0, int0)"
project,0,test1718,"public void test1718() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
    dateTimeZone0.UTC.getOffsetFromLocal(0L);
    assertEquals(""+550:00"", dateTimeZone0.toString());
}",0,
project,0,test1719,"public void test1719() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
    dateTimeZone0.UTC.getOffsetFromLocal(0L);
    assertEquals(""+550:00"", dateTimeZone0.getID());
}",0,
project,0,test1820,"public void test1820() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
    int int0 = dateTimeZone0.getOffsetFromLocal((-622L));
    assertEquals(3, int0);
}",0,
project,0,test1821,"public void test1821() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
    int int0 = dateTimeZone0.getOffsetFromLocal((-622L));
    assertEquals(""+00:00:00.003"", dateTimeZone0.getID());
}",0,
project,0,test1922,"public void test1922() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
    DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
    assertEquals(""+00:00:02.555"", dateTimeZone0.toString());
}",0,
project,0,test1923,"public void test1923() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
    DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
    assertEquals(2555, int0);
}",0,
project,0,test2024,"public void test2024() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Instant instant0 = new Instant();
    int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);
    assertEquals((-28800000), int0);
}",0,
project,0,test2125,"public void test2125() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
    dateTimeZone0.UTC.getOffset(3608960L);
    assertEquals(""+00:00:00.003"", dateTimeZone0.toString());
}",0,
project,0,test2126,"public void test2126() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
    dateTimeZone0.UTC.getOffset(3608960L);
    assertEquals(""+00:00:00.003"", dateTimeZone0.getID());
}",0,
project,0,test2227,"public void test2227() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(682);
    int int0 = dateTimeZone0.getOffset((long) 682);
    assertEquals(""+00:00:00.682"", dateTimeZone0.toString());
}",0,
project,0,test2228,"public void test2228() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(682);
    int int0 = dateTimeZone0.getOffset((long) 682);
    assertEquals(682, int0);
}",0,"assertEquals(0, int0)"
project,0,test2329,"public void test2329() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getOffset(1173L);
    assertEquals((-28800000), int0);
}",0,"assertEquals(0, int0)"
project,0,test2430,"public void test2430() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    dateTimeZone0.getNameKey(60000L);
    assertEquals(""+01:00"", dateTimeZone0.getID());
}",0,
project,0,test2531,"public void test2531() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    String string0 = dateTimeZone0.getNameKey((-575L));
    assertEquals(""UTC"", string0);
}",0,assertNotNull(string0)
project,0,test2632,"public void test2632() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
    assertEquals(0L, long0);
}",0,
project,0,test2733,"public void test2733() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
    long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone1, 1483L);
    assertEquals(1482L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2734,"public void test2734() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
    long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone1, 1483L);
    assertEquals(""+00:00:00.001"", dateTimeZone1.toString());
}",1,
project,0,test2835,"public void test2835() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2936,"public void test2936() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2442);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    dateTimeZone0.UTC.equals(defaultNameProvider0);
    assertEquals(""+00:00:02.442"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test2937,"public void test2937() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2442);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    dateTimeZone0.UTC.equals(defaultNameProvider0);
    assertEquals(""+00:00:02.442"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test3038,"public void test3038() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""`HAljM6#"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertNotNull(dateTimeZone0);
}",0,
project,0,test3039,"public void test3039() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""`HAljM6#"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    long long0 = dateTimeZone0.convertUTCToLocal(0);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3140,"public void test3140() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3870));
    long long0 = dateTimeZone0.convertLocalToUTC((long) (-3870), true, (long) (-3870));
    assertEquals(0L, long0);
}",0,
project,0,test3141,"public void test3141() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3870));
    long long0 = dateTimeZone0.convertLocalToUTC((long) (-3870), true, (long) (-3870));
    assertEquals(""-00:00:03.870"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test3242,"public void test3242() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    long long0 = dateTimeZone0.UTC.convertLocalToUTC((-9223372036826397809L), false, (long) 0);
    assertEquals((-9223372036826397809L), long0);
}",0,"assertEquals(1, long0)"
project,0,test3343,"public void test3343() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.convertLocalToUTC((-4415L), true);
    assertEquals(28795585L, long0);
}",0,
project,0,test3444,"public void test3444() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.adjustOffset(599L, true);
    assertEquals(599L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3545,"public void test3545() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test3646,"public void test3646() throws Throwable {
    try {
        DateTimeZone.forOffsetHours(60000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test3747,"public void test3747() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Subtracting time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test3848,"public void test3848() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.convertLocalToUTC((-806L), true, (-806L));
    assertEquals(28799194L, long0);
}",0,
project,0,test3949,"public void test3949() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false, 9223372036854775807L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Subtracting time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test4050,"public void test4050() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.UTC.convertUTCToLocal(1L);
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4151,"public void test4151() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    int int0 = dateTimeZone0.getOffsetFromLocal(1);
    assertEquals((-28800000), int0);
}",0,
project,0,test4252,"public void test4252() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.CHINESE;
    String string0 = dateTimeZone0.getName(158L, locale0);
    assertNotNull(string0);
}",0,
project,0,test4253,"public void test4253() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.CHINESE;
    String string0 = dateTimeZone0.getName(158L, locale0);
    assertEquals(""-08:00"", string0);
}",0,
project,0,test4354,"public void test4354() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);
    String string0 = dateTimeZone0.getName(3347L, (Locale) null);
    assertEquals(""+57:00"", string0);
}",0,
project,0,test4455,"public void test4455() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);
    Locale locale0 = Locale.CANADA;
    String string0 = dateTimeZone0.getShortName((long) 2555, locale0);
    assertEquals(""+00:00:02.555"", string0);
}",0,
project,0,test4556,"public void test4556() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    String string0 = dateTimeZone0.getShortName(0L, (Locale) null);
    assertEquals(""-08:00"", string0);
}",0,
project,0,test4657,"public void test4657() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,
project,0,test4758,"public void test4758() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-357), 1);
    assertEquals(""-357:01"", dateTimeZone0.toString());
}",0,
project,0,test4859,"public void test4859() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
    dateTimeZone0.UTC.isFixed();
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,
project,0,test4860,"public void test4860() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
    dateTimeZone0.UTC.isFixed();
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test4961,"public void test4961() throws Throwable {
    // Undeclared exception!
    try {
        DateTimeZone.forID(""hh!E!^m5qP"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id 'hh!E!^m5qP' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5062,"public void test5062() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""WET"");
    int int0 = dateTimeZone0.getStandardOffset(1804L);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test5163,"public void test5163() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    String string0 = dateTimeZone0.getID();
    assertEquals(""America/Los_Angeles"", string0);
}",0,
project,0,test5264,"public void test5264() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);
    long long0 = dateTimeZone0.UTC.adjustOffset(0, true);
    assertEquals(""+57:00"", dateTimeZone0.toString());
}",0,
project,0,test5265,"public void test5265() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);
    long long0 = dateTimeZone0.UTC.adjustOffset(0, true);
    assertEquals(0L, long0);
}",0,
project,0,test5366,"public void test5366() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 57);
    DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 7);
    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
    dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    assertEquals(1392393780000L, dateMidnight0.getMillis());
}",0,"assertEquals(0, dateMidnight0.getMillis())"
project,0,test5367,"public void test5367() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 57);
    DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 7);
    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
    dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    assertEquals(""+07:57"", dateTimeZone0.toString());
}",1,
project,0,test5468,"public void test5468() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);
    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);
    boolean boolean0 = dateTimeZone1.isLocalDateTimeGap(localDateTime0);
    assertEquals(""+00:00:01.168"", dateTimeZone0.toString());
}",0,
project,0,test5469,"public void test5469() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);
    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);
    boolean boolean0 = dateTimeZone1.isLocalDateTimeGap(localDateTime0);
    assertFalse(boolean0);
}",0,
project,0,test5570,"public void test5570() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-806L));
    assertEquals((-806L), long0);
}",0,
project,0,test5671,"public void test5671() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);
    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);
    assertEquals(""+00:00:01.168"", dateTimeZone0.toString());
}",1,
project,0,test5672,"public void test5672() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);
    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);
    assertEquals(0L, long0);
}",0,
project,0,test5773,"public void test5773() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone0, 9223372036854775807L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Subtracting time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5874,"public void test5874() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    // Undeclared exception!
    try {
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Adding time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5975,"public void test5975() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    long long0 = dateTimeZone0.convertUTCToLocal(4478L);
    assertEquals((-28795522L), long0);
}",0,"assertEquals(1, long0)"
project,0,test6076,"public void test6076() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
    assertEquals((-28378000), int0);
}",0,
project,0,test6177,"public void test6177() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    boolean boolean0 = dateTimeZone0.isStandardOffset(30128928L);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test6278,"public void test6278() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    boolean boolean0 = dateTimeZone0.isStandardOffset(9223372036854775807L);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test6379,"public void test6379() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-356));
    dateTimeZone0.UTC.getOffset((ReadableInstant) null);
    assertEquals(""-356:00"", dateTimeZone0.getID());
}",0,
project,0,test6380,"public void test6380() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-356));
    dateTimeZone0.UTC.getOffset((ReadableInstant) null);
    assertEquals(""-356:00"", dateTimeZone0.toString());
}",0,
project,0,test6481,"public void test6481() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    String string0 = dateTimeZone0.getName(9223372036854775807L);
    assertNotNull(string0);
}",0,
project,0,test6482,"public void test6482() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    String string0 = dateTimeZone0.getName(9223372036854775807L);
    assertEquals(""-07:00"", string0);
}",0,
project,0,test6583,"public void test6583() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-356));
    String string0 = dateTimeZone0.getShortName((long) (-356));
    assertEquals(""-356:00"", string0);
}",0,
project,0,test6684,"public void test6684() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1585), ""user.timezone"");
    DateTimeZone.forTimeZone(simpleTimeZone0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test6685,"public void test6685() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1585), ""user.timezone"");
    DateTimeZone.forTimeZone(simpleTimeZone0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertNotNull(dateTimeZone0);
}",0,
project,0,test6786,"public void test6786() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-28378000));
    assertEquals(""-07:52:58"", dateTimeZone0.getID());
}",0,
project,0,test7087,"public void test7087() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);
    assertEquals(""+00:00:01.168"", dateTimeZone0.toString());
}",0,
project,0,test7088,"public void test7088() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1168);
    assertSame(dateTimeZone1, dateTimeZone0);
}",0,
project,0,test7189,"public void test7189() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,
project,0,test7290,"public void test7290() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""+03:32"", dateTimeZone1.getID());
}",0,
project,0,test7291,"public void test7291() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertNotNull(dateTimeZone1);
}",0,
project,0,test7292,"public void test7292() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""java.util.SimpleTimeZone[id=+03:32:20.625,offset=12740625,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}",0,
project,0,test7493,"public void test7493() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""UTC"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test7594,"public void test7594() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    long long0 = dateTimeZone0.UTC.adjustOffset((-324L), false);
    assertEquals((-324L), long0);
}",0,"assertEquals(1, long0)"
project,0,test7695,"public void test7695() throws Throwable {
    try {
        DateTimeZone.forOffsetHoursMinutes(0, 12720000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: 12720000
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test7796,"public void test7796() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+00:00"");
    assertNotNull(dateTimeZone0);
}",0,
project,0,test7797,"public void test7797() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+00:00"");
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,
project,0,test7898,"public void test7898() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""-07:00"");
    assertEquals(""-07:00"", dateTimeZone0.toString());
}",0,
project,0,test7899,"public void test7899() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""-07:00"");
    assertNotNull(dateTimeZone0);
}",0,
project,0,test79100,"public void test79100() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+07:57"");
    assertEquals(""+07:57"", dateTimeZone0.toString());
}",0,
project,0,test79101,"public void test79101() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+07:57"");
    assertNotNull(dateTimeZone0);
}",0,
project,0,test80102,"public void test80102() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""UTC"");
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test81103,"public void test81103() throws Throwable {
    // Undeclared exception!
    try {
        DateTimeZone.setDefault((DateTimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone must not be null
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test82104,"public void test82104() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone.setDefault(dateTimeZone0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,
project,0,test83105,"public void test83105() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
    assertSame(dateTimeZone1, dateTimeZone0);
}",0,
project,0,test84106,"public void test84106() throws Throwable {
    Provider provider0 = DateTimeZone.getProvider();
    assertNotNull(provider0);
}",0,
project,0,test87108,"public void test87108() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 57);
    String string0 = dateTimeZone0.toString();
    assertEquals(""+07:57"", string0);
}",0,
project,0,test88109,"public void test88109() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-356));
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    // Undeclared exception!
    try {
        DateTimeZone.forTimeZone(timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""-S6:00\"" is malformed at \""S6:00\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test89110,"public void test89110() throws Throwable {
    CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone) DateTimeZone.getDefault();
    Object object0 = ((DateTimeZone) cachedDateTimeZone0).writeReplace();
    assertNotNull(object0);
}",0,assertNotNull(object0)
