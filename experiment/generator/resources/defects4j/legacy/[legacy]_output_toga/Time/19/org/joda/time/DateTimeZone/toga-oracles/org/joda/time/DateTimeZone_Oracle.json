[ {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test000"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test011"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.toString())",
  "exception" : "",
  "testName" : "test022"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test033"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test044"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test055"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test087"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test088"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long previousTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, long0)",
  "exception" : "",
  "testName" : "test099"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long previousTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, long0)",
  "exception" : "",
  "testName" : "test1010"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1111"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long nextTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test1212"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long nextTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test1313"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean isFixed()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test1414"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1515"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, int0)",
  "exception" : "",
  "testName" : "test1516"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test1617"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1718"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1719"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1820"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1821"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1922"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final int getOffset(ReadableInstant instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1923"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final int getOffset(ReadableInstant instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2024"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2125"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2126"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2227"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test2228"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test2329"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2430"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract String getNameKey(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(string0)",
  "exception" : "",
  "testName" : "test2531"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2632"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test2733"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2734"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean equals(Object obj)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test2835"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.toString())",
  "exception" : "",
  "testName" : "test2936"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.getID())",
  "exception" : "",
  "testName" : "test2937"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3038"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3039"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3140"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.toString())",
  "exception" : "",
  "testName" : "test3141"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3242"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3343"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3444"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3545"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3646"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3747"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3848"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3949"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test4050"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4151"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4252"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4253"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4354"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getShortName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4455"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getShortName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4556"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4657"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4758"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4859"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4860"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4961"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test5062"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5163"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5264"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5265"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillis()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, dateMidnight0.getMillis())",
  "exception" : "",
  "testName" : "test5366"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5367"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5468"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5469"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5570"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5671"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5672"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5773"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5874"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test5975"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6076"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test6177"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test6278"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6379"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6380"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6481"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6482"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getShortName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6583"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.toString())",
  "exception" : "",
  "testName" : "test6684"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6685"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6786"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7087"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7088"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7189"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7290"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7291"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7292"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean isFixed()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(dateTimeZone0.isFixed())",
  "exception" : "",
  "testName" : "test7493"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test7594"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7695"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7796"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7797"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7898"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7899"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test79100"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test79101"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.getID())",
  "exception" : "",
  "testName" : "test80102"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test81103"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test82104"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone getDefault()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test83105"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static Provider getProvider()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test84106"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test87108"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test88109"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "protected Object writeReplace() throws ObjectStreamException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(object0)",
  "exception" : "",
  "testName" : "test89110"
} ]