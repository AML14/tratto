project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0130,"public void test0130() throws Throwable {
    int int0 = 0;
    LocalDateTime localDateTime0 = new LocalDateTime(0, 12, 0, 12, 12, 64);
    localDateTime0.withYearOfEra(int0);
    // Undeclared exception!
    try {
        localDateTime0.toLocalDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 64 for secondOfMinute must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test0231,"public void test0231() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek((-3077));
    // Undeclared exception!
    try {
        localDateTime1.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -3077 for dayOfWeek must be in the range [1,7]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test0242,"public void test0242() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withMonthOfYear(255);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 255 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test0263,"public void test0263() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    LocalDate localDate0 = LocalDate.now();
    // Undeclared exception!
    try {
        localDateTime0.compareTo((ReadablePartial) localDate0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // ReadablePartial objects must have matching field types
        //
        verifyException(""org.joda.time.base.AbstractPartial"", e);
    }
}",0,
project,0,test0284,"public void test0284() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withDayOfMonth(736);
    // Undeclared exception!
    try {
        DateTimeFieldType.halfdayOfDay();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 736 for dayOfMonth must be in the range [1,28]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test0325,"public void test0325() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.minusYears((-2147483598));
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: 2014 + 2147483598
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test0416,"public void test0416() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDateTime localDateTime0 = null;
    try {
        localDateTime0 = new LocalDateTime(fixedDateTimeZone0, fixedDateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No partial converter found for type: org.joda.time.tz.FixedDateTimeZone
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}",0,
project,0,test0477,"public void test0477() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withTime(23034375, 23034375, 23034375, 23034375);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 23034375 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test0488,"public void test0488() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getFieldType(883);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Invalid index: 883
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test0539,"public void test0539() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Locale locale0 = Locale.CHINESE;
    localDateTime0.toString(""|Er"", locale0);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: r
        //
        verifyException(""org.joda.time.format.DateTimeFormat"", e);
    }
}",0,
project,0,test06110,"public void test06110() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withEra(23118750);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 23118750 for era must be in the range [0,1]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test06211,"public void test06211() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getValue(153);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Invalid index: 153
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test06812,"public void test06812() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(2390);
    // Undeclared exception!
    try {
        localDateTime1.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 2390 for weekOfWeekyear must be in the range [1,52]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test08013,"public void test08013() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.hourOfDay();
    localDateTime0.toDate();
    LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
    localDateTime_Property0.setCopy(""{gmi"");
    // Undeclared exception!
    try {
        localDateTime_Property0.getLeapAmount();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value \""{gmi\"" for year is not supported
        //
        verifyException(""org.joda.time.field.BaseDateTimeField"", e);
    }
}",0,
project,0,test09514,"public void test09514() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) null);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The calendar must not be null
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test10716,"public void test10716() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withDayOfYear(23118774);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 23118774 for dayOfYear must be in the range [1,365]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test11517,"public void test11517() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.get((DateTimeFieldType) null);
    // Undeclared exception!
    try {
        localDateTime0.getMillisOfDay();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The DateTimeFieldType must not be null
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
