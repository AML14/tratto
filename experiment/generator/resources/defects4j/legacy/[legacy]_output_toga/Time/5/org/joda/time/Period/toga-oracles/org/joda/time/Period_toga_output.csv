project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    PeriodType periodType0 = PeriodType.months();
    Period period0 = Period.days(12);
    Period period1 = period0.minusMonths(83);
    // Undeclared exception!
    try {
        period1.normalizedStandard(periodType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    Period period0 = Period.minutes(648);
    Period period1 = period0.plusDays((-2241));
    Duration duration0 = period1.toStandardDuration();
    assertEquals((-193583520000L), duration0.getMillis());
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    Period period0 = Period.hours(98);
    Duration duration0 = period0.toStandardDuration();
    assertEquals(352800000L, duration0.getMillis());
}",0,"assertEquals(1, duration0.getMillis())"
project,0,test0033,"public void test0033() throws Throwable {
    Period period0 = Period.minutes(648);
    Duration duration0 = period0.toStandardDuration();
    assertEquals(38880000L, duration0.getMillis());
}",0,"assertEquals(1, duration0.getMillis())"
project,0,test0044,"public void test0044() throws Throwable {
    Period period0 = new Period();
    Period period1 = period0.plusSeconds(2527);
    Duration duration0 = period1.toStandardDuration();
    assertEquals(2527000L, duration0.getMillis());
}",0,"assertEquals(0, duration0.getMillis())"
project,0,test0055,"public void test0055() throws Throwable {
    Period period0 = Period.weeks(758);
    Seconds seconds0 = period0.toStandardSeconds();
    assertEquals(458438400, seconds0.getSeconds());
}",0,"assertEquals(1, seconds0.getSeconds())"
project,0,test0066,"public void test0066() throws Throwable {
    Period period0 = Period.weeks(648);
    Minutes minutes0 = period0.toStandardMinutes();
    assertEquals(6531840, minutes0.getMinutes());
}",0,"assertEquals(1, minutes0.getMinutes())"
project,0,test0077,"public void test0077() throws Throwable {
    PeriodType periodType0 = PeriodType.yearDayTime();
    Period period0 = new Period((-4294967296L), periodType0);
    Minutes minutes0 = period0.toStandardMinutes();
    assertEquals((-71582), minutes0.getMinutes());
}",0,"assertEquals(0, minutes0.getMinutes())"
project,0,test0088,"public void test0088() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Period period0 = new Period((Object) null, iSOChronology0);
    Period period1 = period0.minusMinutes(30);
    Days days0 = period1.toStandardDays();
    assertEquals(0, days0.getDays());
}",0,"assertEquals(1, days0.getDays())"
project,0,test0089,"public void test0089() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Period period0 = new Period((Object) null, iSOChronology0);
    Period period1 = period0.minusMinutes(30);
    Days days0 = period1.toStandardDays();
    assertNotSame(period1, period0);
}",0,
project,0,test00910,"public void test00910() throws Throwable {
    Period period0 = new Period();
    Period period1 = period0.plusDays(2527);
    Period period2 = period1.plusSeconds(2527);
    Weeks weeks0 = period2.toStandardWeeks();
    assertNotSame(period2, period1);
}",0,
project,0,test00911,"public void test00911() throws Throwable {
    Period period0 = new Period();
    Period period1 = period0.plusDays(2527);
    Period period2 = period1.plusSeconds(2527);
    Weeks weeks0 = period2.toStandardWeeks();
    assertEquals(361, weeks0.getWeeks());
}",0,"assertEquals(0, weeks0.getWeeks())"
project,0,test01012,"public void test01012() throws Throwable {
    Duration duration0 = Duration.standardMinutes(1000L);
    Period period0 = duration0.toPeriod();
    Weeks weeks0 = period0.toStandardWeeks();
    assertEquals(0, weeks0.getWeeks());
}",0,"assertEquals(1, weeks0.getWeeks())"
project,0,test01113,"public void test01113() throws Throwable {
    LocalTime localTime0 = new LocalTime(0L);
    Period period0 = new Period(localTime0, localTime0, (PeriodType) null);
    Minutes minutes0 = Minutes.standardMinutesIn(period0);
    Weeks weeks0 = minutes0.toStandardWeeks();
    DurationFieldType durationFieldType0 = weeks0.getFieldType();
    Period period1 = period0.withFieldAdded(durationFieldType0, 1599);
    assertNotSame(period1, period0);
}",0,
project,0,test01214,"public void test01214() throws Throwable {
    Duration duration0 = Duration.ZERO;
    Period period0 = duration0.toPeriod();
    Period period1 = period0.withDays(1500);
    assertNotSame(period0, period1);
}",0,
project,0,test01315,"public void test01315() throws Throwable {
    PeriodType periodType0 = PeriodType.yearWeekDay();
    PeriodType periodType1 = periodType0.withYearsRemoved();
    Period period0 = new Period(30962844000000L, 31556952000L, periodType1);
    Weeks weeks0 = period0.toStandardWeeks();
    assertEquals((-51143), weeks0.getWeeks());
}",0,"assertEquals(1, weeks0.getWeeks())"
project,0,test01416,"public void test01416() throws Throwable {
    Days days0 = Days.SEVEN;
    Duration duration0 = days0.toStandardDuration();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
    PeriodType periodType0 = PeriodType.minutes();
    Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
    Seconds seconds0 = period0.toStandardSeconds();
    assertEquals(604800, seconds0.getSeconds());
}",0,"assertEquals(0, seconds0.getSeconds())"
project,0,test01517,"public void test01517() throws Throwable {
    LocalTime localTime0 = new LocalTime();
    LocalTime localTime1 = localTime0.withLocalMillis(0L);
    Period period0 = Period.fieldDifference(localTime0, localTime1);
    Seconds seconds0 = period0.toStandardSeconds();
    assertEquals((-44481), seconds0.getSeconds());
}",0,"assertEquals(0, seconds0.getSeconds())"
project,0,test01618,"public void test01618() throws Throwable {
    Period period0 = Period.minutes(648);
    Period period1 = period0.plusDays((-2241));
    Minutes minutes0 = period1.toStandardMinutes();
    assertEquals((-3226392), minutes0.getMinutes());
}",0,"assertEquals(0, minutes0.getMinutes())"
project,0,test01719,"public void test01719() throws Throwable {
    Period period0 = Period.minutes(648);
    Period period1 = period0.plusDays((-2241));
    Hours hours0 = period1.toStandardHours();
    assertEquals((-53774), hours0.getHours());
}",0,"assertEquals(0, hours0.getHours())"
project,0,test01820,"public void test01820() throws Throwable {
    Period period0 = Period.minutes(10209375);
    Duration duration0 = period0.ZERO.toStandardDuration();
    assertEquals(0L, duration0.getMillis());
}",0,
project,0,test01921,"public void test01921() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
    Period period0 = new Period(dateTime0, dateTime0);
    Period period1 = period0.withWeeks(1007);
    Duration duration0 = period1.toStandardDuration();
    assertEquals(609033600000L, duration0.getMillis());
}",0,"assertEquals(1, duration0.getMillis())"
project,0,test02022,"public void test02022() throws Throwable {
    Period period0 = Period.ZERO;
    Period period1 = period0.plusWeeks((-2230));
    Duration duration0 = period1.toStandardDuration();
    assertEquals((-1348704000L), duration0.getStandardSeconds());
}",0,
project,0,test02123,"public void test02123() throws Throwable {
    Period period0 = Period.hours(839);
    Days days0 = period0.toStandardDays();
    assertEquals(34, days0.getDays());
}",0,"assertEquals(1, days0.getDays())"
project,0,test02224,"public void test02224() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Period period0 = new Period((Object) null, iSOChronology0);
    Period period1 = period0.withWeeks((-420));
    Days days0 = period1.toStandardDays();
    assertEquals((-2940), days0.getDays());
}",0,"assertEquals(1, days0.getDays())"
project,0,test02325,"public void test02325() throws Throwable {
    Period period0 = Period.parse(""PT0S"");
    assertNotNull(period0);
}",0,assertNotNull(period0)
project,0,test02426,"public void test02426() throws Throwable {
    Period period0 = new Period(26, (-1071), 1467, 12, 907, 139, 139, 12, (PeriodType) null);
    int int0 = period0.getYears();
    assertEquals(26, int0);
}",0,
project,0,test02527,"public void test02527() throws Throwable {
    Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-4053), (-230));
    int int0 = period0.getYears();
    assertEquals((-41), int0);
}",0,
project,0,test02628,"public void test02628() throws Throwable {
    Period period0 = new Period((-5051), 2527, 2527, 2527, 137, (-5051), (-1584), 137);
    int int0 = period0.getWeeks();
    assertEquals(2527, int0);
}",0,"assertEquals(1, int0)"
project,0,test02729,"public void test02729() throws Throwable {
    Period period0 = Period.months(8);
    Period period1 = period0.ZERO.minusWeeks(2);
    int int0 = period1.getWeeks();
    assertEquals((-2), int0);
}",0,
project,0,test02830,"public void test02830() throws Throwable {
    Period period0 = Period.seconds(2679);
    int int0 = period0.getSeconds();
    assertEquals(2679, int0);
}",0,
project,0,test02931,"public void test02931() throws Throwable {
    Period period0 = new Period((-3624), 10, (-2171), (-3624));
    int int0 = period0.getSeconds();
    assertEquals((-2171), int0);
}",0,
project,0,test03032,"public void test03032() throws Throwable {
    Period period0 = Period.minutes((-2229));
    Period period1 = period0.minusMonths((-2229));
    int int0 = period1.getMonths();
    assertEquals(2229, int0);
}",0,
project,0,test03133,"public void test03133() throws Throwable {
    Period period0 = Period.millis(0);
    int int0 = period0.getMinutes();
    assertEquals(0, int0);
}",0,
project,0,test03234,"public void test03234() throws Throwable {
    PeriodType periodType0 = PeriodType.standard();
    Period period0 = new Period((-1783), (-1783), (-990), (-1783), (-1783), (-1083), 805, (-1083), periodType0);
    int int0 = period0.getMinutes();
    assertEquals((-1083), int0);
}",0,"assertEquals(0, int0)"
project,0,test03335,"public void test03335() throws Throwable {
    Period period0 = Period.millis(9);
    int int0 = period0.getMillis();
    assertEquals(9, int0);
}",0,
project,0,test03436,"public void test03436() throws Throwable {
    Period period0 = new Period(2, (-1863), 153692453, (-516), 153692453, (-516), 2, 153692453);
    Period period1 = period0.ZERO.minusWeeks((-516));
    Period period2 = period1.plusMillis((-1863));
    int int0 = period2.getMillis();
    assertEquals((-1863), int0);
}",0,
project,0,test03537,"public void test03537() throws Throwable {
    Period period0 = new Period(26, (-1071), 1467, 12, 907, 139, 139, 12, (PeriodType) null);
    int int0 = period0.getHours();
    assertEquals(907, int0);
}",0,
project,0,test03638,"public void test03638() throws Throwable {
    LocalTime localTime0 = new LocalTime(0L);
    Period period0 = new Period(localTime0, localTime0, (PeriodType) null);
    Period period1 = period0.withHours(174);
    Period period2 = period1.ZERO.minus(period1);
    int int0 = period2.getHours();
    assertEquals((-174), int0);
}",0,
project,0,test03739,"public void test03739() throws Throwable {
    Period period0 = new Period();
    Period period1 = period0.plusDays(2527);
    Period period2 = period1.plusSeconds(2527);
    int int0 = period2.getDays();
    assertNotSame(period2, period1);
}",0,
project,0,test03740,"public void test03740() throws Throwable {
    Period period0 = new Period();
    Period period1 = period0.plusDays(2527);
    Period period2 = period1.plusSeconds(2527);
    int int0 = period2.getDays();
    assertEquals(2527, int0);
}",0,
project,0,test03841,"public void test03841() throws Throwable {
    PeriodType periodType0 = PeriodType.yearWeekDay();
    PeriodType periodType1 = periodType0.withYearsRemoved();
    Period period0 = new Period(30962844000000L, 31556952000L, periodType1);
    // Undeclared exception!
    try {
        period0.withYears(263);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test03942,"public void test03942() throws Throwable {
    Period period0 = Period.weeks(9);
    PeriodType.YEAR_INDEX = 204;
    // Undeclared exception!
    try {
        period0.withYears(526);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 204
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test04043,"public void test04043() throws Throwable {
    Duration duration0 = Duration.standardMinutes(60L);
    PeriodType periodType0 = PeriodType.yearMonthDayTime();
    Period period0 = duration0.toPeriod(periodType0);
    // Undeclared exception!
    try {
        period0.withWeeks((-1));
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test04144,"public void test04144() throws Throwable {
    PeriodType periodType0 = PeriodType.standard();
    Period period0 = new Period((-1783), (-1783), (-990), (-1783), (-1783), (-1083), 805, 1783, periodType0);
    PeriodType.WEEK_INDEX = (-3076);
    // Undeclared exception!
    try {
        period0.withWeeks(3514);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -3076
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test04245,"public void test04245() throws Throwable {
    Days days0 = Days.SEVEN;
    Duration duration0 = days0.toStandardDuration();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
    PeriodType periodType0 = PeriodType.minutes();
    Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
    // Undeclared exception!
    try {
        period0.withSeconds(1000);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test04346,"public void test04346() throws Throwable {
    Period period0 = Period.months(8);
    PeriodType.SECOND_INDEX = 8;
    // Undeclared exception!
    try {
        period0.ZERO.withSeconds((-1877));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 8
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test04447,"public void test04447() throws Throwable {
    int[] intArray0 = new int[3];
    PeriodType periodType0 = new PeriodType(""7ht"", (DurationFieldType[]) null, intArray0);
    Period period0 = new Period(15271875, (-207), 1, (-1115), 292271022, (-207), 4082, (-207));
    // Undeclared exception!
    try {
        period0.withPeriodType(periodType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test04548,"public void test04548() throws Throwable {
    Period period0 = Period.weeks((-2274));
    PeriodType periodType0 = PeriodType.days();
    // Undeclared exception!
    try {
        period0.withPeriodType(periodType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Period does not support field 'weeks'
        //
        verifyException(""org.joda.time.base.BasePeriod"", e);
    }
}",0,
project,0,test04649,"public void test04649() throws Throwable {
    Duration duration0 = Duration.millis(1000L);
    Seconds seconds0 = duration0.toStandardSeconds();
    PeriodType periodType0 = seconds0.getPeriodType();
    Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
    // Undeclared exception!
    try {
        period0.withMonths(0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test04750,"public void test04750() throws Throwable {
    Period period0 = Period.months((-5051));
    PeriodType.MONTH_INDEX = (-5);
    // Undeclared exception!
    try {
        period0.withMonths(1269);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -5
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test04851,"public void test04851() throws Throwable {
    PeriodType periodType0 = PeriodType.yearWeekDay();
    Period period0 = new Period((-1050L), periodType0);
    // Undeclared exception!
    try {
        period0.withMinutes(892);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test04952,"public void test04952() throws Throwable {
    PeriodType periodType0 = PeriodType.yearMonthDayTime();
    Period period0 = new Period(513, 0, 0, 513, 0, 0, 513, 0, periodType0);
    PeriodType.MINUTE_INDEX = 12;
    // Undeclared exception!
    try {
        period0.ZERO.withMinutes((-550));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 12
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test05053,"public void test05053() throws Throwable {
    Period period0 = Period.minutes(648);
    PeriodType.MILLI_INDEX = (-1456);
    // Undeclared exception!
    try {
        period0.withMillis(648);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1456
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test05154,"public void test05154() throws Throwable {
    PeriodType periodType0 = PeriodType.millis();
    Period period0 = new Period(0, 0, 0, 0, 0, 0, 0, 0, periodType0);
    // Undeclared exception!
    try {
        period0.withHours(18);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test05255,"public void test05255() throws Throwable {
    Period period0 = Period.hours(0);
    PeriodType.HOUR_INDEX = (-2094);
    // Undeclared exception!
    try {
        period0.withHours(8);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -2094
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test05356,"public void test05356() throws Throwable {
    Period period0 = new Period();
    Period period1 = period0.plusDays(2527);
    Period period2 = period1.plusSeconds(2527);
    Period period3 = period1.ZERO.plusHours((-5051));
    Hours hours0 = period2.toStandardHours();
    period3.withFields(hours0);
    assertFalse(period3.equals((Object) period0));
}",0,
project,0,test05357,"public void test05357() throws Throwable {
    Period period0 = new Period();
    Period period1 = period0.plusDays(2527);
    Period period2 = period1.plusSeconds(2527);
    Period period3 = period1.ZERO.plusHours((-5051));
    Hours hours0 = period2.toStandardHours();
    period3.withFields(hours0);
    assertNotSame(period2, period1);
}",0,
project,0,test05358,"public void test05358() throws Throwable {
    Period period0 = new Period();
    Period period1 = period0.plusDays(2527);
    Period period2 = period1.plusSeconds(2527);
    Period period3 = period1.ZERO.plusHours((-5051));
    Hours hours0 = period2.toStandardHours();
    period3.withFields(hours0);
    assertEquals(60648, hours0.getHours());
}",0,"assertEquals(1, hours0.getHours())"
project,0,test05459,"public void test05459() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTime dateTime0 = new DateTime((-563L), (Chronology) buddhistChronology0);
    Period period0 = new Period(dateTime0, dateTime0);
    PeriodType.DAY_INDEX = 522;
    // Undeclared exception!
    try {
        period0.ZERO.withDays(0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 522
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test05560,"public void test05560() throws Throwable {
    Period period0 = Period.months(2453);
    // Undeclared exception!
    try {
        period0.toStandardWeeks();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot convert to Weeks as this period contains months and months vary in length
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test05661,"public void test05661() throws Throwable {
    Period period0 = Period.millis((-5326));
    PeriodType.MONTH_INDEX = 3140;
    // Undeclared exception!
    try {
        period0.toStandardWeeks();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test05762,"public void test05762() throws Throwable {
    Period period0 = new Period(60L, 10000000000000000L, (Chronology) null);
    // Undeclared exception!
    try {
        period0.toStandardSeconds();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot convert to Seconds as this period contains months and months vary in length
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test05863,"public void test05863() throws Throwable {
    Period period0 = Period.minutes(648);
    Period period1 = period0.plusMonths((-1437));
    // Undeclared exception!
    try {
        period1.toStandardMinutes();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot convert to Minutes as this period contains months and months vary in length
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test05964,"public void test05964() throws Throwable {
    Period period0 = new Period(4341L, 4341L);
    PeriodType.YEAR_INDEX = 1925;
    // Undeclared exception!
    try {
        period0.ZERO.toStandardMinutes();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test06065,"public void test06065() throws Throwable {
    Period period0 = new Period(3600000L, 3600000L);
    Period period1 = period0.minusYears(7593750);
    Period period2 = period1.plusMonths(0);
    // Undeclared exception!
    try {
        period2.toStandardHours();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot convert to Hours as this period contains years and years vary in length
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test06166,"public void test06166() throws Throwable {
    MockDate mockDate0 = new MockDate(0L);
    LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
    PeriodType periodType0 = PeriodType.millis();
    Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
    PeriodType.MONTH_INDEX = 61;
    // Undeclared exception!
    try {
        period0.ZERO.toStandardHours();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test06267,"public void test06267() throws Throwable {
    Period period0 = Period.hours(98);
    PeriodType.MINUTE_INDEX = (-935);
    // Undeclared exception!
    try {
        period0.toStandardDuration();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test06368,"public void test06368() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
    Period period0 = new Period(dateTime0, dateTime0);
    PeriodType.MILLI_INDEX = (-933);
    // Undeclared exception!
    try {
        period0.toStandardDays();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test06469,"public void test06469() throws Throwable {
    Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-230), (-230));
    Period period1 = period0.ZERO.withWeeks(317351877);
    // Undeclared exception!
    try {
        period1.toStandardDays();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Value cannot fit in an int: 2221463139
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test06570,"public void test06570() throws Throwable {
    Period period0 = Period.minutes(648);
    PeriodType.YEAR_INDEX = 4289;
    // Undeclared exception!
    try {
        period0.plusYears((-2241));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 4289
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test06671,"public void test06671() throws Throwable {
    Instant instant0 = new Instant();
    Period period0 = Period.hours(361);
    Minutes minutes0 = period0.toStandardMinutes();
    PeriodType periodType0 = minutes0.getPeriodType();
    Period period1 = new Period(instant0, (ReadableDuration) null, periodType0);
    // Undeclared exception!
    try {
        period1.plusSeconds(361);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test06772,"public void test06772() throws Throwable {
    Days days0 = Days.TWO;
    Weeks weeks0 = days0.toStandardWeeks();
    Duration duration0 = weeks0.toStandardDuration();
    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
    Period period0 = duration0.toPeriod((Chronology) iSOChronology0);
    PeriodType.SECOND_INDEX = (-1783);
    // Undeclared exception!
    try {
        period0.plusSeconds((-1783));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1783
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test06873,"public void test06873() throws Throwable {
    PeriodType periodType0 = PeriodType.millis();
    Period period0 = new Period(0L, 0L, periodType0);
    PeriodType.MONTH_INDEX = 61;
    // Undeclared exception!
    try {
        period0.plusMonths(61);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 61
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test06974,"public void test06974() throws Throwable {
    PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
    PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class), anyString(), anyInt(), any(java.util.Locale.class));
    PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
    PeriodType periodType0 = PeriodType.yearMonthDay();
    PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
    Period period0 = Period.parse("""", periodFormatter1);
    // Undeclared exception!
    try {
        period0.plusMinutes((-1226));
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test07075,"public void test07075() throws Throwable {
    Minutes minutes0 = Minutes.THREE;
    PeriodType periodType0 = minutes0.getPeriodType();
    PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
    PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
    doReturn(2537).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class), anyString(), anyInt(), any(java.util.Locale.class));
    PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
    PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
    Period period0 = Period.parse("""", periodFormatter1);
    // Undeclared exception!
    try {
        period0.plusMillis((-90));
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test07176,"public void test07176() throws Throwable {
    Period period0 = Period.seconds(0);
    PeriodType.MILLI_INDEX = (-1506);
    // Undeclared exception!
    try {
        period0.plusMillis(366);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1506
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test07277,"public void test07277() throws Throwable {
    Period period0 = Period.minutes(648);
    PeriodType.HOUR_INDEX = 4289;
    // Undeclared exception!
    try {
        period0.plusHours(648);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 4289
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test07378,"public void test07378() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    LocalTime localTime0 = new LocalTime((-763L), (Chronology) islamicChronology0);
    Period period0 = Period.fieldDifference(localTime0, localTime0);
    // Undeclared exception!
    try {
        period0.plusDays(1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test07479,"public void test07479() throws Throwable {
    PeriodType periodType0 = PeriodType.yearDay();
    MutablePeriod mutablePeriod0 = new MutablePeriod(31536000000L, 413L, periodType0);
    Minutes minutes0 = Minutes.standardMinutesIn(mutablePeriod0);
    Period period0 = new Period(1440L, 604800L, periodType0);
    // Undeclared exception!
    try {
        period0.plus(minutes0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test07580,"public void test07580() throws Throwable {
    PeriodType periodType0 = PeriodType.millis();
    Period period0 = new Period(0L, 0L, periodType0);
    PeriodType.HOUR_INDEX = 2351;
    Hours hours0 = Hours.EIGHT;
    // Undeclared exception!
    try {
        period0.ZERO.plus(hours0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2351
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test07681,"public void test07681() throws Throwable {
    PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
    PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
    // Undeclared exception!
    try {
        Period.parse(""q9@x}Ih6UM[t5o'F"", periodFormatter0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Parsing not supported
        //
        verifyException(""org.joda.time.format.PeriodFormatter"", e);
    }
}",0,
project,0,test07782,"public void test07782() throws Throwable {
    // Undeclared exception!
    try {
        Period.parse(""up$s./(0_%:"", (PeriodFormatter) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test07883,"public void test07883() throws Throwable {
    PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
    PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class), anyString(), anyInt(), any(java.util.Locale.class));
    PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
    // Undeclared exception!
    try {
        Period.parse(""GNI:>qN7Jhe)V"", periodFormatter0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""GNI:>qN7Jhe)V\""
        //
        verifyException(""org.joda.time.format.PeriodFormatter"", e);
    }
}",1,
project,0,test07984,"public void test07984() throws Throwable {
    // Undeclared exception!
    try {
        Period.parse((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.PeriodFormatterBuilder$Literal"", e);
    }
}",0,
project,0,test08085,"public void test08085() throws Throwable {
    Period period0 = Period.months(8);
    PeriodType periodType0 = PeriodType.yearMonthDay();
    PeriodType.SECOND_INDEX = 8;
    // Undeclared exception!
    try {
        period0.normalizedStandard(periodType0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test08186,"public void test08186() throws Throwable {
    Period period0 = Period.minutes(10209375);
    Period period1 = period0.plusDays(10209375);
    PeriodType periodType0 = PeriodType.minutes();
    // Undeclared exception!
    try {
        period1.normalizedStandard(periodType0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Value cannot fit in an int: 14711709375
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test08287,"public void test08287() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    Period period0 = new Period(576L, (Chronology) islamicChronology0);
    PeriodType.DAY_INDEX = (-1);
    // Undeclared exception!
    try {
        period0.normalizedStandard();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test08388,"public void test08388() throws Throwable {
    PeriodType periodType0 = PeriodType.millis();
    Period period0 = new Period((-2289L), (-2289L), periodType0);
    // Undeclared exception!
    try {
        period0.minusYears((-36));
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test08489,"public void test08489() throws Throwable {
    Period period0 = Period.seconds((-5051));
    PeriodType.YEAR_INDEX = (-5051);
    // Undeclared exception!
    try {
        period0.ZERO.minusYears(1574);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -5051
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test08590,"public void test08590() throws Throwable {
    LocalTime localTime0 = LocalTime.now();
    PeriodType periodType0 = PeriodType.time();
    Period period0 = new Period(localTime0, localTime0, periodType0);
    // Undeclared exception!
    try {
        period0.minusWeeks(1525);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test08691,"public void test08691() throws Throwable {
    LocalDate localDate0 = new LocalDate((Object) null);
    Period period0 = Period.fieldDifference(localDate0, localDate0);
    // Undeclared exception!
    try {
        period0.minusSeconds(4645);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test08792,"public void test08792() throws Throwable {
    PeriodType.SECOND_INDEX = (-1783);
    Period period0 = new Period();
    // Undeclared exception!
    try {
        period0.minusSeconds(170);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1783
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test08893,"public void test08893() throws Throwable {
    MockDate mockDate0 = new MockDate();
    LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
    PeriodType periodType0 = PeriodType.millis();
    Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
    // Undeclared exception!
    try {
        period0.minusMonths(1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test08994,"public void test08994() throws Throwable {
    Period period0 = Period.minutes(163);
    PeriodType.MONTH_INDEX = 163;
    // Undeclared exception!
    try {
        period0.ZERO.minusMonths(6);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 163
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test09095,"public void test09095() throws Throwable {
    LocalDate localDate0 = new LocalDate((Object) null);
    Period period0 = Period.fieldDifference(localDate0, localDate0);
    // Undeclared exception!
    try {
        period0.minusMinutes(3877);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test09196,"public void test09196() throws Throwable {
    DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
    int[] intArray0 = new int[5];
    PeriodType periodType0 = new PeriodType(""cex7.&i]f^B5D{mU"", durationFieldTypeArray0, intArray0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Period period0 = new Period(0L, 0L, periodType0, gregorianChronology0);
    // Undeclared exception!
    try {
        period0.minusMinutes((-544));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 5
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test09297,"public void test09297() throws Throwable {
    PeriodType periodType0 = PeriodType.minutes();
    Period period0 = new Period((-4510L), 0L, periodType0);
    // Undeclared exception!
    try {
        period0.minusMillis(1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test09398,"public void test09398() throws Throwable {
    Period period0 = Period.millis(50);
    PeriodType.MILLI_INDEX = 50;
    // Undeclared exception!
    try {
        period0.minusMillis((-934));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 50
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test09499,"public void test09499() throws Throwable {
    Period period0 = new Period();
    PeriodType.HOUR_INDEX = (-1330);
    // Undeclared exception!
    try {
        period0.minusHours(12825000);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1330
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test095100,"public void test095100() throws Throwable {
    PeriodType periodType0 = PeriodType.years();
    Period period0 = new Period(745L, 745L, periodType0);
    // Undeclared exception!
    try {
        period0.minusDays(2622);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test096101,"public void test096101() throws Throwable {
    Period period0 = new Period();
    PeriodType.DAY_INDEX = (-5051);
    // Undeclared exception!
    try {
        period0.minusDays((-5051));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -5051
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test097102,"public void test097102() throws Throwable {
    PeriodType periodType0 = PeriodType.standard();
    Period period0 = new Period((-1783), (-1783), (-990), (-1783), (-1783), (-1083), 805, 1783, periodType0);
    PeriodType.MINUTE_INDEX = 3514;
    // Undeclared exception!
    try {
        period0.ZERO.minus(period0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 3514
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test098103,"public void test098103() throws Throwable {
    Period period0 = new Period((-3659), 445, 352, 0);
    Hours hours0 = Hours.MIN_VALUE;
    // Undeclared exception!
    try {
        period0.minus(hours0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: -3659 + -2147483648
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test099104,"public void test099104() throws Throwable {
    Period period0 = new Period((-3587L));
    PeriodType.WEEK_INDEX = 12;
    // Undeclared exception!
    try {
        period0.getWeeks();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test100105,"public void test100105() throws Throwable {
    Period period0 = Period.months(8);
    PeriodType.SECOND_INDEX = 8;
    // Undeclared exception!
    try {
        period0.getSeconds();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test101106,"public void test101106() throws Throwable {
    Period period0 = Period.months(8);
    PeriodType.MONTH_INDEX = (-11);
    // Undeclared exception!
    try {
        period0.getMonths();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test102107,"public void test102107() throws Throwable {
    Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-4053), (-230));
    PeriodType.MILLI_INDEX = 17;
    // Undeclared exception!
    try {
        period0.ZERO.getMillis();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test103108,"public void test103108() throws Throwable {
    Period period0 = new Period();
    PeriodType.DAY_INDEX = (-5051);
    // Undeclared exception!
    try {
        period0.getDays();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test104109,"public void test104109() throws Throwable {
    Hours hours0 = Hours.TWO;
    Duration duration0 = hours0.toStandardDuration();
    Instant instant0 = Instant.now();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
    DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
    durationFieldTypeArray0[0] = durationFieldType0;
    durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
    durationFieldTypeArray0[2] = durationFieldType0;
    DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
    durationFieldTypeArray0[3] = durationFieldType1;
    int[] intArray0 = new int[3];
    PeriodType periodType0 = new PeriodType("""", durationFieldTypeArray0, intArray0);
    Period period0 = null;
    try {
        period0 = new Period(duration0, mutableDateTime0, periodType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // eras field is unsupported
        //
        verifyException(""org.joda.time.field.UnsupportedDurationField"", e);
    }
}",0,
project,0,test105110,"public void test105110() throws Throwable {
    Hours hours0 = Hours.TWO;
    Duration duration0 = hours0.toStandardDuration();
    Instant instant0 = Instant.now();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
    int[] intArray0 = new int[3];
    PeriodType periodType0 = new PeriodType("""", durationFieldTypeArray0, intArray0);
    Period period0 = null;
    try {
        period0 = new Period(duration0, mutableDateTime0, periodType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test106111,"public void test106111() throws Throwable {
    Object object0 = new Object();
    PeriodType periodType0 = PeriodType.time();
    Period period0 = null;
    try {
        period0 = new Period(object0, periodType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No period converter found for type: java.lang.Object
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}",1,
project,0,test107112,"public void test107112() throws Throwable {
    Integer integer0 = new Integer((-1976));
    Period period0 = null;
    try {
        period0 = new Period((Object) integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No period converter found for type: java.lang.Integer
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}",1,
project,0,test108113,"public void test108113() throws Throwable {
    DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
    DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
    durationFieldTypeArray0[0] = durationFieldType0;
    durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
    DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
    durationFieldTypeArray0[2] = durationFieldType1;
    int[] intArray0 = new int[0];
    PeriodType periodType0 = new PeriodType(""Qm]yIx,DJinY*CNh},"", durationFieldTypeArray0, intArray0);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Period period0 = null;
    try {
        period0 = new Period((-2523L), periodType0, (Chronology) gJChronology0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // eras field is unsupported
        //
        verifyException(""org.joda.time.field.UnsupportedDurationField"", e);
    }
}",0,
project,0,test109114,"public void test109114() throws Throwable {
    DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
    DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
    durationFieldTypeArray0[0] = durationFieldType0;
    durationFieldTypeArray0[1] = durationFieldType0;
    durationFieldTypeArray0[2] = durationFieldType0;
    DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
    durationFieldTypeArray0[3] = durationFieldType1;
    int[] intArray0 = new int[3];
    PeriodType periodType0 = new PeriodType("""", durationFieldTypeArray0, intArray0);
    Period period0 = null;
    try {
        period0 = new Period((long) 83, periodType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // eras field is unsupported
        //
        verifyException(""org.joda.time.field.UnsupportedDurationField"", e);
    }
}",0,
project,0,test110115,"public void test110115() throws Throwable {
    Period period0 = null;
    try {
        period0 = new Period(1000000000000000000L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Value cannot fit in an int: 277777777777
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test111116,"public void test111116() throws Throwable {
    int[] intArray0 = new int[8];
    PeriodType periodType0 = new PeriodType(""7ht"", (DurationFieldType[]) null, intArray0);
    Period period0 = null;
    try {
        period0 = new Period((-2825), (-2825), 15271875, (-194), (-2825), (-2825), (-194), (-2825), periodType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",1,
project,0,test112117,"public void test112117() throws Throwable {
    PeriodType periodType0 = PeriodType.yearMonthDayTime();
    Period period0 = null;
    try {
        period0 = new Period((-1391), (-1391), (-4172), 2532, 488, 2532, 7, (-3906), periodType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Period does not support field 'weeks'
        //
        verifyException(""org.joda.time.base.BasePeriod"", e);
    }
}",0,
project,0,test113118,"public void test113118() throws Throwable {
    Duration duration0 = Duration.standardMinutes(60L);
    PeriodType periodType0 = PeriodType.yearMonthDayTime();
    Period period0 = duration0.toPeriod(periodType0);
    Period period1 = period0.normalizedStandard(periodType0);
    assertTrue(period1.equals((Object) period0));
}",0,
project,0,test114119,"public void test114119() throws Throwable {
    Period period0 = Period.millis(0);
    Period period1 = period0.multipliedBy(0);
    assertNotSame(period1, period0);
}",0,
project,0,test114120,"public void test114120() throws Throwable {
    Period period0 = Period.millis(0);
    Period period1 = period0.multipliedBy(0);
    assertTrue(period1.equals((Object) period0));
}",0,
project,0,test115121,"public void test115121() throws Throwable {
    Period period0 = Period.seconds(2096);
    Period period1 = period0.plusMillis(0);
    assertSame(period1, period0);
}",0,
project,0,test116122,"public void test116122() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    MutablePeriod mutablePeriod0 = new MutablePeriod(3712L, 3712L, iSOChronology0);
    Period period0 = mutablePeriod0.toPeriod();
    Period period1 = period0.plusHours(0);
    assertSame(period1, period0);
}",0,
project,0,test117123,"public void test117123() throws Throwable {
    Duration duration0 = Duration.standardDays(86400L);
    PeriodType periodType0 = PeriodType.yearDayTime();
    Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
    // Undeclared exception!
    try {
        period0.plusMonths(63);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test118124,"public void test118124() throws Throwable {
    Days days0 = Days.SEVEN;
    Duration duration0 = days0.toStandardDuration();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
    PeriodType periodType0 = PeriodType.minutes();
    Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
    // Undeclared exception!
    try {
        period0.plusYears(1203);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test119125,"public void test119125() throws Throwable {
    Days days0 = Days.SEVEN;
    Duration duration0 = days0.toStandardDuration();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
    PeriodType periodType0 = PeriodType.minutes();
    Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
    Period period1 = period0.plusYears(0);
    assertSame(period1, period0);
}",0,
project,0,test120126,"public void test120126() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    Period period0 = new Period((-1L), (Chronology) ethiopicChronology0);
    int int0 = period0.getHours();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test121127,"public void test121127() throws Throwable {
    Hours hours0 = Hours.SIX;
    Days days0 = hours0.toStandardDays();
    PeriodType periodType0 = days0.getPeriodType();
    Period period0 = new Period(4540L, periodType0);
    // Undeclared exception!
    try {
        period0.plusHours(2025);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test123128,"public void test123128() throws Throwable {
    Period period0 = Period.months((-5051));
    int int0 = period0.getWeeks();
    assertEquals(0, int0);
}",0,
project,0,test124129,"public void test124129() throws Throwable {
    Period period0 = new Period((-2233L));
    // Undeclared exception!
    try {
        period0.multipliedBy((-292269337));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows an int: -233 * -292269337
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test126130,"public void test126130() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
    PeriodType periodType0 = PeriodType.minutes();
    Period period0 = new Period(dateTime0, dateTime0, periodType0);
    // Undeclared exception!
    try {
        period0.minusHours((-1522));
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test127131,"public void test127131() throws Throwable {
    Period period0 = Period.hours(839);
    int int0 = period0.getYears();
    assertEquals(0, int0);
}",0,
project,0,test128132,"public void test128132() throws Throwable {
    Duration duration0 = Duration.millis(1000L);
    Seconds seconds0 = duration0.toStandardSeconds();
    PeriodType periodType0 = seconds0.getPeriodType();
    Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
    Period period1 = period0.ZERO.plusMinutes(0);
    assertNotSame(period0, period1);
}",0,
project,0,test130133,"public void test130133() throws Throwable {
    LocalTime localTime0 = new LocalTime(0L);
    Period period0 = new Period(localTime0, localTime0, (PeriodType) null);
    int int0 = period0.getDays();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test131134,"public void test131134() throws Throwable {
    Period period0 = Period.minutes(10209375);
    int int0 = period0.getMinutes();
    assertEquals(10209375, int0);
}",0,
project,0,test132135,"public void test132135() throws Throwable {
    Period period0 = Period.minutes((-2229));
    int int0 = period0.getMonths();
    assertEquals(0, int0);
}",0,
project,0,test134136,"public void test134136() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Period period0 = new Period((Object) null, iSOChronology0);
    int int0 = period0.ZERO.getMillis();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test136137,"public void test136137() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Period period0 = new Period((Object) null, iSOChronology0);
    Minutes minutes0 = period0.toStandardMinutes();
    assertEquals(0, minutes0.getMinutes());
}",0,"assertEquals(0, minutes0.getMinutes())"
project,0,test137138,"public void test137138() throws Throwable {
    Period period0 = new Period();
    PeriodType periodType0 = PeriodType.yearWeekDay();
    Period period1 = period0.withYears(137);
    Period period2 = period1.normalizedStandard(periodType0);
    assertFalse(period2.equals((Object) period1));
}",0,
project,0,test138139,"public void test138139() throws Throwable {
    Period period0 = Period.months(8);
    Period period1 = period0.normalizedStandard();
    assertTrue(period1.equals((Object) period0));
}",0,
project,0,test139140,"public void test139140() throws Throwable {
    Period period0 = Period.years(4);
    // Undeclared exception!
    try {
        period0.toStandardDuration();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot convert to Duration as this period contains years and years vary in length
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test140141,"public void test140141() throws Throwable {
    Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-230), (-230));
    // Undeclared exception!
    try {
        period0.toStandardDays();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot convert to Days as this period contains months and months vary in length
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test141142,"public void test141142() throws Throwable {
    Period period0 = new Period();
    Period period1 = period0.plusDays(2527);
    Period period2 = period1.multipliedBy(2527);
    // Undeclared exception!
    try {
        period2.toStandardSeconds();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Value cannot fit in an int: 551726985600
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test142143,"public void test142143() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(10080L);
    Period period0 = new Period(mutableDateTime0, mutableDateTime0);
    Period period1 = period0.ZERO.minus((ReadablePeriod) null);
    assertNotSame(period0, period1);
}",0,
project,0,test143144,"public void test143144() throws Throwable {
    Period period0 = Period.millis(0);
    Period period1 = period0.minusMillis(0);
    assertSame(period1, period0);
}",0,
project,0,test144145,"public void test144145() throws Throwable {
    Period period0 = Period.weeks(0);
    Period period1 = period0.ZERO.plusSeconds(0);
    assertTrue(period1.equals((Object) period0));
}",0,
project,0,test145146,"public void test145146() throws Throwable {
    Duration duration0 = Duration.standardDays(86400L);
    PeriodType periodType0 = PeriodType.yearDayTime();
    Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
    Period period1 = period0.minusHours(0);
    assertSame(period1, period0);
}",0,
project,0,test146147,"public void test146147() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Period period0 = new Period((Object) null, iSOChronology0);
    Period period1 = period0.plusDays(0);
    assertSame(period1, period0);
}",0,
project,0,test147148,"public void test147148() throws Throwable {
    Duration duration0 = Duration.standardDays(86400L);
    PeriodType periodType0 = PeriodType.yearDayTime();
    Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
    Period period1 = period0.plusWeeks(0);
    assertSame(period1, period0);
}",0,
project,0,test148149,"public void test148149() throws Throwable {
    PeriodType periodType0 = PeriodType.millis();
    Period period0 = new Period(0L, 0L, periodType0);
    Period period1 = period0.ZERO.plus((ReadablePeriod) null);
    assertNotSame(period1, period0);
}",0,
project,0,test149150,"public void test149150() throws Throwable {
    Duration duration0 = Duration.standardDays(86400L);
    Minutes minutes0 = duration0.toStandardMinutes();
    PeriodType periodType0 = PeriodType.yearDayTime();
    Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
    Period period1 = period0.plus(minutes0);
    assertNotSame(period1, period0);
}",0,
project,0,test150151,"public void test150151() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    Period period0 = new Period((-1L), (Chronology) ethiopicChronology0);
    DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
    Period period1 = period0.withFieldAdded(durationFieldType0, 0);
    assertSame(period1, period0);
}",0,
project,0,test151152,"public void test151152() throws Throwable {
    Days days0 = Days.TWO;
    Weeks weeks0 = days0.toStandardWeeks();
    Duration duration0 = weeks0.toStandardDuration();
    Period period0 = duration0.toPeriod();
    // Undeclared exception!
    try {
        period0.withFieldAdded((DurationFieldType) null, 683);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field must not be null
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test152153,"public void test152153() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Period period0 = new Period((Object) null, iSOChronology0);
    Years years0 = Years.MIN_VALUE;
    DurationFieldType durationFieldType0 = years0.getFieldType();
    Period period1 = period0.withFieldAdded(durationFieldType0, (-420));
    assertNotSame(period1, period0);
}",0,
project,0,test153154,"public void test153154() throws Throwable {
    Period period0 = Period.millis((-1869));
    // Undeclared exception!
    try {
        period0.withField((DurationFieldType) null, (-1869));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field must not be null
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",1,
project,0,test154155,"public void test154155() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
    Period period0 = new Period((-870L), (-870L), lenientChronology0);
    DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
    Period period1 = period0.withField(durationFieldType0, 1000);
    assertNotSame(period1, period0);
}",1,
project,0,test155156,"public void test155156() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(10080L);
    Period period0 = new Period(mutableDateTime0, mutableDateTime0);
    Period period1 = period0.ZERO.withFields((ReadablePeriod) null);
    assertNotSame(period0, period1);
}",0,
project,0,test156157,"public void test156157() throws Throwable {
    MockDate mockDate0 = new MockDate(0L);
    LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
    PeriodType periodType0 = PeriodType.millis();
    Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
    Period period1 = period0.withPeriodType(periodType0);
    assertSame(period1, period0);
}",0,
project,0,test157158,"public void test157158() throws Throwable {
    YearMonth yearMonth0 = new YearMonth(0L);
    MonthDay monthDay0 = new MonthDay();
    // Undeclared exception!
    try {
        Period.fieldDifference(yearMonth0, monthDay0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ReadablePartial objects must have the same set of fields
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test158159,"public void test158159() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    YearMonth yearMonth0 = YearMonth.now((Chronology) copticChronology0);
    LocalTime localTime0 = LocalTime.now();
    // Undeclared exception!
    try {
        Period.fieldDifference(yearMonth0, localTime0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ReadablePartial objects must have the same set of fields
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test159160,"public void test159160() throws Throwable {
    LocalDate localDate0 = LocalDate.now();
    ZoneOffset zoneOffset0 = ZoneOffset.MAX;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
    LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
    // Undeclared exception!
    try {
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ReadablePartial objects must not be null
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test160161,"public void test160161() throws Throwable {
    LocalTime localTime0 = new LocalTime();
    Period period0 = Period.fieldDifference(localTime0, localTime0);
    // Undeclared exception!
    try {
        period0.plusWeeks(24);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test161162,"public void test161162() throws Throwable {
    // Undeclared exception!
    try {
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ReadablePartial objects must not be null
        //
        verifyException(""org.joda.time.Period"", e);
    }
}",0,
project,0,test162163,"public void test162163() throws Throwable {
    int[] intArray0 = new int[3];
    PeriodType periodType0 = new PeriodType(""7ht"", (DurationFieldType[]) null, intArray0);
    Period period0 = null;
    try {
        period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test163164,"public void test163164() throws Throwable {
    Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-230), (-230));
    Period period1 = period0.normalizedStandard();
    assertNotSame(period0, period1);
}",0,
project,0,test164165,"public void test164165() throws Throwable {
    Period period0 = Period.years((-1877));
    PeriodType.MONTH_INDEX = 0;
    int int0 = period0.getMonths();
    assertEquals((-1877), int0);
}",0,
project,0,test165166,"public void test165166() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
    Period period0 = new Period((-870L), (-870L), lenientChronology0);
    Period period1 = period0.minusSeconds(1);
    Days days0 = period1.toStandardDays();
    assertEquals(0, days0.getDays());
}",0,"assertEquals(1, days0.getDays())"
project,0,test165167,"public void test165167() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
    Period period0 = new Period((-870L), (-870L), lenientChronology0);
    Period period1 = period0.minusSeconds(1);
    Days days0 = period1.toStandardDays();
    assertNotSame(period1, period0);
}",0,
project,0,test166168,"public void test166168() throws Throwable {
    Period period0 = new Period();
    Seconds seconds0 = period0.toStandardSeconds();
    assertEquals(0, seconds0.getSeconds());
}",0,"assertEquals(1, seconds0.getSeconds())"
project,0,test167169,"public void test167169() throws Throwable {
    Period period0 = Period.months(8);
    Period period1 = period0.minusDays(8);
    int int0 = period1.getDays();
    assertEquals((-8), int0);
}",0,
project,0,test168170,"public void test168170() throws Throwable {
    Hours hours0 = Hours.TWO;
    Duration duration0 = hours0.toStandardDuration();
    Period period0 = duration0.toPeriod();
    Period period1 = period0.plusMonths(2);
    PeriodType periodType0 = PeriodType.yearDayTime();
    // Undeclared exception!
    try {
        period1.normalizedStandard(periodType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test169171,"public void test169171() throws Throwable {
    Period period0 = new Period((-3624), 10, (-2171), (-3624));
    PeriodType.SECOND_INDEX = (-2066);
    // Undeclared exception!
    try {
        period0.ZERO.toStandardSeconds();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test170172,"public void test170172() throws Throwable {
    Object object0 = new Object();
    PeriodType periodType0 = PeriodType.standard();
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    Period period0 = null;
    try {
        period0 = new Period(object0, periodType0, julianChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No period converter found for type: java.lang.Object
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}",0,
project,0,test172173,"public void test172173() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    Period period0 = new Period(576L, (Chronology) islamicChronology0);
    Period period1 = period0.withMonths(67);
    assertNotSame(period0, period1);
}",0,
project,0,test173174,"public void test173174() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((-283L));
    DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
    Period period0 = new Period(dateTime0, dateTime0);
    PeriodType.MINUTE_INDEX = 1960;
    // Undeclared exception!
    try {
        period0.plusMinutes(3);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1960
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
project,0,test174175,"public void test174175() throws Throwable {
    // Undeclared exception!
    try {
        Period.parse(""Positive hours must not have negative minutes: "");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""Positive hours must not have nega...\"" is malformed at \""ositive hours must not have nega...\""
        //
        verifyException(""org.joda.time.format.PeriodFormatter"", e);
    }
}",0,
project,0,test175176,"public void test175176() throws Throwable {
    Period period0 = new Period();
    Hours hours0 = period0.toStandardHours();
    Period period1 = period0.withFields(hours0);
    assertEquals(0, hours0.getHours());
}",0,"assertEquals(1, hours0.getHours())"
project,0,test175177,"public void test175177() throws Throwable {
    Period period0 = new Period();
    Hours hours0 = period0.toStandardHours();
    Period period1 = period0.withFields(hours0);
    assertNotSame(period1, period0);
}",0,
project,0,test176178,"public void test176178() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    Period period0 = new Period(576L, (Chronology) islamicChronology0);
    Period period1 = period0.toPeriod();
    assertSame(period0, period1);
}",0,
project,0,test177179,"public void test177179() throws Throwable {
    PeriodType periodType0 = PeriodType.standard();
    Period period0 = new Period((-1783), (-1783), (-990), (-1783), (-1783), (-1083), 805, 1783, periodType0);
    Period period1 = period0.withMillis((-919));
    assertNotSame(period0, period1);
}",0,
project,0,test178180,"public void test178180() throws Throwable {
    Duration duration0 = Duration.standardMinutes(60L);
    PeriodType periodType0 = PeriodType.yearMonthDayTime();
    Period period0 = duration0.toPeriod(periodType0);
    int int0 = period0.getSeconds();
    assertEquals(0, int0);
}",0,
project,0,test179181,"public void test179181() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
    Period period0 = null;
    try {
        period0 = new Period("""", islamicChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""\""
        //
        verifyException(""org.joda.time.format.PeriodFormatter"", e);
    }
}",0,
project,0,test180182,"public void test180182() throws Throwable {
    Period period0 = null;
    try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ReadablePartial objects must not be null
        //
        verifyException(""org.joda.time.base.BasePeriod"", e);
    }
}",0,
project,0,test181183,"public void test181183() throws Throwable {
    Period period0 = Period.weeks(0);
    Period period1 = period0.ZERO.negated();
    assertTrue(period1.equals((Object) period0));
}",0,
project,0,test182184,"public void test182184() throws Throwable {
    Period period0 = Period.minutes(10209375);
    Period period1 = period0.withSeconds(10209375);
    assertFalse(period1.equals((Object) period0));
}",0,
project,0,test183185,"public void test183185() throws Throwable {
    Duration duration0 = Duration.standardDays(86400L);
    PeriodType periodType0 = PeriodType.yearDayTime();
    Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
    Period period1 = period0.withMinutes(0);
    assertNotSame(period0, period1);
}",0,
project,0,test184186,"public void test184186() throws Throwable {
    MockDate mockDate0 = new MockDate(0L);
    LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
    PeriodType periodType0 = PeriodType.millis();
    Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
    // Undeclared exception!
    try {
        period0.withDays(6);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Field is not supported
        //
        verifyException(""org.joda.time.PeriodType"", e);
    }
}",0,
