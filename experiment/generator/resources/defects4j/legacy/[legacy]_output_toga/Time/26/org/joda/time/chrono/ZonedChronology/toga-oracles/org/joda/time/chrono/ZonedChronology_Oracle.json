[ {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long remainder(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test011"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getMillis()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test022"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getDifference(long minuendInstant, long subtrahendInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test033"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long add(long instant, long value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test066"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract String getAsShortText(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test088"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test099"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1010"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1111"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1212"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long set(long instant, int value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test1313"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract boolean isPrecise()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test1414"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getDifference(long minuendInstant, long subtrahendInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test1616"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract String getName()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(durationField0.getName())",
  "exception" : "",
  "testName" : "test1919"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract DurationField getRangeDurationField()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(durationField0)",
  "exception" : "",
  "testName" : "test1920"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getMinimumValue()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test2021"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract String getName()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2122"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract DurationField getDurationField()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2123"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "static boolean useTimeArithmetic(DurationField field)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test2325"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test2426"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test2527"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test2628"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test2729"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test2830"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2931"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long roundHalfFloor(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3032"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long roundFloor(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3133"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3234"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getDifference(long minuendInstant, long subtrahendInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test3335"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public Chronology withUTC()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3537"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public DateTimeZone getZone()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3638"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long addWrapField(long instant, int value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3941"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long addWrapField(long instant, int value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test4042"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long add(long instant, int value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test4143"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long add(long instant, int value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test4244"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test4547"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long add(ReadablePeriod period, long instant, int scalar)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test4648"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public int size()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, period0.size())",
  "exception" : "",
  "testName" : "test4749"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public boolean equals(Object obj)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test4951"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract Chronology withZone(DateTimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5152"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public Chronology withZone(DateTimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5253"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5354"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long getMillis(int value, long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, long0)",
  "exception" : "",
  "testName" : "test5556"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long getMillis(long value, long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test5657"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getMinimumValue(ReadablePartial instant, int[] values)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test6061"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract String getAsText(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6162"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long set(long instant, String text, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test6263"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getMaximumValue(ReadablePartial instant, int[] values)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test6364"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getMaximumValue(ReadablePartial instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test6465"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getMinimumValue(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test6566"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public DurationField getLeapDurationField()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(durationField0)",
  "exception" : "",
  "testName" : "test6667"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public DurationField getDurationField()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(durationField0)",
  "exception" : "",
  "testName" : "test6768"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract long add(long instant, int value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test6769"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getLeapAmount(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, int0)",
  "exception" : "",
  "testName" : "test6971"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract boolean isLenient()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(boolean0)",
  "exception" : "",
  "testName" : "test7072"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "static boolean useTimeArithmetic(DurationField field)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test7274"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract String getName()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(durationField0.getName())",
  "exception" : "",
  "testName" : "test7275"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract String getAsText(int fieldValue, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7376"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract int getMaximumValue()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test7477"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public abstract boolean isLeap(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test7578"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test7679"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7780"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7981"
}, {
  "className" : "org.joda.time.chrono.ZonedChronology",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test8082"
} ]