/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 12:32:17 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test390() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("-[C!,</~4gjti");
        DateTimeZone.setDefault(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test411() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+Ri");
        DateTimeZone.setDefault(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test492() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        DateTimeZone.setDefault(dateTimeZone0);
    }
}
