project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertSame(dateTimeZone0, dateTimeZone1);
}",0,
project,0,test011,"public void test011() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 59);
    assertEquals(""+00:59"", dateTimeZone0.getID());
}",0,
project,0,test022,"public void test022() throws Throwable {
    try {
        DateTimeZone.forOffsetHoursMinutes(0, (-68703773));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: -68703773
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+03:32:20.625"");
    assertEquals(""+03:32:20.625"", dateTimeZone0.getID());
}",0,
project,0,test034,"public void test034() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+03:32:20.625"");
    assertNotNull(dateTimeZone0);
}",0,
project,0,test045,"public void test045() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    DateTimeZone.setDefault(dateTimeZone0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,
project,0,test066,"public void test066() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
    dateTimeZone0.UTC.toTimeZone();
    assertEquals(""+00:00:00.004"", dateTimeZone0.getID());
}",0,
project,0,test067,"public void test067() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
    dateTimeZone0.UTC.toTimeZone();
    assertEquals(""+00:00:00.004"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test078,"public void test078() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    assertEquals(""java.util.SimpleTimeZone[id=-00:00:02.988,offset=-2988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}",0,
project,0,test079,"public void test079() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    assertEquals(""-00:00:02.988"", dateTimeZone0.getID());
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
    dateTimeZone0.UTC.previousTransition(0L);
    assertEquals(""-00:00:02.988"", dateTimeZone0.toString());
}",0,
project,0,test0811,"public void test0811() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
    dateTimeZone0.UTC.previousTransition(0L);
    assertEquals(""-00:00:02.988"", dateTimeZone0.getID());
}",0,
project,0,test0912,"public void test0912() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.UTC.previousTransition(1);
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1013,"public void test1013() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    long long0 = fixedDateTimeZone0.previousTransition((-4403L));
    assertEquals((-4403L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1114,"public void test1114() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
    dateTimeZone0.nextTransition(0L);
    assertEquals(""+572:01"", dateTimeZone0.toString());
}",0,
project,0,test1215,"public void test1215() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.nextTransition(0L);
    assertEquals(9972000000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1316,"public void test1316() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-357));
    dateTimeZone0.nextTransition((-357));
    assertEquals(""-00:00:00.357"", dateTimeZone0.toString());
}",0,
project,0,test1417,"public void test1417() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    boolean boolean0 = dateTimeZone0.isFixed();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test1518,"public void test1518() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""WET"");
    int int0 = dateTimeZone0.getStandardOffset(1804L);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1619,"public void test1619() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
    int int0 = dateTimeZone0.getStandardOffset(0L);
    assertEquals(""+572:01"", dateTimeZone0.getID());
}",0,
project,0,test1620,"public void test1620() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
    int int0 = dateTimeZone0.getStandardOffset(0L);
    assertEquals(2059260000, int0);
}",0,"assertEquals(0, int0)"
project,0,test1721,"public void test1721() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
    dateTimeZone0.UTC.getOffsetFromLocal(0L);
    assertEquals(""+550:00"", dateTimeZone0.getID());
}",0,
project,0,test1722,"public void test1722() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
    dateTimeZone0.UTC.getOffsetFromLocal(0L);
    assertEquals(""+550:00"", dateTimeZone0.toString());
}",0,
project,0,test1823,"public void test1823() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
    DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
    assertEquals(2555, int0);
}",0,
project,0,test1824,"public void test1824() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
    DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
    assertEquals(""+00:00:02.555"", dateTimeZone0.getID());
}",0,
project,0,test1925,"public void test1925() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Instant instant0 = new Instant();
    int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);
    assertEquals((-28800000), int0);
}",0,
project,0,test2026,"public void test2026() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    int int0 = dateTimeZone0.getOffset(9972000000L);
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test2027,"public void test2027() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    int int0 = dateTimeZone0.getOffset(9972000000L);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2128,"public void test2128() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
    int int0 = dateTimeZone0.getOffset(9972000000L);
    assertEquals(""+00:00:00.004"", dateTimeZone0.getID());
}",0,
project,0,test2129,"public void test2129() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
    int int0 = dateTimeZone0.getOffset(9972000000L);
    assertEquals(4, int0);
}",0,"assertEquals(0, int0)"
project,0,test2230,"public void test2230() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getOffset(1173L);
    assertEquals((-28800000), int0);
}",0,"assertEquals(0, int0)"
project,0,test2331,"public void test2331() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
    dateTimeZone0.getNameKey(9972000000L);
    assertEquals(""+00:00:00.004"", dateTimeZone0.toString());
}",0,
project,0,test2432,"public void test2432() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    String string0 = dateTimeZone0.getNameKey((-575L));
    assertEquals(""UTC"", string0);
}",0,assertNotNull(string0)
project,0,test2533,"public void test2533() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
    boolean boolean0 = dateTimeZone0.UTC.equals(dateTimeZone1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2634,"public void test2634() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""CET"");
    boolean boolean0 = dateTimeZone0.equals(""CET"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2735,"public void test2735() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(572, ""ReadablePartial objects must be contiguous"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertNotNull(dateTimeZone0);
}",0,
project,0,test2736,"public void test2736() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(572, ""ReadablePartial objects must be contiguous"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2837,"public void test2837() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
    long long0 = dateTimeZone0.convertUTCToLocal(1);
    assertEquals(2059260001L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2838,"public void test2838() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
    long long0 = dateTimeZone0.convertUTCToLocal(1);
    assertEquals(""+572:01"", dateTimeZone0.getID());
}",0,
project,0,test2939,"public void test2939() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
    long long0 = dateTimeZone0.convertLocalToUTC((long) 3409, true, (-1531L));
    assertEquals(""+00:00:03.409"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test2940,"public void test2940() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
    long long0 = dateTimeZone0.convertLocalToUTC((long) 3409, true, (-1531L));
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3041,"public void test3041() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(572);
    long long0 = dateTimeZone0.convertLocalToUTC((long) 572, true, (long) 572);
    assertEquals((-2059199428L), long0);
}",0,"assertEquals(1, long0)"
project,0,test3042,"public void test3042() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(572);
    long long0 = dateTimeZone0.convertLocalToUTC((long) 572, true, (long) 572);
    assertEquals(""+572:00"", dateTimeZone0.getID());
}",0,
project,0,test3143,"public void test3143() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
    long long0 = dateTimeZone0.UTC.adjustOffset(0L, false);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3144,"public void test3144() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
    long long0 = dateTimeZone0.UTC.adjustOffset(0L, false);
    assertEquals(""+550:00"", dateTimeZone0.toString());
}",0,
project,0,test3245,"public void test3245() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.adjustOffset((-1L), true);
    assertEquals((-1L), long0);
}",0,"assertEquals(0, long0)"
project,0,test3346,"public void test3346() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test3447,"public void test3447() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(177, 0);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    // Undeclared exception!
    try {
        DateTimeZone.forTimeZone(timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""+A7:00\"" is malformed at \""A7:00\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test3548,"public void test3548() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
    assertEquals(0L, long0);
}",0,
project,0,test3649,"public void test3649() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, true);
    assertEquals(0L, long0);
}",0,
project,0,test3750,"public void test3750() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.convertLocalToUTC((-806L), true, (-806L));
    assertEquals(28799194L, long0);
}",0,
project,0,test3851,"public void test3851() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.convertUTCToLocal((-3433L));
    assertEquals((-28803433L), long0);
}",0,"assertEquals(1, long0)"
project,0,test3952,"public void test3952() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.convertUTCToLocal(5877L);
    assertEquals((-28794123L), long0);
}",0,"assertEquals(1, long0)"
project,0,test4053,"public void test4053() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.PRC;
    String string0 = dateTimeZone0.getName(10799996L, locale0);
    assertNotNull(string0);
}",0,
project,0,test4054,"public void test4054() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.PRC;
    String string0 = dateTimeZone0.getName(10799996L, locale0);
    assertEquals(""-08:00"", string0);
}",0,
project,0,test4155,"public void test4155() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);
    String string0 = dateTimeZone0.getName(3347L, (Locale) null);
    assertEquals(""+57:00"", string0);
}",0,
project,0,test4256,"public void test4256() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    Locale locale0 = new Locale(""xSp<QqI'HmDzP?"", ""L.$%ZG`>)m [Ad"");
    String string0 = dateTimeZone0.getShortName((long) 1, locale0);
    assertEquals(""+01:00"", string0);
}",0,
project,0,test4357,"public void test4357() throws Throwable {
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(""UTC"");
    String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);
    assertNotNull(string0);
}",0,
project,0,test4358,"public void test4358() throws Throwable {
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(""UTC"");
    String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);
    assertEquals(""+00:00"", string0);
}",0,
project,0,test4459,"public void test4459() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-357), 1);
    assertEquals(""-357:01"", dateTimeZone0.toString());
}",0,
project,0,test4560,"public void test4560() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
    dateTimeZone0.UTC.isFixed();
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test4561,"public void test4561() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
    dateTimeZone0.UTC.isFixed();
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,
project,0,test4662,"public void test4662() throws Throwable {
    // Undeclared exception!
    try {
        DateTimeZone.forID(""hh!E!^m5qP"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id 'hh!E!^m5qP' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test4763,"public void test4763() throws Throwable {
    DateTimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertEquals(""America/Los_Angeles"", dateTimeZone0.getID());
}",0,
project,0,test4864,"public void test4864() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    String string0 = dateTimeZone0.getID();
    assertEquals(""America/Los_Angeles"", string0);
}",0,assertNotNull(string0)
project,0,test4965,"public void test4965() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
    long long0 = dateTimeZone0.adjustOffset(3409, false);
    assertEquals(""+00:00:03.409"", dateTimeZone0.toString());
}",0,
project,0,test4966,"public void test4966() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
    long long0 = dateTimeZone0.adjustOffset(3409, false);
    assertEquals(3409L, long0);
}",0,"assertEquals(0, long0)"
project,0,test5067,"public void test5067() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    LocalDateTime localDateTime0 = LocalDateTime.now();
    dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
    assertEquals(""+03:32:20.625"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test5068,"public void test5068() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    LocalDateTime localDateTime0 = LocalDateTime.now();
    dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
    assertEquals(""+03:32:20.625"", dateTimeZone0.getID());
}",0,
project,0,test5169,"public void test5169() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""CET"");
    long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 2593L);
    assertEquals(28802593L, long0);
}",0,
project,0,test5270,"public void test5270() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
    long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true);
    assertEquals((-91L), long0);
}",0,
project,0,test5271,"public void test5271() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
    long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true);
    assertEquals(""+00:00:00.091"", dateTimeZone0.toString());
}",1,
project,0,test5372,"public void test5372() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    // Undeclared exception!
    try {
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Subtracting time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5473,"public void test5473() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    // Undeclared exception!
    try {
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Subtracting time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5574,"public void test5574() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.convertLocalToUTC(21859200000L, true, 10806818L);
    assertEquals(21884400000L, long0);
}",0,
project,0,test5675,"public void test5675() throws Throwable {
    System.setCurrentTimeMillis((-9223372036854775808L));
    LocalDateTime localDateTime0 = null;
    try {
        localDateTime0 = new LocalDateTime();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Adding time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5776,"public void test5776() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1673L);
    assertEquals((-28798327L), long0);
}",0,"assertEquals(1, long0)"
project,0,test5877,"public void test5877() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""CET"");
    LocalDateTime localDateTime0 = new LocalDateTime((-3597407L));
    LocalDateTime localDateTime1 = localDateTime0.withWeekyear(1285);
    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
    assertFalse(boolean0);
}",0,
project,0,test5978,"public void test5978() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""CET"");
    int int0 = dateTimeZone0.getOffsetFromLocal(423L);
    assertEquals(3600000, int0);
}",0,
project,0,test6079,"public void test6079() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
    assertEquals((-28378000), int0);
}",0,
project,0,test6180,"public void test6180() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getOffsetFromLocal(1L);
    assertEquals((-28800000), int0);
}",0,
project,0,test6281,"public void test6281() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    boolean boolean0 = dateTimeZone0.UTC.isStandardOffset(7L);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test6382,"public void test6382() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    dateTimeZone0.UTC.getOffset((ReadableInstant) null);
    assertEquals(""+00:00:00.001"", dateTimeZone0.toString());
}",0,
project,0,test6383,"public void test6383() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    dateTimeZone0.UTC.getOffset((ReadableInstant) null);
    assertEquals(""+00:00:00.001"", dateTimeZone0.getID());
}",0,
project,0,test6484,"public void test6484() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    String string0 = dateTimeZone0.getName(9223372036854775807L);
    assertEquals(""-07:00"", string0);
}",0,assertNotNull(string0)
project,0,test6585,"public void test6585() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""`HAljM6#"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertNotNull(dateTimeZone0);
}",0,
project,0,test6586,"public void test6586() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""`HAljM6#"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forID(""+00:00"");
    assertSame(dateTimeZone1, dateTimeZone0);
}",0,
project,0,test6587,"public void test6587() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""`HAljM6#"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forID(""+00:00"");
    assertNotNull(dateTimeZone1);
}",0,
project,0,test6688,"public void test6688() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-28378000));
    assertEquals(""-07:52:58"", dateTimeZone0.toString());
}",0,
project,0,test7089,"public void test7089() throws Throwable {
    DateTimeZone.forOffsetMillis(12740625);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    assertEquals(""+03:32:20.625"", dateTimeZone0.getID());
}",0,
project,0,test7190,"public void test7190() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    long long0 = dateTimeZone0.convertLocalToUTC(10800000L, false);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",1,
project,0,test7191,"public void test7191() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    long long0 = dateTimeZone0.convertLocalToUTC(10800000L, false);
    assertEquals(10800000L, long0);
}",0,
project,0,test7392,"public void test7392() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""java.util.SimpleTimeZone[id=+03:32:20.625,offset=12740625,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}",0,
project,0,test7393,"public void test7393() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""+03:32"", dateTimeZone1.getID());
}",0,
project,0,test7394,"public void test7394() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertNotNull(dateTimeZone1);
}",0,
project,0,test7495,"public void test7495() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(730, ""UTC"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertTrue(dateTimeZone0.isFixed());
}",0,assertFalse(dateTimeZone0.isFixed())
project,0,test7596,"public void test7596() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    assertNotNull(dateTimeZone0);
}",0,
project,0,test7597,"public void test7597() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    int int0 = dateTimeZone0.getStandardOffset((-324L));
    assertEquals((-28800000), int0);
}",0,"assertEquals(0, int0)"
project,0,test7698,"public void test7698() throws Throwable {
    try {
        DateTimeZone.forOffsetHours((-2112));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test7799,"public void test7799() throws Throwable {
    try {
        DateTimeZone.forOffsetHoursMinutes(0, 12720000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: 12720000
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test78100,"public void test78100() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""-07:00"");
    assertEquals(""-07:00"", dateTimeZone0.toString());
}",0,
project,0,test78101,"public void test78101() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""-07:00"");
    assertNotNull(dateTimeZone0);
}",0,
project,0,test79102,"public void test79102() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""UTC"");
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test80103,"public void test80103() throws Throwable {
    // Undeclared exception!
    try {
        DateTimeZone.setDefault((DateTimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone must not be null
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test81104,"public void test81104() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateTimeZone.setDefault(dateTimeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
    assertEquals(""UTC"", dateTimeZone1.getID());
}",0,assertNotNull(dateTimeZone1.getID())
project,0,test82105,"public void test82105() throws Throwable {
    Provider provider0 = DateTimeZone.getProvider();
    assertNotNull(provider0);
}",0,
project,0,test83106,"public void test83106() throws Throwable {
    NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    assertNotNull(nameProvider0);
}",0,
project,0,test85108,"public void test85108() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    String string0 = dateTimeZone0.toString();
    assertEquals(""UTC"", string0);
}",0,
project,0,test86109,"public void test86109() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""-18:00"", dateTimeZone0.toString());
}",0,assertNotNull(dateTimeZone0.toString())
project,0,test86110,"public void test86110() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    assertNotNull(dateTimeZone0);
}",0,
project,0,test87111,"public void test87111() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);
    String string0 = dateTimeZone0.getShortName(4117L);
    assertEquals(""+57:00"", string0);
}",0,
project,0,test88112,"public void test88112() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forTimeZone(timeZone0);
    ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    assertEquals(""UTC"", fixedDateTimeZone0.getID());
}",0,assertNotNull(fixedDateTimeZone0.getID())
