[ {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test000"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test011"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test022"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test033"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test034"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test045"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test066"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.toString())",
  "exception" : "",
  "testName" : "test067"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test078"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test079"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0810"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0811"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long previousTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test0912"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long previousTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test1013"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1114"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long nextTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test1215"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1316"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean isFixed()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(boolean0)",
  "exception" : "",
  "testName" : "test1417"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test1518"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1619"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test1620"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1721"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1722"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final int getOffset(ReadableInstant instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1823"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1824"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final int getOffset(ReadableInstant instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1925"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2026"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test2027"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2128"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test2129"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test2230"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2331"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract String getNameKey(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(string0)",
  "exception" : "",
  "testName" : "test2432"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean equals(Object object)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test2533"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean equals(Object object)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test2634"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2735"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test2736"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test2837"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2838"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.toString())",
  "exception" : "",
  "testName" : "test2939"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test2940"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3041"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3042"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3143"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3144"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, long0)",
  "exception" : "",
  "testName" : "test3245"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3346"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3447"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3548"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3649"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3750"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3851"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3952"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4053"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4054"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4155"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getShortName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4256"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getShortName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4357"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getShortName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4358"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4459"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4560"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4561"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4662"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4763"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(string0)",
  "exception" : "",
  "testName" : "test4864"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4965"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, long0)",
  "exception" : "",
  "testName" : "test4966"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.toString())",
  "exception" : "",
  "testName" : "test5067"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5068"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5169"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5270"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5271"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5372"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5473"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5574"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public LocalDateTime()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5675"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test5776"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5877"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5978"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6079"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6180"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test6281"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6382"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6383"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(string0)",
  "exception" : "",
  "testName" : "test6484"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6585"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6586"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6587"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6688"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7089"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7190"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7191"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7392"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7393"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7394"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean isFixed()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(dateTimeZone0.isFixed())",
  "exception" : "",
  "testName" : "test7495"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7596"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test7597"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7698"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7799"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test78100"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test78101"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test79102"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test80103"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone1.getID())",
  "exception" : "",
  "testName" : "test81104"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static Provider getProvider()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test82105"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static NameProvider getNameProvider()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test83106"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test85108"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.toString())",
  "exception" : "",
  "testName" : "test86109"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test86110"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getShortName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test87111"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(fixedDateTimeZone0.getID())",
  "exception" : "",
  "testName" : "test88112"
} ]