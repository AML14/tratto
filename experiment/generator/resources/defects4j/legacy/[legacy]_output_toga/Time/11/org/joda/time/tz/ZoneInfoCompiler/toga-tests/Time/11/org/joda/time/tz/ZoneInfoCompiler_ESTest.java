/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 01:49:31 GMT 2023
 */
package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.joda.time.tz.ZoneInfoCompiler;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ZoneInfoCompiler_ESTest extends ZoneInfoCompiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
        zoneInfoCompiler_DateTimeOfYear0.addCutover((DateTimeZoneBuilder) null, (-2174));
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
        hashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "-dst";
        stringArray0[1] = "";
        ZoneInfoCompiler.main(stringArray0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        String string0 = ZoneInfoCompiler.parseOptional("-\"ew~P?7_k;Xpg");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        int int0 = ZoneInfoCompiler.parseDayOfWeek("3");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ZoneInfoCompiler.test("o", (DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ZoneInfoCompiler.parseYear((String) null, 2);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ZoneInfoCompiler.parseTime((String) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ZoneInfoCompiler.parseOptional((String) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ZoneInfoCompiler.parseMonth((String) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ZoneInfoCompiler.parseDayOfWeek((String) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
        zoneInfoCompiler0.parseDataFile((BufferedReader) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
        PipedReader pipedReader0 = new PipedReader();
        BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
        zoneInfoCompiler0.parseDataFile(bufferedReader0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
        File[] fileArray0 = new File[3];
        zoneInfoCompiler0.compile((File) null, fileArray0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
        MockFile mockFile0 = new MockFile("-I%rwfe}24G>O&M1H", "-I%rwfe}24G>O&M1H");
        File[] fileArray0 = new File[6];
        fileArray0[0] = (File) mockFile0;
        zoneInfoCompiler0.compile(mockFile0, fileArray0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();
        Chronology chronology1 = ZoneInfoCompiler.getLenientISOChronology();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        StringTokenizer stringTokenizer0 = new StringTokenizer("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n");
        stringTokenizer0.nextElement();
        ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null;
        zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
    }

    @Test(timeout = 4000)
    public void test1918() throws Throwable {
        ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
        File file0 = MockFile.createTempFile("Mont>KhOfear: ", ")m)4=>MAYq@Lw]7");
        File[] fileArray0 = new File[1];
        fileArray0[0] = file0;
        zoneInfoCompiler0.compile(file0, fileArray0);
    }

    @Test(timeout = 4000)
    public void test2019() throws Throwable {
        ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
        FileSystemHandling.shouldAllThrowIOExceptions();
        MockFile mockFile0 = new MockFile("E4kq\"mEi2kIZ?m(Zw#a", "Tho many time zon ids");
        File[] fileArray0 = new File[0];
        zoneInfoCompiler0.compile(mockFile0, fileArray0);
    }

    @Test(timeout = 4000)
    public void test2120() throws Throwable {
        ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
        File[] fileArray0 = new File[0];
        Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) null, fileArray0);
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2221() throws Throwable {
        ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
        File file0 = MockFile.createTempFile("maximum", "co!");
        zoneInfoCompiler0.compile(file0, (File[]) null);
    }

    @Test(timeout = 4000)
    public void test2322() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
        boolean boolean0 = ZoneInfoCompiler.test("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test2423() throws Throwable {
        char char0 = ZoneInfoCompiler.parseZoneChar('Q');
        assertNotNull(char0);
    }

    @Test(timeout = 4000)
    public void test2524() throws Throwable {
        char char0 = ZoneInfoCompiler.parseZoneChar('w');
        assertNotNull(char0);
    }

    @Test(timeout = 4000)
    public void test2625() throws Throwable {
        char char0 = ZoneInfoCompiler.parseZoneChar('u');
        assertNotNull(char0);
    }

    @Test(timeout = 4000)
    public void test2726() throws Throwable {
        char char0 = ZoneInfoCompiler.parseZoneChar('g');
    }

    @Test(timeout = 4000)
    public void test2827() throws Throwable {
        char char0 = ZoneInfoCompiler.parseZoneChar('U');
        assertNotNull(char0);
    }

    @Test(timeout = 4000)
    public void test2928() throws Throwable {
        char char0 = ZoneInfoCompiler.parseZoneChar('S');
        assertNotNull(char0);
    }

    @Test(timeout = 4000)
    public void test3029() throws Throwable {
        char char0 = ZoneInfoCompiler.parseZoneChar('W');
        assertNotNull(char0);
    }

    @Test(timeout = 4000)
    public void test3130() throws Throwable {
        char char0 = ZoneInfoCompiler.parseZoneChar('G');
        assertNotNull(char0);
    }

    @Test(timeout = 4000)
    public void test3231() throws Throwable {
        ZoneInfoCompiler.parseTime("qJagA79?:");
    }

    @Test(timeout = 4000)
    public void test3332() throws Throwable {
        int int0 = ZoneInfoCompiler.parseTime("-0L0K)xA");
    }

    @Test(timeout = 4000)
    public void test3433() throws Throwable {
        String string0 = ZoneInfoCompiler.parseOptional("");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3534() throws Throwable {
        ZoneInfoCompiler.parseYear("zone", 83);
    }

    @Test(timeout = 4000)
    public void test3635() throws Throwable {
        int int0 = ZoneInfoCompiler.parseYear("minimum", (-76));
    }

    @Test(timeout = 4000)
    public void test3736() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        hashMap0.put("-*r* Error in ", dateTimeZone0);
        hashMap0.put("", dateTimeZone0);
        ZoneInfoCompiler.writeZoneInfoMap((DataOutputStream) null, hashMap0);
    }

    @Test(timeout = 4000)
    public void test3837() throws Throwable {
        Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();
        int int0 = ZoneInfoCompiler.parseTime("24,G0");
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
        ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        String[] stringArray0 = new String[3];
        stringArray0[0] = "o";
        stringArray0[1] = "o";
        stringArray0[2] = "minimum";
        ZoneInfoCompiler.main(stringArray0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        ZoneInfoCompiler.parseDayOfWeek("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n");
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        ZoneInfoCompiler.parseMonth("");
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
        MockFile mockFile0 = new MockFile("", "Too many time zone ids");
        File[] fileArray0 = new File[0];
        Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile(mockFile0, fileArray0);
        map0.size();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        String[] stringArray0 = new String[0];
        ZoneInfoCompiler.main(stringArray0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        StringTokenizer stringTokenizer0 = new StringTokenizer("2", "2", false);
        ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
        String string0 = zoneInfoCompiler_DateTimeOfYear0.toString();
    }
}
