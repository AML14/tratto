project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test022,"public void test022() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""-dst"";
    stringArray0[1] = """";
    try {
        ZoneInfoCompiler.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.File"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    String string0 = ZoneInfoCompiler.parseOptional(""-\""ew~P?7_k;Xpg"");
    assertEquals(""-\""ew~P?7_k;Xpg"", string0);
}",0,assertNotNull(string0)
project,0,test044,"public void test044() throws Throwable {
    int int0 = ZoneInfoCompiler.parseDayOfWeek(""3"");
    assertEquals(3, int0);
}",0,"assertEquals(0, int0)"
project,0,test055,"public void test055() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    try {
        ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.test(""o"", (DateTimeZone) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.tz.ZoneInfoCompiler"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.parseYear((String) null, 2);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.tz.ZoneInfoCompiler"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.parseTime((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.parseOptional((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.parseMonth((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.parseDayOfWeek((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
    // Undeclared exception!
    try {
        zoneInfoCompiler0.parseDataFile((BufferedReader) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.tz.ZoneInfoCompiler"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
    PipedReader pipedReader0 = new PipedReader();
    BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
    try {
        zoneInfoCompiler0.parseDataFile(bufferedReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
    File[] fileArray0 = new File[3];
    // Undeclared exception!
    try {
        zoneInfoCompiler0.compile((File) null, fileArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
    MockFile mockFile0 = new MockFile(""-I%rwfe}24G>O&M1H"", ""-I%rwfe}24G>O&M1H"");
    File[] fileArray0 = new File[6];
    fileArray0[0] = (File) mockFile0;
    try {
        zoneInfoCompiler0.compile(mockFile0, fileArray0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();
    Chronology chronology1 = ZoneInfoCompiler.getLenientISOChronology();
    assertSame(chronology1, chronology0);
}",0,
project,0,test1918,"public void test1918() throws Throwable {
    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
    File file0 = MockFile.createTempFile(""Mont>KhOfear: "", "")m)4=>MAYq@Lw]7"");
    File[] fileArray0 = new File[1];
    fileArray0[0] = file0;
    try {
        zoneInfoCompiler0.compile(file0, fileArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Destination is not a directory: /var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/Mont>KhOfear: 0)m)4=>MAYq@Lw]7
        //
        verifyException(""org.joda.time.tz.ZoneInfoCompiler"", e);
    }
}",0,
project,0,test2019,"public void test2019() throws Throwable {
    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
    FileSystemHandling.shouldAllThrowIOExceptions();
    MockFile mockFile0 = new MockFile(""E4kq\""mEi2kIZ?m(Zw#a"", ""Tho many time zon ids"");
    File[] fileArray0 = new File[0];
    try {
        zoneInfoCompiler0.compile(mockFile0, fileArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Destination directory doesn't exist and cannot be created: /Users/elliottzackrone/IdeaProjects/defects4jprefix/E4kq\""mEi2kIZ?m(Zw#a/Tho many time zon ids
        //
        verifyException(""org.joda.time.tz.ZoneInfoCompiler"", e);
    }
}",0,
project,0,test2221,"public void test2221() throws Throwable {
    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
    File file0 = MockFile.createTempFile(""maximum"", ""co!"");
    try {
        zoneInfoCompiler0.compile(file0, (File[]) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Destination is not a directory: /var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/maximum0co!
        //
        verifyException(""org.joda.time.tz.ZoneInfoCompiler"", e);
    }
}",0,
project,0,test2322,"public void test2322() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
    boolean boolean0 = ZoneInfoCompiler.test(""MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n"", dateTimeZone0);
    assertTrue(boolean0);
}",0,
project,0,test2423,"public void test2423() throws Throwable {
    char char0 = ZoneInfoCompiler.parseZoneChar('Q');
    assertEquals('w', char0);
}",0,assertNotNull(char0)
project,0,test2524,"public void test2524() throws Throwable {
    char char0 = ZoneInfoCompiler.parseZoneChar('w');
    assertEquals('w', char0);
}",0,assertNotNull(char0)
project,0,test2625,"public void test2625() throws Throwable {
    char char0 = ZoneInfoCompiler.parseZoneChar('u');
    assertEquals('u', char0);
}",0,assertNotNull(char0)
project,0,test2726,"public void test2726() throws Throwable {
    char char0 = ZoneInfoCompiler.parseZoneChar('g');
    assertEquals('u', char0);
}",0,
project,0,test2827,"public void test2827() throws Throwable {
    char char0 = ZoneInfoCompiler.parseZoneChar('U');
    assertEquals('u', char0);
}",0,assertNotNull(char0)
project,0,test2928,"public void test2928() throws Throwable {
    char char0 = ZoneInfoCompiler.parseZoneChar('S');
    assertEquals('s', char0);
}",0,assertNotNull(char0)
project,0,test3029,"public void test3029() throws Throwable {
    char char0 = ZoneInfoCompiler.parseZoneChar('W');
    assertEquals('w', char0);
}",0,assertNotNull(char0)
project,0,test3130,"public void test3130() throws Throwable {
    char char0 = ZoneInfoCompiler.parseZoneChar('G');
    assertEquals('u', char0);
}",0,assertNotNull(char0)
project,0,test3231,"public void test3231() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.parseTime(""qJagA79?:"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // qJagA79?:
        //
        verifyException(""org.joda.time.tz.ZoneInfoCompiler"", e);
    }
}",1,
project,0,test3332,"public void test3332() throws Throwable {
    int int0 = ZoneInfoCompiler.parseTime(""-0L0K)xA"");
    assertEquals(0, int0);
}",1,
project,0,test3433,"public void test3433() throws Throwable {
    String string0 = ZoneInfoCompiler.parseOptional("""");
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test3534,"public void test3534() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.parseYear(""zone"", 83);
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""zone\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",0,
project,0,test3635,"public void test3635() throws Throwable {
    int int0 = ZoneInfoCompiler.parseYear(""minimum"", (-76));
    assertEquals(Integer.MIN_VALUE, int0);
}",1,
project,0,test3736,"public void test3736() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    hashMap0.put(""-*r* Error in "", dateTimeZone0);
    hashMap0.put("""", dateTimeZone0);
    // Undeclared exception!
    try {
        ZoneInfoCompiler.writeZoneInfoMap((DataOutputStream) null, hashMap0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.tz.ZoneInfoCompiler"", e);
    }
}",0,
project,0,test3837,"public void test3837() throws Throwable {
    Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();
    assertNotNull(chronology0);
}",0,
project,0,test3838,"public void test3838() throws Throwable {
    Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();
    int int0 = ZoneInfoCompiler.parseTime(""24,G0"");
    assertEquals(86400000, int0);
}",0,"assertEquals(1, int0)"
project,0,test3939,"public void test3939() throws Throwable {
    ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
    ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear();
    assertSame(zoneInfoCompiler_DateTimeOfYear1, zoneInfoCompiler_DateTimeOfYear0);
}",0,
project,0,test4040,"public void test4040() throws Throwable {
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""o"";
    stringArray0[1] = ""o"";
    stringArray0[2] = ""minimum"";
    try {
        ZoneInfoCompiler.main(stringArray0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test4141,"public void test4141() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.parseDayOfWeek(""MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value \""MonthOfYear: 1
        // DayOfMonth: 1
        // DayOfWeek: 0
        // AdvanceDayOfWeek: false
        // MillisOfDay: 0
        // ZoneChar: w
        // \"" for dayOfWeek is not supported
        //
        verifyException(""org.joda.time.chrono.GJLocaleSymbols"", e);
    }
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    // Undeclared exception!
    try {
        ZoneInfoCompiler.parseMonth("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value \""\"" for monthOfYear is not supported
        //
        verifyException(""org.joda.time.chrono.GJLocaleSymbols"", e);
    }
}",0,
project,0,test4444,"public void test4444() throws Throwable {
    String[] stringArray0 = new String[0];
    ZoneInfoCompiler.main(stringArray0);
    assertEquals(0, stringArray0.length);
}",0,
