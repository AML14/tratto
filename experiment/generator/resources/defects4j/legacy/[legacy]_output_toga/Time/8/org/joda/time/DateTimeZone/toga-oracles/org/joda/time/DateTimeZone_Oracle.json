[ {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test010"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone getDefault()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test021"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public ZoneInfoProvider(String resourcePath, ClassLoader loader) throws IOException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test032"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static final void setCurrentMillisProvider(MillisProvider millisProvider) throws SecurityException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test054"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test065"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test097"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test128"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test189"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2910"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3311"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3712"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3913"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4114"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5215"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5416"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public DefaultNameProvider()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5517"
} ]