project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeUtils.setCurrentMillisFixed(9223372036854775807L);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    YearMonthDay yearMonthDay0 = new YearMonthDay((Object) null, buddhistChronology0);
    int[] intArray0 = new int[1];
    YearMonthDay yearMonthDay1 = new YearMonthDay(yearMonthDay0, intArray0);
    // Undeclared exception!
    try {
        yearMonthDay1.toDateTimeAtCurrentTime();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000-07:52:58 (BuddhistChronology[America/Los_Angeles])
        //
        verifyException(""org.joda.time.chrono.LimitChronology"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""Europe/Paris"");
    int int0 = dateTimeZone0.getOffsetFromLocal(1L);
    assertEquals(3600000, int0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(Integer.MIN_VALUE);
    assertEquals(""--596:-31:-23.-648"", dateTimeZone0.getID());
}",0,
project,0,test033,"public void test033() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-28378000), ""-08:00"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    assertEquals(""-07:52"", dateTimeZone0.toString());
}",0,
project,0,test044,"public void test044() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
    assertEquals(""+00:01"", dateTimeZone0.toString());
}",0,
project,0,test055,"public void test055() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(60, 59);
    assertEquals(""+60:59"", dateTimeZone0.toString());
}",0,
project,0,test066,"public void test066() throws Throwable {
    try {
        DateTimeZone.forOffsetHoursMinutes(0, (-1972));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: -1972
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""-00:00:02.895"");
    assertEquals(""-00:00:02.895"", dateTimeZone0.getID());
}",0,
project,0,test088,"public void test088() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(267).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDateTime localDateTime0 = LocalDateTime.parse(""UTC"", dateTimeFormatter0);
    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    assertFalse(boolean0);
}",0,
project,0,test099,"public void test099() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2364));
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    assertEquals(""-00:00:02.364"", dateTimeZone0.toString());
}",0,
project,0,test1011,"public void test1011() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
    dateTimeZone0.UTC.previousTransition(0L);
    assertEquals(""-00:00:00.001"", dateTimeZone0.toString());
}",1,
project,0,test1012,"public void test1012() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
    dateTimeZone0.UTC.previousTransition(0L);
    assertEquals(""-00:00:00.001"", dateTimeZone0.getID());
}",0,
project,0,test1113,"public void test1113() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    long long0 = dateTimeZone0.previousTransition(1);
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test1214,"public void test1214() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.previousTransition((-838L));
    assertEquals((-5756400001L), long0);
}",0,"assertEquals(0, long0)"
project,0,test1315,"public void test1315() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    long long0 = dateTimeZone0.nextTransition(0L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1416,"public void test1416() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    long long0 = dateTimeZone0.UTC.nextTransition(10800000L);
    assertEquals(10800000L, long0);
}",0,"assertEquals(0, long0)"
project,0,test1517,"public void test1517() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    long long0 = fixedDateTimeZone0.UTC.nextTransition((-103L));
    assertEquals((-103L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1618,"public void test1618() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
    dateTimeZone0.isFixed();
    assertEquals(""+01:00"", dateTimeZone0.toString());
}",0,
project,0,test1719,"public void test1719() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    boolean boolean0 = dateTimeZone0.isFixed();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1820,"public void test1820() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    dateTimeZone0.UTC.getStandardOffset(1047L);
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test1821,"public void test1821() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    dateTimeZone0.UTC.getStandardOffset(1047L);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,
project,0,test1922,"public void test1922() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    int int0 = dateTimeZone0.getStandardOffset(0L);
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test1923,"public void test1923() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    int int0 = dateTimeZone0.getStandardOffset(0L);
    assertEquals(""+00:00:00.001"", dateTimeZone0.toString());
}",0,
project,0,test2024,"public void test2024() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getStandardOffset((-1619L));
    assertEquals((-28800000), int0);
}",0,"assertEquals(0, int0)"
project,0,test2125,"public void test2125() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);
    dateTimeZone0.UTC.getOffsetFromLocal((-3L));
    assertEquals(""+00:00:03.072"", dateTimeZone0.toString());
}",1,
project,0,test2126,"public void test2126() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);
    dateTimeZone0.UTC.getOffsetFromLocal((-3L));
    assertEquals(""+00:00:03.072"", dateTimeZone0.getID());
}",0,
project,0,test2227,"public void test2227() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Instant instant0 = new Instant(1223L);
    int int0 = dateTimeZone0.UTC.getOffset((ReadableInstant) instant0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2328,"public void test2328() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1738L, 1);
    Instant instant0 = gJChronology0.getGregorianCutover();
    int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);
    assertEquals(""+01:00"", dateTimeZone0.toString());
}",0,
project,0,test2329,"public void test2329() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1738L, 1);
    Instant instant0 = gJChronology0.getGregorianCutover();
    int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);
    assertEquals(3600000, int0);
}",0,
project,0,test2430,"public void test2430() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    int int0 = dateTimeZone0.UTC.getOffset(2332L);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2531,"public void test2531() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    int int0 = dateTimeZone0.getOffset(0L);
    assertEquals(3600000, int0);
}",0,
project,0,test2532,"public void test2532() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    int int0 = dateTimeZone0.getOffset(0L);
    assertEquals(""+01:00"", dateTimeZone0.toString());
}",0,
project,0,test2633,"public void test2633() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getOffset((-2461L));
    assertEquals((-28800000), int0);
}",0,
project,0,test2734,"public void test2734() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    dateTimeZone0.getNameKey(1738L);
    assertEquals(""+01:00"", dateTimeZone0.toString());
}",0,
project,0,test2835,"public void test2835() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    String string0 = fixedDateTimeZone0.getNameKey(2442L);
    assertEquals(""UTC"", string0);
}",0,
project,0,test2936,"public void test2936() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    long long0 = fixedDateTimeZone0.UTC.getMillisKeepLocal(fixedDateTimeZone0, 0L);
    assertEquals(0L, long0);
}",0,
project,0,test3037,"public void test3037() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);
    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0L);
    assertEquals((-32400000L), long0);
}",0,"assertEquals(1, long0)"
project,0,test3038,"public void test3038() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);
    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0L);
    assertEquals(""+01:00"", dateTimeZone1.getID());
}",0,assertNotNull(dateTimeZone1.getID())
project,0,test3139,"public void test3139() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3240,"public void test3240() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    boolean boolean0 = dateTimeZone0.equals(buddhistChronology0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3341,"public void test3341() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3342,"public void test3342() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    assertEquals(""UTC"", dateTimeZone0.toString());
}",1,
project,0,test3443,"public void test3443() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1129);
    long long0 = dateTimeZone0.convertLocalToUTC((long) 1129, true, 465L);
    assertEquals(""+00:00:01.129"", dateTimeZone0.toString());
}",0,
project,0,test3444,"public void test3444() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1129);
    long long0 = dateTimeZone0.convertLocalToUTC((long) 1129, true, 465L);
    assertEquals(0L, long0);
}",0,
project,0,test3545,"public void test3545() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    long long0 = dateTimeZone0.convertLocalToUTC((-9223372036854775808L), false, (-9223372036854775808L));
    assertEquals((-9223372036854775808L), long0);
}",0,"assertEquals(1, long0)"
project,0,test3646,"public void test3646() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""Africa/Harare"");
    long long0 = dateTimeZone0.convertLocalToUTC((long) 7200000, false);
    assertEquals(0L, long0);
}",0,
project,0,test3747,"public void test3747() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1295);
    long long0 = dateTimeZone0.adjustOffset(1295, true);
    assertEquals(1295L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3748,"public void test3748() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1295);
    long long0 = dateTimeZone0.adjustOffset(1295, true);
    assertEquals(""+00:00:01.295"", dateTimeZone0.toString());
}",0,
project,0,test3849,"public void test3849() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""Europe/Paris"");
    long long0 = dateTimeZone0.adjustOffset((-1331L), false);
    assertEquals((-1331L), long0);
}",0,
project,0,test3950,"public void test3950() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(177, 0);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    // Undeclared exception!
    try {
        DateTimeZone.forTimeZone(timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""+A7:00\"" is malformed at \""A7:00\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test4051,"public void test4051() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 1061L);
    assertEquals(1061L, long0);
}",0,
project,0,test4152,"public void test4152() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.convertLocalToUTC(2779L, true);
    assertEquals(28802779L, long0);
}",0,
project,0,test4253,"public void test4253() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    long long0 = dateTimeZone0.convertLocalToUTC(10800000L, true, 0L);
    assertEquals(""+00:00:00.001"", dateTimeZone0.toString());
}",1,
project,0,test4254,"public void test4254() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    long long0 = dateTimeZone0.convertLocalToUTC(10800000L, true, 0L);
    assertEquals(10799999L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4355,"public void test4355() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
    Locale locale0 = Locale.JAPANESE;
    String string0 = dateTimeZone0.getName(0L, locale0);
    assertEquals(""-00:00:00.001"", string0);
}",0,
project,0,test4456,"public void test4456() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    String string0 = dateTimeZone0.getName((long) 1, (Locale) null);
    assertEquals(""+00:00"", string0);
}",0,
project,0,test4457,"public void test4457() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    String string0 = dateTimeZone0.getName((long) 1, (Locale) null);
    assertNotNull(string0);
}",0,
project,0,test4558,"public void test4558() throws Throwable {
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(""UTC"");
    String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);
    assertNotNull(string0);
}",0,
project,0,test4559,"public void test4559() throws Throwable {
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(""UTC"");
    String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);
    assertEquals(""+00:00"", string0);
}",0,
project,0,test4660,"public void test4660() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone.forTimeZone(timeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertNotNull(dateTimeZone1);
}",0,
project,0,test4662,"public void test4662() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone.forTimeZone(timeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""+00:00:03.072"", dateTimeZone0.toString());
}",0,
project,0,test4663,"public void test4663() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone.forTimeZone(timeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""UTC"", dateTimeZone1.toString());
}",0,assertNotNull(dateTimeZone1.toString())
project,0,test4764,"public void test4764() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""VST"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""Asia/Ho_Chi_Minh"", dateTimeZone0.toString());
}",0,
project,0,test4865,"public void test4865() throws Throwable {
    try {
        DateTimeZone.forOffsetHoursMinutes((-1655), 44);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test4966,"public void test4966() throws Throwable {
    Integer integer0 = new Integer(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((int) integer0, 0);
    assertEquals(""UTC"", dateTimeZone0.getID());
}",0,
project,0,test5067,"public void test5067() throws Throwable {
    // Undeclared exception!
    try {
        DateTimeZone.forID("")*EX&Y5xR5N:H@oh9"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id ')*EX&Y5xR5N:H@oh9' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5268,"public void test5268() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
    assertSame(dateTimeZone1, dateTimeZone0);
}",0,
project,0,test5469,"public void test5469() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    String string0 = dateTimeZone0.getID();
    assertEquals(""+00:00:00.001"", string0);
}",0,
project,0,test5570,"public void test5570() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.adjustOffset(0L, true);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test5671,"public void test5671() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(690562340, 377, 1, 43, 1);
    LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
    LocalTime localTime0 = new LocalTime((-1019L));
    LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    assertFalse(boolean0);
}",0,
project,0,test5672,"public void test5672() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(690562340, 377, 1, 43, 1);
    LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
    LocalTime localTime0 = new LocalTime((-1019L));
    LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    assertEquals(""+01:00"", dateTimeZone0.toString());
}",1,
project,0,test5773,"public void test5773() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5874,"public void test5874() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 51L);
    assertEquals(28800051L, long0);
}",0,
project,0,test5975,"public void test5975() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(567);
    long long0 = dateTimeZone0.convertLocalToUTC(4998L, false);
    assertEquals((-2041195002L), long0);
}",0,
project,0,test5976,"public void test5976() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(567);
    long long0 = dateTimeZone0.convertLocalToUTC(4998L, false);
    assertEquals(""+567:00"", dateTimeZone0.toString());
}",0,
project,0,test6077,"public void test6077() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Subtracting time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test6178,"public void test6178() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Subtracting time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test6279,"public void test6279() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    MutableDateTime mutableDateTime0 = null;
    try {
        mutableDateTime0 = new MutableDateTime(1, 0, 1, 0, 567, 1, 567, buddhistChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test6380,"public void test6380() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    // Undeclared exception!
    try {
        dateTimeZone0.adjustOffset(9223372036854775807L, false);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Adding time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test6481,"public void test6481() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    assertEquals((-28800000L), long0);
}",0,"assertEquals(1, long0)"
project,0,test6582,"public void test6582() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    assertEquals(3600000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test6583,"public void test6583() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    assertEquals(""+01:00"", dateTimeZone0.toString());
}",1,
project,0,test6684,"public void test6684() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""Africa/Harare"");
    int int0 = dateTimeZone0.getOffsetFromLocal((-217L));
    assertEquals(7200000, int0);
}",0,
project,0,test6785,"public void test6785() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
    assertEquals((-28378000), int0);
}",0,
project,0,test6886,"public void test6886() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getOffsetFromLocal(1654L);
    assertEquals((-28800000), int0);
}",0,
project,0,test6987,"public void test6987() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    boolean boolean0 = dateTimeZone0.isStandardOffset(0L);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test7088,"public void test7088() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
    int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
    assertEquals((-1), int0);
}",0,
project,0,test7089,"public void test7089() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
    int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
    assertEquals(""-00:00:00.001"", dateTimeZone0.toString());
}",0,
project,0,test7190,"public void test7190() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    Locale locale0 = new Locale(""{%#:[8[Nb'1[RYD&d"", ""{%#:[8[Nb'1[RYD&d"");
    String string0 = dateTimeZone0.getShortName(0L, locale0);
    assertEquals(""+01:00"", string0);
}",0,
project,0,test7291,"public void test7291() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
    assertEquals(""+00:00:01"", dateTimeZone0.getID());
}",0,
project,0,test7593,"public void test7593() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""+00:00:03.072"", dateTimeZone0.toString());
}",0,
project,0,test7594,"public void test7594() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertNotNull(dateTimeZone1);
}",0,
project,0,test7595,"public void test7595() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    DateTimeZone dateTimeZone2 = DateTimeZone.forID(""+00:00"");
    assertNotNull(dateTimeZone2);
}",0,
project,0,test7596,"public void test7596() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    DateTimeZone dateTimeZone2 = DateTimeZone.forID(""+00:00"");
    assertSame(dateTimeZone2, dateTimeZone1);
}",0,
project,0,test7697,"public void test7697() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MAX;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""+18:00"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test7798,"public void test7798() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    assertSame(dateTimeZone0, fixedDateTimeZone0);
}",0,
project,0,test7899,"public void test7899() throws Throwable {
    try {
        DateTimeZone.forOffsetHours((-4432));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test79100,"public void test79100() throws Throwable {
    try {
        DateTimeZone.forOffsetHoursMinutes(0, 12720000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: 12720000
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test80101,"public void test80101() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+00:00:01.350"");
    assertNotNull(dateTimeZone0);
}",0,
project,0,test80102,"public void test80102() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+00:00:01.350"");
    assertEquals(""+00:00:01.350"", dateTimeZone0.getID());
}",0,assertNotNull(dateTimeZone0.getID())
project,0,test81103,"public void test81103() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""UTC"");
    assertEquals(""UTC"", dateTimeZone0.toString());
}",0,
project,0,test82104,"public void test82104() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,
project,0,test83105,"public void test83105() throws Throwable {
    // Undeclared exception!
    try {
        DateTimeZone.setDefault((DateTimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone must not be null
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test84106,"public void test84106() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone.setDefault(dateTimeZone0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}",0,
project,0,test85107,"public void test85107() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone((TimeZone) null);
    assertSame(dateTimeZone1, dateTimeZone0);
}",0,
project,0,test87109,"public void test87109() throws Throwable {
    Provider provider0 = DateTimeZone.getProvider();
    assertNotNull(provider0);
}",0,
project,0,test90111,"public void test90111() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertNotNull(dateTimeZone0);
}",0,
project,0,test90112,"public void test90112() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    String string0 = dateTimeZone0.toString();
    assertEquals(""America/Los_Angeles"", string0);
}",0,
project,0,test91113,"public void test91113() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
    String string0 = dateTimeZone0.getName((long) 12740625);
    assertEquals(""+03:32:20.625"", string0);
}",0,assertNotNull(string0)
project,0,test92114,"public void test92114() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);
    assertSame(dateTimeZone1, dateTimeZone0);
}",1,
project,0,test92115,"public void test92115() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);
    assertEquals(""+01:00"", dateTimeZone1.toString());
}",0,
project,0,test93116,"public void test93116() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis(12740625);
    ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    assertEquals(""+03:32:20.625"", fixedDateTimeZone0.toString());
}",0,
project,0,test94117,"public void test94117() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertNotNull(dateTimeZone0);
}",0,
project,0,test94118,"public void test94118() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    String string0 = dateTimeZone0.getShortName(0L);
    assertNotNull(string0);
}",0,
project,0,test94119,"public void test94119() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    String string0 = dateTimeZone0.getShortName(0L);
    assertEquals(""-08:00"", string0);
}",0,
