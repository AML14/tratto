[ {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public DateTime toDateTimeAtCurrentTime()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test000"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test011"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test022"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test033"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test044"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test055"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test066"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test077"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test088"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test099"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1011"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1012"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long previousTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, long0)",
  "exception" : "",
  "testName" : "test1113"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long previousTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, long0)",
  "exception" : "",
  "testName" : "test1214"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long nextTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test1315"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long nextTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, long0)",
  "exception" : "",
  "testName" : "test1416"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long nextTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test1517"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1618"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean isFixed()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test1719"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1820"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1821"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test1922"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1923"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test2024"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2125"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2126"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final int getOffset(ReadableInstant instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test2227"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2328"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final int getOffset(ReadableInstant instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2329"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, int0)",
  "exception" : "",
  "testName" : "test2430"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2531"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2532"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2633"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2734"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getNameKey(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2835"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2936"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3037"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone1.getID())",
  "exception" : "",
  "testName" : "test3038"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean equals(Object obj)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test3139"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean equals(Object object)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test3240"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3341"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3342"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3443"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3444"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3545"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3646"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test3747"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3748"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3849"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3950"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4051"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4152"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4253"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test4254"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4355"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4456"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4457"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getShortName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4558"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getShortName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4559"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4660"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4662"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone1.toString())",
  "exception" : "",
  "testName" : "test4663"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4764"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4865"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4966"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5067"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone getDefault()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5268"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5469"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test5570"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5671"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5672"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5773"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5874"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5975"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5976"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6077"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6178"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public MutableDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, Chronology chronology)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6279"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6380"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test6481"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, long0)",
  "exception" : "",
  "testName" : "test6582"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6583"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6684"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6785"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test6886"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test6987"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final int getOffset(ReadableInstant instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7088"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7089"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getShortName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7190"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7291"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7593"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7594"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7595"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7596"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.getID())",
  "exception" : "",
  "testName" : "test7697"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7798"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test7899"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test79100"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forID(String id)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test80101"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getID()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(dateTimeZone0.getID())",
  "exception" : "",
  "testName" : "test80102"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test81103"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test82104"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test83105"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test84106"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test85107"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static Provider getProvider()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test87109"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone getDefault()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test90111"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test90112"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(string0)",
  "exception" : "",
  "testName" : "test91113"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test92114"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test92115"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test93116"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone getDefault()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test94117"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getShortName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test94118"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getShortName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test94119"
} ]