/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 03:33:19 GMT 2023
 */
package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Base64_ESTest extends Base64_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[0] = (byte) 123;
        boolean boolean0 = Base64.isBase64(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Base64 base64_0 = new Base64(0);
        byte[] byteArray0 = new byte[7];
        byteArray0[3] = (byte) (-106);
        byte[] byteArray1 = base64_0.encode(byteArray0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        byte[] byteArray0 = new byte[0];
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        boolean boolean0 = Base64.isBase64("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[0];
        String string0 = base64_0.encodeToString(byteArray0);
        base64_0.isUrlSafe();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[0];
        String string0 = base64_0.encodeToString(byteArray0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.encode(byteArray0);
        String string0 = Base64.encodeBase64URLSafeString(byteArray1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.encode(byteArray0);
        String string0 = Base64.encodeBase64URLSafeString(byteArray1);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.encode(byteArray0);
        String string0 = Base64.encodeBase64URLSafeString(byteArray1);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
        assertNotNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        byte[] byteArray0 = new byte[1];
        String string0 = Base64.encodeBase64String(byteArray0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        byte[] byteArray0 = new byte[0];
        String string0 = Base64.encodeBase64String(byteArray0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, false);
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.encode(byteArray0);
        byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.encode(byteArray0);
        byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64((-1438), byteArray0);
        byte[] byteArray1 = new byte[5];
        byteArray1[3] = (byte) (-57);
        byte[] byteArray2 = base64_0.encode(byteArray1);
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64((-1438), byteArray0);
        byte[] byteArray1 = new byte[5];
        byteArray1[3] = (byte) (-57);
        byte[] byteArray2 = base64_0.encode(byteArray1);
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 73;
        byteArray0[2] = (byte) 45;
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[3] = (byte) 43;
        byteArray0[5] = (byte) 56;
        byte[] byteArray1 = Base64.decodeBase64(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = Base64.decodeBase64(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2227() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64((String) null);
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("))%");
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        Base64 base64_0 = new Base64(false);
        byte[] byteArray0 = base64_0.decode((String) null);
    }

    @Test(timeout = 4000)
    public void test2430() throws Throwable {
        Base64 base64_0 = new Base64(false);
        byte[] byteArray0 = base64_0.decode((String) null);
        base64_0.isUrlSafe();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test2531() throws Throwable {
        Base64.toIntegerBytes((BigInteger) null);
    }

    @Test(timeout = 4000)
    public void test2632() throws Throwable {
        Base64 base64_0 = new Base64((-1783));
        byte[] byteArray0 = new byte[6];
        base64_0.encode(byteArray0, (int) (byte) (-118), (int) (byte) (-45));
        base64_0.readResults(byteArray0, (-767), (-391));
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        Base64.isBase64((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        Base64.isBase64((String) null);
    }

    @Test(timeout = 4000)
    public void test2935() throws Throwable {
        Base64.isArrayByteBase64((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test3036() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        Base64 base64_0 = new Base64((-485), byteArray0);
        byte[] byteArray1 = new byte[9];
        base64_0.encode(byteArray1);
    }

    @Test(timeout = 4000)
    public void test3137() throws Throwable {
        Base64.discardWhitespace((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test3238() throws Throwable {
        Base64.decodeInteger((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test3439() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 64);
    }

    @Test(timeout = 4000)
    public void test3440() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 64);
    }

    @Test(timeout = 4000)
    public void test3541() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false, 76);
    }

    @Test(timeout = 4000)
    public void test3642() throws Throwable {
        Base64 base64_0 = new Base64(0, (byte[]) null);
        byte[] byteArray0 = base64_0.decode((byte[]) null);
        assertNotNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3643() throws Throwable {
        Base64 base64_0 = new Base64(0, (byte[]) null);
        byte[] byteArray0 = base64_0.decode((byte[]) null);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test3744() throws Throwable {
        Base64 base64_0 = new Base64(103);
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.decode(byteArray0);
        byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
    }

    @Test(timeout = 4000)
    public void test3745() throws Throwable {
        Base64 base64_0 = new Base64(103);
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.decode(byteArray0);
        byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test3746() throws Throwable {
        Base64 base64_0 = new Base64(103);
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.decode(byteArray0);
        byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
    }

    @Test(timeout = 4000)
    public void test3747() throws Throwable {
        Base64 base64_0 = new Base64(103);
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.decode(byteArray0);
        byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
    }

    @Test(timeout = 4000)
    public void test3948() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) 81);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4049() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) 0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4150() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) 126);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4251() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) (-126));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4352() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) 61);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4453() throws Throwable {
        Base64 base64_0 = new Base64(false);
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.decode("+&OxR7{L] |au,X");
        byte[] byteArray2 = base64_0.encode(byteArray0);
    }

    @Test(timeout = 4000)
    public void test4454() throws Throwable {
        Base64 base64_0 = new Base64(false);
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.decode("+&OxR7{L] |au,X");
        byte[] byteArray2 = base64_0.encode(byteArray0);
        base64_0.decode(byteArray1, 0, 0);
    }

    @Test(timeout = 4000)
    public void test4455() throws Throwable {
        Base64 base64_0 = new Base64(false);
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = base64_0.decode("+&OxR7{L] |au,X");
        byte[] byteArray2 = base64_0.encode(byteArray0);
        base64_0.decode(byteArray1, 0, 0);
    }

    @Test(timeout = 4000)
    public void test4556() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[4] = (byte) 118;
        Base64 base64_0 = new Base64();
        base64_0.decode(byteArray0, (int) (byte) 1, 87);
    }

    @Test(timeout = 4000)
    public void test4657() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[1] = (byte) (-35);
        Base64 base64_0 = new Base64();
        base64_0.decode(byteArray0, (int) (byte) 1, 87);
    }

    @Test(timeout = 4000)
    public void test4858() throws Throwable {
        Base64 base64_0 = new Base64();
        base64_0.decode((byte[]) null, (int) (byte) (-43), 1);
    }

    @Test(timeout = 4000)
    public void test4959() throws Throwable {
        Base64 base64_0 = new Base64((-2737), (byte[]) null);
        base64_0.decode((byte[]) null, 76, (-1));
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test5060() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Base64 base64_0 = new Base64();
        base64_0.encode(byteArray0, (int) (byte) 0, (int) (byte) 49);
    }

    @Test(timeout = 4000)
    public void test5161() throws Throwable {
        byte[] byteArray0 = new byte[7];
        byteArray0[4] = (byte) (-26);
        Base64 base64_0 = new Base64(true);
        base64_0.encode(byteArray0, (int) (byte) 3, 77);
    }

    @Test(timeout = 4000)
    public void test5262() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64();
        base64_0.encode(byteArray0, (-728), (int) (byte) 0);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test5363() throws Throwable {
        Base64 base64_0 = new Base64(0);
        base64_0.encode((byte[]) null, 0, 40);
    }

    @Test(timeout = 4000)
    public void test5464() throws Throwable {
        byte[] byteArray0 = new byte[2];
        Base64 base64_0 = new Base64((-289), byteArray0, true);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test5565() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 79;
        Base64 base64_0 = null;
        base64_0 = new Base64((-1551), byteArray0, false);
    }

    @Test(timeout = 4000)
    public void test5666() throws Throwable {
        Base64 base64_0 = new Base64((-2149), (byte[]) null, false);
        String string0 = base64_0.encodeToString((byte[]) null);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test5667() throws Throwable {
        Base64 base64_0 = new Base64((-2149), (byte[]) null, false);
        String string0 = base64_0.encodeToString((byte[]) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test5768() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
        byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 567);
    }

    @Test(timeout = 4000)
    public void test5869() throws Throwable {
        Base64.encodeInteger((BigInteger) null);
    }

    @Test(timeout = 4000)
    public void test5970() throws Throwable {
        Base64 base64_0 = new Base64(0, (byte[]) null);
        byte[] byteArray0 = base64_0.encode((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test5971() throws Throwable {
        Base64 base64_0 = new Base64(0, (byte[]) null);
        byte[] byteArray0 = base64_0.encode((byte[]) null);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test6072() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64((byte) 36, byteArray0);
        BigInteger bigInteger0 = BigInteger.TEN;
        base64_0.encode((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test6173() throws Throwable {
        Base64 base64_0 = new Base64(0, (byte[]) null);
        Object object0 = base64_0.decode((Object) "]%3(Mbn@0l6/vRxq+=x");
        Object object1 = base64_0.encode(object0);
    }

    @Test(timeout = 4000)
    public void test6174() throws Throwable {
        Base64 base64_0 = new Base64(0, (byte[]) null);
        Object object0 = base64_0.decode((Object) "]%3(Mbn@0l6/vRxq+=x");
        Object object1 = base64_0.encode(object0);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test6275() throws Throwable {
        boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6376() throws Throwable {
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) 9;
        boolean boolean0 = Base64.isBase64(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6477() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test6478() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test6479() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test6780() throws Throwable {
        byte[] byteArray0 = new byte[7];
        byteArray0[3] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test6781() throws Throwable {
        byte[] byteArray0 = new byte[7];
        byteArray0[3] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test6782() throws Throwable {
        byte[] byteArray0 = new byte[7];
        byteArray0[3] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test6883() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Base64 base64_0 = new Base64((byte) 1, byteArray0, false);
        base64_0.decode("");
        base64_0.isUrlSafe();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test6984() throws Throwable {
        byte[] byteArray0 = new byte[8];
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        Base64 base64_0 = new Base64(false);
        base64_0.decode((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test7085() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64((-2998), byteArray0, false);
        Object object0 = base64_0.decode((Object) "encodeInteger called with null parameter");
        Object object1 = base64_0.decode(object0);
        base64_0.isUrlSafe();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test7086() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64((-2998), byteArray0, false);
        Object object0 = base64_0.decode((Object) "encodeInteger called with null parameter");
        Object object1 = base64_0.decode(object0);
    }

    @Test(timeout = 4000)
    public void test7287() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64((-3966), (byte[]) null);
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
        byte[] byteArray2 = base64_0.decode(byteArray1);
    }

    @Test(timeout = 4000)
    public void test7288() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64((-3966), (byte[]) null);
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
        byte[] byteArray2 = base64_0.decode(byteArray1);
    }

    @Test(timeout = 4000)
    public void test7389() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[5];
        byte[] byteArray1 = base64_0.encode(byteArray0);
    }

    @Test(timeout = 4000)
    public void test7390() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[5];
        byte[] byteArray1 = base64_0.encode(byteArray0);
    }

    @Test(timeout = 4000)
    public void test7391() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[5];
        byte[] byteArray1 = base64_0.encode(byteArray0);
        base64_0.decode(byteArray0, 1, 296);
    }

    @Test(timeout = 4000)
    public void test7492() throws Throwable {
        byte[] byteArray0 = new byte[9];
        Base64 base64_0 = new Base64(4, byteArray0);
        byte[] byteArray1 = base64_0.encode(byteArray0);
    }

    @Test(timeout = 4000)
    public void test7493() throws Throwable {
        byte[] byteArray0 = new byte[9];
        Base64 base64_0 = new Base64(4, byteArray0);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test7594() throws Throwable {
        Base64 base64_0 = new Base64(true);
        byte[] byteArray0 = new byte[4];
        base64_0.encode(byteArray0, (int) (byte) (-19), (-148));
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test7695() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
        byte[] byteArray2 = Base64.encodeBase64(byteArray1);
    }

    @Test(timeout = 4000)
    public void test7796() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64((-3966), (byte[]) null);
        byte[] byteArray1 = base64_0.decode(byteArray0);
    }

    @Test(timeout = 4000)
    public void test7797() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64((-3966), (byte[]) null);
        byte[] byteArray1 = base64_0.decode(byteArray0);
        base64_0.encode(byteArray0, (-3966), (int) (byte) 0);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test7898() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Base64 base64_0 = new Base64(1, byteArray0);
        byte[] byteArray1 = base64_0.decode("4%*Y'ZxA");
    }

    @Test(timeout = 4000)
    public void test7899() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Base64 base64_0 = new Base64(1, byteArray0);
        byte[] byteArray1 = base64_0.decode("4%*Y'ZxA");
    }

    @Test(timeout = 4000)
    public void test78100() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Base64 base64_0 = new Base64(1, byteArray0);
        byte[] byteArray1 = base64_0.decode("4%*Y'ZxA");
        int int0 = base64_0.readResults(byteArray0, (byte) 120, (byte) 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test79101() throws Throwable {
        Base64 base64_0 = new Base64(true);
        int int0 = base64_0.readResults((byte[]) null, 2563, 2563);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test79102() throws Throwable {
        Base64 base64_0 = new Base64(true);
        int int0 = base64_0.readResults((byte[]) null, 2563, 2563);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test80103() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64((-2998), byteArray0, false);
        int int0 = base64_0.avail();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test80104() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64((-2998), byteArray0, false);
        int int0 = base64_0.avail();
    }

    @Test(timeout = 4000)
    public void test80105() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64((-2998), byteArray0, false);
        int int0 = base64_0.avail();
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test81106() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Base64 base64_0 = new Base64((byte) 1, byteArray0, false);
        base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
        boolean boolean0 = base64_0.hasData();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test81107() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Base64 base64_0 = new Base64((byte) 1, byteArray0, false);
        base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
        boolean boolean0 = base64_0.hasData();
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test82108() throws Throwable {
        Base64 base64_0 = new Base64(true);
        boolean boolean0 = base64_0.isUrlSafe();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test83109() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Base64 base64_0 = new Base64(1, byteArray0);
        boolean boolean0 = base64_0.isUrlSafe();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test84110() throws Throwable {
        byte[] byteArray0 = new byte[32];
        byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
        Base64 base64_0 = null;
        base64_0 = new Base64(98, byteArray1);
    }

    @Test(timeout = 4000)
    public void test85111() throws Throwable {
        byte[] byteArray0 = new byte[1];
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test86112() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("x$PW bOeg1/`gL<X|");
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test86113() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("x$PW bOeg1/`gL<X|");
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test87114() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
        String string0 = Base64.encodeBase64URLSafeString(byteArray0);
    }

    @Test(timeout = 4000)
    public void test88115() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
        Base64.encodeBase64(byteArray0, true, false, 12);
    }

    @Test(timeout = 4000)
    public void test89116() throws Throwable {
        String string0 = Base64.encodeBase64String((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test90117() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64((-3966), (byte[]) null);
        String string0 = base64_0.encodeToString(byteArray0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test91118() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test92119() throws Throwable {
        Base64 base64_0 = new Base64();
        boolean boolean0 = base64_0.hasData();
        base64_0.isUrlSafe();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test92120() throws Throwable {
        Base64 base64_0 = new Base64();
        boolean boolean0 = base64_0.hasData();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test93121() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
    }
}
