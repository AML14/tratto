project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    byte[] byteArray0 = new byte[0];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
    assertNotNull(base64InputStream0);
}",0,
project,0,test001,"public void test001() throws Throwable {
    byte[] byteArray0 = new byte[0];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test002,"public void test002() throws Throwable {
    byte[] byteArray0 = new byte[0];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
    assertArrayEquals(new byte[] {}, byteArray0);
}",0,
project,0,test003,"public void test003() throws Throwable {
    byte[] byteArray0 = new byte[0];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
    assertEquals(0, byteArray0.length);
}",0,
project,0,test005,"public void test005() throws Throwable {
    byte[] byteArray0 = new byte[0];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
    int int0 = base64InputStream0.read(byteArray0);
    assertFalse(base64InputStream0.markSupported());
}",0,assertFalse(base64InputStream0.markSupported())
project,0,test018,"public void test018() throws Throwable {
    byte[] byteArray0 = new byte[5];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
    assertNotNull(base64InputStream0);
}",0,
project,0,test019,"public void test019() throws Throwable {
    byte[] byteArray0 = new byte[5];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
    assertFalse(base64InputStream0.markSupported());
}",0,assertTrue(base64InputStream0.markSupported())
project,0,test0110,"public void test0110() throws Throwable {
    byte[] byteArray0 = new byte[5];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test0111,"public void test0111() throws Throwable {
    byte[] byteArray0 = new byte[5];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
    assertEquals(5, byteArray0.length);
}",0,
project,0,test0112,"public void test0112() throws Throwable {
    byte[] byteArray0 = new byte[5];
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
    // Undeclared exception!
    try {
        base64InputStream0.read();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.codec.binary.Base64InputStream"", e);
    }
}",0,
project,0,test0221,"public void test0221() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test0223,"public void test0223() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test0224,"public void test0224() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test0225,"public void test0225() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
    assertEquals(5, byteArray0.length);
}",0,
project,0,test0226,"public void test0226() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
    // Undeclared exception!
    try {
        base64InputStream0.read();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",0,
project,0,test0329,"public void test0329() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    Base64InputStream base64InputStream0 = new Base64InputStream(pipedInputStream0);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test0331,"public void test0331() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    Base64InputStream base64InputStream0 = new Base64InputStream(pipedInputStream0);
    assertFalse(base64InputStream0.markSupported());
}",0,assertFalse(base64InputStream0.markSupported())
project,0,test0332,"public void test0332() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    Base64InputStream base64InputStream0 = new Base64InputStream(pipedInputStream0);
    try {
        base64InputStream0.read();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test0434,"public void test0434() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 97;
    Base64InputStream base64InputStream0 = null;
    try {
        base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, 3099, byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // lineSeperator must not contain base64 characters: [a\u0000\u0000\u0000\u0000\u0000\u0000\u0000]
        //
        verifyException(""org.apache.commons.codec.binary.Base64"", e);
    }
}",0,
project,0,test0543,"public void test0543() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test0545,"public void test0545() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
    assertFalse(base64InputStream0.markSupported());
}",0,assertTrue(base64InputStream0.markSupported())
project,0,test0546,"public void test0546() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test0547,"public void test0547() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
    assertEquals(9, byteArray0.length);
}",0,
project,0,test0653,"public void test0653() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test0655,"public void test0655() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test0656,"public void test0656() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test0657,"public void test0657() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertEquals(6, byteArray0.length);
}",0,
project,0,test0658,"public void test0658() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
    assertEquals(0, int0);
}",1,
project,0,test0660,"public void test0660() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test0661,"public void test0661() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",1,
project,0,test0662,"public void test0662() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
    assertEquals(6, byteArray0.length);
}",1,
project,0,test0665,"public void test0665() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
    int int1 = base64InputStream0.read(byteArray0);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test0777,"public void test0777() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
    assertNotNull(base64InputStream0);
}",0,
project,0,test0779,"public void test0779() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test0780,"public void test0780() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
    assertArrayEquals(new byte[] { (byte) 0 }, byteArray0);
}",0,
project,0,test0781,"public void test0781() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
    assertEquals(1, byteArray0.length);
}",0,
project,0,test0782,"public void test0782() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
    int int0 = base64InputStream0.read();
    assertEquals(65, int0);
}",0,"assertEquals(1, int0)"
project,0,test0784,"public void test0784() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
    int int0 = base64InputStream0.read();
    assertFalse(base64InputStream0.markSupported());
}",0,assertFalse(base64InputStream0.markSupported())
project,0,test0785,"public void test0785() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
    int int0 = base64InputStream0.read();
    assertArrayEquals(new byte[] { (byte) 0 }, byteArray0);
}",0,
project,0,test0786,"public void test0786() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
    int int0 = base64InputStream0.read();
    assertEquals(1, byteArray0.length);
}",0,
project,0,test0891,"public void test0891() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test0893,"public void test0893() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test0894,"public void test0894() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test0895,"public void test0895() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertEquals(6, byteArray0.length);
}",0,
project,0,test0896,"public void test0896() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    // Undeclared exception!
    try {
        base64InputStream0.read(byteArray0, 85, 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.codec.binary.Base64InputStream"", e);
    }
}",1,
project,0,test09102,"public void test09102() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(pushbackInputStream0, true);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test09104,"public void test09104() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(pushbackInputStream0, true);
    assertFalse(base64InputStream0.markSupported());
}",0,assertFalse(base64InputStream0.markSupported())
project,0,test09105,"public void test09105() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
    Base64InputStream base64InputStream0 = new Base64InputStream(pushbackInputStream0, true);
    byte[] byteArray0 = new byte[8];
    // Undeclared exception!
    try {
        base64InputStream0.read(byteArray0, 733, (-1207));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.codec.binary.Base64InputStream"", e);
    }
}",1,
project,0,test10110,"public void test10110() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test10112,"public void test10112() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
    assertFalse(base64InputStream0.markSupported());
}",0,assertTrue(base64InputStream0.markSupported())
project,0,test10113,"public void test10113() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test10114,"public void test10114() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
    assertEquals(5, byteArray0.length);
}",0,
project,0,test10115,"public void test10115() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
    // Undeclared exception!
    try {
        base64InputStream0.read(byteArray0, (-37), 1919);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.codec.binary.Base64InputStream"", e);
    }
}",1,
project,0,test11116,"public void test11116() throws Throwable {
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-2281), (byte[]) null);
    assertNotNull(base64InputStream0);
}",0,
project,0,test11117,"public void test11117() throws Throwable {
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-2281), (byte[]) null);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test11118,"public void test11118() throws Throwable {
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-2281), (byte[]) null);
    // Undeclared exception!
    try {
        base64InputStream0.read((byte[]) null, 0, Integer.MAX_VALUE);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.codec.binary.Base64InputStream"", e);
    }
}",1,
project,0,test12123,"public void test12123() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 110;
    byteArray0[2] = (byte) 45;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test12125,"public void test12125() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 110;
    byteArray0[2] = (byte) 45;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test12126,"public void test12126() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 110;
    byteArray0[2] = (byte) 45;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 110, (byte) 45, (byte) 0 }, byteArray0);
}",0,
project,0,test12127,"public void test12127() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 110;
    byteArray0[2] = (byte) 45;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertEquals(4, byteArray0.length);
}",0,
project,0,test12128,"public void test12128() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 110;
    byteArray0[2] = (byte) 45;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read();
    assertEquals(159, int0);
}",0,"assertEquals(1, int0)"
project,0,test12130,"public void test12130() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 110;
    byteArray0[2] = (byte) 45;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read();
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test12131,"public void test12131() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 110;
    byteArray0[2] = (byte) 45;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read();
    assertArrayEquals(new byte[] { (byte) 0, (byte) 110, (byte) 45, (byte) 0 }, byteArray0);
}",0,
project,0,test12132,"public void test12132() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 110;
    byteArray0[2] = (byte) 45;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read();
    assertEquals(4, byteArray0.length);
}",0,
project,0,test13137,"public void test13137() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test13139,"public void test13139() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test13140,"public void test13140() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 98, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test13141,"public void test13141() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertEquals(6, byteArray0.length);
}",0,
project,0,test13144,"public void test13144() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test13148,"public void test13148() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0);
    base64InputStream0.reset();
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test13151,"public void test13151() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0);
    base64InputStream0.reset();
    int int1 = base64InputStream0.read();
    assertEquals(109, int1);
}",0,"assertEquals(1, int1)"
project,0,test13153,"public void test13153() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0);
    base64InputStream0.reset();
    int int1 = base64InputStream0.read();
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test13154,"public void test13154() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0);
    base64InputStream0.reset();
    int int1 = base64InputStream0.read();
    assertFalse(int1 == int0);
}",0,
project,0,test13155,"public void test13155() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0);
    base64InputStream0.reset();
    int int1 = base64InputStream0.read();
    assertArrayEquals(new byte[] { (byte) 0, (byte) 98, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test13156,"public void test13156() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read(byteArray0);
    base64InputStream0.reset();
    int int1 = base64InputStream0.read();
    assertEquals(6, byteArray0.length);
}",0,
project,0,test14161,"public void test14161() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test14163,"public void test14163() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test14164,"public void test14164() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test14165,"public void test14165() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertEquals(6, byteArray0.length);
}",0,
project,0,test14166,"public void test14166() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read();
    assertEquals((-1), int0);
}",0,"assertEquals(1, int0)"
project,0,test14168,"public void test14168() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read();
    assertFalse(base64InputStream0.markSupported());
}",0,assertTrue(base64InputStream0.markSupported())
project,0,test14169,"public void test14169() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read();
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test14170,"public void test14170() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    int int0 = base64InputStream0.read();
    assertEquals(6, byteArray0.length);
}",0,
project,0,test15175,"public void test15175() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertNotNull(base64InputStream0);
}",0,assertNotNull(base64InputStream0)
project,0,test15177,"public void test15177() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertFalse(base64InputStream0.markSupported());
}",0,assertTrue(base64InputStream0.markSupported())
project,0,test15178,"public void test15178() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test15179,"public void test15179() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    assertEquals(6, byteArray0.length);
}",0,
project,0,test15180,"public void test15180() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    boolean boolean0 = base64InputStream0.markSupported();
    assertFalse(boolean0);
}",0,
project,0,test15182,"public void test15182() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    boolean boolean0 = base64InputStream0.markSupported();
    assertFalse(base64InputStream0.markSupported());
}",0,
project,0,test15183,"public void test15183() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    boolean boolean0 = base64InputStream0.markSupported();
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",0,
project,0,test15184,"public void test15184() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
    boolean boolean0 = base64InputStream0.markSupported();
    assertEquals(6, byteArray0.length);
}",0,
project,0,test16185,"public void test16185() throws Throwable {
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
    assertNotNull(base64InputStream0);
}",0,
project,0,test16186,"public void test16186() throws Throwable {
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
    assertFalse(base64InputStream0.markSupported());
}",0,assertFalse(base64InputStream0.markSupported())
project,0,test16187,"public void test16187() throws Throwable {
    Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
    byte[] byteArray0 = new byte[6];
    // Undeclared exception!
    try {
        base64InputStream0.read(byteArray0, (int) (byte) 0, 256);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.codec.binary.Base64InputStream"", e);
    }
}",1,
