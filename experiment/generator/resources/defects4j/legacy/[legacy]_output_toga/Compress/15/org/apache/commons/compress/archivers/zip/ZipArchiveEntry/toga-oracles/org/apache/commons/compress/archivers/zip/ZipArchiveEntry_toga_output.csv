project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test240,"public void test240() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    try {
        zipArchiveEntry0.setExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test251,"public void test251() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setCentralDirectoryExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test262,"public void test262() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField((ZipExtraField) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test273,"public void test273() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(0);
    zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Zip64 extended information must contain both size values in the local file header.
        //
        verifyException(""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"", e);
    }
}",0,
project,0,test284,"public void test284() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test295,"public void test295() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test306,"public void test306() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // name
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test317,"public void test317() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, ""s1aT[?@{%;&56t6i`d"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test388,"public void test388() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[6];
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipExtraFieldArray0[0] = (ZipExtraField) unparseableExtraFieldData0;
    // Undeclared exception!
    try {
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test409,"public void test409() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    // Undeclared exception!
    try {
        zipArchiveEntry0.setMethod((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test4110,"public void test4110() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""invalid entry size"");
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test6811,"public void test6811() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setSize((-524L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid entry size
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test7412,"public void test7412() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test7513,"public void test7513() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test7614,"public void test7614() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test7715,"public void test7715() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    ZipShort zipShort0 = unparseableExtraFieldData0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test7816,"public void test7816() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test7817,"public void test7817() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test7818,"public void test7818() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test7819,"public void test7819() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test7820,"public void test7820() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test7921,"public void test7921() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test7922,"public void test7922() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test7923,"public void test7923() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test7924,"public void test7924() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test7925,"public void test7925() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test8026,"public void test8026() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test8027,"public void test8027() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(""%]\"""", zipArchiveEntry0.getName());
}",0,assertNotNull(zipArchiveEntry0.getName())
project,0,test8028,"public void test8028() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test8029,"public void test8029() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test8030,"public void test8030() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
project,0,test8131,"public void test8131() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    assertNotNull(unparseableExtraFieldData0);
}",0,assertNotNull(unparseableExtraFieldData0)
project,0,test8132,"public void test8132() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",1,
project,0,test8133,"public void test8133() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test8134,"public void test8134() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test8135,"public void test8135() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test8236,"public void test8236() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    // Undeclared exception!
    try {
        zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test8337,"public void test8337() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test8338,"public void test8338() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test8339,"public void test8339() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test8340,"public void test8340() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test8341,"public void test8341() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test8342,"public void test8342() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test8443,"public void test8443() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
project,0,test8444,"public void test8444() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test8445,"public void test8445() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test8446,"public void test8446() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test8447,"public void test8447() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test8548,"public void test8548() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test8549,"public void test8549() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getMethod());
}",0,
project,0,test8650,"public void test8650() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test8751,"public void test8751() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test8752,"public void test8752() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test8753,"public void test8753() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test8754,"public void test8754() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test8755,"public void test8755() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test8856,"public void test8856() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test8857,"public void test8857() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test8858,"public void test8858() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getInternalAttributes())"
project,0,test8859,"public void test8859() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test8860,"public void test8860() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test8961,"public void test8961() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test8962,"public void test8962() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test8963,"public void test8963() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,
project,0,test8964,"public void test8964() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test8965,"public void test8965() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test9066,"public void test9066() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test9067,"public void test9067() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test9068,"public void test9068() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(""%]\"""", zipArchiveEntry0.getName());
}",0,assertNotNull(zipArchiveEntry0.getName())
project,0,test9069,"public void test9069() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test9070,"public void test9070() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test9071,"public void test9071() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test9172,"public void test9172() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test9173,"public void test9173() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test9174,"public void test9174() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test9175,"public void test9175() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test9176,"public void test9176() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test9277,"public void test9277() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test9378,"public void test9378() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,
project,0,test9379,"public void test9379() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry1.getInternalAttributes())"
project,0,test9380,"public void test9380() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test9381,"public void test9381() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test9382,"public void test9382() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
}",0,
project,0,test9383,"public void test9383() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1L), zipArchiveEntry1.getSize());
}",0,
project,0,test9484,"public void test9484() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r/8&E).&ivm/"");
    zipArchiveEntry0.setUnixMode(1865);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(1865, zipArchiveEntry0.getUnixMode());
}",0,"assertEquals(0, zipArchiveEntry0.getUnixMode())"
project,0,test9485,"public void test9485() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r/8&E).&ivm/"");
    zipArchiveEntry0.setUnixMode(1865);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(3, int0);
}",0,"assertEquals(1, int0)"
