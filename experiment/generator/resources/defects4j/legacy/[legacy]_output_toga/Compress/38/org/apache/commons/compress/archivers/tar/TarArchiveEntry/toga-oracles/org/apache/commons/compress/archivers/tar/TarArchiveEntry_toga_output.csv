project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test0001,"public void test0001() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertTrue(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test0002,"public void test0002() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0003,"public void test0003() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test0004,"public void test0004() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(""ustar "", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test0015,"public void test0015() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test0016,"public void test0016() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test0017,"public void test0017() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test0018,"public void test0018() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(""Minor device number is out of range: /"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test0019,"public void test0019() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test00210,"public void test00210() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(""SCHILY.realsize"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test00211,"public void test00211() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00212,"public void test00212() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test00213,"public void test00213() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test00214,"public void test00214() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test00215,"public void test00215() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test00216,"public void test00216() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test00217,"public void test00217() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test00318,"public void test00318() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test00319,"public void test00319() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertEquals(""\u0000\u0000"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test00320,"public void test00320() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test00321,"public void test00321() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test00322,"public void test00322() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertTrue(tarArchiveEntry0.isBlockDevice())
project,0,test00423,"public void test00423() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00424,"public void test00424() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test00425,"public void test00425() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test00426,"public void test00426() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test00427,"public void test00427() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test00428,"public void test00428() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(""/"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test00529,"public void test00529() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00530,"public void test00530() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(""Z$$4i|&L\""`qI8p"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test00531,"public void test00531() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test00532,"public void test00532() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,
project,0,test00533,"public void test00533() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test00634,"public void test00634() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertTrue(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test00635,"public void test00635() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test00636,"public void test00636() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test00637,"public void test00637() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(""ustar "", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test00638,"public void test00638() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00639,"public void test00639() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test00740,"public void test00740() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test00741,"public void test00741() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00742,"public void test00742() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test00743,"public void test00743() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test00744,"public void test00744() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test00745,"public void test00745() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test00746,"public void test00746() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,
project,0,test00747,"public void test00747() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test00748,"public void test00748() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isOldGNUSparse());
}",0,assertTrue(tarArchiveEntry0.isOldGNUSparse())
project,0,test00749,"public void test00749() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(""\u0000\u0000"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test00750,"public void test00750() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test00851,"public void test00851() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test00852,"public void test00852() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test00853,"public void test00853() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test00854,"public void test00854() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test00855,"public void test00855() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertFalse(tarArchiveEntry0.isDirectory())
project,0,test00856,"public void test00856() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00857,"public void test00857() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(""Length "", tarArchiveEntry0.getName());
}",0,
project,0,test00958,"public void test00958() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test00959,"public void test00959() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test00960,"public void test00960() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test00961,"public void test00961() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test00962,"public void test00962() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test00963,"public void test00963() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test00964,"public void test00964() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}",0,assertTrue(tarArchiveEntry0.isSymbolicLink())
project,0,test00965,"public void test00965() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}",0,
project,0,test00966,"public void test00966() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test00967,"public void test00967() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test00968,"public void test00968() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test01069,"public void test01069() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test01070,"public void test01070() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test01071,"public void test01071() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test01072,"public void test01072() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test01073,"public void test01073() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test01074,"public void test01074() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test01075,"public void test01075() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test01176,"public void test01176() throws Throwable {
    MockFile mockFile0 = new MockFile((File) null, ""GNU.sparse.realsize"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""GNU.sparse.realsize"");
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveEntry0.fillStarSparseData(hashMap0);
    boolean boolean0 = tarArchiveEntry0.isStarSparse();
    assertTrue(tarArchiveEntry0.isSparse());
}",0,assertTrue(tarArchiveEntry0.isSparse())
project,0,test01177,"public void test01177() throws Throwable {
    MockFile mockFile0 = new MockFile((File) null, ""GNU.sparse.realsize"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""GNU.sparse.realsize"");
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveEntry0.fillStarSparseData(hashMap0);
    boolean boolean0 = tarArchiveEntry0.isStarSparse();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01278,"public void test01278() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/ byte binary number0 byte binary number"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test01279,"public void test01279() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01280,"public void test01280() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getDevMinor());
}",0,
project,0,test01281,"public void test01281() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getGroupId());
}",0,
project,0,test01282,"public void test01282() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertEquals(0L, tarArchiveEntry1.getLongUserId());
}",0,
project,0,test01383,"public void test01383() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("":'^od||M },BT6w"");
    tarArchiveEntry0.setUserName("":'^od||M },BT6w"");
    tarArchiveEntry0.getUserName();
    assertEquals("":'^od||M },BT6w"", tarArchiveEntry0.getUserName());
}",0,
project,0,test01484,"public void test01484() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    tarArchiveEntry0.setIds(32, (byte) (-28));
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals((-28L), tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test01485,"public void test01485() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    tarArchiveEntry0.setIds(32, (byte) (-28));
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(32, int0);
}",0,
project,0,test01586,"public void test01586() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""`711./t<5S"", (byte) (-28), true);
    tarArchiveEntry0.setIds((-2431), (byte) (-28));
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals((-2431), int0);
}",0,
project,0,test01687,"public void test01687() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.setSize(2104L);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(2104L, long0);
}",0,"assertEquals(1, long0)"
project,0,test01788,"public void test01788() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test01789,"public void test01789() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test01790,"public void test01790() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test01791,"public void test01791() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test01792,"public void test01792() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test01793,"public void test01793() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test01794,"public void test01794() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,
project,0,test01795,"public void test01795() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test01796,"public void test01796() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test01897,"public void test01897() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"");
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test01898,"public void test01898() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"");
    tarArchiveEntry0.setMode(0);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test01999,"public void test01999() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.setMode((-3501));
    int int0 = tarArchiveEntry0.getMode();
    assertEquals((-3501), int0);
}",0,"assertEquals(0, int0)"
project,0,test020100,"public void test020100() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"");
    tarArchiveEntry0.setIds(33188, 0);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(33188L, long0);
}",0,
project,0,test021101,"public void test021101() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.setIds((-3501), 4098);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(4098L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test021102,"public void test021102() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.setIds((-3501), 4098);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals((-3501L), long0);
}",0,"assertEquals(1, long0)"
project,0,test022103,"public void test022103() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"");
    tarArchiveEntry0.setGroupId(508);
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(508L, long0);
}",0,"assertEquals(1, long0)"
project,0,test023104,"public void test023104() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""p$"");
    tarArchiveEntry0.setIds(1, (-2506));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals((-2506L), long0);
}",0,
project,0,test024105,"public void test024105() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar\u0000"", (byte) (-41));
    assertEquals("""", tarArchiveEntry0.getLinkName());
}",0,assertNotNull(tarArchiveEntry0.getLinkName())
project,0,test024106,"public void test024106() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar\u0000"", (byte) (-41));
    tarArchiveEntry0.setLinkName(""ustar\u0000"");
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(""ustar\u0000"", string0);
}",0,
project,0,test025107,"public void test025107() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.setNames(""uh=IXCm.X*%"", "" exceeds maximum signed long"");
    tarArchiveEntry0.getGroupName();
    assertEquals("" exceeds maximum signed long"", tarArchiveEntry0.getGroupName());
}",0,assertNotNull(tarArchiveEntry0.getGroupName())
project,0,test026108,"public void test026108() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.setIds((-3501), 4098);
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals(4098, int0);
}",0,
project,0,test027109,"public void test027109() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Cs#"");
    tarArchiveEntry0.setGroupId((-1850L));
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals((-1850L), tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test027110,"public void test027110() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Cs#"");
    tarArchiveEntry0.setGroupId((-1850L));
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals((-1850), int0);
}",0,"assertEquals(0, int0)"
project,0,test028111,"public void test028111() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(1, tarArchiveEntry0.getMode())"
project,0,test028112,"public void test028112() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test028113,"public void test028113() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test028114,"public void test028114() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test028115,"public void test028115() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test028116,"public void test028116() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test029117,"public void test029117() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test029118,"public void test029118() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test029119,"public void test029119() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test029120,"public void test029120() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(""Minor device number is out of range: /"", tarArchiveEntry0.getName());
}",0,
project,0,test029121,"public void test029121() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test030122,"public void test030122() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(""XJG&E"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test030123,"public void test030123() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test030124,"public void test030124() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test030125,"public void test030125() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test030126,"public void test030126() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test031127,"public void test031127() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setDevMinor(9561);
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(9561, int0);
}",0,
project,0,test032128,"public void test032128() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.setDevMajor(180);
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(180, int0);
}",0,
project,0,test033129,"public void test033129() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getDevMinor());
}",0,
project,0,test033130,"public void test033130() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getDevMajor());
}",0,
project,0,test033131,"public void test033131() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/ byte binary number0 byte binary number"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test033132,"public void test033132() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test033133,"public void test033133() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getUserId());
}",0,"assertEquals(0, tarArchiveEntry1.getUserId())"
project,0,test033134,"public void test033134() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(0L, tarArchiveEntry1.getLongGroupId());
}",0,
project,0,test034135,"public void test034135() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    byte[] byteArray0 = new byte[9];
    ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte) 54);
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.ByteBuffer"", e);
    }
}",0,
project,0,test035136,"public void test035136() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    doReturn((ByteBuffer) null).when(zipEncoding0).encode(anyString());
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader((byte[]) null, zipEncoding0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test036137,"public void test036137() throws Throwable {
    String string0 = ""4(7z< exM*tBz6;Us"";
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""4(7z< exM*tBz6;Us"", true);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) (-31);
    byteArray0[1] = (byte) 21;
    byte byte0 = (byte) 75;
    byteArray0[2] = (byte) 75;
    byteArray0[3] = (byte) 0;
    tarArchiveEntry0.setUserId((int) (byte) (-31));
    byteArray0[4] = (byte) 0;
    byteArray0[5] = (byte) 51;
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveEntry0.fillStarSparseData(hashMap0);
    byteArray0[6] = (byte) (-92);
    ByteBuffer byteBuffer0 = ByteBuffer.allocate(1000);
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    doReturn(byteBuffer0, (ByteBuffer) null).when(zipEncoding0).encode(anyString());
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test037138,"public void test037138() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""@&<5ZiR]4;W"", (byte) 103);
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",0,
project,0,test038139,"public void test038139() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setName((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test039140,"public void test039140() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z;R"", (byte) (-47), false);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setModTime((Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test040141,"public void test040141() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-95));
    byte[] byteArray0 = new byte[3];
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        tarArchiveEntry0.parseTarHeader(byteArray0, zipEncoding0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 99
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test041142,"public void test041142() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    // Undeclared exception!
    try {
        tarArchiveEntry0.parseTarHeader((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test042143,"public void test042143() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    // Undeclared exception!
    try {
        tarArchiveEntry0.isDescendent((TarArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test043144,"public void test043144() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillStarSparseData((Map<String, String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",0,
project,0,test044145,"public void test044145() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""g9fN-2"");
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillGNUSparse1xData((Map<String, String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test045146,"public void test045146() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 112, false);
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillGNUSparse0xData(hashMap0);
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // null
        //
        verifyException(""java.lang.Integer"", e);
    }
}",0,
project,0,test046147,"public void test046147() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 90, true);
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillGNUSparse0xData((Map<String, String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test047148,"public void test047148() throws Throwable {
    byte[] byteArray0 = new byte[2];
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 99
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test048149,"public void test048149() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test049150,"public void test049150() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test050151,"public void test050151() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte) 37, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test051152,"public void test051152() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte) (-53));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test052153,"public void test052153() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test053154,"public void test053154() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test054155,"public void test054155() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test055156,"public void test055156() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test055157,"public void test055157() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test055158,"public void test055158() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test055159,"public void test055159() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(""Z$$4i|&L\""`qI8p"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test055160,"public void test055160() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test055161,"public void test055161() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,
project,0,test056162,"public void test056162() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test056163,"public void test056163() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test056164,"public void test056164() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test056165,"public void test056165() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test056166,"public void test056166() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(""\u0000\u0000//"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test056167,"public void test056167() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test056168,"public void test056168() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test057169,"public void test057169() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test057170,"public void test057170() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test057171,"public void test057171() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test057172,"public void test057172() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test057173,"public void test057173() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(1, tarArchiveEntry0.getDevMajor())"
project,0,test057174,"public void test057174() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(""]"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test058175,"public void test058175() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test058176,"public void test058176() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test058177,"public void test058177() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test058178,"public void test058178() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(""EgTf$"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test058179,"public void test058179() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test058180,"public void test058180() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test058181,"public void test058181() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(1, tarArchiveEntry0.getDevMajor())"
project,0,test058182,"public void test058182() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test058183,"public void test058183() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(1, tarArchiveEntry0.getLongUserId())"
project,0,test059185,"public void test059185() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test059186,"public void test059186() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertTrue(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test059187,"public void test059187() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test059188,"public void test059188() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(""ustar "", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test059189,"public void test059189() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,
project,0,test059190,"public void test059190() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,
project,0,test060191,"public void test060191() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.setUserId(1L);
    assertEquals(1, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test061192,"public void test061192() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""cu(%MZ>C"");
    byte[] byteArray0 = new byte[5];
    // Undeclared exception!
    try {
        tarArchiveEntry0.parseTarHeader(byteArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 99
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",1,
project,0,test062193,"public void test062193() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test062194,"public void test062194() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test062195,"public void test062195() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(""TmT"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test062196,"public void test062196() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,
project,0,test062197,"public void test062197() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test062198,"public void test062198() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test063199,"public void test063199() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.setGroupName(""0\u0000"");
    assertEquals(""0\u0000"", tarArchiveEntry0.getGroupName());
}",0,assertNotNull(tarArchiveEntry0.getGroupName())
project,0,test064200,"public void test064200() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""r&5L"", (byte) 2, true);
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        tarArchiveEntry0.parseTarHeader((byte[]) null, zipEncoding0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test065201,"public void test065201() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test065202,"public void test065202() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test065203,"public void test065203() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/f.22n?U7cyST-0f.22n?U7cyST-"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test065204,"public void test065204() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test065205,"public void test065205() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test066206,"public void test066206() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test066207,"public void test066207() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test066208,"public void test066208() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}",0,assertTrue(tarArchiveEntry0.isGlobalPaxHeader())
project,0,test066209,"public void test066209() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test066210,"public void test066210() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test066211,"public void test066211() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test066212,"public void test066212() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isSparse());
}",0,assertFalse(tarArchiveEntry0.isSparse())
project,0,test066213,"public void test066213() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test067214,"public void test067214() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    assertFalse(tarArchiveEntry0.isSparse());
}",0,assertTrue(tarArchiveEntry0.isSparse())
project,0,test067215,"public void test067215() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveEntry0.fillStarSparseData(hashMap0);
    tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test068216,"public void test068216() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test068217,"public void test068217() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test068218,"public void test068218() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,
project,0,test068219,"public void test068219() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test068220,"public void test068220() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test068221,"public void test068221() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test068222,"public void test068222() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isSparse());
}",0,assertFalse(tarArchiveEntry0.isSparse())
project,0,test068223,"public void test068223() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test068224,"public void test068224() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test068225,"public void test068225() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertFalse(tarArchiveEntry0.isDirectory())
project,0,test068226,"public void test068226() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,
project,0,test068227,"public void test068227() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test068228,"public void test068228() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test069229,"public void test069229() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}",0,assertFalse(tarArchiveEntry0.isSymbolicLink())
project,0,test069230,"public void test069230() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test069231,"public void test069231() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}",0,assertTrue(tarArchiveEntry0.isGlobalPaxHeader())
project,0,test069232,"public void test069232() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertFalse(tarArchiveEntry0.isLink())
project,0,test069233,"public void test069233() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test069234,"public void test069234() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test069235,"public void test069235() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test069236,"public void test069236() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,
project,0,test069237,"public void test069237() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test070238,"public void test070238() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(""US-ASCII"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test070239,"public void test070239() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}",0,assertTrue(tarArchiveEntry0.isGlobalPaxHeader())
project,0,test070240,"public void test070240() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test070241,"public void test070241() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertTrue(tarArchiveEntry0.isBlockDevice())
project,0,test070242,"public void test070242() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test070243,"public void test070243() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test070244,"public void test070244() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test070245,"public void test070245() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test071246,"public void test071246() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test071247,"public void test071247() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(""+ c\""3u"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test071248,"public void test071248() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test071249,"public void test071249() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test071250,"public void test071250() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test072251,"public void test072251() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test072252,"public void test072252() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test072253,"public void test072253() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(""SCHILY.realsize"", tarArchiveEntry0.getName());
}",0,
project,0,test072254,"public void test072254() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test072255,"public void test072255() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test072256,"public void test072256() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test073257,"public void test073257() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test073258,"public void test073258() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test073259,"public void test073259() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test073260,"public void test073260() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test073261,"public void test073261() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test073262,"public void test073262() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test073263,"public void test073263() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test073264,"public void test073264() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test074265,"public void test074265() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertFalse(tarArchiveEntry0.isBlockDevice())
project,0,test074266,"public void test074266() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,
project,0,test074267,"public void test074267() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test074268,"public void test074268() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test074269,"public void test074269() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test074270,"public void test074270() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test074271,"public void test074271() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test074272,"public void test074272() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test075273,"public void test075273() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test075274,"public void test075274() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(1, tarArchiveEntry0.getDevMajor())"
project,0,test075275,"public void test075275() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test075276,"public void test075276() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test075277,"public void test075277() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test075278,"public void test075278() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test075279,"public void test075279() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,
project,0,test076280,"public void test076280() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isLink());
}",0,
project,0,test076281,"public void test076281() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test076282,"public void test076282() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test076283,"public void test076283() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test076284,"public void test076284() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test076285,"public void test076285() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test076286,"public void test076286() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isOldGNUSparse());
}",0,assertTrue(tarArchiveEntry0.isOldGNUSparse())
project,0,test076287,"public void test076287() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertTrue(tarArchiveEntry0.isBlockDevice())
project,0,test076288,"public void test076288() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test076289,"public void test076289() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}",0,assertTrue(tarArchiveEntry0.isSymbolicLink())
project,0,test076290,"public void test076290() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}",0,assertFalse(tarArchiveEntry0.isGlobalPaxHeader())
project,0,test076291,"public void test076291() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test076292,"public void test076292() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test077293,"public void test077293() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(""Minor device number is out of range: /"", tarArchiveEntry0.getName());
}",0,
project,0,test077294,"public void test077294() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test077295,"public void test077295() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test077296,"public void test077296() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test077297,"public void test077297() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test078298,"public void test078298() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test078299,"public void test078299() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test078300,"public void test078300() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test078301,"public void test078301() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test078302,"public void test078302() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test078303,"public void test078303() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test078304,"public void test078304() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}",0,
project,0,test078305,"public void test078305() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test078306,"public void test078306() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test078307,"public void test078307() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test079308,"public void test079308() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test079309,"public void test079309() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test079310,"public void test079310() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test079311,"public void test079311() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertTrue(tarArchiveEntry0.isOldGNUSparse());
}",0,assertTrue(tarArchiveEntry0.isOldGNUSparse())
project,0,test079312,"public void test079312() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test079313,"public void test079313() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test079314,"public void test079314() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test079315,"public void test079315() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test080316,"public void test080316() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test080317,"public void test080317() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test080318,"public void test080318() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test080319,"public void test080319() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isFile());
}",0,
project,0,test080320,"public void test080320() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,
project,0,test080321,"public void test080321() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,
project,0,test080322,"public void test080322() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test080323,"public void test080323() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test080324,"public void test080324() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test080325,"public void test080325() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,
project,0,test081326,"public void test081326() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertFalse(tarArchiveEntry0.isBlockDevice())
project,0,test081327,"public void test081327() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test081328,"public void test081328() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test081329,"public void test081329() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,
project,0,test081330,"public void test081330() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(""/"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test081331,"public void test081331() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test081332,"public void test081332() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test082333,"public void test082333() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test082334,"public void test082334() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}",0,assertFalse(tarArchiveEntry0.isGlobalPaxHeader())
project,0,test082335,"public void test082335() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test082336,"public void test082336() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test082337,"public void test082337() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test082338,"public void test082338() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test082339,"public void test082339() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}",0,
project,0,test082340,"public void test082340() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertFalse(tarArchiveEntry0.isCharacterDevice())
project,0,test082341,"public void test082341() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertFalse(tarArchiveEntry0.isBlockDevice())
project,0,test082342,"public void test082342() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test082343,"public void test082343() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isLink());
}",0,
project,0,test083344,"public void test083344() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(""US-ASCII"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test083345,"public void test083345() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test083346,"public void test083346() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertFalse(tarArchiveEntry0.isBlockDevice())
project,0,test083347,"public void test083347() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test083348,"public void test083348() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test083349,"public void test083349() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test083350,"public void test083350() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isSparse());
}",0,assertTrue(tarArchiveEntry0.isSparse())
project,0,test083351,"public void test083351() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test083352,"public void test083352() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test083353,"public void test083353() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,
project,0,test084354,"public void test084354() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertFalse(tarArchiveEntry0.isLink());
}",0,
project,0,test084355,"public void test084355() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test084356,"public void test084356() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}",0,assertFalse(tarArchiveEntry0.isGNUSparse())
project,0,test084357,"public void test084357() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(""US-ASCII"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test084358,"public void test084358() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test084359,"public void test084359() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test085360,"public void test085360() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test085361,"public void test085361() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test085362,"public void test085362() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test085363,"public void test085363() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test085364,"public void test085364() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test085365,"public void test085365() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test085366,"public void test085366() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test085367,"public void test085367() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test086368,"public void test086368() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test086369,"public void test086369() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test086370,"public void test086370() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test086371,"public void test086371() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test086372,"public void test086372() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test086373,"public void test086373() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,
project,0,test086374,"public void test086374() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,
project,0,test086375,"public void test086375() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test087376,"public void test087376() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test087377,"public void test087377() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test087378,"public void test087378() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test087379,"public void test087379() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test087380,"public void test087380() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,
project,0,test087381,"public void test087381() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test087382,"public void test087382() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,assertTrue(tarArchiveEntry0.isPaxHeader())
project,0,test087383,"public void test087383() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test087384,"public void test087384() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}",0,assertTrue(tarArchiveEntry0.isSymbolicLink())
project,0,test087385,"public void test087385() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test087386,"public void test087386() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test088387,"public void test088387() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setDevMinor((-2151));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minor device number is out of range: -2151
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",1,
project,0,test089388,"public void test089388() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""}/"", false);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setDevMajor((-28));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Major device number is out of range: -28
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",1,
project,0,test090389,"public void test090389() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test090390,"public void test090390() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test090391,"public void test090391() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test090392,"public void test090392() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test090393,"public void test090393() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test090394,"public void test090394() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test090395,"public void test090395() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test090396,"public void test090396() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test090397,"public void test090397() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test091398,"public void test091398() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""H*>9Vyg1xA)'kdQ+"", (byte) 23);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setSize((-2657L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Size is out of range: -2657
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",1,
project,0,test092399,"public void test092399() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(""TmT"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test092400,"public void test092400() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test092401,"public void test092401() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test092402,"public void test092402() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test092403,"public void test092403() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test092404,"public void test092404() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test092405,"public void test092405() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test092406,"public void test092406() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test093407,"public void test093407() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test093408,"public void test093408() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test093409,"public void test093409() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test093410,"public void test093410() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(""SCHILY.realsize"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test093411,"public void test093411() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test093412,"public void test093412() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test093413,"public void test093413() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test093414,"public void test093414() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test094415,"public void test094415() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test094416,"public void test094416() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test094417,"public void test094417() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(""\u0000\u0000//"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test094418,"public void test094418() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,
project,0,test094419,"public void test094419() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test094420,"public void test094420() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test095421,"public void test095421() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test095422,"public void test095422() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getFile();
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/ byte binary number0 byte binary number"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test095423,"public void test095423() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test095424,"public void test095424() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test096425,"public void test096425() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(""SCHILY.realsize"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test096426,"public void test096426() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test096427,"public void test096427() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test096428,"public void test096428() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test096429,"public void test096429() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test096430,"public void test096430() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test096431,"public void test096431() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test097432,"public void test097432() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test097433,"public void test097433() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test097434,"public void test097434() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(1, tarArchiveEntry0.getDevMajor())"
project,0,test097435,"public void test097435() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test097436,"public void test097436() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test097437,"public void test097437() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(""bXJ`I2+'9,vz!Fg?*"", tarArchiveEntry0.getName());
}",0,
project,0,test097438,"public void test097438() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test097439,"public void test097439() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test098440,"public void test098440() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    Map<String, String> map0 = ZoneId.SHORT_IDS;
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillGNUSparse1xData(map0);
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // null
        //
        verifyException(""java.lang.Integer"", e);
    }
}",0,
project,0,test099441,"public void test099441() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertTrue(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test099442,"public void test099442() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test099443,"public void test099443() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test099444,"public void test099444() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test099445,"public void test099445() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals(""ustar "", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test099446,"public void test099446() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,
project,0,test100447,"public void test100447() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test100448,"public void test100448() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(""TmT"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test100449,"public void test100449() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(0, int0);
}",0,
project,0,test100450,"public void test100450() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test100451,"public void test100451() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test101452,"public void test101452() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test101453,"public void test101453() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test101454,"public void test101454() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test101455,"public void test101455() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test101456,"public void test101456() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test101457,"public void test101457() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test101458,"public void test101458() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test102459,"public void test102459() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test102460,"public void test102460() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertTrue(tarArchiveEntry0.isBlockDevice())
project,0,test102461,"public void test102461() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(0, int0);
}",0,
project,0,test102462,"public void test102462() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test102463,"public void test102463() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test102464,"public void test102464() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test102465,"public void test102465() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test102466,"public void test102466() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test102467,"public void test102467() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test102468,"public void test102468() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}",0,assertTrue(tarArchiveEntry0.isGNUSparse())
project,0,test103469,"public void test103469() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(1, tarArchiveEntry0.getDevMajor())"
project,0,test103470,"public void test103470() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test103471,"public void test103471() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/ byte binary number0 byte binary number"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test103472,"public void test103472() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test103473,"public void test103473() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test104474,"public void test104474() throws Throwable {
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, zipEncoding0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test105475,"public void test105475() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test105476,"public void test105476() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test105477,"public void test105477() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test105478,"public void test105478() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(""US-ASCII"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test105479,"public void test105479() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test105480,"public void test105480() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test105481,"public void test105481() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(1, tarArchiveEntry0.getLongUserId())"
project,0,test105483,"public void test105483() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}",0,
project,0,test105484,"public void test105484() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test106485,"public void test106485() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test106486,"public void test106486() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test106487,"public void test106487() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test106488,"public void test106488() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test106489,"public void test106489() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test106490,"public void test106490() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test106491,"public void test106491() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test106492,"public void test106492() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}",0,assertTrue(tarArchiveEntry0.isSymbolicLink())
project,0,test106493,"public void test106493() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test106494,"public void test106494() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test106495,"public void test106495() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test106496,"public void test106496() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test107497,"public void test107497() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test107498,"public void test107498() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test107499,"public void test107499() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test107500,"public void test107500() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test107501,"public void test107501() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test107502,"public void test107502() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test107503,"public void test107503() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test107504,"public void test107504() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test107505,"public void test107505() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test108506,"public void test108506() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test108507,"public void test108507() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test108508,"public void test108508() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test108509,"public void test108509() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(1, tarArchiveEntry0.getLongGroupId())"
project,0,test108510,"public void test108510() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test108511,"public void test108511() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test108512,"public void test108512() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test108513,"public void test108513() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test108514,"public void test108514() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test108515,"public void test108515() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test108516,"public void test108516() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}",0,assertTrue(tarArchiveEntry0.isGNUSparse())
project,0,test108517,"public void test108517() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test108518,"public void test108518() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test109519,"public void test109519() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test109520,"public void test109520() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test109521,"public void test109521() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}",0,
project,0,test109522,"public void test109522() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test109523,"public void test109523() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(1, tarArchiveEntry0.getUserId())"
project,0,test109524,"public void test109524() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test109525,"public void test109525() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(1, tarArchiveEntry0.getMode())"
project,0,test109526,"public void test109526() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertFalse(tarArchiveEntry0.isSparse());
}",0,assertTrue(tarArchiveEntry0.isSparse())
project,0,test110527,"public void test110527() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertFalse(tarArchiveEntry0.isFIFO());
}",0,assertTrue(tarArchiveEntry0.isFIFO())
project,0,test110528,"public void test110528() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}",0,assertTrue(tarArchiveEntry0.isGlobalPaxHeader())
project,0,test110529,"public void test110529() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test110530,"public void test110530() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test110531,"public void test110531() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertTrue(tarArchiveEntry0.isBlockDevice())
project,0,test110532,"public void test110532() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test110533,"public void test110533() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertFalse(tarArchiveEntry0.isLink());
}",0,assertTrue(tarArchiveEntry0.isLink())
project,0,test111534,"public void test111534() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test111535,"public void test111535() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test111536,"public void test111536() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertTrue(tarArchiveEntry0.isBlockDevice())
project,0,test111537,"public void test111537() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}",0,assertTrue(tarArchiveEntry0.isSymbolicLink())
project,0,test111538,"public void test111538() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}",0,
project,0,test111539,"public void test111539() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test111540,"public void test111540() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test111541,"public void test111541() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test112542,"public void test112542() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test112543,"public void test112543() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(1, tarArchiveEntry0.getLongGroupId())"
project,0,test112544,"public void test112544() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,
project,0,test112545,"public void test112545() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test112546,"public void test112546() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertTrue(tarArchiveEntry0.isBlockDevice())
project,0,test112547,"public void test112547() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test112548,"public void test112548() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test112549,"public void test112549() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test112550,"public void test112550() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test112551,"public void test112551() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test113552,"public void test113552() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test113553,"public void test113553() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(1, tarArchiveEntry0.getDevMinor())"
project,0,test113554,"public void test113554() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test113555,"public void test113555() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test113556,"public void test113556() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test113557,"public void test113557() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test113558,"public void test113558() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test113559,"public void test113559() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test114560,"public void test114560() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    byte[] byteArray0 = new byte[8];
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 8
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test115561,"public void test115561() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertFalse(tarArchiveEntry0.isBlockDevice())
project,0,test115562,"public void test115562() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test115563,"public void test115563() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(""/"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test115564,"public void test115564() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test115565,"public void test115565() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test115566,"public void test115566() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test115567,"public void test115567() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test116568,"public void test116568() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    MockFile.createTempFile("" exceeds maximum signed long"", "", /"", (File) mockFile0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(""Minor device number is out of range: /"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test116569,"public void test116569() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    MockFile.createTempFile("" exceeds maximum signed long"", "", /"", (File) mockFile0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test116570,"public void test116570() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    MockFile.createTempFile("" exceeds maximum signed long"", "", /"", (File) mockFile0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test116571,"public void test116571() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    MockFile.createTempFile("" exceeds maximum signed long"", "", /"", (File) mockFile0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(16877, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test117572,"public void test117572() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    assertEquals(""/"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test117573,"public void test117573() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    tarArchiveEntry0.setName("""");
    assertEquals("""", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test118574,"public void test118574() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,
project,0,test118575,"public void test118575() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test118576,"public void test118576() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,
project,0,test118577,"public void test118577() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test118578,"public void test118578() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isLink());
}",0,
project,0,test118579,"public void test118579() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isOldGNUSparse());
}",0,assertTrue(tarArchiveEntry0.isOldGNUSparse())
project,0,test118580,"public void test118580() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongLinkEntry())
project,0,test118581,"public void test118581() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test118582,"public void test118582() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(""AJeNewn|eBElUQ!="", string0);
}",0,assertNotNull(string0)
project,0,test119583,"public void test119583() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test119584,"public void test119584() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test119585,"public void test119585() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}",0,assertTrue(tarArchiveEntry0.isGNULongNameEntry())
project,0,test119586,"public void test119586() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,assertTrue(tarArchiveEntry0.isPaxHeader())
project,0,test119587,"public void test119587() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test119588,"public void test119588() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongGroupId())"
project,0,test119589,"public void test119589() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}",0,assertTrue(tarArchiveEntry0.isBlockDevice())
project,0,test119590,"public void test119590() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMinor())"
project,0,test119591,"public void test119591() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test119592,"public void test119592() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test120593,"public void test120593() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test120594,"public void test120594() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test120595,"public void test120595() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(33188, int0);
}",0,
project,0,test120596,"public void test120596() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}",0,"assertEquals(1, tarArchiveEntry0.getDevMinor())"
project,0,test120597,"public void test120597() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertFalse(tarArchiveEntry0.isLink());
}",0,
project,0,test120598,"public void test120598() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test120599,"public void test120599() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test120600,"public void test120600() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test120601,"public void test120601() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test121602,"public void test121602() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}",0,assertTrue(tarArchiveEntry0.isCharacterDevice())
project,0,test121603,"public void test121603() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals("", "", tarArchiveEntry0.getName());
}",0,
project,0,test121604,"public void test121604() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
project,0,test121605,"public void test121605() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}",0,"assertEquals(0, tarArchiveEntry0.getGroupId())"
project,0,test121606,"public void test121606() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test121607,"public void test121607() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getLongUserId())"
project,0,test121608,"public void test121608() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}",0,assertTrue(tarArchiveEntry0.isPaxHeader())
project,0,test121609,"public void test121609() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,"assertEquals(0, tarArchiveEntry0.getMode())"
project,0,test121610,"public void test121610() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}",0,assertTrue(tarArchiveEntry0.isSymbolicLink())
project,0,test121611,"public void test121611() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}",0,assertTrue(tarArchiveEntry0.isGNUSparse())
project,0,test121612,"public void test121612() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(0, tarArchiveEntry0.getDevMajor())"
project,0,test122613,"public void test122613() throws Throwable {
    byte[] byteArray0 = new byte[3];
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 99
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test123614,"public void test123614() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}",0,assertNotNull(tarArchiveEntry0.getName())
project,0,test123615,"public void test123615() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}",0,"assertEquals(1, tarArchiveEntry0.getDevMajor())"
project,0,test123616,"public void test123616() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}",0,
project,0,test123617,"public void test123617() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(0, tarArchiveEntry0.getUserId());
}",0,"assertEquals(0, tarArchiveEntry0.getUserId())"
project,0,test123618,"public void test123618() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(0L, tarArchiveEntry0.getSize());
}",0,"assertEquals(0, tarArchiveEntry0.getSize())"
project,0,test123619,"public void test123619() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test123620,"public void test123620() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertFalse(tarArchiveEntry0.isDirectory());
}",0,assertTrue(tarArchiveEntry0.isDirectory())
