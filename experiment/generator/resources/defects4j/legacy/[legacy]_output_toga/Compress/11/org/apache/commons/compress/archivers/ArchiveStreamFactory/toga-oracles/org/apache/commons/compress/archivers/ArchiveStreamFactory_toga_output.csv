project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 1881);
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) bufferedInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not use reset and mark operations.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) dataInputStream0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.FilterInputStream"", e);
    }
}",1,
project,0,test022,"public void test022() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-115), 1388);
    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) bufferedInputStream0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 12);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) pushbackInputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Mark is not supported.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Stream must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test055,"public void test055() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    try {
        archiveStreamFactory0.createArchiveOutputStream(""dump"", byteArrayOutputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Archiver: dump not found.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test066,"public void test066() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream(""cpio"", pipedOutputStream0);
    assertNotNull(archiveOutputStream0);
}",1,
project,0,test077,"public void test077() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = (TarArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream(""tar"", byteArrayOutputStream0);
    assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
}",1,
project,0,test088,"public void test088() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    MockFile mockFile0 = new MockFile(""cpio"", ""L_?Qx<(wwxMQxd~k}&"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
    JarArchiveOutputStream jarArchiveOutputStream0 = (JarArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream(""jar"", mockPrintStream0);
    assertEquals(""UTF8"", jarArchiveOutputStream0.getEncoding());
}",0,assertNotNull(jarArchiveOutputStream0.getEncoding())
project,0,test099,"public void test099() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    ArArchiveOutputStream arArchiveOutputStream0 = (ArArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream(""ar"", filterOutputStream0);
    assertEquals(0, ArArchiveOutputStream.LONGFILE_ERROR);
}",1,
project,0,test1010,"public void test1010() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveOutputStream(""BokyF;97;ZK9g9W%|~"", (OutputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // OutputStream must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(657);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveOutputStream((String) null, byteArrayOutputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Archivername must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test1212,"public void test1212() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = (ZipArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream(""zip"", byteArrayOutputStream0);
    assertEquals(0, ZipArchiveOutputStream.STORED);
}",1,
project,0,test1313,"public void test1313() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 24, (byte) 24);
    try {
        archiveStreamFactory0.createArchiveInputStream(""dump"", (InputStream) byteArrayInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // unexpected EOF
        //
        verifyException(""org.apache.commons.compress.archivers.dump.DumpArchiveInputStream"", e);
    }
}",1,
project,0,test1414,"public void test1414() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    try {
        archiveStreamFactory0.createArchiveInputStream(""]e"", (InputStream) pipedInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Archiver: ]e not found.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test1515,"public void test1515() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
    ArchiveInputStream archiveInputStream1 = archiveStreamFactory0.createArchiveInputStream(""jar"", (InputStream) archiveInputStream0);
    assertNotNull(archiveInputStream1);
}",1,
project,0,test1616,"public void test1616() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 498);
    TarArchiveInputStream tarArchiveInputStream0 = (TarArchiveInputStream) archiveStreamFactory0.createArchiveInputStream(""tar"", (InputStream) bufferedInputStream0);
    assertEquals(512, tarArchiveInputStream0.getRecordSize());
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
    ArchiveInputStream archiveInputStream1 = archiveStreamFactory0.createArchiveInputStream(""zip"", (InputStream) archiveInputStream0);
    assertNotNull(archiveInputStream1);
}",1,
project,0,test1818,"public void test1818() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream(""ar"", (InputStream) pipedInputStream0);
    assertNotNull(archiveInputStream0);
}",1,
project,0,test1919,"public void test1919() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream(""=U.L$D"", (InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // InputStream must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2020,"public void test2020() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    byte[] byteArray0 = new byte[13];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 14, (byte) 14);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((String) null, (InputStream) byteArrayInputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Archivername must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2121,"public void test2121() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
    ArchiveInputStream archiveInputStream1 = archiveStreamFactory0.createArchiveInputStream(""cpio"", (InputStream) archiveInputStream0);
    assertNotNull(archiveInputStream1);
}",1,
