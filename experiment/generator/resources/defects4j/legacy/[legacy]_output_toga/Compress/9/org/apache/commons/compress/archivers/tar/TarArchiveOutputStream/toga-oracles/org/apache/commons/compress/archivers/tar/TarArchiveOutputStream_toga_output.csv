project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    byteArrayOutputStream0.writeTo(tarArchiveOutputStream0);
    assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
}",0,"assertEquals(0, tarArchiveOutputStream0.getBytesWritten())"
project,0,test011,"public void test011() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    PrintStream printStream0 = mockPrintStream0.append('W');
    DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(dataOutputStream0);
    TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry) tarArchiveOutputStream0.createArchiveEntry(mockFile0, """");
    assertEquals(""elliottzackrone"", tarArchiveEntry0.getUserName());
}",0,assertNotNull(tarArchiveEntry0.getUserName())
project,0,test022,"public void test022() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" bytes)"", false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("""", 63L);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry(arArchiveEntry0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.apache.commons.compress.archivers.ar.ArArchiveEntry cannot be cast to org.apache.commons.compress.archivers.tar.TarArchiveEntry
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    MockFile mockFile0 = new MockFile(""'@"", ""D(i:WAj-XQ83E8"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 54);
    ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, """");
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.flush();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.FilterOutputStream"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.finish();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.utils.CountingOutputStream"", e);
    }
}",1,
project,0,test066,"public void test066() throws Throwable {
    MockFile mockFile0 = new MockFile(""G?Gx"", ""G?Gx"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(tarArchiveOutputStream0, false);
    TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(mockPrintStream0, 2);
    // Undeclared exception!
    try {
        tarArchiveOutputStream1.finish();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",1,
project,0,test077,"public void test077() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""P7"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.createArchiveEntry((File) null, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",0,
project,0,test098,"public void test098() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 0, 1);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.close();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.utils.CountingOutputStream"", e);
    }
}",0,
project,0,test109,"public void test109() throws Throwable {
    File file0 = MockFile.createTempFile(""Z6N!L8e6!=J?(JzYNZQ"", ""Z6N!L8e6!=J?(JzYNZQ"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 55, 5567);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.close();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test1110,"public void test1110() throws Throwable {
    MockFile mockFile0 = new MockFile("","", "","");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 4665, 4665);
    FileSystemHandling.shouldAllThrowIOExceptions();
    try {
        tarArchiveOutputStream0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Simulated IOException
        //
        verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
    }
}",0,
project,0,test1211,"public void test1211() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""' bytes for entry '"");
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, (-4869), (-1));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test1312,"public void test1312() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""Unknown header type"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    TarArchiveOutputStream tarArchiveOutputStream1 = null;
    try {
        tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, 512, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // / by zero
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test1413,"public void test1413() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, (-374));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test1514,"public void test1514() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""xfe!*`l@X1"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    tarArchiveOutputStream0.close();
    MockFile mockFile0 = new MockFile(""' bytes specified in the header were written"", ""iuKQ=,{jc2|fvlSo_j"");
    try {
        tarArchiveOutputStream0.createArchiveEntry(mockFile0, """");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream has already been finished
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",0,
project,0,test1615,"public void test1615() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" bytes)"", false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    byte[] byteArray0 = new byte[2];
    try {
        tarArchiveOutputStream0.write(byteArray0, (int) (byte) (-39), (int) (byte) 100);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // request to write '100' bytes exceeds size in header of '0' bytes for entry 'null'
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test1716,"public void test1716() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" bytes)"", false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    byte[] byteArray0 = new byte[2];
    tarArchiveOutputStream0.write(byteArray0, (int) (byte) (-39), (int) (byte) (-124));
    assertEquals((-124L), tarArchiveOutputStream0.getBytesWritten());
}",0,"assertEquals(0, tarArchiveOutputStream0.getBytesWritten())"
project,0,test1817,"public void test1817() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(10240);
    pipedOutputStream0.connect(pipedInputStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(pipedOutputStream0);
    tarArchiveOutputStream0.close();
    try {
        tarArchiveOutputStream0.closeArchiveEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream has already been finished
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test1918,"public void test1918() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" bytes)"", false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    try {
        tarArchiveOutputStream0.closeArchiveEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No current entry to close
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test2019,"public void test2019() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" bytes)"", false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    MockFile mockFile0 = new MockFile("" bytes)"", ""S"");
    ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, ""~X\""GRO_L&04gj6OR|G"");
    tarArchiveOutputStream0.putArchiveEntry(archiveEntry0);
    tarArchiveOutputStream0.closeArchiveEntry();
    assertEquals(0, tarArchiveOutputStream0.getCount());
}",0,"assertEquals(0, tarArchiveOutputStream0.getCount())"
project,0,test2120,"public void test2120() throws Throwable {
    MockFile mockFile0 = new MockFile(""b&WezVn38K"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 553);
    tarArchiveOutputStream0.finish();
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""GZb,`{Y\rtz&,y"", (byte) (-53));
    try {
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream has already been finished
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",0,
project,0,test2221,"public void test2221() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""xfe!*`l@X1"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    tarArchiveOutputStream0.close();
    tarArchiveOutputStream0.close();
    assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
}",0,
project,0,test2322,"public void test2322() throws Throwable {
    DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(dataOutputStream0, 10240);
    MockFile mockFile0 = new MockFile("""");
    ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, """");
    tarArchiveOutputStream0.putArchiveEntry(archiveEntry0);
    try {
        tarArchiveOutputStream0.finish();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // This archives contains unclosed entries.
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test2423,"public void test2423() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" but is "");
    DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    tarArchiveOutputStream0.close();
    try {
        tarArchiveOutputStream0.finish();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // This archive has already been finished
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test2524,"public void test2524() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""xfe!*`l@X1"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    tarArchiveOutputStream0.setLongFileMode((-653));
    assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
}",0,
project,0,test2625,"public void test2625() throws Throwable {
    MockFile mockFile0 = new MockFile(""'@"", ""D(i:WAj-XQ83E8"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 54);
    int int0 = tarArchiveOutputStream0.getRecordSize();
    assertEquals(512, int0);
}",0,"assertEquals(0, int0)"
project,0,test2726,"public void test2726() throws Throwable {
    MockFile mockFile0 = new MockFile(""!"", ""!"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    tarArchiveOutputStream0.flush();
    assertEquals(0, tarArchiveOutputStream0.getCount());
}",0,"assertEquals(1, tarArchiveOutputStream0.getCount())"
project,0,test2827,"public void test2827() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(pipedOutputStream0);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry((ArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
