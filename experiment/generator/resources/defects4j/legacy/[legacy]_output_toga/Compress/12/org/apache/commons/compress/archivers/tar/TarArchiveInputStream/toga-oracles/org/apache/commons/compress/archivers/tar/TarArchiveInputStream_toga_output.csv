project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    File file0 = MockFile.createTempFile(""input buffer is closed"", ""input buffer is closed"");
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 0);
    long long0 = tarArchiveInputStream0.skip(0);
    assertEquals(0L, long0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
    tarArchiveInputStream0.setAtEOF(true);
    boolean boolean0 = tarArchiveInputStream0.isAtEOF();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test022,"public void test022() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(891);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, 891, (-1356));
    int int0 = tarArchiveInputStream0.getRecordSize();
    assertEquals((-1356), int0);
}",0,"assertEquals(1, int0)"
project,0,test033,"public void test033() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 65, 0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte) 59);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pushbackInputStream0, 65, (-1052));
    // Undeclared exception!
    try {
        tarArchiveInputStream0.parsePaxHeaders((Reader) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveInputStream"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-103), (-2820));
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
    PipedReader pipedReader0 = new PipedReader();
    try {
        tarArchiveInputStream0.parsePaxHeaders(pipedReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0);
    try {
        tarArchiveInputStream0.getNextTarEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    File file0 = MockFile.createTempFile(""input buffer is closed"", ""input buffer is closed"");
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 0);
    // Undeclared exception!
    try {
        tarArchiveInputStream0.getNextEntry();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    TarArchiveInputStream tarArchiveInputStream0 = null;
    try {
        tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-2880), (-2880));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    TarArchiveInputStream tarArchiveInputStream0 = null;
    try {
        tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0, (byte) 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // / by zero
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = null;
    try {
        tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-257));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0);
    byte[] byteArray0 = new byte[5];
    int int0 = tarArchiveInputStream0.read(byteArray0, 0, (int) (byte) 40);
    assertEquals((-1), int0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    byte[] byteArray0 = new byte[2];
    boolean boolean0 = TarArchiveInputStream.matches(byteArray0, (byte) 67);
    assertFalse(boolean0);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        TarArchiveInputStream.matches(byteArray0, 1811);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 257
        //
        verifyException(""org.apache.commons.compress.utils.ArchiveUtils"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-126), 1039);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2599);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(bufferedInputStream0, 2599);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""?mXq[jk3"");
    boolean boolean0 = tarArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1616,"public void test1616() throws Throwable {
    File file0 = MockFile.createTempFile(""^/\""jW {GAaT0/"", ""ZipEightByteInteger value: "");
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 679, 679);
    tarArchiveInputStream0.getNextTarEntry();
    tarArchiveInputStream0.getNextTarEntry();
    assertEquals((-1), mockFileInputStream0.available());
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 7;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 108, (byte) 7);
    // Undeclared exception!
    try {
        tarArchiveInputStream0.getNextTarEntry();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 100
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
    long long0 = tarArchiveInputStream0.skip(2147483647L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1919,"public void test1919() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
    long long0 = tarArchiveInputStream0.skip(1933L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2020,"public void test2020() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(bufferedInputStream0, 715);
    long long0 = tarArchiveInputStream0.skip((byte) (-72));
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2121,"public void test2121() throws Throwable {
    File file0 = MockFile.createTempFile(""^/\""jW {GAaT0/"", ""ZipEightByteInteger value: "");
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 679, 679);
    int int0 = tarArchiveInputStream0.available();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2222,"public void test2222() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
    tarArchiveInputStream0.setAtEOF(true);
    ArchiveEntry archiveEntry0 = tarArchiveInputStream0.getNextEntry();
    assertNull(archiveEntry0);
}",0,assertNotNull(archiveEntry0)
project,0,test2323,"public void test2323() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-126), 1039);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2599);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(bufferedInputStream0, 2599);
    TarArchiveEntry tarArchiveEntry0 = tarArchiveInputStream0.getCurrentEntry();
    assertNull(tarArchiveEntry0);
}",0,assertNotNull(tarArchiveEntry0)
project,0,test2424,"public void test2424() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
    try {
        tarArchiveInputStream0.getNextEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // input buffer is closed
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""{LO[+G`'|8EET1"", false);
    tarArchiveInputStream0.setCurrentEntry(tarArchiveEntry0);
    assertEquals("""", tarArchiveEntry0.getGroupName());
}",0,assertNotNull(tarArchiveEntry0.getGroupName())
project,0,test2626,"public void test2626() throws Throwable {
    File file0 = MockFile.createTempFile(""^/\""jW {GAaT0/"", ""ZipEightByteInteger value: "");
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 679, 679);
    tarArchiveInputStream0.close();
    assertEquals(0, tarArchiveInputStream0.available());
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    File file0 = MockFile.createTempFile(""^/\""jW {GAaT0/"", ""ZipEightByteInteger value: "");
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 679, 679);
    int int0 = tarArchiveInputStream0.getRecordSize();
    assertEquals(679, int0);
}",0,"assertEquals(1, int0)"
project,0,test2828,"public void test2828() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
    tarArchiveInputStream0.reset();
    assertEquals(0, tarArchiveInputStream0.available());
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
    boolean boolean0 = tarArchiveInputStream0.isAtEOF();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
