project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test082,"public void test082() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
    // Undeclared exception!
    try {
        zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
        fail(""Expecting exception: IOException"");
    } catch (Throwable e) {
        //
        // Stream closed
        //
        verifyException(""java.io.PushbackInputStream"", e);
    }
}",0,
project,0,test103,"public void test103() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    MockFile mockFile0 = new MockFile((File) null, """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", "" ~aM"", 18);
    SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
    MockIOException mockIOException0 = new MockIOException("""", sQLDataException0);
    zipArchiveEntry0.equals(mockIOException0);
    zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
    byte[] byteArray0 = null;
    int int0 = zipArchiveInputStream0.read();
    zipArchiveInputStream0.read((byte[]) null, 3811, (-1927));
    int int1 = 1870;
    zipArchiveInputStream0.reset();
    zipArchiveInputStream0.mark(int1);
    long long0 = 255L;
    zipArchiveInputStream0.skip(long0);
    zipArchiveInputStream0.close();
    int int2 = (-1494);
    try {
        zipArchiveInputStream0.read(byteArray0, int0, int2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // mark/reset not supported
        //
        verifyException(""java.io.InputStream"", e);
    }
}",1,
project,0,test174,"public void test174() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(2568);
    int int0 = 1400;
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1400);
    bufferedInputStream0.markSupported();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, """", true);
    zipArchiveInputStream0.getNextZipEntry();
    ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
    // Undeclared exception!
    try {
        zipArchiveInputStream0.skip(zipArchiveEntry0.PLATFORM_FAT);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        //
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test185,"public void test185() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 54;
    zipArchiveInputStream0.read(byteArray0, (int) (byte) 54, (int) (byte) 54);
    zipArchiveInputStream0.getNextZipEntry();
    try {
        zipArchiveInputStream0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",1,
project,0,test196,"public void test196() throws Throwable {
    byte[] byteArray0 = null;
    int int0 = 45;
    // Undeclared exception!
    try {
        ZipArchiveInputStream.matches((byte[]) null, 45);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
project,0,test299,"public void test299() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 54;
    zipArchiveInputStream0.close();
    zipArchiveInputStream0.read(byteArray0, (int) (byte) 54, (int) (byte) 54);
    try {
        zipArchiveInputStream0.getNextZipEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // The stream is closed
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
project,0,test3110,"public void test3110() throws Throwable {
    FileSystemHandling.shouldAllThrowIOExceptions();
    byte[] byteArray0 = new byte[0];
    int int0 = 2181;
    // Undeclared exception!
    try {
        ZipArchiveInputStream.matches(byteArray0, 2181);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
