project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    String string0 = ""x+,#@H\\z=0e(X(p>"";
    String string1 = ""3hQ\""~ejLg;=`mCF'-$5"";
    String string2 = """";
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) 0;
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) 0;
    byteArray0[3] = (byte) 0;
    byteArray0[4] = (byte) 89;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // No Archiver found for the stream signature
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test011,"public void test011() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(""#1/"");
    String string0 = "")'xg+s;M5w0D$s#tbs"";
    // Undeclared exception!
    try {
        archiveStreamFactory0.setEntryEncoding("")'xg+s;M5w0D$s#tbs"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Cannot overide encoding set by the constructor
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test022,"public void test022() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    String string0 = ""g}t"";
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    int int0 = 1228;
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1228);
    pipedInputStream0.mark(1228);
    DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
    try {
        archiveStreamFactory0.createArchiveInputStream(""g}t"", (InputStream) dataInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Archiver: g}t not found.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test033,"public void test033() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("""");
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 21;
    byteArray0[1] = (byte) (-58);
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 59;
    byteArray0[4] = (byte) 1;
    byteArray0[5] = (byte) 61;
    byteArray0[6] = (byte) 55;
    byteArray0[7] = (byte) 95;
    FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
    byteArray0[8] = (byte) (-8);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 122);
    byteArrayInputStream0.read(byteArray0);
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // No Archiver found for the stream signature
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    String string0 = ""z:"";
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    String string1 = "" read="";
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    mockFile0.setReadOnly();
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    try {
        archiveStreamFactory0.createArchiveOutputStream("" read="", mockPrintStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Archiver:  read= not found.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test066,"public void test066() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    archiveStreamFactory0.setEntryEncoding(""VL_ILzC|G=W9wsC}}&e"");
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream(""zip"", (InputStream) pipedInputStream0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // VL_ILzC|G=W9wsC}}&e
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",1,
project,0,test088,"public void test088() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    archiveStreamFactory0.setEntryEncoding("""");
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 30;
    byteArray0[1] = (byte) (-1);
    byteArray0[2] = (byte) (-19);
    byteArray0[3] = (byte) (-91);
    byteArray0[4] = (byte) (-91);
    byteArray0[6] = (byte) (-117);
    byteArray0[7] = (byte) 0;
    byteArray0[8] = (byte) 70;
    byteArrayOutputStream0.write(byteArray0);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveOutputStream(""tar"", byteArrayOutputStream0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        //
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",1,
project,0,test099,"public void test099() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("""");
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream("""", (InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // InputStream must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test1110,"public void test1110() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(""jar"");
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveOutputStream(""jar"", (OutputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // OutputStream must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test1211,"public void test1211() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(""@w,4Gt<*hB:-f3ha~^"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(""_"");
    try {
        archiveStreamFactory0.createArchiveOutputStream(""@w,4Gt<*hB:-f3ha~^"", mockPrintStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Archiver: @w,4Gt<*hB:-f3ha~^ not found.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test1312,"public void test1312() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    archiveStreamFactory0.getEntryEncoding();
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Stream must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",0,
project,0,test1413,"public void test1413() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory((String) null);
    String string0 = ""s>"";
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream(""s>"", (InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // InputStream must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test1514,"public void test1514() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
    try {
        archiveStreamFactory0.createArchiveInputStream(""]p~+@BV1@"", (InputStream) dataInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Archiver: ]p~+@BV1@ not found.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test1615,"public void test1615() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    String string0 = "","";
    MockFile mockFile0 = new MockFile(""'PF:vg&>96:qIxO"", ""ar"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    String string1 = ""G{?"";
    try {
        archiveStreamFactory0.createArchiveOutputStream("""", mockPrintStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Archiver:  not found.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test1716,"public void test1716() throws Throwable {
    String string0 = ""Archiver: "";
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(""Archiver: "");
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Stream must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",0,
project,0,test1817,"public void test1817() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 96;
    byteArray0[1] = (byte) 33;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // No Archiver found for the stream signature
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",0,
project,0,test1918,"public void test1918() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    archiveStreamFactory0.setEntryEncoding("".jb1AOICW"");
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) pipedInputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Mark is not supported.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2019,"public void test2019() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 59;
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) 0;
    byteArray0[3] = (byte) (-62);
    byteArray0[4] = (byte) 23;
    byteArray0[5] = (byte) (-21);
    byteArray0[6] = (byte) 7;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 59);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((String) null, (InputStream) byteArrayInputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Archivername must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2120,"public void test2120() throws Throwable {
    String string0 = ""=KsU+-"";
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(""=KsU+-"");
    archiveStreamFactory0.getEntryEncoding();
    MockPrintStream mockPrintStream0 = new MockPrintStream(""jar"");
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
    MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, false);
    mockPrintStream1.print((Object) null);
    try {
        archiveStreamFactory0.createArchiveOutputStream(""=KsU+-"", mockPrintStream1);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Archiver: =KsU+- not found.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2221,"public void test2221() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    pipedOutputStream0.flush();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    pipedInputStream0.close();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) bufferedInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not use reset and mark operations.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2322,"public void test2322() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("""");
    // Undeclared exception!
    try {
        archiveStreamFactory0.setEntryEncoding("""");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Cannot overide encoding set by the constructor
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2423,"public void test2423() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    archiveStreamFactory0.getEntryEncoding();
    archiveStreamFactory0.getEntryEncoding();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveOutputStream((String) null, pipedOutputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Archivername must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2524,"public void test2524() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveOutputStream((String) null, filterOutputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Archivername must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2726,"public void test2726() throws Throwable {
    String string0 = null;
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory((String) null);
    archiveStreamFactory0.setEntryEncoding((String) null);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    pipedOutputStream0.close();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    pipedInputStream0.markSupported();
    archiveStreamFactory0.createArchiveInputStream(""jar"", (InputStream) pipedInputStream0);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) pipedInputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Mark is not supported.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",1,
project,0,test2827,"public void test2827() throws Throwable {
    char[] charArray0 = new char[4];
    charArray0[0] = 'i';
    char char0 = '+';
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(""W#ikA<b"");
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 72;
    byteArray0[1] = (byte) 29;
    byteArray0[2] = (byte) (-33);
    byteArray0[3] = (byte) 1;
    byteArray0[4] = (byte) 89;
    byteArray0[5] = (byte) 20;
    byteArray0[6] = (byte) 18;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3732), (byte) 1);
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test3029,"public void test3029() throws Throwable {
    ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
    archiveStreamFactory0.setEntryEncoding("""");
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 30;
    byteArray0[1] = (byte) (-1);
    byteArray0[2] = (byte) (-19);
    byteArray0[3] = (byte) (-91);
    byteArray0[4] = (byte) (-91);
    byteArray0[5] = (byte) (-57);
    byteArray0[6] = (byte) (-117);
    byteArray0[8] = (byte) 70;
    byteArrayOutputStream0.write(byteArray0);
    archiveStreamFactory0.createArchiveOutputStream(""ar"", byteArrayOutputStream0);
    InputStream inputStream0 = null;
    // Undeclared exception!
    try {
        archiveStreamFactory0.createArchiveInputStream((InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Stream must not be null.
        //
        verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
    }
}",0,
