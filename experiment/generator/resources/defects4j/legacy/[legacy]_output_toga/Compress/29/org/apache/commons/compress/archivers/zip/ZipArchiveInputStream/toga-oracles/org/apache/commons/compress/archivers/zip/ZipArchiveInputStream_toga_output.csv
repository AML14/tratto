project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    try {
        zipArchiveInputStream0.getNextEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 704);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
    zipArchiveInputStream0.close();
    zipArchiveInputStream0.getNextZipEntry();
    assertEquals(0, zipArchiveInputStream0.getCount());
}",0,
project,0,test022,"public void test022() throws Throwable {
    byte[] byteArray0 = new byte[35];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
    zipArchiveInputStream0.getNextZipEntry();
    assertEquals(30, zipArchiveInputStream0.getCount());
}",0,
project,0,test033,"public void test033() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test044,"public void test044() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test055,"public void test055() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
    zipArchiveInputStream1.getNextZipEntry();
    assertEquals(0, zipArchiveInputStream1.getCount());
}",0,"assertEquals(1, zipArchiveInputStream1.getCount())"
project,0,test066,"public void test066() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    zipArchiveInputStream0.close();
    try {
        zipArchiveInputStream0.skip(16L);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // The stream is closed
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 704);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
    zipArchiveInputStream0.close();
    zipArchiveInputStream0.close();
    assertEquals(0L, zipArchiveInputStream0.getBytesRead());
}",0,
project,0,test088,"public void test088() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    // Undeclared exception!
    try {
        zipArchiveInputStream0.skip((-1167L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    long long0 = zipArchiveInputStream0.skip(0L);
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test1010,"public void test1010() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    long long0 = zipArchiveInputStream0.skip(117853008L);
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test1111,"public void test1111() throws Throwable {
    byte[] byteArray0 = new byte[2];
    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1212,"public void test1212() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 80;
    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 80);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
