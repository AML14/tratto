/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Oct 15 10:23:32 GMT 2023
 */

package org.apache.commons.compress.archivers;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class ArchiveStreamFactory_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.compress.archivers.ArchiveStreamFactory"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "/Users/elliottzackrone/IdeaProjects/defects4jprefix"); 
    java.lang.System.setProperty("user.home", "/Users/elliottzackrone"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "elliottzackrone"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ArchiveStreamFactory_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.compress.archivers.zip.Zip64RequiredException",
      "org.apache.commons.compress.archivers.zip.ExplodingInputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
      "org.apache.commons.compress.archivers.ar.ArArchiveInputStream",
      "org.apache.commons.compress.compressors.CompressorInputStream",
      "org.apache.commons.compress.archivers.ArchiveEntry",
      "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
      "org.apache.commons.compress.archivers.jar.JarArchiveInputStream",
      "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream",
      "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile",
      "org.apache.commons.compress.archivers.dump.InvalidFormatException",
      "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream",
      "org.apache.commons.compress.utils.CRC32VerifyingInputStream",
      "org.apache.commons.compress.compressors.lzw.LZWInputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream",
      "org.apache.commons.compress.archivers.ArchiveInputStream",
      "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException",
      "org.apache.commons.compress.archivers.zip.NioZipEncoding",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.FallbackZipEncoding",
      "org.apache.commons.compress.archivers.ArchiveException",
      "org.apache.commons.compress.archivers.StreamingNotSupportedException",
      "org.apache.commons.compress.archivers.cpio.CpioConstants",
      "org.apache.commons.compress.utils.ChecksumVerifyingInputStream",
      "org.apache.commons.compress.utils.BoundedInputStream",
      "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream",
      "org.apache.commons.compress.utils.IOUtils",
      "org.apache.commons.compress.archivers.zip.ZipLong",
      "org.apache.commons.compress.utils.CountingOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.ZipEncoding",
      "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder",
      "org.apache.commons.compress.archivers.zip.ZipEncodingHelper",
      "org.apache.commons.compress.archivers.zip.ZipExtraField",
      "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream",
      "org.apache.commons.compress.archivers.dump.DumpArchiveException",
      "org.apache.commons.compress.archivers.jar.JarArchiveEntry",
      "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException",
      "org.apache.commons.compress.archivers.ArchiveOutputStream",
      "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
      "org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream",
      "org.apache.commons.compress.utils.Charsets"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.Enumeration", false, ArchiveStreamFactory_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ArchiveStreamFactory_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "org.apache.commons.compress.archivers.zip.ZipLong",
      "org.apache.commons.compress.archivers.ArchiveOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile",
      "org.apache.commons.compress.archivers.ArchiveException",
      "org.apache.commons.compress.utils.IOUtils",
      "org.apache.commons.compress.archivers.ArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
      "org.apache.commons.compress.archivers.jar.JarArchiveInputStream",
      "org.apache.commons.compress.archivers.ar.ArArchiveInputStream",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream",
      "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream",
      "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
      "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder",
      "org.apache.commons.compress.archivers.zip.FallbackZipEncoding",
      "org.apache.commons.compress.archivers.zip.ZipEncodingHelper",
      "org.apache.commons.compress.utils.Charsets",
      "org.apache.commons.compress.archivers.zip.NioZipEncoding",
      "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
      "org.apache.commons.compress.utils.CountingOutputStream",
      "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream"
    );
  }
}
