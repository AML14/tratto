project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) 0;
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) (-95);
    byteArray0[3] = (byte) 98;
    byteArray0[4] = (byte) 48;
    boolean boolean0 = TarArchiveInputStream.matches(byteArray0, 0);
    assertFalse(boolean0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    sequenceInputStream0.available();
    int int0 = (-2350);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-2350));
    String string0 = ""C6<v;\""na3/E/)"";
    byte byte0 = (byte) (-79);
    long long0 = 3L;
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) (-79);
    byteArray0[1] = (byte) (-79);
    byteArray0[2] = (byte) (-79);
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 99
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-25);
    byteArray0[1] = (byte) (-78);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 200, (byte) (-78));
    byteArrayInputStream0.skip((byte) (-25));
    byteArrayInputStream0.close();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0);
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.getNextEntry();
    byte[] byteArray1 = tarArchiveInputStream0.getLongNameData();
    assertNull(byteArray1);
}",0,
project,0,test034,"public void test034() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-25);
    byteArray0[1] = (byte) (-78);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 200, (byte) (-78));
    byteArrayInputStream0.skip((byte) (-25));
    byteArrayInputStream0.close();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0);
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.getNextEntry();
    byte[] byteArray1 = tarArchiveInputStream0.getLongNameData();
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.parsePaxHeaders(byteArrayInputStream0);
    tarArchiveInputStream0.markSupported();
    int int0 = tarArchiveInputStream0.read(byteArray0, 0, (int) (byte) (-78));
    assertEquals((-1), int0);
}",0,"assertEquals(1, int0)"
project,0,test035,"public void test035() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-25);
    byteArray0[1] = (byte) (-78);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 200, (byte) (-78));
    byteArrayInputStream0.skip((byte) (-25));
    byteArrayInputStream0.close();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0);
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.getNextEntry();
    byte[] byteArray1 = tarArchiveInputStream0.getLongNameData();
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.parsePaxHeaders(byteArrayInputStream0);
    tarArchiveInputStream0.markSupported();
    int int0 = tarArchiveInputStream0.read(byteArray0, 0, (int) (byte) (-78));
    boolean boolean0 = tarArchiveInputStream0.isEOFRecord(byteArray0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test036,"public void test036() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-25);
    byteArray0[1] = (byte) (-78);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 200, (byte) (-78));
    byteArrayInputStream0.skip((byte) (-25));
    byteArrayInputStream0.close();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0);
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.getNextEntry();
    byte[] byteArray1 = tarArchiveInputStream0.getLongNameData();
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.parsePaxHeaders(byteArrayInputStream0);
    tarArchiveInputStream0.markSupported();
    int int0 = tarArchiveInputStream0.read(byteArray0, 0, (int) (byte) (-78));
    boolean boolean0 = tarArchiveInputStream0.isEOFRecord(byteArray0);
    int int1 = tarArchiveInputStream0.getRecordSize();
    assertEquals(0L, tarArchiveInputStream0.getBytesRead());
}",1,
project,0,test037,"public void test037() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-25);
    byteArray0[1] = (byte) (-78);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 200, (byte) (-78));
    byteArrayInputStream0.skip((byte) (-25));
    byteArrayInputStream0.close();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0);
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.getNextEntry();
    byte[] byteArray1 = tarArchiveInputStream0.getLongNameData();
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.parsePaxHeaders(byteArrayInputStream0);
    tarArchiveInputStream0.markSupported();
    int int0 = tarArchiveInputStream0.read(byteArray0, 0, (int) (byte) (-78));
    boolean boolean0 = tarArchiveInputStream0.isEOFRecord(byteArray0);
    int int1 = tarArchiveInputStream0.getRecordSize();
    assertEquals(512, int1);
}",0,"assertEquals(0, int1)"
project,0,test059,"public void test059() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, 61, (String) null);
    TarArchiveInputStream tarArchiveInputStream1 = new TarArchiveInputStream(tarArchiveInputStream0, 48, 256, (String) null);
    // Undeclared exception!
    try {
        tarArchiveInputStream1.close();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveInputStream"", e);
    }
}",0,
project,0,test0610,"public void test0610() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
    // Undeclared exception!
    try {
        tarArchiveInputStream0.parsePaxHeaders((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveInputStream"", e);
    }
}",0,
project,0,test0711,"public void test0711() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    pipedOutputStream0.flush();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, 10240, 10240, ""org.apache.commons.compress.archivers.tar.TarArchiveInputStream"");
    tarArchiveInputStream0.close();
    try {
        tarArchiveInputStream0.parsePaxHeaders(pipedInputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe closed
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test0812,"public void test0812() throws Throwable {
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) 114;
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) 0;
    byteArray0[3] = (byte) 42;
    byteArray0[4] = (byte) 0;
    TarArchiveInputStream.matches(byteArray0, (byte) 0);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
    byteArrayInputStream0.skip(0L);
    TarArchiveInputStream tarArchiveInputStream0 = null;
    try {
        tarArchiveInputStream0 = new TarArchiveInputStream(dataInputStream0, (byte) 0, ""_?pID9k@[EV-SwopsG"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // _?pID9k@[EV-SwopsG
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test0913,"public void test0913() throws Throwable {
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0);
    TarArchiveInputStream tarArchiveInputStream1 = new TarArchiveInputStream(tarArchiveInputStream0, 0, 830);
    String string0 = """";
    TarArchiveInputStream tarArchiveInputStream2 = null;
    try {
        tarArchiveInputStream2 = new TarArchiveInputStream(tarArchiveInputStream1, 0, 0, """");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        //
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1014,"public void test1014() throws Throwable {
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, 1902, 1902);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(tarArchiveInputStream0, 1902);
    String string0 = ""O"";
    TarArchiveInputStream tarArchiveInputStream1 = new TarArchiveInputStream(pushbackInputStream0, ""O"");
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(tarArchiveInputStream1);
    TarArchiveInputStream tarArchiveInputStream2 = null;
    try {
        tarArchiveInputStream2 = new TarArchiveInputStream(bufferedInputStream0, 256, """");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        //
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1115,"public void test1115() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    byte[] byteArray0 = new byte[0];
    pipedOutputStream0.write(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pushbackInputStream0, 48, 23);
    tarArchiveInputStream0.reset();
    boolean boolean0 = tarArchiveInputStream0.isAtEOF();
    assertEquals(23, tarArchiveInputStream0.getRecordSize());
}",0,"assertEquals(1, tarArchiveInputStream0.getRecordSize())"
project,0,test1116,"public void test1116() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    byte[] byteArray0 = new byte[0];
    pipedOutputStream0.write(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pushbackInputStream0, 48, 23);
    tarArchiveInputStream0.reset();
    boolean boolean0 = tarArchiveInputStream0.isAtEOF();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1218,"public void test1218() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0);
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 98;
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) 122;
    byteArray0[3] = (byte) 20;
    byteArray0[4] = (byte) 42;
    byteArray0[5] = (byte) 3;
    byteArray0[6] = (byte) 0;
    byteArray0[7] = (byte) 0;
    byteArray0[8] = (byte) 11;
    int int0 = tarArchiveInputStream0.read(byteArray0);
    tarArchiveInputStream0.getCurrentEntry();
    assertEquals(512, tarArchiveInputStream0.getRecordSize());
}",0,"assertEquals(1, tarArchiveInputStream0.getRecordSize())"
