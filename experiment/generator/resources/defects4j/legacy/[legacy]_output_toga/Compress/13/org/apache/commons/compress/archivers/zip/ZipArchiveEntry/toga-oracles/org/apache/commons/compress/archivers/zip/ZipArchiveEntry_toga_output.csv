project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes((-1069L));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1069L), zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test001,"public void test001() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes((-1069L));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test012,"public void test012() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setUnixMode((-2140976120));
    zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(19464, zipArchiveEntry1.getUnixMode());
}",0,"assertEquals(0, zipArchiveEntry1.getUnixMode())"
project,0,test013,"public void test013() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setUnixMode((-2140976120));
    zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(3, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry1.getPlatform())"
project,0,test024,"public void test024() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes((-9));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-9), zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test025,"public void test025() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes((-9));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test036,"public void test036() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test037,"public void test037() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test038,"public void test038() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,
project,0,test039,"public void test039() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getSize());
}",0,
project,0,test0310,"public void test0310() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test0311,"public void test0311() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test0312,"public void test0312() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test0413,"public void test0413() throws Throwable {
    MockFile mockFile0 = new MockFile(""0jM8;"", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setUnixMode((-539));
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(3, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0414,"public void test0414() throws Throwable {
    MockFile mockFile0 = new MockFile(""0jM8;"", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setUnixMode((-539));
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(64997, int0);
}",0,"assertEquals(1, int0)"
project,0,test0515,"public void test0515() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setPlatform(6207);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(6207, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0516,"public void test0516() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setPlatform(6207);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test0617,"public void test0617() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test0618,"public void test0618() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test0619,"public void test0619() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test0620,"public void test0620() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test0621,"public void test0621() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0722,"public void test0722() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""-/~Q|,v5/Py$`wt"");
    zipArchiveEntry0.setMethod(1907);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    assertEquals(1907, zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test0723,"public void test0723() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""-/~Q|,v5/Py$`wt"");
    zipArchiveEntry0.setMethod(1907);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test0824,"public void test0824() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test0825,"public void test0825() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test0826,"public void test0826() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test0827,"public void test0827() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test0828,"public void test0828() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0929,"public void test0929() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0930,"public void test0930() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test0931,"public void test0931() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertTrue(boolean0);
}",0,
project,0,test0932,"public void test0932() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test0933,"public void test0933() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test0934,"public void test0934() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1035,"public void test1035() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1036,"public void test1036() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test1037,"public void test1037() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1038,"public void test1038() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1039,"public void test1039() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test1140,"public void test1140() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1141,"public void test1141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test1142,"public void test1142() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1143,"public void test1143() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1144,"public void test1144() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test1145,"public void test1145() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1246,"public void test1246() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setSize(3);
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(3L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1347,"public void test1347() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test1348,"public void test1348() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1349,"public void test1349() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test1350,"public void test1350() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0, byteArray1.length);
}",0,
project,0,test1351,"public void test1351() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1352,"public void test1352() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertNotNull(byteArray1);
}",0,
project,0,test1353,"public void test1353() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1454,"public void test1454() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setUnixMode((byte) 19);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(1245185L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1455,"public void test1455() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setUnixMode((byte) 19);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(3, int0);
}",0,"assertEquals(0, int0)"
project,0,test1556,"public void test1556() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1557,"public void test1557() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    zipArchiveEntry0.setMethod(0);
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1658,"public void test1658() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    zipArchiveEntry0.setMethod(144);
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(144, int0);
}",0,"assertEquals(0, int0)"
project,0,test1759,"public void test1759() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1760,"public void test1760() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes(3);
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(3, int0);
}",0,"assertEquals(0, int0)"
project,0,test1861,"public void test1861() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setInternalAttributes((-3));
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals((-3), int0);
}",0,"assertEquals(1, int0)"
project,0,test1962,"public void test1962() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1963,"public void test1963() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test1964,"public void test1964() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1965,"public void test1965() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test1966,"public void test1966() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,
project,0,test2067,"public void test2067() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test2068,"public void test2068() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes(134695760L);
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(134695760L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2169,"public void test2169() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""v<"");
    zipArchiveEntry0.setUnixMode((-404));
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(3, zipArchiveEntry0.getPlatform());
}",0,
project,0,test2170,"public void test2170() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""v<"");
    zipArchiveEntry0.setUnixMode((-404));
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals((-26476543L), long0);
}",0,"assertEquals(1, long0)"
project,0,test2271,"public void test2271() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setExtraFields((ZipExtraField[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test2372,"public void test2372() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    try {
        zipArchiveEntry0.setExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test2473,"public void test2473() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setCentralDirectoryExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test2574,"public void test2574() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    // Undeclared exception!
    try {
        zipArchiveEntry0.equals(zipArchiveEntry1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test2675,"public void test2675() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField((ZipExtraField) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test2776,"public void test2776() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
    zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Zip64 extended information must contain both size values in the local file header.
        //
        verifyException(""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"", e);
    }
}",0,
project,0,test2877,"public void test2877() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test2978,"public void test2978() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test3079,"public void test3079() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // name
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test3180,"public void test3180() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, ""s1aT[?@{%;&56t6i`d"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test3281,"public void test3281() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test3282,"public void test3282() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test3283,"public void test3283() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getInternalAttributes())"
project,0,test3284,"public void test3284() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertNotNull(string0);
}",0,
project,0,test3285,"public void test3285() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test3286,"public void test3286() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test3387,"public void test3387() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,
project,0,test3388,"public void test3388() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test3389,"public void test3389() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test3390,"public void test3390() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test3391,"public void test3391() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test3492,"public void test3492() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    assertNotNull(unparseableExtraFieldData0);
}",0,assertNotNull(unparseableExtraFieldData0)
project,0,test3493,"public void test3493() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test3494,"public void test3494() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(1, zipArchiveEntry0.getMethod())"
project,0,test3495,"public void test3495() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test3496,"public void test3496() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
project,0,test3597,"public void test3597() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test3598,"public void test3598() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test3599,"public void test3599() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals(1, zipExtraFieldArray0.length);
}",0,
project,0,test35100,"public void test35100() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test36101,"public void test36101() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test36102,"public void test36102() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test36103,"public void test36103() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test36104,"public void test36104() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test36105,"public void test36105() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test37106,"public void test37106() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test37107,"public void test37107() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test37108,"public void test37108() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test37109,"public void test37109() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test37110,"public void test37110() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test38111,"public void test38111() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",1,
project,0,test38112,"public void test38112() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test38113,"public void test38113() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test38114,"public void test38114() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test38115,"public void test38115() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
project,0,test39116,"public void test39116() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipExtraFieldArray0[0] = (ZipExtraField) unparseableExtraFieldData0;
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipExtraFieldArray0[1] = (ZipExtraField) jarMarker0;
    ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(3);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, (ZipEightByteInteger) null, zipEightByteInteger0, (ZipLong) null);
    zipExtraFieldArray0[2] = (ZipExtraField) zip64ExtendedInformationExtraField0;
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""E)q08!d"", byteArray0);
    zipExtraFieldArray0[3] = (ZipExtraField) unicodePathExtraField0;
    // Undeclared exception!
    try {
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Zip64 extended information must contain both size values in the local file header.
        //
        verifyException(""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"", e);
    }
}",1,
project,0,test40117,"public void test40117() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    // Undeclared exception!
    try {
        zipArchiveEntry0.setMethod((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test41118,"public void test41118() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""iT~$"");
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test42119,"public void test42119() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test42120,"public void test42120() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test42121,"public void test42121() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test42122,"public void test42122() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test42123,"public void test42123() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test43124,"public void test43124() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test43125,"public void test43125() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test43126,"public void test43126() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test43127,"public void test43127() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test43128,"public void test43128() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test44129,"public void test44129() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test44130,"public void test44130() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test44131,"public void test44131() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test44132,"public void test44132() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test44133,"public void test44133() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test45134,"public void test45134() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test45135,"public void test45135() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test45136,"public void test45136() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test45137,"public void test45137() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,
project,0,test45138,"public void test45138() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test46139,"public void test46139() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0, int0);
}",0,
project,0,test46140,"public void test46140() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test46141,"public void test46141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test46142,"public void test46142() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test46143,"public void test46143() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test47144,"public void test47144() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getMethod());
}",0,
project,0,test47145,"public void test47145() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test48146,"public void test48146() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test48147,"public void test48147() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test48148,"public void test48148() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test48149,"public void test48149() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,
project,0,test48150,"public void test48150() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test49151,"public void test49151() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,
project,0,test49152,"public void test49152() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test49153,"public void test49153() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry1.getPlatform())"
project,0,test49154,"public void test49154() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test49155,"public void test49155() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1L), zipArchiveEntry1.getSize());
}",0,"assertEquals(0, zipArchiveEntry1.getSize())"
project,0,test50156,"public void test50156() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test50157,"public void test50157() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry0.setCompressedSize(65280L);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test51158,"public void test51158() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test51159,"public void test51159() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry0.setCrc(0);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test52160,"public void test52160() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setMethod(31);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(31, zipArchiveEntry1.getMethod());
}",0,"assertEquals(0, zipArchiveEntry1.getMethod())"
project,0,test52161,"public void test52161() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setMethod(31);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test53162,"public void test53162() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes(3468L);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(3468L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test53163,"public void test53163() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes(3468L);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test54164,"public void test54164() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode((byte) 3);
    zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(3, zipArchiveEntry0.getUnixMode());
}",0,"assertEquals(1, zipArchiveEntry0.getUnixMode())"
project,0,test55165,"public void test55165() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes(3);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(3, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test55166,"public void test55166() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes(3);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test56167,"public void test56167() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException"");
    Object object0 = zipArchiveEntry0.clone();
    assertTrue(object0.equals((Object) zipArchiveEntry0));
}",0,
project,0,test56168,"public void test56168() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException"");
    Object object0 = zipArchiveEntry0.clone();
    zipArchiveEntry0.setTime(750L);
    boolean boolean0 = zipArchiveEntry0.equals(object0);
    assertFalse(boolean0);
}",0,
project,0,test57169,"public void test57169() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",1,
project,0,test57170,"public void test57170() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,
project,0,test57171,"public void test57171() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertTrue(boolean0);
}",0,
project,0,test57172,"public void test57172() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1L), zipArchiveEntry1.getSize());
}",0,
project,0,test57173,"public void test57173() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test57174,"public void test57174() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test58175,"public void test58175() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test58176,"public void test58176() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setComment("""");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test58177,"public void test58177() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setComment("""");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test59178,"public void test59178() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test59179,"public void test59179() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test59180,"public void test59180() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,"assertEquals(0, zipArchiveEntry1.getMethod())"
project,0,test59181,"public void test59181() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test59182,"public void test59182() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getSize());
}",0,
project,0,test59183,"public void test59183() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,
project,0,test60184,"public void test60184() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry1.getPlatform())"
project,0,test60185,"public void test60185() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getSize());
}",0,"assertEquals(0, zipArchiveEntry1.getSize())"
project,0,test60186,"public void test60186() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test60187,"public void test60187() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test60188,"public void test60188() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry1.getInternalAttributes())"
project,0,test60189,"public void test60189() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,"assertEquals(1, zipArchiveEntry1.getMethod())"
project,0,test60190,"public void test60190() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test61191,"public void test61191() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test61192,"public void test61192() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test61193,"public void test61193() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test61194,"public void test61194() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertFalse(boolean0);
}",0,
project,0,test61195,"public void test61195() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test61196,"public void test61196() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test62197,"public void test62197() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test62198,"public void test62198() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test62199,"public void test62199() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test62200,"public void test62200() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test62201,"public void test62201() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test62202,"public void test62202() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertFalse(boolean0);
}",0,
project,0,test63203,"public void test63203() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setSize(0);
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getSize());
}",0,"assertEquals(0, zipArchiveEntry1.getSize())"
project,0,test63204,"public void test63204() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setSize(0);
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,
project,0,test64205,"public void test64205() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test64206,"public void test64206() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test64207,"public void test64207() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(1, zipArchiveEntry0.getSize())"
project,0,test64208,"public void test64208() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getInternalAttributes())"
project,0,test65209,"public void test65209() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[9];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test65210,"public void test65210() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[9];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test66211,"public void test66211() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test66212,"public void test66212() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test66213,"public void test66213() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test66214,"public void test66214() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test66215,"public void test66215() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test67216,"public void test67216() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test67217,"public void test67217() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test67218,"public void test67218() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test67219,"public void test67219() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test67220,"public void test67220() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test68221,"public void test68221() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setSize((-329L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid entry size
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test69222,"public void test69222() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test69223,"public void test69223() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(18, byteArray1.length);
}",0,
project,0,test69224,"public void test69224() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test69225,"public void test69225() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test69226,"public void test69226() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,
project,0,test69227,"public void test69227() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test70228,"public void test70228() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test70229,"public void test70229() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test70230,"public void test70230() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test70231,"public void test70231() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test70232,"public void test70232() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test71233,"public void test71233() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test72234,"public void test72234() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test72235,"public void test72235() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test73236,"public void test73236() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField((ZipShort) null);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test74237,"public void test74237() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test75238,"public void test75238() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test75239,"public void test75239() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test75240,"public void test75240() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test75241,"public void test75241() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",1,
project,0,test75242,"public void test75242() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",1,
project,0,test76243,"public void test76243() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test76244,"public void test76244() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test76245,"public void test76245() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test76246,"public void test76246() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test76247,"public void test76247() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test77248,"public void test77248() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test77249,"public void test77249() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test77250,"public void test77250() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test77251,"public void test77251() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test77252,"public void test77252() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test78253,"public void test78253() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test78254,"public void test78254() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(1, zipArchiveEntry0.getMethod())"
project,0,test78255,"public void test78255() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test78256,"public void test78256() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test78257,"public void test78257() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test79258,"public void test79258() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[9];
    zipArchiveEntry0.setExtra(byteArray0);
    byteArray0[3] = (byte) 26;
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test80259,"public void test80259() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test80260,"public void test80260() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test80261,"public void test80261() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test80262,"public void test80262() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertNotNull(zipExtraField0);
}",0,assertNotNull(zipExtraField0)
project,0,test80263,"public void test80263() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test80264,"public void test80264() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test81265,"public void test81265() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(1, zipExtraFieldArray0.length);
}",0,
project,0,test81266,"public void test81266() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(1, zipArchiveEntry0.getSize())"
project,0,test81267,"public void test81267() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getInternalAttributes())"
project,0,test81268,"public void test81268() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test82269,"public void test82269() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    // Undeclared exception!
    try {
        zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test83270,"public void test83270() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test83271,"public void test83271() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test83272,"public void test83272() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test83273,"public void test83273() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test83274,"public void test83274() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test83275,"public void test83275() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test84276,"public void test84276() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    zipArchiveEntry0.setUnixMode(0);
    assertEquals(3, zipArchiveEntry0.getPlatform());
}",0,
project,0,test85277,"public void test85277() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test85278,"public void test85278() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test85279,"public void test85279() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test85280,"public void test85280() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test85281,"public void test85281() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test86282,"public void test86282() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test86283,"public void test86283() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals((-1L), long0);
}",0,"assertEquals(0, long0)"
project,0,test86284,"public void test86284() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test86285,"public void test86285() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test86286,"public void test86286() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test87287,"public void test87287() throws Throwable {
    MockFile mockFile0 = new MockFile(""[#K.lmr7["");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "".V"");
    zipArchiveEntry0.setExtra();
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test88288,"public void test88288() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test88289,"public void test88289() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test88290,"public void test88290() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test88291,"public void test88291() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test88292,"public void test88292() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test89293,"public void test89293() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test89294,"public void test89294() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test89295,"public void test89295() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test89296,"public void test89296() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test89297,"public void test89297() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test90298,"public void test90298() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test90299,"public void test90299() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test90300,"public void test90300() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test90301,"public void test90301() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test90302,"public void test90302() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,
project,0,test91303,"public void test91303() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test91304,"public void test91304() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test91305,"public void test91305() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test91306,"public void test91306() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipExtraFieldArray0.length);
}",0,
project,0,test91307,"public void test91307() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test91308,"public void test91308() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test92309,"public void test92309() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",1,
project,0,test92310,"public void test92310() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test92311,"public void test92311() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test92312,"public void test92312() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test92313,"public void test92313() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
