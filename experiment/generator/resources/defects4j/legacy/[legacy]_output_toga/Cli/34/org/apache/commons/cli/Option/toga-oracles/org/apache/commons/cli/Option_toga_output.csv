project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Option option0 = new Option(""e"", ""e"");
    option0.setValueSeparator('a');
    option0.setArgs('a');
    option0.addValueForProcessing(""Illegal option name '"");
    assertEquals(97, option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test011,"public void test011() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.getDescription();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(1, option0.getArgs())"
project,0,test022,"public void test022() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getArgName();
    assertFalse(option0.hasLongOpt());
}",0,assertFalse(option0.hasLongOpt())
project,0,test023,"public void test023() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getArgName();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test034,"public void test034() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setOptionalArg(true);
    boolean boolean0 = option0.acceptsArg();
    assertTrue(option0.hasOptionalArg());
}",0,assertFalse(option0.hasOptionalArg())
project,0,test035,"public void test035() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setOptionalArg(true);
    boolean boolean0 = option0.acceptsArg();
    assertTrue(boolean0);
}",0,
project,0,test046,"public void test046() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setRequired(true);
    assertTrue(option0.isRequired());
}",0,assertFalse(option0.isRequired())
project,0,test057,"public void test057() throws Throwable {
    Option option0 = new Option((String) null, true, (String) null);
    option0.addValueForProcessing((String) null);
    // Undeclared exception!
    try {
        option0.addValueForProcessing((String) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot add value, list full.
        //
        verifyException(""org.apache.commons.cli.Option"", e);
    }
}",1,
project,0,test068,"public void test068() throws Throwable {
    Option option0 = new Option(""U"", ""U"");
    Class<Object> class0 = Object.class;
    option0.setType(class0);
    String string0 = option0.toString();
    assertEquals(""[ option: U  :: U :: class java.lang.Object ]"", string0);
}",0,
project,0,test069,"public void test069() throws Throwable {
    Option option0 = new Option(""U"", ""U"");
    Class<Object> class0 = Object.class;
    option0.setType(class0);
    String string0 = option0.toString();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test0710,"public void test0710() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.isRequired();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test0811,"public void test0811() throws Throwable {
    Option option0 = new Option("""", false, """");
    option0.getValuesList();
    assertFalse(option0.hasLongOpt());
}",0,assertTrue(option0.hasLongOpt())
project,0,test0812,"public void test0812() throws Throwable {
    Option option0 = new Option("""", false, """");
    option0.getValuesList();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test0913,"public void test0913() throws Throwable {
    Option option0 = new Option("""", """");
    String string0 = option0.getLongOpt();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test0914,"public void test0914() throws Throwable {
    Option option0 = new Option("""", """");
    String string0 = option0.getLongOpt();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test1015,"public void test1015() throws Throwable {
    Option option0 = new Option(""eis"", true, ""eis"");
    int int0 = option0.getId();
    assertEquals(101, int0);
}",1,
project,0,test1016,"public void test1016() throws Throwable {
    Option option0 = new Option(""eis"", true, ""eis"");
    int int0 = option0.getId();
    assertTrue(option0.hasArg());
}",0,assertTrue(option0.hasArg())
project,0,test1017,"public void test1017() throws Throwable {
    Option option0 = new Option(""eis"", true, ""eis"");
    int int0 = option0.getId();
    assertFalse(option0.hasLongOpt());
}",0,assertFalse(option0.hasLongOpt())
project,0,test1118,"public void test1118() throws Throwable {
    Option option0 = new Option("""", """");
    // Undeclared exception!
    try {
        option0.addValue("""");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.
        //
        verifyException(""org.apache.commons.cli.Option"", e);
    }
}",1,
project,0,test1219,"public void test1219() throws Throwable {
    Option option0 = new Option(""eiU"", ""eiU"");
    option0.getType();
    assertFalse(option0.hasLongOpt());
}",0,assertTrue(option0.hasLongOpt())
project,0,test1220,"public void test1220() throws Throwable {
    Option option0 = new Option(""eiU"", ""eiU"");
    option0.getType();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test1321,"public void test1321() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setDescription((String) null);
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test1422,"public void test1422() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setArgName("""");
    boolean boolean0 = option0.hasArgName();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test1423,"public void test1423() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setArgName("""");
    boolean boolean0 = option0.hasArgName();
    assertFalse(option0.hasLongOpt());
}",0,assertFalse(option0.hasLongOpt())
project,0,test1424,"public void test1424() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setArgName("""");
    boolean boolean0 = option0.hasArgName();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1525,"public void test1525() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getOpt();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(1, option0.getArgs())"
project,0,test1526,"public void test1526() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getOpt();
    assertFalse(option0.hasLongOpt());
}",0,assertTrue(option0.hasLongOpt())
project,0,test1627,"public void test1627() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    int int0 = option0.getArgs();
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test1728,"public void test1728() throws Throwable {
    Option option0 = new Option(""e"", ""e"");
    option0.clearValues();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test1729,"public void test1729() throws Throwable {
    Option option0 = new Option(""e"", ""e"");
    option0.clearValues();
    assertFalse(option0.hasLongOpt());
}",0,assertTrue(option0.hasLongOpt())
project,0,test1830,"public void test1830() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.getKey();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test1931,"public void test1931() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.hasLongOpt();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test1932,"public void test1932() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.hasLongOpt();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2033,"public void test2033() throws Throwable {
    Option option0 = new Option("""", """", false, """");
    boolean boolean0 = option0.hasLongOpt();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2034,"public void test2034() throws Throwable {
    Option option0 = new Option("""", """", false, """");
    boolean boolean0 = option0.hasLongOpt();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test2135,"public void test2135() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.hasArgName();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2136,"public void test2136() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.hasArgName();
    assertEquals((-1), option0.getArgs());
}",0,
project,0,test2237,"public void test2237() throws Throwable {
    Option option0 = new Option(""4"", ""4"");
    option0.setArgName(""4"");
    boolean boolean0 = option0.hasArgName();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2338,"public void test2338() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs(63);
    option0.toString();
    assertEquals(63, option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test2439,"public void test2439() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    assertFalse(option0.hasArgs());
}",0,assertTrue(option0.hasArgs())
project,0,test2440,"public void test2440() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs((-2));
    option0.toString();
    assertEquals((-2), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test2541,"public void test2541() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    assertFalse(option0.hasArgs());
}",0,assertTrue(option0.hasArgs())
project,0,test2542,"public void test2542() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs((-2));
    assertEquals((-2), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test2543,"public void test2543() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs((-2));
    option0.addValueForProcessing((String) null);
    boolean boolean0 = option0.requiresArg();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2644,"public void test2644() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    // Undeclared exception!
    try {
        option0.addValueForProcessing((String) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // NO_ARGS_ALLOWED
        //
        verifyException(""org.apache.commons.cli.Option"", e);
    }
}",1,
project,0,test2745,"public void test2745() throws Throwable {
    Option option0 = new Option(""eiU"", true, ""eiU"");
    option0.setValueSeparator('e');
    option0.addValueForProcessing(""eiU"");
    assertTrue(option0.hasValueSeparator());
}",0,assertTrue(option0.hasValueSeparator())
project,0,test2846,"public void test2846() throws Throwable {
    Option option0 = new Option(""eiU"", true, ""eiU"");
    option0.addValueForProcessing(""eiU"");
    option0.getValue(""eiU"");
    assertFalse(option0.hasLongOpt());
}",0,assertTrue(option0.hasLongOpt())
project,0,test2947,"public void test2947() throws Throwable {
    Option option0 = new Option(""eiU"", false, ""eiU"");
    String string0 = option0.getValue(""eiU"");
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test2948,"public void test2948() throws Throwable {
    Option option0 = new Option(""eiU"", false, ""eiU"");
    String string0 = option0.getValue(""eiU"");
    assertFalse(option0.hasLongOpt());
}",0,
project,0,test2949,"public void test2949() throws Throwable {
    Option option0 = new Option(""eiU"", false, ""eiU"");
    String string0 = option0.getValue(""eiU"");
    assertNotNull(string0);
}",0,
project,0,test3050,"public void test3050() throws Throwable {
    Option option0 = new Option((String) null, true, (String) null);
    option0.addValueForProcessing((String) null);
    try {
        option0.getValue((-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test3151,"public void test3151() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getValue((-2));
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test3152,"public void test3152() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getValue((-2));
    assertFalse(option0.hasLongOpt());
}",0,assertTrue(option0.hasLongOpt())
project,0,test3253,"public void test3253() throws Throwable {
    Option option0 = new Option(""eiU"", true, ""eiU"");
    option0.addValueForProcessing(""eiU"");
    String[] stringArray0 = option0.getValues();
    assertFalse(option0.hasLongOpt());
}",0,assertTrue(option0.hasLongOpt())
project,0,test3254,"public void test3254() throws Throwable {
    Option option0 = new Option(""eiU"", true, ""eiU"");
    option0.addValueForProcessing(""eiU"");
    String[] stringArray0 = option0.getValues();
    assertNotNull(stringArray0);
}",0,assertNotNull(stringArray0)
project,0,test3355,"public void test3355() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    String[] stringArray0 = option0.getValues();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test3356,"public void test3356() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    String[] stringArray0 = option0.getValues();
    assertNull(stringArray0);
}",0,
project,0,test3457,"public void test3457() throws Throwable {
    Option option0 = new Option("""", """", true, """");
    String string0 = option0.toString();
    assertEquals(""[ option:    [ARG] ::  ]"", string0);
}",0,
project,0,test3558,"public void test3558() throws Throwable {
    Option option0 = new Option(""U"", ""U"");
    String string0 = option0.toString();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test3559,"public void test3559() throws Throwable {
    Option option0 = new Option(""U"", ""U"");
    String string0 = option0.toString();
    assertEquals(""[ option: U  :: U ]"", string0);
}",0,
project,0,test3660,"public void test3660() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals(option0);
    assertFalse(option0.hasLongOpt());
}",0,assertTrue(option0.hasLongOpt())
project,0,test3661,"public void test3661() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals(option0);
    assertEquals((-1), option0.getArgs());
}",0,
project,0,test3662,"public void test3662() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals(option0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3763,"public void test3763() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3764,"public void test3764() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.equals((Object) null);
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(1, option0.getArgs())"
project,0,test3865,"public void test3865() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals("""");
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test3866,"public void test3866() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals("""");
    assertFalse(option0.hasLongOpt());
}",0,assertTrue(option0.hasLongOpt())
project,0,test3867,"public void test3867() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals("""");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3968,"public void test3968() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option("""", """");
    boolean boolean0 = option0.equals(option1);
    assertFalse(option1.hasLongOpt());
}",0,assertFalse(option1.hasLongOpt())
project,0,test3969,"public void test3969() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option("""", """");
    boolean boolean0 = option0.equals(option1);
    assertFalse(option1.equals((Object) option0));
}",0,
project,0,test3970,"public void test3970() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option("""", """");
    boolean boolean0 = option0.equals(option1);
    assertEquals((-1), option1.getArgs());
}",0,"assertEquals(0, option1.getArgs())"
project,0,test3971,"public void test3971() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option("""", """");
    boolean boolean0 = option0.equals(option1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4072,"public void test4072() throws Throwable {
    Option option0 = new Option(""2Q9r"", true, ""2Q9r"");
    Option option1 = new Option("""", true, ""2Q9r"");
    boolean boolean0 = option0.equals(option1);
    assertEquals(""2Q9r"", option1.getDescription());
}",0,assertNotNull(option1.getDescription())
project,0,test4073,"public void test4073() throws Throwable {
    Option option0 = new Option(""2Q9r"", true, ""2Q9r"");
    Option option1 = new Option("""", true, ""2Q9r"");
    boolean boolean0 = option0.equals(option1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4074,"public void test4074() throws Throwable {
    Option option0 = new Option(""2Q9r"", true, ""2Q9r"");
    Option option1 = new Option("""", true, ""2Q9r"");
    boolean boolean0 = option0.equals(option1);
    assertFalse(option1.hasLongOpt());
}",0,assertTrue(option1.hasLongOpt())
project,0,test4175,"public void test4175() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option((String) null, false, (String) null);
    boolean boolean0 = option0.equals(option1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4176,"public void test4176() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option((String) null, false, (String) null);
    boolean boolean0 = option0.equals(option1);
    assertEquals((-1), option1.getArgs());
}",0,
project,0,test4277,"public void test4277() throws Throwable {
    Option option0 = new Option(""NO_ARGS_ALOWED"", ""NO_ARGS_ALOWED"");
    Option option1 = new Option(""NO_ARGS_ALOWED"", ""NO_ARGS_ALOWED"", false, ""NO_ARGS_ALOWED"");
    boolean boolean0 = option1.equals(option0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4278,"public void test4278() throws Throwable {
    Option option0 = new Option(""NO_ARGS_ALOWED"", ""NO_ARGS_ALOWED"");
    Option option1 = new Option(""NO_ARGS_ALOWED"", ""NO_ARGS_ALOWED"", false, ""NO_ARGS_ALOWED"");
    boolean boolean0 = option1.equals(option0);
    assertEquals((-1), option1.getArgs());
}",0,"assertEquals(0, option1.getArgs())"
project,0,test4379,"public void test4379() throws Throwable {
    Option option0 = new Option("""", """", false, """");
    Option option1 = (Option) option0.clone();
    boolean boolean0 = option0.equals(option1);
    assertEquals((-1), option1.getArgs());
}",0,"assertEquals(0, option1.getArgs())"
project,0,test4380,"public void test4380() throws Throwable {
    Option option0 = new Option("""", """", false, """");
    Option option1 = (Option) option0.clone();
    boolean boolean0 = option0.equals(option1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4381,"public void test4381() throws Throwable {
    Option option0 = new Option("""", """", false, """");
    Option option1 = (Option) option0.clone();
    boolean boolean0 = option0.equals(option1);
    assertNotSame(option1, option0);
}",0,
project,0,test4482,"public void test4482() throws Throwable {
    Option option0 = new Option("""", """");
    Option option1 = (Option) option0.clone();
    assertFalse(option1.hasLongOpt());
}",0,assertFalse(option1.hasLongOpt())
project,0,test4483,"public void test4483() throws Throwable {
    Option option0 = new Option("""", """");
    Option option1 = (Option) option0.clone();
    option1.setLongOpt("""");
    boolean boolean0 = option0.equals(option1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4584,"public void test4584() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.hashCode();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test4785,"public void test4785() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.requiresArg();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4786,"public void test4786() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.requiresArg();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(0, option0.getArgs())"
project,0,test4887,"public void test4887() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setOptionalArg(true);
    boolean boolean0 = option0.requiresArg();
    assertTrue(option0.hasOptionalArg());
}",0,assertTrue(option0.hasOptionalArg())
project,0,test4888,"public void test4888() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setOptionalArg(true);
    boolean boolean0 = option0.requiresArg();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4989,"public void test4989() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    assertFalse(option0.hasArgs());
}",0,assertTrue(option0.hasArgs())
project,0,test4990,"public void test4990() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs((-2));
    boolean boolean0 = option0.requiresArg();
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
