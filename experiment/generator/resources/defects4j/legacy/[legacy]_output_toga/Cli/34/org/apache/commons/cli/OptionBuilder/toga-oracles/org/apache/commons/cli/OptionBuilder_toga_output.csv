project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.hasArgs(228);
    assertNotNull(optionBuilder0);
}",1,
project,0,test011,"public void test011() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.isRequired();
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test022,"public void test022() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.withValueSeparator('~');
    assertNotNull(optionBuilder0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.hasArg();
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test044,"public void test044() throws Throwable {
    OptionBuilder.withLongOpt(""v45HM>QGNI:>qN7"");
    Option option0 = OptionBuilder.create();
    assertEquals((-1), option0.getArgs());
}",0,"assertEquals(1, option0.getArgs())"
project,0,test055,"public void test055() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.isRequired(false);
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test066,"public void test066() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.withArgName(""}"");
    assertNotNull(optionBuilder0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.withValueSeparator();
    assertNotNull(optionBuilder0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArg();
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test099,"public void test099() throws Throwable {
    Class<Object> class0 = Object.class;
    OptionBuilder optionBuilder0 = OptionBuilder.withType(class0);
    assertNotNull(optionBuilder0);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Option option0 = OptionBuilder.create('@');
    assertEquals((-1), option0.getArgs());
}",0,
project,0,test1011,"public void test1011() throws Throwable {
    Option option0 = OptionBuilder.create('@');
    assertEquals(""@"", option0.getOpt());
}",0,assertNotNull(option0.getOpt())
project,0,test1112,"public void test1112() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.hasArgs();
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test1213,"public void test1213() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs(0);
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test1314,"public void test1314() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs();
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test1415,"public void test1415() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.withDescription("""");
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test1516,"public void test1516() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.hasArg(false);
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test1617,"public void test1617() throws Throwable {
    OptionBuilder optionBuilder0 = OptionBuilder.hasArg(true);
    assertNotNull(optionBuilder0);
}",0,assertNotNull(optionBuilder0)
project,0,test1718,"public void test1718() throws Throwable {
    try {
        OptionBuilder.create();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must specify longopt
        //
        verifyException(""org.apache.commons.cli.OptionBuilder"", e);
    }
}",1,
