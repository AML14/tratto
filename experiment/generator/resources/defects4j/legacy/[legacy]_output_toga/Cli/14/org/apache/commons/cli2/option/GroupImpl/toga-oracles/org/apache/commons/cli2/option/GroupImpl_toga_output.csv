project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DateValidator.date.OutOfRange"", ""^>Td)Y'jfHlw,D_"", (-134), (-134));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    writeableCommandLineImpl0.addSwitch(groupImpl0, true);
    assertEquals(""^>Td)Y'jfHlw,D_"", groupImpl0.getDescription());
}",0,
project,0,test001,"public void test001() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DateValidator.date.OutOfRange"", ""^>Td)Y'jfHlw,D_"", (-134), (-134));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    writeableCommandLineImpl0.addSwitch(groupImpl0, true);
    assertEquals((-134), groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test002,"public void test002() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DateValidator.date.OutOfRange"", ""^>Td)Y'jfHlw,D_"", (-134), (-134));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    writeableCommandLineImpl0.addSwitch(groupImpl0, true);
    assertEquals((-134), groupImpl0.getMaximum());
}",0,"assertEquals(1, groupImpl0.getMaximum())"
project,0,test003,"public void test003() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DateValidator.date.OutOfRange"", ""^>Td)Y'jfHlw,D_"", (-134), (-134));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    writeableCommandLineImpl0.addSwitch(groupImpl0, true);
    assertEquals(""DateValidator.date.OutOfRange"", groupImpl0.getPreferredName());
}",0,assertNotNull(groupImpl0.getPreferredName())
project,0,test014,"public void test014() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Hcw|cN^aFv%#"", ""|qXI,R?/98tI60Nb"", 982, 982);
    groupImpl0.getAnonymous();
    assertEquals(982, groupImpl0.getMaximum());
}",0,
project,0,test015,"public void test015() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Hcw|cN^aFv%#"", ""|qXI,R?/98tI60Nb"", 982, 982);
    groupImpl0.getAnonymous();
    assertEquals(""Hcw|cN^aFv%#"", groupImpl0.getPreferredName());
}",0,assertNotNull(groupImpl0.getPreferredName())
project,0,test016,"public void test016() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Hcw|cN^aFv%#"", ""|qXI,R?/98tI60Nb"", 982, 982);
    groupImpl0.getAnonymous();
    assertEquals(""|qXI,R?/98tI60Nb"", groupImpl0.getDescription());
}",0,
project,0,test017,"public void test017() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Hcw|cN^aFv%#"", ""|qXI,R?/98tI60Nb"", 982, 982);
    groupImpl0.getAnonymous();
    assertEquals(982, groupImpl0.getMinimum());
}",0,
project,0,test028,"public void test028() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
    int int0 = groupImpl0.getMaximum();
    assertEquals(0, groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test029,"public void test029() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
    int int0 = groupImpl0.getMaximum();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test0311,"public void test0311() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""DateValidator.date.OutOfRange"", 1626, 1626, 'l', 'l', (Validator) null, "">>Td)'jfHlw,D_"", linkedList0, 1626);
    linkedList0.add(argumentImpl0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DateValidator.date.OutOfRange"", "">>Td)'jfHlw,D_"", (-134), (-134));
    groupImpl0.toString();
    assertEquals((-134), groupImpl0.getMaximum());
}",0,
project,0,test0412,"public void test0412() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, ""yjdo_:x{"", 62, 569);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    assertEquals(569, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test0413,"public void test0413() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, ""yjdo_:x{"", 62, 569);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    assertEquals(62, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test0414,"public void test0414() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, ""yjdo_:x{"", 62, 569);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0516,"public void test0516() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", (-1056), (-1056));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0618,"public void test0618() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption("""", """", 14);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", 14, 14);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""T|QhH<[\""t,Cj7|!"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0720,"public void test0720() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", (-1056), (-1056));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""Passes properties and values to the application"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0821,"public void test0821() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""Passes properties and values to the application"", 1999, 1999);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertEquals(""Passes properties and values to the application"", groupImpl0.getDescription());
}",0,assertNotNull(groupImpl0.getDescription())
project,0,test0822,"public void test0822() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""Passes properties and values to the application"", 1999, 1999);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertEquals(""-D"", groupImpl0.getPreferredName());
}",0,assertNotNull(groupImpl0.getPreferredName())
project,0,test0823,"public void test0823() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""Passes properties and values to the application"", 1999, 1999);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0824,"public void test0824() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""Passes properties and values to the application"", 1999, 1999);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertEquals(1999, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test0825,"public void test0825() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""Passes properties and values to the application"", 1999, 1999);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertEquals(1999, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test0927,"public void test0927() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""DateValidator.date.OutOfRange"", ""DateValidator.date.OutOfRange"", 1626, 1626, 'l', 'l', (Validator) null, ""DateValidator.date.OutOfRange"", linkedList0, 1626);
    linkedList0.add(argumentImpl0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DateValidator.date.OutOfRange"", ""^>Td)Y'jfHlw,D_"", (-134), (-134));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""ecELT)"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1028,"public void test1028() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", 95, 95);
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add(""-D"");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    try {
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unexpected -D while processing
        //
        verifyException(""org.apache.commons.cli2.option.PropertyOption"", e);
    }
}",1,
project,0,test1130,"public void test1130() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    PropertyOption propertyOption1 = new PropertyOption("""", """", (-1205));
    linkedList0.add(propertyOption1);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-1205), (-1205));
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add(""Passes properties and values to the application"");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals((-1205), groupImpl0.getMinimum());
}",0,
project,0,test1231,"public void test1231() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", 95, 95);
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add(""-D"");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(95, groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test1232,"public void test1232() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", 95, 95);
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add(""-D"");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(95, groupImpl0.getMaximum());
}",0,"assertEquals(1, groupImpl0.getMaximum())"
project,0,test1334,"public void test1334() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 0, 0);
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add("""");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(0, groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test1335,"public void test1335() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 0, 0);
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add("""");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(0, groupImpl0.getMaximum());
}",0,"assertEquals(1, groupImpl0.getMaximum())"
project,0,test1437,"public void test1437() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""DateValidator.date.OutOfRange"", 1626, 1626, 'l', 'l', (Validator) null, ""WD vn"", linkedList0, 1626);
    linkedList0.add(argumentImpl0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DateValidator.date.OutOfRange"", ""^>Td)Y'jfHlw,D_"", (-134), (-134));
    argumentImpl0.toString();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true, false, false).when(listIterator0).hasNext();
    doReturn(""--"").when(listIterator0).next();
    doReturn(""DateValidator.date.OutOfRange"").when(listIterator0).previous();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals((-134), groupImpl0.getMinimum());
}",0,
project,0,test1538,"public void test1538() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""-D"", (-363), (-363));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertEquals(""-D"", groupImpl0.getDescription());
}",0,assertNotNull(groupImpl0.getDescription())
project,0,test1539,"public void test1539() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""-D"", (-363), (-363));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertEquals((-363), groupImpl0.getMaximum());
}",0,
project,0,test1540,"public void test1540() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""-D"", (-363), (-363));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertEquals((-363), groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test1541,"public void test1541() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""-D"", (-363), (-363));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertEquals(""Passes properties and values to the application"", groupImpl0.getPreferredName());
}",0,assertNotNull(groupImpl0.getPreferredName())
project,0,test1642,"public void test1642() throws Throwable {
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    LinkedHashSet<Switch> linkedHashSet0 = new LinkedHashSet<Switch>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, ""-^=mE?U6H#JG\""|.\\x"", 93, 93);
    Command command0 = new Command(""|"", ""-^=mE?U6H#JG\""|.\\x"", linkedHashSet0, true, (Argument) null, groupImpl0, 33);
    linkedList0.add(command0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(command0, linkedList0);
    try {
        groupImpl0.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing required option |
        //
        verifyException(""org.apache.commons.cli2.option.Command"", e);
    }
}",1,
project,0,test1843,"public void test1843() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""-D"", (-363), (-363));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    try {
        groupImpl0.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unexpected -D while processing Passes properties and values to the application
        //
        verifyException(""org.apache.commons.cli2.option.GroupImpl"", e);
    }
}",1,
project,0,test1944,"public void test1944() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""NMZ~J)|5'/3$<OP'9t]"", ""NMZ~J)|5'/3$<OP'9t]"", 41, 41);
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList1);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    try {
        groupImpl0.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing option NMZ~J)|5'/3$<OP'9t]
        //
        verifyException(""org.apache.commons.cli2.option.GroupImpl"", e);
    }
}",1,
project,0,test2045,"public void test2045() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""org.apache.commons.cli2.DisplaySetting"", ""org.apache.commons.cli2.option.OptionImpl"", (-1409), (-1570));
    FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.option.OptionImpl"", ""org.apache.commons.cli2.option.OptionImpl"", (-1409), (-1409), '1', '1', fileValidator0, ""QIZ"", linkedList0, (-1570));
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', 's', ""j~"", linkedList0);
    linkedList0.add((ArgumentImpl) sourceDestArgument0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    GroupImpl groupImpl1 = new GroupImpl(linkedList0, """", ""--"", (-1570), (-1409));
    // Undeclared exception!
    try {
        groupImpl1.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$EmptyIterator"", e);
    }
}",1,
project,0,test2146,"public void test2146() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Unexpected.token"", ""Unexpected.token"", 0, 0);
    LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
    // Undeclared exception!
    try {
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) null, ""[Unexpected.token ()]"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli2.option.GroupImpl"", e);
    }
}",0,
project,0,test2247,"public void test2247() throws Throwable {
    LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 285, 285);
    LinkedHashSet<Switch> linkedHashSet0 = new LinkedHashSet<Switch>();
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
    assertEquals(285, groupImpl0.getMaximum());
}",0,
project,0,test2248,"public void test2248() throws Throwable {
    LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 285, 285);
    LinkedHashSet<Switch> linkedHashSet0 = new LinkedHashSet<Switch>();
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
    assertEquals(285, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2349,"public void test2349() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.addFirst(propertyOption0);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", 0, 0);
    String string0 = groupImpl0.toString();
    assertEquals(0, groupImpl0.getMaximum());
}",0,
project,0,test2350,"public void test2350() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.addFirst(propertyOption0);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", 0, 0);
    String string0 = groupImpl0.toString();
    assertEquals(""[-D (-D<property>=<value>|-D<property>=<value>)]"", string0);
}",0,assertNotNull(string0)
project,0,test2451,"public void test2451() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 0, 0);
    LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
    List list0 = groupImpl0.helpLines(0, linkedHashSet0, (Comparator) null);
    assertEquals(0, groupImpl0.getMaximum());
}",0,"assertEquals(1, groupImpl0.getMaximum())"
project,0,test2452,"public void test2452() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 0, 0);
    LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
    List list0 = groupImpl0.helpLines(0, linkedHashSet0, (Comparator) null);
    assertEquals(0, groupImpl0.getMinimum());
}",0,
project,0,test2555,"public void test2555() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""ks9<Au"", ""ks9<Au"", 1116, 1116);
    List list0 = groupImpl0.helpLines(1116, displaySetting0.ALL, (Comparator) null);
    assertEquals(1116, groupImpl0.getMaximum());
}",0,"assertEquals(1, groupImpl0.getMaximum())"
project,0,test2556,"public void test2556() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""ks9<Au"", ""ks9<Au"", 1116, 1116);
    List list0 = groupImpl0.helpLines(1116, displaySetting0.ALL, (Comparator) null);
    assertEquals(1116, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2658,"public void test2658() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""ksucA'"", ""ksucA'"", (-1759), (-1759));
    Comparator<DisplaySetting> comparator0 = (Comparator<DisplaySetting>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    List list0 = groupImpl0.helpLines((-1759), displaySetting0.ALL, comparator0);
    assertEquals((-1759), groupImpl0.getMaximum());
}",0,
project,0,test2659,"public void test2659() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""ksucA'"", ""ksucA'"", (-1759), (-1759));
    Comparator<DisplaySetting> comparator0 = (Comparator<DisplaySetting>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    List list0 = groupImpl0.helpLines((-1759), displaySetting0.ALL, comparator0);
    assertEquals((-1759), groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2760,"public void test2760() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-330), (-330));
    Option option0 = groupImpl0.findOption(""-D"");
    assertNotNull(option0);
}",0,assertNotNull(option0)
project,0,test2761,"public void test2761() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-330), (-330));
    Option option0 = groupImpl0.findOption(""-D"");
    assertEquals((-330), groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test2762,"public void test2762() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-330), (-330));
    Option option0 = groupImpl0.findOption(""-D"");
    assertEquals((-330), groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2863,"public void test2863() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-330), (-330));
    groupImpl0.findOption(""Passes properties and values to the application"");
    assertEquals((-330), groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test2864,"public void test2864() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-330), (-330));
    groupImpl0.findOption(""Passes properties and values to the application"");
    assertEquals((-330), groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2965,"public void test2965() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 3440, 3440);
    boolean boolean0 = groupImpl0.isRequired();
    assertEquals(3440, groupImpl0.getMaximum());
}",0,
project,0,test2966,"public void test2966() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 3440, 3440);
    boolean boolean0 = groupImpl0.isRequired();
    assertEquals(3440, groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test2967,"public void test2967() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 3440, 3440);
    boolean boolean0 = groupImpl0.isRequired();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3068,"public void test3068() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-330), (-330));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.defaults(writeableCommandLineImpl0);
    assertEquals((-330), groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test3069,"public void test3069() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-330), (-330));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.defaults(writeableCommandLineImpl0);
    assertEquals((-330), groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test3171,"public void test3171() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""'"", ""'"", 281, 281, 'o', 'o', numberValidator0, ""'"", linkedList0, 'o');
    linkedList0.add(argumentImpl0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""'"", ""Unexpected.token"", '\u0000', '\u0000');
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.defaults(writeableCommandLineImpl0);
    assertEquals(""Unexpected.token"", groupImpl0.getDescription());
}",0,assertNotNull(groupImpl0.getDescription())
