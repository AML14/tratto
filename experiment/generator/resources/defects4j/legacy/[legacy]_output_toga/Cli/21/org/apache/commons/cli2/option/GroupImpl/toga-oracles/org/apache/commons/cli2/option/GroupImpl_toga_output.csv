project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true).when(listIterator0).hasNext();
    doReturn(""Argument.too.many.values"").when(listIterator0).next();
    doReturn(""Argument.too.many.values"").when(listIterator0).previous();
    NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""Argument.too.many.values"", ""Argument.too.many.values"", 1, 1, 'i', 't', numberValidator0, ""Argument.too.many.values"", linkedList0, (-2908));
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.too.many.values"", ""Argument.too.many.values"", 842, 842, true);
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(842, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test001,"public void test001() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true).when(listIterator0).hasNext();
    doReturn(""Argument.too.many.values"").when(listIterator0).next();
    doReturn(""Argument.too.many.values"").when(listIterator0).previous();
    NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""Argument.too.many.values"", ""Argument.too.many.values"", 1, 1, 'i', 't', numberValidator0, ""Argument.too.many.values"", linkedList0, (-2908));
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.too.many.values"", ""Argument.too.many.values"", 842, 842, true);
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(842, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test012,"public void test012() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.missing.values"", """", 6837, 1910, true);
    groupImpl0.getAnonymous();
    assertEquals(6837, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test013,"public void test013() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.missing.values"", """", 6837, 1910, true);
    groupImpl0.getAnonymous();
    assertEquals(1910, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test014,"public void test014() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.missing.values"", """", 6837, 1910, true);
    groupImpl0.getAnonymous();
    assertEquals(""Argument.missing.values"", groupImpl0.getPreferredName());
}",0,assertNotNull(groupImpl0.getPreferredName())
project,0,test015,"public void test015() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.missing.values"", """", 6837, 1910, true);
    groupImpl0.getAnonymous();
    assertEquals("""", groupImpl0.getDescription());
}",0,assertNotNull(groupImpl0.getDescription())
project,0,test026,"public void test026() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, "" ("", "" ("", 91, 91, true);
    int int0 = groupImpl0.getMaximum();
    assertEquals(91, int0);
}",0,"assertEquals(0, int0)"
project,0,test027,"public void test027() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, "" ("", "" ("", 91, 91, true);
    int int0 = groupImpl0.getMaximum();
    assertEquals(91, groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test0411,"public void test0411() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    LinkedList<SourceDestArgument> linkedList1 = new LinkedList<SourceDestArgument>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList1, """", ""2K1gjZtPWHU89!H-+)"", 2149, (-2255), false);
    linkedList0.add((Object) groupImpl0);
    GroupImpl groupImpl1 = new GroupImpl(linkedList0, """", """", (-2255), (-2255), false);
    String string0 = groupImpl1.toString();
    assertEquals(""[ ([ ()])]"", string0);
}",0,
project,0,test0512,"public void test0512() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0513,"public void test0513() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    assertEquals(97, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test0514,"public void test0514() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    assertEquals(97, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test0616,"public void test0616() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""("", ""("", 1825, 1825, false);
    DefaultOption defaultOption0 = new DefaultOption(""("", ""("", false, ""("", ""("", linkedHashSet0, (Set) null, false, (Argument) null, groupImpl0, 1825);
    linkedList0.add(defaultOption0);
    GroupImpl groupImpl1 = new GroupImpl(linkedList0, ""("", ""("", 1825, 1825, true);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList0);
    boolean boolean0 = groupImpl1.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""("");
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test0718,"public void test0718() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
    linkedList1.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList1, """", ""-D"", (-4288), (-1121), true);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""Lo"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0820,"public void test0820() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption("""", ""-D"", (-4288));
    linkedList1.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList1, """", ""-D"", (-4288), (-1121), true);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""Lo"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0921,"public void test0921() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", (-725), (-725), true);
    PropertyOption propertyOption0 = new PropertyOption("""", """", (-725));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertEquals((-725), groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test0922,"public void test0922() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", (-725), (-725), true);
    PropertyOption propertyOption0 = new PropertyOption("""", """", (-725));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0923,"public void test0923() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", (-725), (-725), true);
    PropertyOption propertyOption0 = new PropertyOption("""", """", (-725));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertEquals((-725), groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test1025,"public void test1025() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""9F?66Q|Y\""#*"", ""9F?66Q|Y\""#*"", 97, 97, 'd', 'd', numberValidator0, ""Unexpected.token"", linkedList0, 97);
    linkedList0.add(argumentImpl0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""9F?66Q|Y\""#*"", ""9F?66Q|Y\""#*"", 97, 97, true);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""9F?66Q|Y\""#*"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1228,"public void test1228() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true).when(listIterator0).hasNext();
    doReturn(""Argument.too.many.values"").when(listIterator0).next();
    doReturn(""Argument.too.many.values"").when(listIterator0).previous();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.too.many.values"", ""Argument.too.many.values"", 842, 842, true);
    PropertyOption propertyOption0 = new PropertyOption(""Argument.too.many.values"", ""Argument.too.many.values"", 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(842, groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test1229,"public void test1229() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true).when(listIterator0).hasNext();
    doReturn(""Argument.too.many.values"").when(listIterator0).next();
    doReturn(""Argument.too.many.values"").when(listIterator0).previous();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.too.many.values"", ""Argument.too.many.values"", 842, 842, true);
    PropertyOption propertyOption0 = new PropertyOption(""Argument.too.many.values"", ""Argument.too.many.values"", 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(842, groupImpl0.getMaximum());
}",0,
project,0,test1330,"public void test1330() throws Throwable {
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Unexpected.token"", ""Unexpected.token"", 41, 41, true);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    try {
        groupImpl0.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing option Unexpected.token
        //
        verifyException(""org.apache.commons.cli2.option.GroupImpl"", e);
    }
}",0,
project,0,test1431,"public void test1431() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""2dK7j!21Y9#@- `g S"", ""2dK7j!21Y9#@- `g S"", (-848), (-848), true);
    linkedList0.add(groupImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    assertFalse(groupImpl0.isRequired());
}",0,assertTrue(groupImpl0.isRequired())
project,0,test1432,"public void test1432() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""2dK7j!21Y9#@- `g S"", ""2dK7j!21Y9#@- `g S"", (-848), (-848), true);
    linkedList0.add(groupImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertEquals((-848), groupImpl0.getMinimum());
}",0,
project,0,test1433,"public void test1433() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""2dK7j!21Y9#@- `g S"", ""2dK7j!21Y9#@- `g S"", (-848), (-848), true);
    linkedList0.add(groupImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertEquals((-848), groupImpl0.getMaximum());
}",0,
project,0,test1534,"public void test1534() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""2dK7j!21Y9#@- `g S"", ""2dK7j!21Y9#@- `g S"", (-848), (-848), true);
    linkedList0.add(groupImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    writeableCommandLineImpl0.addOption(groupImpl0);
    try {
        groupImpl0.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unexpected 2dK7j!21Y9#@- `g S while processing 2dK7j!21Y9#@- `g S
        //
        verifyException(""org.apache.commons.cli2.option.GroupImpl"", e);
    }
}",1,
project,0,test1735,"public void test1735() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    UrlValidator urlValidator0 = new UrlValidator();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", """", (-1), (-1), 'g', 'g', urlValidator0, "" "", linkedList0, 181);
    linkedList0.offerLast(argumentImpl0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, "" "", "" "", 0, (-1), true);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    // Undeclared exception!
    try {
        groupImpl0.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1
        //
        verifyException(""java.util.Collections$EmptyList"", e);
    }
}",1,
project,0,test1836,"public void test1836() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 94, 94, true);
    LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
    Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
    assertTrue(groupImpl0.isRequired());
}",0,assertTrue(groupImpl0.isRequired())
project,0,test1837,"public void test1837() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 94, 94, true);
    LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
    Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
    assertEquals(94, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test1838,"public void test1838() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 94, 94, true);
    LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
    Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
    assertEquals(94, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test1940,"public void test1940() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    linkedList0.add(propertyOption0);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", ""-D"", (-4288), (-1121), true);
    String string0 = groupImpl0.toString();
    assertEquals(""[ (-D<property>=<value>|-D<property>=<value>)]"", string0);
}",0,
project,0,test2042,"public void test2042() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""Argument.to.any.va>ues"", ""Argument.to.any.va>ues"", (-843), (-843), 'A', 'A', numberValidator0, ""z<q3VEG^`2IJecgC>l"", linkedList1, (-843));
    linkedList0.add(argumentImpl0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.to.any.va>ues"", ""Argument.to.any.va>ues"", (-843), (-843), true);
    String string0 = groupImpl0.toString();
    assertEquals(""[Argument.to.any.va>ues ()] "", string0);
}",0,
project,0,test2143,"public void test2143() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.too.many.values"", ""Argument.too.many.values"", 842, 842, true);
    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
    Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    List list0 = groupImpl0.helpLines(842, linkedHashSet0, comparator0);
    assertEquals(842, groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test2144,"public void test2144() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.too.many.values"", ""Argument.too.many.values"", 842, 842, true);
    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
    Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    List list0 = groupImpl0.helpLines(842, linkedHashSet0, comparator0);
    assertEquals(842, groupImpl0.getMaximum());
}",0,
project,0,test2247,"public void test2247() throws Throwable {
    LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""org.apache.comm<ns.clO2.option.ArgumentItpl"", ""org.apache.comm<ns.clO2.option.ArgumentItpl"", 233, (-3481), true);
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    List list0 = groupImpl0.helpLines((-4140), displaySetting0.ALL, comparator0);
    assertEquals((-3481), groupImpl0.getMaximum());
}",0,
project,0,test2248,"public void test2248() throws Throwable {
    LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""org.apache.comm<ns.clO2.option.ArgumentItpl"", ""org.apache.comm<ns.clO2.option.ArgumentItpl"", 233, (-3481), true);
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    List list0 = groupImpl0.helpLines((-4140), displaySetting0.ALL, comparator0);
    assertEquals(233, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2349,"public void test2349() throws Throwable {
    LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 0, (-3481), false);
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    DisplaySetting displaySetting1 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    linkedList0.add(displaySetting1);
    // Undeclared exception!
    try {
        groupImpl0.helpLines(176, displaySetting0.ALL, (Comparator) null);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.apache.commons.cli2.DisplaySetting$MockitoMock$42688077 cannot be cast to org.apache.commons.cli2.Option
        //
        verifyException(""org.apache.commons.cli2.option.GroupImpl"", e);
    }
}",0,
project,0,test2450,"public void test2450() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, "" ("", "" ("", 1859, 1859, true);
    DefaultOption defaultOption0 = new DefaultOption("" ("", "" ("", true, "" ("", "" ("", linkedHashSet0, (Set) null, true, (Argument) null, groupImpl0, 1859);
    linkedList0.add(defaultOption0);
    Option option0 = groupImpl0.findOption("" ("");
    assertEquals(1859, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2451,"public void test2451() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, "" ("", "" ("", 1859, 1859, true);
    DefaultOption defaultOption0 = new DefaultOption("" ("", "" ("", true, "" ("", "" ("", linkedHashSet0, (Set) null, true, (Argument) null, groupImpl0, 1859);
    linkedList0.add(defaultOption0);
    Option option0 = groupImpl0.findOption("" ("");
    assertNotNull(option0);
}",0,
project,0,test2452,"public void test2452() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, "" ("", "" ("", 1859, 1859, true);
    DefaultOption defaultOption0 = new DefaultOption("" ("", "" ("", true, "" ("", "" ("", linkedHashSet0, (Set) null, true, (Argument) null, groupImpl0, 1859);
    linkedList0.add(defaultOption0);
    Option option0 = groupImpl0.findOption("" ("");
    assertEquals(1859, groupImpl0.getMaximum());
}",0,
project,0,test2553,"public void test2553() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""N4hr$9|djnLV!"", ""N4hr$9|djnLV!"", 50, 50, false);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""N4hr$9|djnLV!"", ""N4hr$9|djnLV!"", 50, 50, 'Y', 'Y', (Validator) null, ""N4hr$9|djnLV!"", linkedList0, 50);
    linkedList0.add(argumentImpl0);
    groupImpl0.findOption(""N4hr$9|djnLV!"");
    assertEquals(50, groupImpl0.getMaximum());
}",0,
project,0,test2554,"public void test2554() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""N4hr$9|djnLV!"", ""N4hr$9|djnLV!"", 50, 50, false);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""N4hr$9|djnLV!"", ""N4hr$9|djnLV!"", 50, 50, 'Y', 'Y', (Validator) null, ""N4hr$9|djnLV!"", linkedList0, 50);
    linkedList0.add(argumentImpl0);
    groupImpl0.findOption(""N4hr$9|djnLV!"");
    assertEquals(50, groupImpl0.getMinimum());
}",0,
project,0,test2655,"public void test2655() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""?'OC%f`oP%tU2-'.S"", ""?'OC%f`oP%tU2-'.S"", 1, 1, true);
    PropertyOption propertyOption0 = new PropertyOption();
    groupImpl0.setParent(propertyOption0);
    String string0 = groupImpl0.toString();
    assertEquals(1, groupImpl0.getMaximum());
}",0,
project,0,test2656,"public void test2656() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""?'OC%f`oP%tU2-'.S"", ""?'OC%f`oP%tU2-'.S"", 1, 1, true);
    PropertyOption propertyOption0 = new PropertyOption();
    groupImpl0.setParent(propertyOption0);
    String string0 = groupImpl0.toString();
    assertEquals(1, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2657,"public void test2657() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""?'OC%f`oP%tU2-'.S"", ""?'OC%f`oP%tU2-'.S"", 1, 1, true);
    PropertyOption propertyOption0 = new PropertyOption();
    groupImpl0.setParent(propertyOption0);
    String string0 = groupImpl0.toString();
    assertEquals(""?'OC%f`oP%tU2-'.S ()"", string0);
}",0,assertNotNull(string0)
project,0,test2759,"public void test2759() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Misming.option"", ""Misming.option"", 2399, 2399, true);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    groupImpl0.defaults(writeableCommandLineImpl0);
    assertEquals(2399, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test2861,"public void test2861() throws Throwable {
    LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
    NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""Argument.to.any.va>ues"", ""Argument.to.any.va>ues"", (-843), (-843), 'A', 'A', numberValidator0, ""z<q3VEG^`2IJecgC>l"", linkedList1, (-843));
    linkedList0.add(argumentImpl0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Argument.to.any.va>ues"", ""Argument.to.any.va>ues"", (-843), (-843), true);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.defaults(writeableCommandLineImpl0);
    assertEquals((-843), groupImpl0.getMinimum());
}",0,
