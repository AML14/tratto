project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Options options0 = new Options();
    // Undeclared exception!
    try {
        options0.addOption(""j;"", true, ""=\""wF?Y"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The option 'j;' contains an illegal character : ';'
        //
        verifyException(""org.apache.commons.cli.OptionValidator"", e);
    }
}",1,
project,0,test011,"public void test011() throws Throwable {
    Options options0 = new Options();
    Options options1 = options0.addOption("""", """");
    assertSame(options1, options0);
}",1,
project,0,test022,"public void test022() throws Throwable {
    Options options0 = new Options();
    Collection<Option> collection0 = options0.getOptions();
    assertNotNull(collection0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    Options options0 = new Options();
    String string0 = options0.toString();
    assertNotNull(string0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    Options options0 = new Options();
    // Undeclared exception!
    try {
        options0.getOptionGroup((Option) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.Options"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    Options options0 = new Options();
    Collection<OptionGroup> collection0 = options0.getOptionGroups();
    assertNotNull(collection0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup0);
    assertSame(options0, options1);
}",0,
project,0,test088,"public void test088() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""Vw"", ""org.apache.commons.cli.Options"", false, ""OJ,R!zRP"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    assertFalse(option0.isRequired());
}",0,assertTrue(option0.isRequired())
project,0,test089,"public void test089() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""Vw"", ""org.apache.commons.cli.Options"", false, ""OJ,R!zRP"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    boolean boolean0 = options0.hasOption(""Vw"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0910,"public void test0910() throws Throwable {
    Options options0 = new Options();
    Option option0 = new Option(""u"", ""?B&B~"");
    option0.setRequired(true);
    options0.addOption(option0);
    Options options1 = options0.addOption(option0);
    assertSame(options1, options0);
}",0,
project,0,test1011,"public void test1011() throws Throwable {
    Options options0 = new Options();
    Option option0 = options0.getOption(""The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. "");
    assertNull(option0);
}",0,assertNotNull(option0)
project,0,test1112,"public void test1112() throws Throwable {
    Options options0 = new Options();
    Option option0 = new Option("""", """");
    Options options1 = options0.addOption(option0);
    Option option1 = options1.getOption("""");
    assertEquals((-2), Option.UNLIMITED_VALUES);
}",0,
project,0,test1416,"public void test1416() throws Throwable {
    Options options0 = new Options();
    boolean boolean0 = options0.hasOption(""org.apache.commons.cli.Options"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1517,"public void test1517() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""Vw"", ""org.apache.commons.cli.Options"", false, ""OJ,R!zRP"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    assertFalse(option0.isRequired());
}",0,assertTrue(option0.isRequired())
project,0,test1518,"public void test1518() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""Vw"", ""org.apache.commons.cli.Options"", false, ""OJ,R!zRP"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    boolean boolean0 = options0.hasOption(""org.apache.commons.cli.Options"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1619,"public void test1619() throws Throwable {
    Options options0 = new Options();
    boolean boolean0 = options0.hasLongOption(""7"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1720,"public void test1720() throws Throwable {
    Options options0 = new Options();
    options0.addOption(""dI"", """", true, (String) null);
    boolean boolean0 = options0.hasLongOption("""");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1821,"public void test1821() throws Throwable {
    Options options0 = new Options();
    boolean boolean0 = options0.hasShortOption(""OV{8Rx'de"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1922,"public void test1922() throws Throwable {
    Options options0 = new Options();
    Option option0 = new Option("""", (String) null);
    Options options1 = options0.addOption(option0);
    boolean boolean0 = options1.hasShortOption("""");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
