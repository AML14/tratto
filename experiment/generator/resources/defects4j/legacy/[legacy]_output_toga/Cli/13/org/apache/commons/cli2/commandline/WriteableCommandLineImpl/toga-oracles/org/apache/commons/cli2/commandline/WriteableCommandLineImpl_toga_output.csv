project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    String string0 = writeableCommandLineImpl0.getProperty(""-D"", ""Passes properties and values to the application"");
    assertEquals(""Passes properties and values to the application"", string0);
}",0,assertNotNull(string0)
project,0,test043,"public void test043() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    int int0 = writeableCommandLineImpl0.getOptionCount((Option) propertyOption0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test065,"public void test065() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    Object object0 = writeableCommandLineImpl0.getValue(""Passes properties and values to the application"");
    assertNull(object0);
}",0,
project,0,test076,"public void test076() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addOption(propertyOption0);
    boolean boolean0 = writeableCommandLineImpl0.hasOption(""-D"");
    assertTrue(boolean0);
}",1,
project,0,test087,"public void test087() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
    assertFalse(propertyOption0.isRequired());
}",0,assertTrue(propertyOption0.isRequired())
project,0,test098,"public void test098() throws Throwable {
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    DateValidator dateValidator0 = DateValidator.getDateInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""Passes properties and values to the application"", ""Passes properties and values to the application"", 1, 1, '#', '#', dateValidator0, ""-D"", linkedList0, 1);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    writeableCommandLineImpl0.addValue(argumentImpl0, argumentImpl0);
    assertEquals(1, argumentImpl0.getMaximum());
}",0,"assertEquals(0, argumentImpl0.getMaximum())"
project,0,test109,"public void test109() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, false);
    // Undeclared exception!
    try {
        writeableCommandLineImpl0.addSwitch(propertyOption0, false);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Switch already set.
        //
        verifyException(""org.apache.commons.cli2.commandline.WriteableCommandLineImpl"", e);
    }
}",0,
project,0,test1110,"public void test1110() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.hasOption(""-D"");
    assertFalse(boolean0);
}",1,
project,0,test1413,"public void test1413() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption(""?"", ""?"", (-30));
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, (Boolean) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1414,"public void test1414() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption(""?"", ""?"", (-30));
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, (Boolean) null);
    assertNotNull(boolean0);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    Boolean boolean0 = writeableCommandLineImpl0.getSwitch(""Passes properties and values to the application"");
    assertNull(boolean0);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.looksLikeOption(""Passes properties and values to the application"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1717,"public void test1717() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.looksLikeOption(""-D"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1818,"public void test1818() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    linkedList0.add((Object) ""-D"");
    String string0 = writeableCommandLineImpl0.toString();
    assertEquals(""-D"", string0);
}",0,assertNotNull(string0)
project,0,test1919,"public void test1919() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    linkedList0.add((Object) ""Passes properties and values to the application"");
    linkedList0.addLast(""Passes properties and values to the application"");
    String string0 = writeableCommandLineImpl0.toString();
    assertEquals(""\""Passes properties and values to the application\"" \""Passes properties and values to the application\"""", string0);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
    assertEquals(""Passes properties and values to the application"", propertyOption0.getDescription());
}",0,assertNotNull(propertyOption0.getDescription())
project,0,test2121,"public void test2121() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
project,0,test2222,"public void test2222() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    Boolean boolean0 = Boolean.TRUE;
    writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
project,0,test2323,"public void test2323() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, (Boolean) null);
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
