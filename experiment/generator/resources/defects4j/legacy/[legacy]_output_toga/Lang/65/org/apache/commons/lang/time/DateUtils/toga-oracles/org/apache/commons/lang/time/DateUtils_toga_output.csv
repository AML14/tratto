project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    MockDate mockDate0 = new MockDate(3576, 3576, 3576, 3576, (-282));
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) mockDate0, 3576);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style 3576 is not valid.
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""y >"";
    stringArray0[1] = """";
    // Undeclared exception!
    try {
        DateUtils.parseDate(""y >"", stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test033,"public void test033() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.UK;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
    boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
    assertTrue(boolean0);
}",0,
project,0,test045,"public void test045() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 9);
    boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
    assertFalse(boolean0);
}",0,
project,0,test057,"public void test057() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 9);
    mockGregorianCalendar0.setTimeInMillis(9);
    boolean boolean0 = DateUtils.isSameInstant(calendar0, (Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",1,
project,0,test068,"public void test068() throws Throwable {
    String[] stringArray0 = new String[8];
    stringArray0[0] = """";
    Date date0 = DateUtils.parseDate("""", stringArray0);
    Locale locale0 = new Locale("""", """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Date date1 = mockGregorianCalendar0.getGregorianChange();
    boolean boolean0 = DateUtils.isSameInstant(date0, date1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0710,"public void test0710() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    Calendar calendar1 = DateUtils.truncate(calendar0, 0);
    boolean boolean0 = DateUtils.isSameDay(calendar0, calendar1);
    assertFalse(boolean0);
}",1,
project,0,test0811,"public void test0811() throws Throwable {
    MockDate mockDate0 = new MockDate((-2840), (-2840), 0);
    MockDate mockDate1 = new MockDate((-988), (-988), (-988));
    boolean boolean0 = DateUtils.isSameDay((Date) mockDate1, (Date) mockDate0);
    assertFalse(boolean0);
}",0,
project,0,test1115,"public void test1115() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4084, 4084, 4084, 4084, 4084, 4084);
    mockGregorianCalendar0.setLenient(false);
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) mockGregorianCalendar0, 4084);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // MONTH
        //
        verifyException(""java.util.GregorianCalendar"", e);
    }
}",0,
project,0,test1216,"public void test1216() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    mockGregorianCalendar0.set(0, 305);
    // Undeclared exception!
    try {
        DateUtils.round((Calendar) mockGregorianCalendar0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid era
        //
        verifyException(""java.util.GregorianCalendar"", e);
    }
}",0,
project,0,test1317,"public void test1317() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""a-w:_'P#fU2u2;R"";
    // Undeclared exception!
    try {
        DateUtils.parseDate("""", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unterminated quote
        //
        verifyException(""java.text.SimpleDateFormat"", e);
    }
}",0,
project,0,test1418,"public void test1418() throws Throwable {
    Locale locale0 = Locale.TAIWAN;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1767), (-1767), (-1767), 889, (-912));
    mockGregorianCalendar0.setLenient(false);
    // Undeclared exception!
    try {
        DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // YEAR
        //
        verifyException(""java.util.GregorianCalendar"", e);
    }
}",1,
project,0,test1519,"public void test1519() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addYears((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test1620,"public void test1620() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addWeeks((Date) null, 149);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test1721,"public void test1721() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addSeconds((Date) null, 6);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test1822,"public void test1822() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addMonths((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test1923,"public void test1923() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addMilliseconds((Date) null, 1000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2024,"public void test2024() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addHours((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2125,"public void test2125() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addDays((Date) null, 2028);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2226,"public void test2226() throws Throwable {
    MockDate mockDate0 = new MockDate((-1081), (-1081), 0, (-745), 5226, 0);
    // Undeclared exception!
    try {
        DateUtils.add(mockDate0, (-348), (-348));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.GregorianCalendar"", e);
    }
}",1,
project,0,test2529,"public void test2529() throws Throwable {
    Locale locale0 = Locale.CHINA;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    // Undeclared exception!
    try {
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 4085);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style 4085 is not valid.
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test2731,"public void test2731() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.add((Date) null, 2091, 2091);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2933,"public void test2933() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.UK;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
    boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
    assertTrue(boolean0);
}",1,
project,0,test3034,"public void test3034() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2337, 2337, 2337, 2337, 2337);
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2337, 2337, 2337, 0, 0, 0);
    boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",1,
project,0,test3337,"public void test3337() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1990, (-1306), 1990);
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) mockGregorianCalendar0, (-1306));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style -1306 is not valid.
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test3438,"public void test3438() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test3539,"public void test3539() throws Throwable {
    MockDate mockDate0 = new MockDate(1990, 1990, 1990, 1990, 1990);
    Iterator iterator0 = DateUtils.iterator((Date) mockDate0, 4);
    assertNotNull(iterator0);
}",0,
project,0,test3640,"public void test3640() throws Throwable {
    MockDate mockDate0 = new MockDate((-988), (-988), (-988));
    Iterator iterator0 = DateUtils.iterator((Date) mockDate0, 6);
    assertNotNull(iterator0);
}",0,
project,0,test3741,"public void test3741() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1990, (-1306), 1990);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    Iterator iterator0 = DateUtils.iterator(date0, 4);
    assertNotNull(iterator0);
}",0,
project,0,test3842,"public void test3842() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
    Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 3);
    assertNotNull(iterator0);
}",0,
project,0,test4044,"public void test4044() throws Throwable {
    MockDate mockDate0 = new MockDate((-2840), (-2840), 0);
    Iterator iterator0 = DateUtils.iterator((Object) mockDate0, 1);
    assertNotNull(iterator0);
}",0,assertNotNull(iterator0)
project,0,test4145,"public void test4145() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Calendar) null, 4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test4246,"public void test4246() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Date) null, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test4853,"public void test4853() throws Throwable {
    MockDate mockDate0 = new MockDate(280000000, (-2548), 280000000);
    // Undeclared exception!
    try {
        DateUtils.truncate((Date) mockDate0, 1398);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Calendar value too large for accurate calculations
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test4954,"public void test4954() throws Throwable {
    Locale locale0 = Locale.ROOT;
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) locale0, (-838));
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not truncate
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5156,"public void test5156() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) null, 887);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5257,"public void test5257() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4084, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) mockGregorianCalendar0, 4084);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field 4084 is not supported
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5358,"public void test5358() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Calendar) null, 1707);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test5459,"public void test5459() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Date) null, 4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5661,"public void test5661() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Object) ""GMT"", 0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not round GMT
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5762,"public void test5762() throws Throwable {
    MockDate mockDate0 = new MockDate();
    // Undeclared exception!
    try {
        DateUtils.round((Object) mockDate0, 2542);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field 2542 is not supported
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5863,"public void test5863() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Object) null, 54);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test6065,"public void test6065() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Calendar) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test6166,"public void test6166() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Date) null, 1177);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test6267,"public void test6267() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addMinutes((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test6368,"public void test6368() throws Throwable {
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""y6:%K HE$`~w"";
    stringArray0[1] = ""y6:%K HE$`~w"";
    try {
        DateUtils.parseDate(""y6:%K HE$`~w"", stringArray0);
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Unable to parse the date: y6:%K HE$`~w
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test6469,"public void test6469() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.parseDate(""cy} ^()rN'LRm"", (String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Date and Patterns must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test6570,"public void test6570() throws Throwable {
    String[] stringArray0 = new String[4];
    // Undeclared exception!
    try {
        DateUtils.parseDate((String) null, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Date and Patterns must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test6671,"public void test6671() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
    mockGregorianCalendar0.roll(3, true);
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0, locale0);
    boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, mockGregorianCalendar0);
    assertFalse(boolean0);
}",0,
project,0,test6773,"public void test6773() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1969, 1969, (-1), (-105));
    Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 0);
    boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
    assertFalse(boolean0);
}",0,
project,0,test6875,"public void test6875() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.UK;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
    Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 11);
    boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
    assertFalse(boolean0);
}",0,
project,0,test6976,"public void test6976() throws Throwable {
    Locale locale0 = Locale.CHINA;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    // Undeclared exception!
    try {
        DateUtils.isSameLocalTime(mockGregorianCalendar0, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test7077,"public void test7077() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test7179,"public void test7179() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 9);
    boolean boolean0 = DateUtils.isSameInstant(calendar0, (Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",1,
project,0,test7280,"public void test7280() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    // Undeclared exception!
    try {
        DateUtils.isSameInstant(calendar0, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test7381,"public void test7381() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(19);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    boolean boolean0 = DateUtils.isSameInstant(calendar0, calendar0);
    assertTrue(boolean0);
}",1,
project,0,test7482,"public void test7482() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameInstant((Calendar) null, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test7583,"public void test7583() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1990, (-1306), 1990);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    // Undeclared exception!
    try {
        DateUtils.isSameInstant(date0, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test7684,"public void test7684() throws Throwable {
    MockDate mockDate0 = new MockDate(1898, 2774, 1898);
    boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test7785,"public void test7785() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameInstant((Date) null, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test7887,"public void test7887() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    Calendar calendar1 = DateUtils.round(calendar0, 0);
    boolean boolean0 = DateUtils.isSameDay(calendar1, calendar0);
    assertFalse(boolean0);
}",1,
project,0,test7989,"public void test7989() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    Calendar calendar1 = DateUtils.round(calendar0, 0);
    calendar1.set(0, 0, (-1), 1821, 0);
    boolean boolean0 = DateUtils.isSameDay(calendar1, calendar0);
    assertFalse(boolean0);
}",1,
project,0,test8090,"public void test8090() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test8191,"public void test8191() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Calendar) null, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test8292,"public void test8292() throws Throwable {
    MockDate mockDate0 = new MockDate();
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Date) mockDate0, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test8393,"public void test8393() throws Throwable {
    MockDate mockDate0 = new MockDate((-1360L));
    boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0);
    assertTrue(boolean0);
}",0,
project,0,test8494,"public void test8494() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Date) null, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test8899,"public void test8899() throws Throwable {
    MockDate mockDate0 = new MockDate(1898, 2774, 1898);
    Date date0 = DateUtils.addHours(mockDate0, 1898);
    boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, date0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test94105,"public void test94105() throws Throwable {
    MockDate mockDate0 = new MockDate((-1360L));
    Date date0 = DateUtils.addWeeks(mockDate0, 19);
    Date date1 = DateUtils.addMinutes(mockDate0, 19);
    boolean boolean0 = DateUtils.isSameDay(date0, date1);
    assertFalse(boolean0);
}",0,
project,0,test95108,"public void test95108() throws Throwable {
    DateUtils dateUtils0 = new DateUtils();
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) dateUtils0, 0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not iterate based on org.apache.commons.lang.time.DateUtils@1
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
