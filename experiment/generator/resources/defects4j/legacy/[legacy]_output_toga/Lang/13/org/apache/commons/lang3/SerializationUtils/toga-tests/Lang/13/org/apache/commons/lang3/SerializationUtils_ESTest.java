/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:14:16 GMT 2023
 */
package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectStreamClass;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Serializable;
import java.security.UnresolvedPermission;
import java.security.cert.Certificate;
import java.util.Locale;
import org.apache.commons.lang3.SerializationUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SerializationUtils_ESTest extends SerializationUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        byte[] byteArray0 = SerializationUtils.serialize((Serializable) null);
        Object object0 = SerializationUtils.deserialize(byteArray0);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Certificate[] certificateArray0 = new Certificate[8];
        UnresolvedPermission unresolvedPermission0 = new UnresolvedPermission("W(", "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream", "W(", certificateArray0);
        SerializationUtils.serialize((Serializable) unresolvedPermission0);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        byte[] byteArray0 = new byte[1];
        SerializationUtils.deserialize(byteArray0);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
        SerializationUtils.deserialize((InputStream) bufferedInputStream0);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        byte[] byteArray0 = SerializationUtils.serialize((Serializable) (byte) 126);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        SerializationUtils.ClassLoaderAwareObjectInputStream serializationUtils_ClassLoaderAwareObjectInputStream0 = new SerializationUtils.ClassLoaderAwareObjectInputStream(byteArrayInputStream0, classLoader0);
        serializationUtils_ClassLoaderAwareObjectInputStream0.resolveClass((ObjectStreamClass) null);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        SerializationUtils.deserialize((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        SerializationUtils.deserialize((InputStream) dataInputStream0);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        SerializationUtils.deserialize((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Integer integer0 = new Integer((-1));
        byte[] byteArray0 = SerializationUtils.serialize((Serializable) integer0);
        Object object0 = SerializationUtils.deserialize(byteArray0);
        object0.equals((Object) integer0);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        SerializationUtils.serialize((Serializable) null, (OutputStream) pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        SerializationUtils.serialize((Serializable) locale_FilteringMode0, (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        Integer integer0 = SerializationUtils.clone((Integer) null);
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        SerializationUtils serializationUtils0 = new SerializationUtils();
        Object[] objectArray0 = new Object[16];
        objectArray0[2] = (Object) serializationUtils0;
        File file0 = MockFile.createTempFile("7Lky+ g.rE6v,k", "7Lky+ g.rE6v,k");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        SerializationUtils.serialize((Serializable) objectArray0, (OutputStream) mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        Integer integer0 = new Integer((-1));
        Integer integer1 = SerializationUtils.clone(integer0);
    }
}
