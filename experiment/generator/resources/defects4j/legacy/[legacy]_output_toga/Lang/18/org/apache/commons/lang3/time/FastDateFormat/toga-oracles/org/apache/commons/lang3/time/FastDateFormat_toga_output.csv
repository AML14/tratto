project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test009,"public void test009() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""a3i%lC&UrL#\""u8FX"");
    Locale locale0 = Locale.ENGLISH;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-13), locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal style: -13
        //
        verifyException(""java.util.TimeZone"", e);
    }
}",0,
project,0,test0119,"public void test0119() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""a3i%lC&UrL#\""u8FX"");
    Locale locale0 = Locale.ENGLISH;
    String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
    assertEquals(""GMT"", string0);
}",0,
project,0,test0127,"public void test0127() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""a3i%lC&UrL#\""u8FX"");
    Locale locale0 = Locale.ENGLISH;
    String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
    assertNotNull(string0);
}",0,
project,0,test0252,"public void test0252() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), ""}63CIv2"");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test0253,"public void test0253() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), ""}63CIv2"");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0254,"public void test0254() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), ""}63CIv2"");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0255,"public void test0255() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), ""}63CIv2"");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0256,"public void test0256() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), ""}63CIv2"");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0257,"public void test0257() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), ""}63CIv2"");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0258,"public void test0258() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), ""}63CIv2"");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test0359,"public void test0359() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""H,'-ra^I)"", (TimeZone) null);
    assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0360,"public void test0360() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""H,'-ra^I)"", (TimeZone) null);
    assertEquals(""H,'-ra^I)"", fastDateFormat0.getPattern());
}",0,
project,0,test0361,"public void test0361() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""H,'-ra^I)"", (TimeZone) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0362,"public void test0362() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""H,'-ra^I)"", (TimeZone) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0363,"public void test0363() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""H,'-ra^I)"", (TimeZone) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0364,"public void test0364() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""H,'-ra^I)"", (TimeZone) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0365,"public void test0365() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""H,'-ra^I)"", (TimeZone) null);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test0479,"public void test0479() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""|"", locale0);
    assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0480,"public void test0480() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""|"", locale0);
    assertEquals(""|"", fastDateFormat0.getPattern());
}",0,
project,0,test0481,"public void test0481() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""|"", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0482,"public void test0482() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""|"", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0483,"public void test0483() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""|"", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0484,"public void test0484() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""|"", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0485,"public void test0485() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""|"", locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test0586,"public void test0586() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""h:mm a"");
    assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0587,"public void test0587() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""h:mm a"");
    assertEquals(""h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test0588,"public void test0588() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""h:mm a"");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0589,"public void test0589() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""h:mm a"");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0590,"public void test0590() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""h:mm a"");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0591,"public void test0591() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""h:mm a"");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0592,"public void test0592() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""h:mm a"");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test06100,"public void test06100() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""z@9R#W8%Q&dA}l\"""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
    assertEquals(""MMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test06101,"public void test06101() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""z@9R#W8%Q&dA}l\"""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
    assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test06102,"public void test06102() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""z@9R#W8%Q&dA}l\"""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test06103,"public void test06103() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""z@9R#W8%Q&dA}l\"""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test06104,"public void test06104() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""z@9R#W8%Q&dA}l\"""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test06105,"public void test06105() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""z@9R#W8%Q&dA}l\"""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test06106,"public void test06106() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""z@9R#W8%Q&dA}l\"""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test07107,"public void test07107() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test07108,"public void test07108() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test07109,"public void test07109() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test07110,"public void test07110() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test07111,"public void test07111() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test07112,"public void test07112() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test07113,"public void test07113() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test07118,"public void test07118() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test07119,"public void test07119() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test07120,"public void test07120() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test07121,"public void test07121() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test07124,"public void test07124() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""Mon Jul 05 10:44:43 GMT 1909"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test07127,"public void test07127() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test07128,"public void test07128() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test07129,"public void test07129() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test07130,"public void test07130() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test07131,"public void test07131() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,
project,0,test08132,"public void test08132() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test08133,"public void test08133() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test08134,"public void test08134() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test08135,"public void test08135() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test08136,"public void test08136() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test08137,"public void test08137() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test08138,"public void test08138() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test08140,"public void test08140() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test08141,"public void test08141() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test08142,"public void test08142() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test08143,"public void test08143() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""Sat Jul 06 13:13:01 GMT 1062"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test08144,"public void test08144() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test08145,"public void test08145() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test08146,"public void test08146() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test08147,"public void test08147() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test08148,"public void test08148() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test09152,"public void test09152() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test09153,"public void test09153() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test09154,"public void test09154() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test09155,"public void test09155() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test09156,"public void test09156() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test09157,"public void test09157() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test09158,"public void test09158() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test09159,"public void test09159() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    String string0 = fastDateFormat0.format((Calendar) null);
    assertEquals("""", string0);
}",0,
project,0,test09161,"public void test09161() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    String string0 = fastDateFormat0.format((Calendar) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test09162,"public void test09162() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    String string0 = fastDateFormat0.format((Calendar) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test09163,"public void test09163() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    String string0 = fastDateFormat0.format((Calendar) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test09164,"public void test09164() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    String string0 = fastDateFormat0.format((Calendar) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test09165,"public void test09165() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    String string0 = fastDateFormat0.format((Calendar) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test09166,"public void test09166() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    String string0 = fastDateFormat0.format((Calendar) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test09167,"public void test09167() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    String string0 = fastDateFormat0.format((Calendar) null);
    assertNotNull(string0);
}",0,
project,0,test10168,"public void test10168() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test10169,"public void test10169() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test10170,"public void test10170() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test10171,"public void test10171() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test10172,"public void test10172() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test10173,"public void test10173() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test10174,"public void test10174() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test10190,"public void test10190() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test10191,"public void test10191() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test10192,"public void test10192() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test10193,"public void test10193() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test10202,"public void test10202() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test10211,"public void test10211() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test10212,"public void test10212() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test10213,"public void test10213() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test10214,"public void test10214() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test10215,"public void test10215() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Locale locale0 = Locale.TAIWAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertNotNull(stringBuffer1);
}",0,"assertEquals(stringBuffer0, stringBuffer1)"
project,0,test11216,"public void test11216() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test11217,"public void test11217() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test11218,"public void test11218() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test11219,"public void test11219() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test11220,"public void test11220() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test11221,"public void test11221() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test11222,"public void test11222() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test11226,"public void test11226() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test11227,"public void test11227() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test11228,"public void test11228() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test11229,"public void test11229() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test11234,"public void test11234() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test11235,"public void test11235() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test11236,"public void test11236() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test11237,"public void test11237() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test11238,"public void test11238() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,"assertEquals(stringBuffer0, stringBuffer1)"
project,0,test12252,"public void test12252() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test12253,"public void test12253() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test12254,"public void test12254() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test12255,"public void test12255() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test12256,"public void test12256() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test12257,"public void test12257() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test12258,"public void test12258() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test12259,"public void test12259() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(1L);
    assertEquals("""", string0);
}",0,
project,0,test12266,"public void test12266() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(1L);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test12267,"public void test12267() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(1L);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test12268,"public void test12268() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(1L);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test12269,"public void test12269() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(1L);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test12270,"public void test12270() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(1L);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test12271,"public void test12271() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(1L);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test12272,"public void test12272() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(1L);
    assertNotNull(string0);
}",0,
project,0,test13286,"public void test13286() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test13287,"public void test13287() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test13288,"public void test13288() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test13289,"public void test13289() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test13290,"public void test13290() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test13291,"public void test13291() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test13292,"public void test13292() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test13297,"public void test13297() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    assertNotNull(calendar0);
}",0,"assertEquals(fastDateFormat0, calendar0)"
project,0,test13304,"public void test13304() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    StringWriter stringWriter0 = new StringWriter(87);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test13305,"public void test13305() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    StringWriter stringWriter0 = new StringWriter(87);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test13312,"public void test13312() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    StringWriter stringWriter0 = new StringWriter(87);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test13313,"public void test13313() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    StringWriter stringWriter0 = new StringWriter(87);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test13323,"public void test13323() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    StringWriter stringWriter0 = new StringWriter(87);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test13324,"public void test13324() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    StringWriter stringWriter0 = new StringWriter(87);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test13325,"public void test13325() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    StringWriter stringWriter0 = new StringWriter(87);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test13326,"public void test13326() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    StringWriter stringWriter0 = new StringWriter(87);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test13327,"public void test13327() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    StringWriter stringWriter0 = new StringWriter(87);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,
project,0,test14328,"public void test14328() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test14329,"public void test14329() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test14330,"public void test14330() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(0, FastDateFormat.FULL);
}",1,
project,0,test14331,"public void test14331() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test14332,"public void test14332() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(3, FastDateFormat.SHORT);
}",1,
project,0,test14333,"public void test14333() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(1, FastDateFormat.LONG);
}",1,
project,0,test14334,"public void test14334() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertNotNull(fastDateFormat0);
}",1,
project,0,test14335,"public void test14335() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[4];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken("""", intArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test15349,"public void test15349() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test15350,"public void test15350() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test15351,"public void test15351() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test15352,"public void test15352() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test15353,"public void test15353() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test15354,"public void test15354() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test15355,"public void test15355() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test15356,"public void test15356() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    int[] intArray0 = new int[2];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken((String) null, intArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test16370,"public void test16370() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE"", fastDateFormat0.getPattern());
}",0,
project,0,test16371,"public void test16371() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test16372,"public void test16372() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test16373,"public void test16373() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test16374,"public void test16374() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test16375,"public void test16375() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test16376,"public void test16376() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test16377,"public void test16377() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    int[] intArray0 = new int[0];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken("""", intArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test17385,"public void test17385() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test18395,"public void test18395() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.forLanguageTag("""");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(1342, timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 1342
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test19402,"public void test19402() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2598, ""pl$GK}pCq!vdu)CCY]"");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 15
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test20410,"public void test20410() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(137, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 137
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test21411,"public void test21411() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(1437);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 1437
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test22419,"public void test22419() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""xc)7)F1UEw)DV[lb"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance((String) null, (TimeZone) null, locale0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // pattern must not be null
        //
        verifyException(""org.apache.commons.lang3.time.FormatCache"", e);
    }
}",0,
project,0,test23426,"public void test23426() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""dy{;4>3.*"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance((String) null, (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // pattern must not be null
        //
        verifyException(""org.apache.commons.lang3.time.FormatCache"", e);
    }
}",0,
project,0,test24434,"public void test24434() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance((String) null, locale0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // pattern must not be null
        //
        verifyException(""org.apache.commons.lang3.time.FormatCache"", e);
    }
}",0,
project,0,test25435,"public void test25435() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // pattern must not be null
        //
        verifyException(""org.apache.commons.lang3.time.FormatCache"", e);
    }
}",0,
project,0,test26449,"public void test26449() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, ""No date time pattern for locale: "");
    Locale locale0 = Locale.KOREAN;
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(3, 830, (TimeZone) simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 830
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test27457,"public void test27457() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(6, 6, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 6
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test28458,"public void test28458() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance((-761), (-761));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style -761
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test29468,"public void test29468() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    TimeZone timeZone0 = TimeZone.getTimeZone(""pattern must not be null"");
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(1270, timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 1270
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test30476,"public void test30476() throws Throwable {
    Locale locale0 = Locale.CANADA;
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(92, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 92
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test31477,"public void test31477() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(3153);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 3153
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test32491,"public void test32491() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test32492,"public void test32492() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test32493,"public void test32493() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test32494,"public void test32494() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test32495,"public void test32495() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test32496,"public void test32496() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test32497,"public void test32497() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test32499,"public void test32499() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    MockDate mockDate0 = new MockDate(0, 0, (-892), (-1777), 0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField"", e);
    }
}",0,
project,0,test33513,"public void test33513() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test33514,"public void test33514() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test33515,"public void test33515() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test33516,"public void test33516() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test33517,"public void test33517() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test33518,"public void test33518() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test33519,"public void test33519() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test33520,"public void test33520() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Calendar"", e);
    }
}",0,
project,0,test34521,"public void test34521() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test34522,"public void test34522() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test34523,"public void test34523() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test34524,"public void test34524() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test34525,"public void test34525() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test34526,"public void test34526() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test34527,"public void test34527() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test34531,"public void test34531() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""G(XT"");
    // Undeclared exception!
    try {
        fastDateFormat0.format((Calendar) null, stringBuffer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField"", e);
    }
}",0,
project,0,test35532,"public void test35532() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test35533,"public void test35533() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test35534,"public void test35534() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test35535,"public void test35535() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test35536,"public void test35536() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test35537,"public void test35537() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test35538,"public void test35538() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test35539,"public void test35539() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    // Undeclared exception!
    try {
        fastDateFormat0.format((long) 43, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField"", e);
    }
}",0,
project,0,test36540,"public void test36540() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test36541,"public void test36541() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test36542,"public void test36542() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test36543,"public void test36543() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test36544,"public void test36544() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test36545,"public void test36545() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test36546,"public void test36546() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test36550,"public void test36550() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer();
    // Undeclared exception!
    try {
        fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField"", e);
    }
}",0,
project,0,test37553,"public void test37553() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = null;
    try {
        fastDateFormat0 = new FastDateFormat(""kzU*z"", timeZone0, (Locale) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test38554,"public void test38554() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test38555,"public void test38555() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test38556,"public void test38556() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test38557,"public void test38557() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test38558,"public void test38558() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test38559,"public void test38559() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test38560,"public void test38560() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test38565,"public void test38565() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test38566,"public void test38566() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test38567,"public void test38567() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test38568,"public void test38568() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test38569,"public void test38569() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""Wed Feb 28 00:00:00 GMT 334"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test38574,"public void test38574() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test38575,"public void test38575() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test38576,"public void test38576() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test38577,"public void test38577() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test38578,"public void test38578() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockDate mockDate0 = new MockDate((-2233), 2, 0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,
project,0,test39579,"public void test39579() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test39580,"public void test39580() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test39581,"public void test39581() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test39582,"public void test39582() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test39583,"public void test39583() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39584,"public void test39584() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test39585,"public void test39585() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test39588,"public void test39588() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test39590,"public void test39590() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertEquals(10, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test39591,"public void test39591() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertEquals(""h:mm a"", fastDateFormat1.getPattern());
}",0,
project,0,test39592,"public void test39592() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test39593,"public void test39593() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39594,"public void test39594() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test39595,"public void test39595() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test39596,"public void test39596() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test39597,"public void test39597() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertNotNull(fastDateFormat1);
}",0,
project,0,test39598,"public void test39598() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertNotSame(fastDateFormat0, fastDateFormat1);
}",0,
project,0,test39599,"public void test39599() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test39600,"public void test39600() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test39601,"public void test39601() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(1, fastDateFormat0.getMaxLengthEstimate())"
project,0,test39602,"public void test39602() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test39604,"public void test39604() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(10, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test39605,"public void test39605() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(""h:mm a"", fastDateFormat1.getPattern());
}",0,
project,0,test39606,"public void test39606() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test39607,"public void test39607() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test39608,"public void test39608() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39609,"public void test39609() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test39610,"public void test39610() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test39611,"public void test39611() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39612,"public void test39612() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test39613,"public void test39613() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test39614,"public void test39614() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test39615,"public void test39615() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test40616,"public void test40616() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test40617,"public void test40617() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test40618,"public void test40618() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test40619,"public void test40619() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test40620,"public void test40620() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test40621,"public void test40621() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test40622,"public void test40622() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test40623,"public void test40623() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test40624,"public void test40624() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test40625,"public void test40625() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test40626,"public void test40626() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test40627,"public void test40627() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test40628,"public void test40628() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test40629,"public void test40629() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test41630,"public void test41630() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test41631,"public void test41631() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test41632,"public void test41632() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(0, FastDateFormat.FULL);
}",1,
project,0,test41633,"public void test41633() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test41634,"public void test41634() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(1, FastDateFormat.LONG);
}",1,
project,0,test41635,"public void test41635() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(3, FastDateFormat.SHORT);
}",1,
project,0,test41636,"public void test41636() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertNotNull(fastDateFormat0);
}",1,
project,0,test41645,"public void test41645() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    FieldPosition fieldPosition0 = new FieldPosition(3);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) null, stringBuffer0, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: <null>
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test42646,"public void test42646() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test42647,"public void test42647() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test42648,"public void test42648() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test42649,"public void test42649() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test42650,"public void test42650() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test42651,"public void test42651() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test42652,"public void test42652() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test42662,"public void test42662() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test42663,"public void test42663() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test42664,"public void test42664() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test42665,"public void test42665() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test42673,"public void test42673() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test42674,"public void test42674() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test42675,"public void test42675() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test42676,"public void test42676() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test42677,"public void test42677() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertNotNull(stringBuffer1);
}",0,
project,0,test43678,"public void test43678() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test43679,"public void test43679() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test43680,"public void test43680() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test43681,"public void test43681() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test43682,"public void test43682() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test43683,"public void test43683() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test43684,"public void test43684() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test43697,"public void test43697() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    ParsePosition parsePosition0 = new ParsePosition(3);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""WoF"");
    FieldPosition fieldPosition0 = new FieldPosition(0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) parsePosition0, stringBuffer0, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: java.text.ParsePosition
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test44698,"public void test44698() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test44699,"public void test44699() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test44700,"public void test44700() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test44701,"public void test44701() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test44702,"public void test44702() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test44703,"public void test44703() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test44704,"public void test44704() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test44713,"public void test44713() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test44714,"public void test44714() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test44715,"public void test44715() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test44716,"public void test44716() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test44717,"public void test44717() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertEquals(""Fri Feb 14 20:21:21 GMT 2014"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test44725,"public void test44725() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test44726,"public void test44726() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test44727,"public void test44727() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test44728,"public void test44728() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test44729,"public void test44729() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(97);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    assertNotNull(stringBuffer1);
}",0,
project,0,test45730,"public void test45730() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test45731,"public void test45731() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test45732,"public void test45732() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test45733,"public void test45733() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test45734,"public void test45734() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test45735,"public void test45735() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test45736,"public void test45736() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test45737,"public void test45737() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, intArray0);
}",0,
project,0,test45738,"public void test45738() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertEquals(9, intArray0.length);
}",0,
project,0,test45739,"public void test45739() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertEquals(""U"", string0);
}",0,
project,0,test45740,"public void test45740() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test45741,"public void test45741() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test45742,"public void test45742() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test45743,"public void test45743() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test45744,"public void test45744() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test45745,"public void test45745() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test45746,"public void test45746() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[9];
    String string0 = fastDateFormat0.parseToken(""United Kingdom"", intArray0);
    assertNotNull(string0);
}",0,
project,0,test46771,"public void test46771() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5' ahh'\u6642'mm'\u5206'ss'\u79D2' z"", fastDateFormat0.getPattern());
}",0,
project,0,test46772,"public void test46772() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test46773,"public void test46773() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test46774,"public void test46774() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test46775,"public void test46775() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test46776,"public void test46776() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test46777,"public void test46777() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test46787,"public void test46787() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5' ahh'\u6642'mm'\u5206'ss'\u79D2' z"", fastDateFormat0.getPattern());
}",0,
project,0,test46788,"public void test46788() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test46789,"public void test46789() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5' ahh'\u6642'mm'\u5206'ss'\u79D2' z"", fastDateFormat1.getPattern());
}",0,
project,0,test46790,"public void test46790() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test46799,"public void test46799() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertTrue(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test46801,"public void test46801() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertNotSame(fastDateFormat2, fastDateFormat0);
}",0,
project,0,test46802,"public void test46802() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertNotSame(fastDateFormat2, fastDateFormat1);
}",0,
project,0,test46809,"public void test46809() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(11, fastDateFormat2.getMaxLengthEstimate());
}",0,
project,0,test46810,"public void test46810() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(""a hh:mm:ss"", fastDateFormat2.getPattern());
}",0,
project,0,test46811,"public void test46811() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test46812,"public void test46812() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test46813,"public void test46813() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test46814,"public void test46814() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test46815,"public void test46815() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
}",0,
project,0,test46816,"public void test46816() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
}",0,
project,0,test46817,"public void test46817() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    assertNotNull(fastDateFormat2);
}",0,
project,0,test46818,"public void test46818() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertNotSame(fastDateFormat3, fastDateFormat0);
}",0,
project,0,test46819,"public void test46819() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertNotSame(fastDateFormat3, fastDateFormat2);
}",0,
project,0,test46820,"public void test46820() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertNotSame(fastDateFormat3, fastDateFormat1);
}",0,
project,0,test46821,"public void test46821() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat3.getMaxLengthEstimate());
}",0,
project,0,test46822,"public void test46822() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat3.getPattern());
}",0,
project,0,test46823,"public void test46823() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test46824,"public void test46824() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test46825,"public void test46825() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test46826,"public void test46826() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test46827,"public void test46827() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
}",0,
project,0,test46828,"public void test46828() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
}",0,
project,0,test46829,"public void test46829() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
}",0,
project,0,test46830,"public void test46830() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = locale0.getScript();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat3);
}",0,"assertEquals(fastDateFormat0, fastDateFormat3)"
project,0,test47847,"public void test47847() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test47848,"public void test47848() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test47849,"public void test47849() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test47850,"public void test47850() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test47851,"public void test47851() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test47852,"public void test47852() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test47853,"public void test47853() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test47862,"public void test47862() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    assertEquals(""FastDateFormat[]"", string1);
}",0,
project,0,test47870,"public void test47870() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test47871,"public void test47871() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test47872,"public void test47872() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test47873,"public void test47873() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test47874,"public void test47874() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test47875,"public void test47875() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test47877,"public void test47877() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    assertNotNull(string1);
}",0,
project,0,test47878,"public void test47878() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, int0);
}",0,
project,0,test47886,"public void test47886() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test47887,"public void test47887() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test47888,"public void test47888() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test47889,"public void test47889() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test47890,"public void test47890() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test47891,"public void test47891() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test47892,"public void test47892() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertSame(timeZone0, timeZone1);
}",0,
project,0,test47893,"public void test47893() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertSame(timeZone1, timeZone0);
}",0,
project,0,test47901,"public void test47901() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test47902,"public void test47902() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test47904,"public void test47904() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test47905,"public void test47905() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test47906,"public void test47906() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test47907,"public void test47907() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test47908,"public void test47908() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertNotNull(timeZone1);
}",0,
project,0,test47919,"public void test47919() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test47920,"public void test47920() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test47921,"public void test47921() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test47922,"public void test47922() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertEquals("""", fastDateFormat1.getPattern());
}",0,
project,0,test47931,"public void test47931() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    assertTrue(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test47933,"public void test47933() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertSame(timeZone0, timeZone1);
}",0,
project,0,test47934,"public void test47934() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertNotSame(fastDateFormat0, fastDateFormat2);
}",0,
project,0,test47935,"public void test47935() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertNotSame(fastDateFormat0, fastDateFormat1);
}",0,
project,0,test47936,"public void test47936() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertSame(timeZone1, timeZone0);
}",0,
project,0,test47937,"public void test47937() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertNotSame(fastDateFormat2, fastDateFormat0);
}",0,
project,0,test47938,"public void test47938() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertNotSame(fastDateFormat2, fastDateFormat1);
}",0,
project,0,test47946,"public void test47946() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test47947,"public void test47947() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test47949,"public void test47949() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(38, fastDateFormat2.getMaxLengthEstimate());
}",0,
project,0,test47950,"public void test47950() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(""MMMM d, yyyy h:mm:ss a z"", fastDateFormat2.getPattern());
}",0,
project,0,test47951,"public void test47951() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test47952,"public void test47952() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test47953,"public void test47953() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test47954,"public void test47954() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test47955,"public void test47955() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test47956,"public void test47956() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test47957,"public void test47957() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test47958,"public void test47958() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test47959,"public void test47959() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertTrue(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test47960,"public void test47960() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
}",0,
project,0,test47961,"public void test47961() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
}",0,
project,0,test47962,"public void test47962() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    assertNotNull(fastDateFormat2);
}",0,"assertEquals(fastDateFormat0, fastDateFormat2)"
project,0,test47963,"public void test47963() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertNotSame(fastDateFormat3, fastDateFormat2);
}",0,
project,0,test47964,"public void test47964() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertNotSame(fastDateFormat3, fastDateFormat1);
}",0,
project,0,test47965,"public void test47965() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertNotSame(fastDateFormat3, fastDateFormat0);
}",0,
project,0,test47972,"public void test47972() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(11, fastDateFormat3.getMaxLengthEstimate());
}",0,
project,0,test47973,"public void test47973() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(""a hh:mm:ss"", fastDateFormat3.getPattern());
}",0,
project,0,test47974,"public void test47974() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test47975,"public void test47975() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test47976,"public void test47976() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test47977,"public void test47977() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test47978,"public void test47978() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
}",0,
project,0,test47979,"public void test47979() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
}",0,
project,0,test47980,"public void test47980() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
}",0,
project,0,test47981,"public void test47981() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    assertNotNull(fastDateFormat3);
}",0,
project,0,test47982,"public void test47982() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    String string0 = locale0.getScript();
    String string1 = fastDateFormat0.toString();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance((-5153), 0, timeZone1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style -5153
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test48983,"public void test48983() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""2vUxJS?<+8SQ/ZS"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: v
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test49990,"public void test49990() throws Throwable {
    Locale locale0 = new Locale(""rbcKCO;btHtobV3tIOd"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""rbcKCO;btHtobV3tIOd"", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: r
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test50998,"public void test50998() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""3zq"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: q
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test51999,"public void test51999() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""(mplnD"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: p
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test521007,"public void test521007() throws Throwable {
    Locale locale0 = Locale.CANADA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: o
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test531015,"public void test531015() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("";Ml6wz"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: l
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test541016,"public void test541016() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""giapponese"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: g
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test551024,"public void test551024() throws Throwable {
    Locale locale0 = Locale.US;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("">fSxx"", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: f
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test561025,"public void test561025() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""c{Di8!]]p>|"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: c
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test571032,"public void test571032() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ""HbP.1v0?>bzM"", 1, 1, 0, 1, 0, 0, 0, 956);
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""HbP.1v0?>bzM"", (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: b
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test581033,"public void test581033() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""Wednesday, April 16, 0346 4:01:00 PM"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: e
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test591043,"public void test591043() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = null;
    try {
        fastDateFormat0 = new FastDateFormat("".H)`V"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: V
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test601044,"public void test601044() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""U Pf@n!++9`AT0]l?"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: U
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test611052,"public void test611052() throws Throwable {
    Locale locale0 = Locale.UK;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""%TKcuHDi?gj>n"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: T
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test621053,"public void test621053() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""s:dSe.[_"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: e
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test631061,"public void test631061() throws Throwable {
    Locale locale0 = Locale.TAIWAN;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""Run?r}#/T=HiSX/:5"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: R
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test641062,"public void test641062() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""11:59:59 PM"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: P
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test651063,"public void test651063() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""Ohs"", (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: O
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test661067,"public void test661067() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""No date time pattern for locale: "", timeZone0, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: N
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test671075,"public void test671075() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""LNFm7E%BIjN"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: L
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test681083,"public void test681083() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""4Ki^Y$-|AR[0?\""0"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: i
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test691086,"public void test691086() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""No date time pattern for locale: "");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""JS@oDv3U,B "", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: J
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test701087,"public void test701087() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""I"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: I
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test711088,"public void test711088() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""G(XT"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: X
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test721098,"public void test721098() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""FastDateFormat[h:mm a]"");
    Locale locale0 = Locale.FRANCE;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""FastDateFormat[h:mm a]"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: t
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test731099,"public void test731099() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""`yEj]PggJm<c[*}8F"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: j
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test741100,"public void test741100() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = null;
    try {
        fastDateFormat0 = new FastDateFormat(""M|BT^1J4O~QX"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: B
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test751101,"public void test751101() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    String string0 = fastDateFormat0.format((long) 42);
    assertEquals(""1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT"", string0);
}",0,assertNotNull(string0)
project,0,test761102,"public void test761102() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""#,]@?B>:d+4"", 1, 0, 2, 0, 3, 2, 3, 2, 2);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test771103,"public void test771103() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0);
    assertEquals(""MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test781104,"public void test781104() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 3536, 42);
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""0296\u5E7410\u670812\u65E5 0\u664200\u520600\u79D2 GMT"", string0);
}",0,assertNotNull(string0)
project,0,test791105,"public void test791105() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    TimeZone timeZone0 = TimeZone.getTimeZone(""2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE"", fastDateFormat0.getPattern());
}",0,
project,0,test801106,"public void test801106() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-900), """");
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(1745, (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 1745
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test811107,"public void test811107() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    Long long0 = new Long(1333L);
    boolean boolean0 = fastDateFormat0.equals(long0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test821108,"public void test821108() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test841111,"public void test841111() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(21, int0);
}",0,
project,0,test871115,"public void test871115() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    fastDateFormat0.getLocale();
    assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test881117,"public void test881117() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    ParsePosition parsePosition0 = new ParsePosition((-503));
    fastDateFormat0.parseObject(""1/1/70 12:00 AM"", parsePosition0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test891118,"public void test891118() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    String string0 = fastDateFormat0.getPattern();
    assertEquals(""M/d/yy h:mm a"", string0);
}",0,
project,0,test901119,"public void test901119() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    TimeZone timeZone0 = TimeZone.getTimeZone(""2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C"", timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test911120,"public void test911120() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""1/1/70 12:00 AM"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 1, timeZone0, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""14/02/14 20.21.21 GMT"", string0);
}",0,assertNotNull(string0)
