project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-584), (-584), 982, (-1138), (-584), 982);
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) mockGregorianCalendar0, 982);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style 982 is not valid.
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    Locale locale0 = Locale.KOREA;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
    assertTrue(boolean0);
}",0,
project,0,test023,"public void test023() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
    boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
    assertFalse(boolean0);
}",0,
project,0,test034,"public void test034() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 0, 7, (-432), (-432), (-432));
    ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(zoneInfo0);
    boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test045,"public void test045() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockDate mockDate1 = new MockDate((-2355), (-2355), (-2355));
    boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test056,"public void test056() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Date date0 = DateUtils.addHours(mockDate0, 1001);
    boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
    assertFalse(boolean0);
}",0,
project,0,test069,"public void test069() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    Calendar calendar1 = DateUtils.truncate(calendar0, 0);
    boolean boolean0 = DateUtils.isSameDay(calendar0, calendar1);
    assertFalse(boolean0);
}",1,
project,0,test0811,"public void test0811() throws Throwable {
    MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
    Date date0 = DateUtils.addMinutes(mockDate0, (-2355));
    boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
    assertFalse(boolean0);
}",0,
project,0,test1014,"public void test1014() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    mockGregorianCalendar0.setTimeZone((TimeZone) null);
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) mockGregorianCalendar0, 421);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1115,"public void test1115() throws Throwable {
    MockDate mockDate0 = new MockDate(280000000, (-1), (-1), 0, 280000000, 689);
    // Undeclared exception!
    try {
        DateUtils.round((Date) mockDate0, 280000000);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Calendar value too large for accurate calculations
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test1216,"public void test1216() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    mockGregorianCalendar0.setTimeZone((TimeZone) null);
    // Undeclared exception!
    try {
        DateUtils.round((Calendar) mockGregorianCalendar0, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1317,"public void test1317() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-196), ""gQ{\""z"");
    Locale locale0 = Locale.FRANCE;
    Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
    calendar0.set(0, (-432));
    // Undeclared exception!
    try {
        DateUtils.round(calendar0, (-196));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid era
        //
        verifyException(""java.util.GregorianCalendar"", e);
    }
}",0,
project,0,test1418,"public void test1418() throws Throwable {
    String[] stringArray0 = new String[6];
    stringArray0[0] = ""GMT"";
    // Undeclared exception!
    try {
        DateUtils.parseDate(""GMT"", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern character 'T'
        //
        verifyException(""java.text.SimpleDateFormat"", e);
    }
}",1,
project,0,test1519,"public void test1519() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    mockGregorianCalendar0.setTimeZone((TimeZone) null);
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test1620,"public void test1620() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-145), 4868, 869);
    mockGregorianCalendar0.setLenient(false);
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // YEAR
        //
        verifyException(""java.util.GregorianCalendar"", e);
    }
}",1,
project,0,test1721,"public void test1721() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addYears((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test1822,"public void test1822() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addWeeks((Date) null, 149);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test1923,"public void test1923() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addSeconds((Date) null, (-15));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2024,"public void test2024() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addMonths((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2125,"public void test2125() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addMilliseconds((Date) null, 1000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2226,"public void test2226() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addHours((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2327,"public void test2327() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addDays((Date) null, 2028);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2428,"public void test2428() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    // Undeclared exception!
    try {
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 1055);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style 1055 is not valid.
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test2630,"public void test2630() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.add((Date) null, 2091, 2091);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test2731,"public void test2731() throws Throwable {
    MockDate mockDate0 = new MockDate((-1081), (-1081), 6, (-745), 5226, 6);
    // Undeclared exception!
    try {
        DateUtils.add(mockDate0, (-348), (-348));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.GregorianCalendar"", e);
    }
}",1,
project,0,test2832,"public void test2832() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-145), 4868, 869);
    boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
    assertTrue(boolean0);
}",1,
project,0,test3135,"public void test3135() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) ""Unable to parse the date: "", 7);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not iterate based on Unable to parse the date:
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test3236,"public void test3236() throws Throwable {
    MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) mockDate0, (-2355));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style -2355 is not valid.
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test3337,"public void test3337() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test3438,"public void test3438() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Iterator iterator0 = DateUtils.iterator((Date) mockDate0, 4);
    assertNotNull(iterator0);
}",0,
project,0,test3539,"public void test3539() throws Throwable {
    MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
    Iterator iterator0 = DateUtils.iterator((Date) mockDate0, 6);
    assertNotNull(iterator0);
}",0,
project,0,test3842,"public void test3842() throws Throwable {
    MockDate mockDate0 = new MockDate((-5236), 1027, 0, (-400), 1027);
    // Undeclared exception!
    try {
        DateUtils.iterator((Date) mockDate0, 146134526);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style 146134526 is not valid.
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test3943,"public void test3943() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Calendar) null, 1860);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test4044,"public void test4044() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Date) null, 948);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test4145,"public void test4145() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), 629, 629, 629, 2036, 2036);
    Iterator iterator0 = DateUtils.iterator((Date) mockDate0, 1);
    assertNotNull(iterator0);
}",0,
project,0,test4751,"public void test4751() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2147482605, 0, 0, 2147482605, 2147482605);
    // Undeclared exception!
    try {
        DateUtils.round((Object) mockGregorianCalendar0, 2147482605);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field 2147482605 is not supported
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test4953,"public void test4953() throws Throwable {
    MockDate mockDate0 = new MockDate(280000000, (-1), (-1), 0, 280000000, 689);
    // Undeclared exception!
    try {
        DateUtils.truncate((Date) mockDate0, (-1448));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Calendar value too large for accurate calculations
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5054,"public void test5054() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), 2147481971, (-3416), (-1), 2147481971, 1489);
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) mockDate0, 1489);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field 1489 is not supported
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5155,"public void test5155() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) null, 887);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5256,"public void test5256() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) timeZone0, 0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not truncate sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5357,"public void test5357() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Calendar) null, 1524);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test5458,"public void test5458() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Date) null, 1205);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5559,"public void test5559() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Object) ""<i"", (-718));
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not round <i
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5660,"public void test5660() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Object) null, (-1078));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test5761,"public void test5761() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Calendar) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test5862,"public void test5862() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Date) null, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test6064,"public void test6064() throws Throwable {
    String[] stringArray0 = new String[6];
    stringArray0[0] = """";
    // Undeclared exception!
    try {
        DateUtils.parseDate(""^+GjO-b( Y"", stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test6165,"public void test6165() throws Throwable {
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""y6:%K HE$`~]w"";
    stringArray0[1] = ""y6:%K HE$`~]w"";
    stringArray0[2] = ""y6:%K HE$`~]w"";
    try {
        DateUtils.parseDate(""y6:%K HE$`~]w"", stringArray0);
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Unable to parse the date: y6:%K HE$`~]w
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test6266,"public void test6266() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.parseDate("""", (String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Date and Patterns must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test6367,"public void test6367() throws Throwable {
    String[] stringArray0 = new String[4];
    // Undeclared exception!
    try {
        DateUtils.parseDate((String) null, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Date and Patterns must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test6469,"public void test6469() throws Throwable {
    Calendar calendar0 = MockCalendar.getInstance();
    Calendar calendar1 = MockCalendar.getInstance();
    DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
    boolean boolean0 = DateUtils.isSameLocalTime(calendar1, calendar0);
    assertFalse(boolean0);
}",0,
project,0,test6672,"public void test6672() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(3519, 9, 3519, 576, 1, (-1));
    boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, calendar0);
    assertFalse(boolean0);
}",0,
project,0,test6773,"public void test6773() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-145), 4868, 869);
    Locale locale0 = Locale.forLanguageTag(""^rqI1d` Z\""])yE3\""#~"");
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
    boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, mockGregorianCalendar0);
    assertFalse(boolean0);
}",0,
project,0,test6874,"public void test6874() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    // Undeclared exception!
    try {
        DateUtils.isSameLocalTime(mockGregorianCalendar0, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test6975,"public void test6975() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test7076,"public void test7076() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
    boolean boolean0 = DateUtils.isSameInstant(calendar0, (Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",1,
project,0,test7177,"public void test7177() throws Throwable {
    Calendar calendar0 = MockCalendar.getInstance();
    // Undeclared exception!
    try {
        DateUtils.isSameInstant(calendar0, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test7278,"public void test7278() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1138), 956, 956, 956, (-572), 956);
    boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test7379,"public void test7379() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameInstant((Calendar) null, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test7480,"public void test7480() throws Throwable {
    MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
    MockDate mockDate1 = new MockDate((-2355), (-2355), (-2355));
    boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test7581,"public void test7581() throws Throwable {
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
    assertTrue(boolean0);
}",0,
project,0,test7682,"public void test7682() throws Throwable {
    MockDate mockDate0 = new MockDate();
    // Undeclared exception!
    try {
        DateUtils.isSameInstant((Date) mockDate0, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test7783,"public void test7783() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameInstant((Date) null, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test7885,"public void test7885() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
    boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
    assertFalse(boolean0);
}",1,
project,0,test7986,"public void test7986() throws Throwable {
    ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
    GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(15, 1205, 146139496);
    boolean boolean0 = DateUtils.isSameDay((Calendar) gregorianCalendar0, (Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",1,
project,0,test8087,"public void test8087() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1138), 956, 956, 956, (-572), 956);
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
    boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
    assertFalse(boolean0);
}",1,
project,0,test8188,"public void test8188() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.UK;
    Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
    // Undeclared exception!
    try {
        DateUtils.isSameDay(calendar0, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test8289,"public void test8289() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Calendar) null, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test8390,"public void test8390() throws Throwable {
    MockDate mockDate0 = new MockDate((-5236), 1027, 0, (-400), 1027);
    boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0);
    assertTrue(boolean0);
}",0,
project,0,test8491,"public void test8491() throws Throwable {
    MockDate mockDate0 = new MockDate(1001, 1001, 1001, 4194, 1001, 45);
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Date) mockDate0, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test8592,"public void test8592() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Date) null, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",0,
project,0,test8895,"public void test8895() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(320, 320, (-2971), 320, 1231);
    Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 1);
    assertNotNull(iterator0);
}",0,
project,0,test95102,"public void test95102() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addMinutes((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang.time.DateUtils"", e);
    }
}",1,
project,0,test96103,"public void test96103() throws Throwable {
    DateUtils dateUtils0 = new DateUtils();
    assertEquals(2, DateUtils.RANGE_WEEK_MONDAY);
}",1,
