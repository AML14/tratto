project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0010,"public void test0010() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.UK;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-764), locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal style: -764
        //
        verifyException(""java.util.TimeZone"", e);
    }
}",0,
project,0,test0118,"public void test0118() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0119,"public void test0119() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0120,"public void test0120() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0121,"public void test0121() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0122,"public void test0122() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test0129,"public void test0129() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0130,"public void test0130() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0131,"public void test0131() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0147,"public void test0147() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=24,MILLISECOND=513,ZONE_OFFSET=3193,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test0153,"public void test0153() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0154,"public void test0154() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0155,"public void test0155() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0156,"public void test0156() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0157,"public void test0157() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test0158,"public void test0158() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test0159,"public void test0159() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,"assertEquals(stringBuffer0, stringBuffer1)"
project,0,test0166,"public void test0166() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0167,"public void test0167() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0168,"public void test0168() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0176,"public void test0176() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=24,MILLISECOND=513,ZONE_OFFSET=3193,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test0283,"public void test0283() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0284,"public void test0284() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0285,"public void test0285() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0286,"public void test0286() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0287,"public void test0287() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test0288,"public void test0288() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test0289,"public void test0289() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0290,"public void test0290() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0291,"public void test0291() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0292,"public void test0292() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0293,"public void test0293() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0294,"public void test0294() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0295,"public void test0295() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test0296,"public void test0296() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0297,"public void test0297() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0398,"public void test0398() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0399,"public void test0399() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test03100,"public void test03100() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test03101,"public void test03101() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test03102,"public void test03102() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test03103,"public void test03103() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test03104,"public void test03104() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test03105,"public void test03105() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test03106,"public void test03106() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test03107,"public void test03107() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test03108,"public void test03108() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test03109,"public void test03109() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test03110,"public void test03110() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(6, intArray0.length);
}",0,
project,0,test03111,"public void test03111() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0 }, intArray0);
}",0,
project,0,test03112,"public void test03112() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertNotNull(string0);
}",0,
project,0,test03113,"public void test03113() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(""'#"", string0);
}",0,
project,0,test03114,"public void test03114() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test03115,"public void test03115() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test03116,"public void test03116() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test04127,"public void test04127() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test04128,"public void test04128() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",1,
project,0,test04129,"public void test04129() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",1,
project,0,test04130,"public void test04130() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",1,
project,0,test04131,"public void test04131() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",1,
project,0,test04139,"public void test04139() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test04140,"public void test04140() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test04141,"public void test04141() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test04142,"public void test04142() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test04143,"public void test04143() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test04144,"public void test04144() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test04145,"public void test04145() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test04146,"public void test04146() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertNotNull(list0);
}",0,
project,0,test04154,"public void test04154() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test04155,"public void test04155() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test04156,"public void test04156() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test05159,"public void test05159() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test05160,"public void test05160() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test05161,"public void test05161() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test05162,"public void test05162() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test05163,"public void test05163() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test05164,"public void test05164() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test05165,"public void test05165() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test05166,"public void test05166() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test05167,"public void test05167() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test05168,"public void test05168() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(3, FastDateFormat.SHORT);
}",1,
project,0,test05169,"public void test05169() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(0, FastDateFormat.FULL);
}",1,
project,0,test05170,"public void test05170() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(1, FastDateFormat.LONG);
}",1,
project,0,test05171,"public void test05171() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    List list0 = fastDateFormat0.parsePattern();
    assertNotNull(list0);
}",1,
project,0,test05172,"public void test05172() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test05173,"public void test05173() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test05174,"public void test05174() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    List list0 = fastDateFormat0.parsePattern();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test06187,"public void test06187() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",1,
project,0,test06188,"public void test06188() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",1,
project,0,test06189,"public void test06189() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",1,
project,0,test06190,"public void test06190() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test06191,"public void test06191() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",1,
project,0,test06199,"public void test06199() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test06200,"public void test06200() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test06201,"public void test06201() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test06202,"public void test06202() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test06203,"public void test06203() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test06204,"public void test06204() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test06205,"public void test06205() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test06206,"public void test06206() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test06214,"public void test06214() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test06215,"public void test06215() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test06216,"public void test06216() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test07227,"public void test07227() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.ENGLISH;
    String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test07228,"public void test07228() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.ENGLISH;
    String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
    assertEquals(""GMT-18:00"", string0);
}",0,
project,0,test08242,"public void test08242() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test08243,"public void test08243() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test08244,"public void test08244() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test08245,"public void test08245() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test08246,"public void test08246() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test08252,"public void test08252() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test08253,"public void test08253() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test08254,"public void test08254() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test08255,"public void test08255() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test08256,"public void test08256() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test08257,"public void test08257() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test08258,"public void test08258() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test08259,"public void test08259() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertSame(simpleTimeZone0, timeZone0);
}",0,
project,0,test08260,"public void test08260() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertSame(timeZone0, simpleTimeZone0);
}",0,
project,0,test08261,"public void test08261() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertNotNull(timeZone0);
}",0,assertNotNull(timeZone0)
project,0,test08267,"public void test08267() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test08268,"public void test08268() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test08269,"public void test08269() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test08274,"public void test08274() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(""java.util.SimpleTimeZone[id=0\""ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}",0,
project,0,test09281,"public void test09281() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test09282,"public void test09282() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test09283,"public void test09283() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test09284,"public void test09284() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test09285,"public void test09285() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test09291,"public void test09291() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test09292,"public void test09292() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test09293,"public void test09293() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test09294,"public void test09294() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test09295,"public void test09295() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test09296,"public void test09296() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test09297,"public void test09297() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test09298,"public void test09298() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertSame(simpleTimeZone0, timeZone0);
}",0,
project,0,test09299,"public void test09299() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertSame(timeZone0, simpleTimeZone0);
}",0,
project,0,test09300,"public void test09300() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertNotNull(timeZone0);
}",0,assertNotNull(timeZone0)
project,0,test09306,"public void test09306() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test09307,"public void test09307() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test09308,"public void test09308() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test09312,"public void test09312() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(""java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}",0,
project,0,test10321,"public void test10321() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test10322,"public void test10322() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test10323,"public void test10323() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test10324,"public void test10324() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test10325,"public void test10325() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test10332,"public void test10332() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test10333,"public void test10333() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test10334,"public void test10334() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test10335,"public void test10335() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test10336,"public void test10336() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test10337,"public void test10337() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test10338,"public void test10338() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test10339,"public void test10339() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertNotNull(string0);
}",0,
project,0,test10340,"public void test10340() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals("""", string0);
}",0,
project,0,test10347,"public void test10347() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test10348,"public void test10348() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test10349,"public void test10349() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test11357,"public void test11357() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test11358,"public void test11358() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test11359,"public void test11359() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test11360,"public void test11360() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test11361,"public void test11361() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test11368,"public void test11368() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test11369,"public void test11369() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test11370,"public void test11370() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test11371,"public void test11371() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test11372,"public void test11372() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test11373,"public void test11373() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test11374,"public void test11374() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test11375,"public void test11375() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test11382,"public void test11382() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test11383,"public void test11383() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test11384,"public void test11384() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test12398,"public void test12398() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test12399,"public void test12399() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test12400,"public void test12400() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test12401,"public void test12401() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test12402,"public void test12402() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test12414,"public void test12414() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(46, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test12415,"public void test12415() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test12416,"public void test12416() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test13417,"public void test13417() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test13418,"public void test13418() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test13419,"public void test13419() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test13420,"public void test13420() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test13421,"public void test13421() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test13422,"public void test13422() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test13423,"public void test13423() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test13424,"public void test13424() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test14432,"public void test14432() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test14433,"public void test14433() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test14434,"public void test14434() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test14435,"public void test14435() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test14436,"public void test14436() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test14443,"public void test14443() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test14444,"public void test14444() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertEquals(""'XETJC"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test14445,"public void test14445() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test15446,"public void test15446() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test15447,"public void test15447() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test15448,"public void test15448() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test15449,"public void test15449() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test15450,"public void test15450() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test15451,"public void test15451() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test15452,"public void test15452() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertEquals(""sa"", fastDateFormat0.getPattern());
}",0,
project,0,test15453,"public void test15453() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test16454,"public void test16454() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test16455,"public void test16455() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test16456,"public void test16456() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test16457,"public void test16457() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test16458,"public void test16458() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test16459,"public void test16459() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertEquals(""MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test16460,"public void test16460() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test16461,"public void test16461() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test17469,"public void test17469() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test17470,"public void test17470() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test17471,"public void test17471() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test17472,"public void test17472() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test17473,"public void test17473() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test17480,"public void test17480() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test17481,"public void test17481() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test17482,"public void test17482() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test17484,"public void test17484() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test17485,"public void test17485() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test17486,"public void test17486() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test17487,"public void test17487() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test17488,"public void test17488() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertNull(stringBuffer0);
}",0,
project,0,test17495,"public void test17495() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test17496,"public void test17496() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test17497,"public void test17497() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test17498,"public void test17498() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(""Fri Feb 14 20:21:21 GMT 2014"", mockDate0.toString());
}",0,
project,0,test18506,"public void test18506() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test18507,"public void test18507() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test18508,"public void test18508() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test18509,"public void test18509() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test18510,"public void test18510() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test18517,"public void test18517() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test18518,"public void test18518() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test18519,"public void test18519() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test18521,"public void test18521() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test18522,"public void test18522() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test18523,"public void test18523() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test18524,"public void test18524() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test18525,"public void test18525() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertNotNull(string0);
}",0,
project,0,test18526,"public void test18526() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals("""", string0);
}",0,
project,0,test18533,"public void test18533() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test18534,"public void test18534() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test18535,"public void test18535() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test18536,"public void test18536() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""Fri Feb 14 20:21:21 GMT 2014"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test19543,"public void test19543() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test19544,"public void test19544() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test19545,"public void test19545() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test19546,"public void test19546() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test19547,"public void test19547() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test19553,"public void test19553() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test19554,"public void test19554() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test19555,"public void test19555() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test19567,"public void test19567() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test19568,"public void test19568() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test19569,"public void test19569() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test19570,"public void test19570() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test19571,"public void test19571() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test19572,"public void test19572() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test19573,"public void test19573() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,"assertEquals(stringBuffer0, stringBuffer1)"
project,0,test19579,"public void test19579() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test19580,"public void test19580() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test19581,"public void test19581() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test19589,"public void test19589() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test20596,"public void test20596() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test20597,"public void test20597() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test20598,"public void test20598() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test20599,"public void test20599() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test20600,"public void test20600() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test20601,"public void test20601() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test20602,"public void test20602() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test20603,"public void test20603() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test20613,"public void test20613() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test20614,"public void test20614() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test20615,"public void test20615() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test20616,"public void test20616() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test20617,"public void test20617() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test20618,"public void test20618() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test20619,"public void test20619() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test20620,"public void test20620() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test20621,"public void test20621() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test21636,"public void test21636() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test21637,"public void test21637() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test21638,"public void test21638() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test21639,"public void test21639() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test21640,"public void test21640() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test21647,"public void test21647() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test21648,"public void test21648() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test21649,"public void test21649() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test21650,"public void test21650() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test21651,"public void test21651() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test21652,"public void test21652() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test21653,"public void test21653() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test21654,"public void test21654() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertNotNull(string0);
}",0,
project,0,test21655,"public void test21655() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals("""", string0);
}",0,
project,0,test21662,"public void test21662() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test21663,"public void test21663() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test21664,"public void test21664() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test22672,"public void test22672() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test22673,"public void test22673() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test22674,"public void test22674() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test22675,"public void test22675() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test22676,"public void test22676() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test22683,"public void test22683() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test22684,"public void test22684() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test22685,"public void test22685() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE"", fastDateFormat0.getPattern());
}",0,
project,0,test22686,"public void test22686() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken("""", intArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test23687,"public void test23687() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test23688,"public void test23688() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test23689,"public void test23689() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test23690,"public void test23690() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test23691,"public void test23691() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test23692,"public void test23692() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test23693,"public void test23693() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test23694,"public void test23694() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test23695,"public void test23695() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken("""", (int[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test24703,"public void test24703() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test25713,"public void test25713() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.forLanguageTag(""A:="");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(2623, timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 2623
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test26720,"public void test26720() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 15
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test27728,"public void test27728() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(739, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 739
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test28729,"public void test28729() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(100);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 100
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test29732,"public void test29732() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance((-339), (-339), timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style -339
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test30733,"public void test30733() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(13, 31);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 31
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test31740,"public void test31740() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, ""`{,s8u`5e* '8 v"");
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(6, (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 6
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test32748,"public void test32748() throws Throwable {
    Locale locale0 = new Locale("""");
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance((-1), locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style -1
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test33749,"public void test33749() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance((-2289));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style -2289
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test34750,"public void test34750() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test34751,"public void test34751() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test34752,"public void test34752() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test34753,"public void test34753() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test34754,"public void test34754() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test34755,"public void test34755() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test34756,"public void test34756() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test34757,"public void test34757() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test34759,"public void test34759() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(10, 835, 0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField"", e);
    }
}",0,
project,0,test35760,"public void test35760() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test35761,"public void test35761() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test35762,"public void test35762() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test35763,"public void test35763() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test35764,"public void test35764() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test35765,"public void test35765() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test35766,"public void test35766() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test35767,"public void test35767() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test35768,"public void test35768() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    // Undeclared exception!
    try {
        fastDateFormat0.format((Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Calendar"", e);
    }
}",0,
project,0,test36769,"public void test36769() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test36770,"public void test36770() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test36771,"public void test36771() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test36772,"public void test36772() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test36773,"public void test36773() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test36774,"public void test36774() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test36775,"public void test36775() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test36776,"public void test36776() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test36777,"public void test36777() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    // Undeclared exception!
    try {
        fastDateFormat0.format(0L, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField"", e);
    }
}",0,
project,0,test37787,"public void test37787() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test37788,"public void test37788() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test37789,"public void test37789() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test37790,"public void test37790() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test37791,"public void test37791() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test37799,"public void test37799() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test37800,"public void test37800() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test37801,"public void test37801() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test37802,"public void test37802() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    // Undeclared exception!
    try {
        fastDateFormat0.format(0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test38803,"public void test38803() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test38804,"public void test38804() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test38805,"public void test38805() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test38806,"public void test38806() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test38807,"public void test38807() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test38808,"public void test38808() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test38809,"public void test38809() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test38810,"public void test38810() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test38814,"public void test38814() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    StringBuffer stringBuffer0 = new StringBuffer(""No date time pattern for locale: "");
    // Undeclared exception!
    try {
        fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$TextField"", e);
    }
}",0,
project,0,test39821,"public void test39821() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39822,"public void test39822() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test39823,"public void test39823() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test39824,"public void test39824() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test39825,"public void test39825() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test39831,"public void test39831() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(1, fastDateFormat0.getMaxLengthEstimate())"
project,0,test39832,"public void test39832() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test39833,"public void test39833() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test39843,"public void test39843() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39844,"public void test39844() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test39845,"public void test39845() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test39846,"public void test39846() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test39847,"public void test39847() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test39848,"public void test39848() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(""8:21:21 PM GMT+00:00"", string0);
}",0,assertNotNull(string0)
project,0,test39854,"public void test39854() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test39855,"public void test39855() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test39856,"public void test39856() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test40864,"public void test40864() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test40865,"public void test40865() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test40866,"public void test40866() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test40867,"public void test40867() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test40868,"public void test40868() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test40869,"public void test40869() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test40870,"public void test40870() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test40871,"public void test40871() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test40872,"public void test40872() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test40873,"public void test40873() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test40874,"public void test40874() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test40875,"public void test40875() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test40876,"public void test40876() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test40877,"public void test40877() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test40878,"public void test40878() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test41879,"public void test41879() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test41880,"public void test41880() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test41881,"public void test41881() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test41882,"public void test41882() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test41883,"public void test41883() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test41884,"public void test41884() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test41885,"public void test41885() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test41886,"public void test41886() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test41895,"public void test41895() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Locale locale0 = Locale.US;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField"", e);
    }
}",0,
project,0,test42896,"public void test42896() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance((-1105), 0, (TimeZone) null, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style -1105
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test43906,"public void test43906() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test43907,"public void test43907() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test43908,"public void test43908() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test43909,"public void test43909() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test43910,"public void test43910() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test43918,"public void test43918() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test43919,"public void test43919() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test43920,"public void test43920() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h:mm:ss"", fastDateFormat0.getPattern());
}",0,
project,0,test44928,"public void test44928() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test44929,"public void test44929() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test44930,"public void test44930() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test44931,"public void test44931() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test44932,"public void test44932() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test44939,"public void test44939() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test44940,"public void test44940() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test44941,"public void test44941() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test45955,"public void test45955() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test45956,"public void test45956() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test45957,"public void test45957() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test45958,"public void test45958() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test45959,"public void test45959() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test45971,"public void test45971() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test45972,"public void test45972() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""EEEE, d. MMMM yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test45973,"public void test45973() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test46974,"public void test46974() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(103, (TimeZone) null, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 103
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test47975,"public void test47975() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test47976,"public void test47976() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test47977,"public void test47977() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test47978,"public void test47978() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test47979,"public void test47979() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test47980,"public void test47980() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test47981,"public void test47981() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test47982,"public void test47982() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test47987,"public void test47987() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test47988,"public void test47988() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test47989,"public void test47989() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test47990,"public void test47990() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test47991,"public void test47991() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test47992,"public void test47992() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test47993,"public void test47993() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,
project,0,test47994,"public void test47994() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test47995,"public void test47995() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test47996,"public void test47996() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test47997,"public void test47997() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""Thu Aug 09 23:59:00 GMT 1906"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test481002,"public void test481002() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test481003,"public void test481003() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test481004,"public void test481004() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test481005,"public void test481005() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test481006,"public void test481006() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test481007,"public void test481007() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test481008,"public void test481008() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test481009,"public void test481009() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test481011,"public void test481011() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test481012,"public void test481012() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test481013,"public void test481013() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test481014,"public void test481014() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test481015,"public void test481015() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertNotNull(string0);
}",0,
project,0,test481016,"public void test481016() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""1/1/70 12:00 AM"", string0);
}",0,
project,0,test481017,"public void test481017() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test481018,"public void test481018() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test481019,"public void test481019() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test481020,"public void test481020() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""Thu Jan 01 00:00:04 GMT 1970"", mockDate0.toString());
}",0,
project,0,test491021,"public void test491021() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test491022,"public void test491022() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test491023,"public void test491023() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test491024,"public void test491024() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test491025,"public void test491025() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test491026,"public void test491026() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test491027,"public void test491027() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test491028,"public void test491028() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test491030,"public void test491030() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test491031,"public void test491031() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test491032,"public void test491032() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test491033,"public void test491033() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test491034,"public void test491034() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertNotNull(string0);
}",0,
project,0,test491035,"public void test491035() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""Friday, February 28, 0122 11:59:00 PM GMT"", string0);
}",0,
project,0,test491036,"public void test491036() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test491037,"public void test491037() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test491038,"public void test491038() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test491042,"public void test491042() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58312224060000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=122,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test501043,"public void test501043() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501044,"public void test501044() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501045,"public void test501045() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501046,"public void test501046() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501047,"public void test501047() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test501048,"public void test501048() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test501049,"public void test501049() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test501050,"public void test501050() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test501052,"public void test501052() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = fastDateFormat0.equals(mockDate0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501053,"public void test501053() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = fastDateFormat0.equals(mockDate0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501054,"public void test501054() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = fastDateFormat0.equals(mockDate0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501055,"public void test501055() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = fastDateFormat0.equals(mockDate0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501056,"public void test501056() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = fastDateFormat0.equals(mockDate0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test501057,"public void test501057() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = fastDateFormat0.equals(mockDate0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test501058,"public void test501058() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = fastDateFormat0.equals(mockDate0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test501059,"public void test501059() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = fastDateFormat0.equals(mockDate0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test501060,"public void test501060() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate();
    boolean boolean0 = fastDateFormat0.equals(mockDate0);
    assertEquals(""Fri Feb 14 20:21:21 GMT 2014"", mockDate0.toString());
}",0,
project,0,test511074,"public void test511074() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test511075,"public void test511075() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test511076,"public void test511076() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test511077,"public void test511077() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test511078,"public void test511078() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test511090,"public void test511090() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test511091,"public void test511091() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""ahh'\u65F6'mm'\u5206'ss'\u79D2' z"", fastDateFormat0.getPattern());
}",0,
project,0,test511092,"public void test511092() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test511093,"public void test511093() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    assertNotNull(calendar0);
}",0,
project,0,test511107,"public void test511107() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test511108,"public void test511108() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test511109,"public void test511109() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test511110,"public void test511110() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test511111,"public void test511111() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test511112,"public void test511112() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test511113,"public void test511113() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,"assertEquals(stringBuffer0, stringBuffer1)"
project,0,test511125,"public void test511125() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test511126,"public void test511126() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertEquals(""ahh'\u65F6'mm'\u5206'ss'\u79D2' z"", fastDateFormat0.getPattern());
}",0,
project,0,test511127,"public void test511127() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test521136,"public void test521136() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test521137,"public void test521137() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test521138,"public void test521138() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test521139,"public void test521139() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test521140,"public void test521140() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test521141,"public void test521141() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test521142,"public void test521142() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test521143,"public void test521143() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test521151,"public void test521151() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long((-1211L));
    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test521152,"public void test521152() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long((-1211L));
    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test521153,"public void test521153() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long((-1211L));
    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test531166,"public void test531166() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test531167,"public void test531167() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test531168,"public void test531168() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test531169,"public void test531169() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test531170,"public void test531170() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test531177,"public void test531177() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test531178,"public void test531178() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test531179,"public void test531179() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test531188,"public void test531188() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test531189,"public void test531189() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test531190,"public void test531190() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test531191,"public void test531191() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test531192,"public void test531192() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test531193,"public void test531193() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test531194,"public void test531194() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertNotNull(stringBuffer1);
}",0,
project,0,test531201,"public void test531201() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test531202,"public void test531202() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test531203,"public void test531203() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", fastDateFormat0.getPattern());
}",0,
project,0,test531206,"public void test531206() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61614000000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test541228,"public void test541228() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test541229,"public void test541229() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test541230,"public void test541230() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test541231,"public void test541231() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test541232,"public void test541232() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test541244,"public void test541244() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test541245,"public void test541245() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""ahh'\u65F6'mm'\u5206'ss'\u79D2' z"", fastDateFormat0.getPattern());
}",0,
project,0,test541246,"public void test541246() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test541254,"public void test541254() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) """", stringBuffer0, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: java.lang.String
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test551255,"public void test551255() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""HmEwv:<G%uK-&"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: v
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test561256,"public void test561256() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""|~#+%|r<"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: r
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test571257,"public void test571257() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("".hp7jH`/1_94X/S#"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: p
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test581264,"public void test581264() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField"", (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: o
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test591265,"public void test591265() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""<null>"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: n
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test601266,"public void test601266() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""F|&l"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: l
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test611267,"public void test611267() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""*y%[}sjm@y"", (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: j
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test621268,"public void test621268() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""$h]hz[im+["", (TimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: i
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test631271,"public void test631271() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("".y^g%D]]q!ZT"", timeZone0, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: g
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test641272,"public void test641272() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""*#m(F_fi<WsDs3"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: f
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test651280,"public void test651280() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""&c+c"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: c
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",1,
project,0,test661290,"public void test661290() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = new Locale("""", ""4Yaav@[swc8|"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""4Yaav@[swc8|"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: Y
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test671295,"public void test671295() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test671296,"public void test671296() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test671297,"public void test671297() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test671298,"public void test671298() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test671299,"public void test671299() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test671301,"public void test671301() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertEquals(""W9"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test671302,"public void test671302() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test671303,"public void test671303() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test681317,"public void test681317() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.GERMANY;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""Unknown class: "", (TimeZone) simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: U
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test691323,"public void test691323() throws Throwable {
    Locale locale0 = new Locale(""No date time pattern for locale: "", ""S<qo?y0"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""S<qo?y0"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: q
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test701326,"public void test701326() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""{363RHP)"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: R
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test711327,"public void test711327() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""L"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: L
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test721335,"public void test721335() throws Throwable {
    Locale locale0 = Locale.KOREA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("" 9JtTd.$cJi'MXwGE"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: J
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test731336,"public void test731336() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""IWw|"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: I
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test741337,"public void test741337() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: T
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test751344,"public void test751344() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), """");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"", (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: t
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test761345,"public void test761345() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""C/"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: C
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test771353,"public void test771353() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""%!6BqT/ 2.y"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""%!6BqT/ 2.y"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: B
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test781361,"public void test781361() throws Throwable {
    Locale locale0 = Locale.CHINA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""@AwdO6>Z*"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: A
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test791369,"public void test791369() throws Throwable {
    Locale locale0 = Locale.CHINA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance((String) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The pattern must not be null
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test801370,"public void test801370() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test801371,"public void test801371() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test801372,"public void test801372() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test821375,"public void test821375() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test831376,"public void test831376() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    ZoneId.getAvailableZoneIds();
    timeZone0.setID(""sa"");
    zoneOffset0.getRules();
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""sa"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
    decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
    Locale locale0 = Locale.UK;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(""HH:mm:ss 'o''clock' z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test841377,"public void test841377() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""km\""=7X{|rJ"");
    Locale locale0 = new Locale(""4|<9 ,H| Do&/"", ""IUgG1T[MPmf6/yGLlvX"", ""km\""=7X{|rJ"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""km\""=7X{|rJ"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: X
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test851378,"public void test851378() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", string0);
}",0,
project,0,test861379,"public void test861379() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test861380,"public void test861380() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.getLocale();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test871382,"public void test871382() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    ParsePosition parsePosition0 = new ParsePosition(1);
    fastDateFormat0.parseObject("""", parsePosition0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test881383,"public void test881383() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Calendar) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$TextField"", e);
    }
}",0,
project,0,test891384,"public void test891384() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    assertEquals(""M/d/yy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test901385,"public void test901385() throws Throwable {
    FastDateFormat.getTimeInstance(0);
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test911386,"public void test911386() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    String string0 = fastDateFormat0.format((long) 0);
    assertEquals(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT"", string0);
}",0,
project,0,test921387,"public void test921387() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test931388,"public void test931388() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(1960, 0, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 1960
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test941389,"public void test941389() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    String string0 = fastDateFormat0.toString();
    assertEquals(""FastDateFormat[h:mm:ss a z]"", string0);
}",0,assertNotNull(string0)
project,0,test951390,"public void test951390() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(17, int0);
}",0,"assertEquals(0, int0)"
project,0,test961391,"public void test961391() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
    // Undeclared exception!
    try {
        fastDateFormat0.parseObject(""\u683C\u6797\u5A01\u6CBB\u65F6\u95F4"", (ParsePosition) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test971393,"public void test971393() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 3, 3, 337);
    StringBuffer stringBuffer0 = new StringBuffer();
    fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167188180000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=37,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
