project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test009,"public void test009() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-1745), locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal style: -1745
        //
        verifyException(""java.util.TimeZone"", e);
    }
}",0,
project,0,test0117,"public void test0117() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0118,"public void test0118() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0119,"public void test0119() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0120,"public void test0120() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0127,"public void test0127() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0128,"public void test0128() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0129,"public void test0129() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0130,"public void test0130() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test0131,"public void test0131() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0132,"public void test0132() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0133,"public void test0133() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0134,"public void test0134() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0141,"public void test0141() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0142,"public void test0142() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0143,"public void test0143() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0244,"public void test0244() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test0245,"public void test0245() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(0, FastDateFormat.FULL);
}",1,
project,0,test0246,"public void test0246() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(3, FastDateFormat.SHORT);
}",1,
project,0,test0247,"public void test0247() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(1, FastDateFormat.LONG);
}",1,
project,0,test0248,"public void test0248() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0249,"public void test0249() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test0250,"public void test0250() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0251,"public void test0251() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertNotNull(fastDateFormat0);
}",1,
project,0,test0252,"public void test0252() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0253,"public void test0253() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0254,"public void test0254() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0255,"public void test0255() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0256,"public void test0256() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0257,"public void test0257() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test0258,"public void test0258() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0259,"public void test0259() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0 }, intArray0);
}",0,
project,0,test0260,"public void test0260() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(7, intArray0.length);
}",0,
project,0,test0261,"public void test0261() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(""U"", string0);
}",0,
project,0,test0262,"public void test0262() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertNotNull(string0);
}",0,
project,0,test0370,"public void test0370() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0371,"public void test0371() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0372,"public void test0372() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0373,"public void test0373() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0380,"public void test0380() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0381,"public void test0381() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0382,"public void test0382() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0383,"public void test0383() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test0384,"public void test0384() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0385,"public void test0385() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0386,"public void test0386() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0387,"public void test0387() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0394,"public void test0394() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0395,"public void test0395() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0396,"public void test0396() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0397,"public void test0397() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test04114,"public void test04114() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
    assertEquals(""Heure de Greenwich"", string0);
}",0,assertNotNull(string0)
project,0,test04115,"public void test04115() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test05123,"public void test05123() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test05124,"public void test05124() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test05125,"public void test05125() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test05126,"public void test05126() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test05133,"public void test05133() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test05134,"public void test05134() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test05135,"public void test05135() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test05136,"public void test05136() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test06146,"public void test06146() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test06147,"public void test06147() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test06148,"public void test06148() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test06149,"public void test06149() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test06157,"public void test06157() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test06158,"public void test06158() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertEquals(""H.mm.ss z"", fastDateFormat0.getPattern());
}",0,
project,0,test06159,"public void test06159() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test06160,"public void test06160() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test06161,"public void test06161() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test06162,"public void test06162() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test06163,"public void test06163() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test06164,"public void test06164() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test06172,"public void test06172() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test06173,"public void test06173() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(""H.mm.ss z"", fastDateFormat0.getPattern());
}",0,
project,0,test06174,"public void test06174() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test06175,"public void test06175() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(14, int0);
}",0,
project,0,test07183,"public void test07183() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test07184,"public void test07184() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test07185,"public void test07185() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test07186,"public void test07186() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test07193,"public void test07193() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test07194,"public void test07194() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test07195,"public void test07195() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test07196,"public void test07196() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test08206,"public void test08206() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""6/1/10"", timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test08207,"public void test08207() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""6/1/10"", timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test08208,"public void test08208() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""6/1/10"", timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test08209,"public void test08209() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""6/1/10"", timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test08217,"public void test08217() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""6/1/10"", timeZone0, locale0);
    assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test08218,"public void test08218() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""6/1/10"", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test08219,"public void test08219() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""6/1/10"", timeZone0, locale0);
    assertEquals(""6/1/10"", fastDateFormat0.getPattern());
}",0,
project,0,test08220,"public void test08220() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""6/1/10"", timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test09221,"public void test09221() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test09222,"public void test09222() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test09223,"public void test09223() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test09224,"public void test09224() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test09225,"public void test09225() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test09226,"public void test09226() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test09227,"public void test09227() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test09228,"public void test09228() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test10237,"public void test10237() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""@,0"", dateFormatSymbols0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    assertNotNull(timeZone0);
}",0,assertNotNull(timeZone0)
project,0,test10238,"public void test10238() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""@,0"", dateFormatSymbols0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""@,0"", timeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test10239,"public void test10239() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""@,0"", dateFormatSymbols0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""@,0"", timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test10240,"public void test10240() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""@,0"", dateFormatSymbols0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""@,0"", timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test10241,"public void test10241() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""@,0"", dateFormatSymbols0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""@,0"", timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test10247,"public void test10247() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""@,0"", dateFormatSymbols0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""@,0"", timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test10248,"public void test10248() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""@,0"", dateFormatSymbols0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""@,0"", timeZone0);
    assertEquals(""@,0"", fastDateFormat0.getPattern());
}",0,
project,0,test10249,"public void test10249() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""@,0"", dateFormatSymbols0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""@,0"", timeZone0);
    assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test10250,"public void test10250() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""@,0"", dateFormatSymbols0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""@,0"", timeZone0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test11251,"public void test11251() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test11252,"public void test11252() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test11253,"public void test11253() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test11254,"public void test11254() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test11255,"public void test11255() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test11256,"public void test11256() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test11257,"public void test11257() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test11258,"public void test11258() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test12261,"public void test12261() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test12262,"public void test12262() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test12263,"public void test12263() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test12264,"public void test12264() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test12266,"public void test12266() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test12267,"public void test12267() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test12268,"public void test12268() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test12269,"public void test12269() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test12274,"public void test12274() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test12275,"public void test12275() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test12276,"public void test12276() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test12277,"public void test12277() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test12279,"public void test12279() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test12280,"public void test12280() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test12281,"public void test12281() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test12282,"public void test12282() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""Wed Jun 01 14:48:00 GMT 1910"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test12287,"public void test12287() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test12288,"public void test12288() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test12289,"public void test12289() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,
project,0,test13299,"public void test13299() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test13300,"public void test13300() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test13301,"public void test13301() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test13302,"public void test13302() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test13310,"public void test13310() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test13311,"public void test13311() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test13312,"public void test13312() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test13313,"public void test13313() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test13315,"public void test13315() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test13316,"public void test13316() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test13317,"public void test13317() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test13318,"public void test13318() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test13326,"public void test13326() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test13327,"public void test13327() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test13328,"public void test13328() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test13329,"public void test13329() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""Mon Aug 04 09:06:56 GMT 949"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test13330,"public void test13330() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test13331,"public void test13331() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertNotNull(string0);
}",0,
project,0,test14332,"public void test14332() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test14333,"public void test14333() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test14334,"public void test14334() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test14335,"public void test14335() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test14336,"public void test14336() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test14337,"public void test14337() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test14338,"public void test14338() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test14339,"public void test14339() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test14345,"public void test14345() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    assertNotNull(timeZone0);
}",0,
project,0,test14354,"public void test14354() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    assertNotNull(calendar0);
}",0,"assertEquals(fastDateFormat0, calendar0)"
project,0,test14355,"public void test14355() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test14356,"public void test14356() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test14357,"public void test14357() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test14358,"public void test14358() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test14359,"public void test14359() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test14360,"public void test14360() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test14361,"public void test14361() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test14370,"public void test14370() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals("""", string0);
}",0,
project,0,test14371,"public void test14371() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test15372,"public void test15372() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test15373,"public void test15373() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test15374,"public void test15374() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test15375,"public void test15375() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test15376,"public void test15376() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test15377,"public void test15377() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test15378,"public void test15378() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test15379,"public void test15379() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test15380,"public void test15380() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    int[] intArray0 = new int[5];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken("""", intArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test16381,"public void test16381() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test16382,"public void test16382() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
    assertEquals(3, FastDateFormat.SHORT);
}",1,
project,0,test16383,"public void test16383() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
    assertEquals(1, FastDateFormat.LONG);
}",1,
project,0,test16384,"public void test16384() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
    assertEquals(0, FastDateFormat.FULL);
}",1,
project,0,test16385,"public void test16385() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test16386,"public void test16386() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
    assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test16387,"public void test16387() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
    assertEquals(""MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test16388,"public void test16388() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
    assertNotNull(fastDateFormat0);
}",1,
project,0,test16389,"public void test16389() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
    int[] intArray0 = new int[4];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken((String) null, intArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test17403,"public void test17403() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test17404,"public void test17404() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test17405,"public void test17405() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test17406,"public void test17406() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test17418,"public void test17418() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test17419,"public void test17419() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test17420,"public void test17420() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test17421,"public void test17421() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test17422,"public void test17422() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    // Undeclared exception!
    try {
        fastDateFormat0.parseObject(""2;Og@Nt"", (ParsePosition) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test18429,"public void test18429() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, """");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 3673, (Locale) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"", e);
    }
}",0,
project,0,test19432,"public void test19432() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(1390, timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 1390
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test20433,"public void test20433() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(518, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 518
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test21434,"public void test21434() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance((-438));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style -438
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test22435,"public void test22435() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(276, 276, (TimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 276
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test23443,"public void test23443() throws Throwable {
    Locale locale0 = Locale.CANADA;
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance((-750), (-750), locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style -750
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test24444,"public void test24444() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(11, 3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 11
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test25452,"public void test25452() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(122, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 122
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test26453,"public void test26453() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(1559);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 1559
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test27454,"public void test27454() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test27455,"public void test27455() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test27456,"public void test27456() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test27457,"public void test27457() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test27458,"public void test27458() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test27459,"public void test27459() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test27460,"public void test27460() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test27461,"public void test27461() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test27462,"public void test27462() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    // Undeclared exception!
    try {
        fastDateFormat0.format((Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Calendar"", e);
    }
}",0,
project,0,test28470,"public void test28470() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test28471,"public void test28471() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test28472,"public void test28472() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test28473,"public void test28473() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test28480,"public void test28480() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test28481,"public void test28481() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertEquals(""9]Y~%Db~VyH"", fastDateFormat0.getPattern());
}",0,
project,0,test28482,"public void test28482() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test28483,"public void test28483() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test28485,"public void test28485() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0, 0, 3);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test29486,"public void test29486() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test29487,"public void test29487() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    assertEquals(3, FastDateFormat.SHORT);
}",1,
project,0,test29488,"public void test29488() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    assertEquals(0, FastDateFormat.FULL);
}",1,
project,0,test29489,"public void test29489() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    assertEquals(1, FastDateFormat.LONG);
}",1,
project,0,test29490,"public void test29490() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test29491,"public void test29491() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test29492,"public void test29492() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test29493,"public void test29493() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    assertNotNull(fastDateFormat0);
}",1,
project,0,test29499,"public void test29499() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2571), 1713, 1604, 1, (-1));
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField"", e);
    }
}",0,
project,0,test30500,"public void test30500() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test30501,"public void test30501() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test30502,"public void test30502() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test30503,"public void test30503() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test30504,"public void test30504() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test30505,"public void test30505() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test30506,"public void test30506() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test30507,"public void test30507() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test30508,"public void test30508() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    // Undeclared exception!
    try {
        fastDateFormat0.format(1L, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField"", e);
    }
}",0,
project,0,test31518,"public void test31518() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test31519,"public void test31519() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test31520,"public void test31520() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test31521,"public void test31521() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test31529,"public void test31529() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test31530,"public void test31530() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test31531,"public void test31531() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test31532,"public void test31532() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test31533,"public void test31533() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    // Undeclared exception!
    try {
        fastDateFormat0.format(0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test32534,"public void test32534() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test32535,"public void test32535() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test32536,"public void test32536() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test32537,"public void test32537() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test32538,"public void test32538() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test32539,"public void test32539() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test32540,"public void test32540() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test32541,"public void test32541() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertNotNull(fastDateFormat0);
}",0,
project,0,test32542,"public void test32542() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    fastDateFormat0.hashCode();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test32543,"public void test32543() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    fastDateFormat0.hashCode();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test32544,"public void test32544() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    fastDateFormat0.hashCode();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test32545,"public void test32545() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    fastDateFormat0.hashCode();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test32546,"public void test32546() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    fastDateFormat0.hashCode();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test32547,"public void test32547() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    fastDateFormat0.hashCode();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test32548,"public void test32548() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    fastDateFormat0.hashCode();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test33549,"public void test33549() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(1, FastDateFormat.LONG);
}",1,
project,0,test33550,"public void test33550() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(3, FastDateFormat.SHORT);
}",1,
project,0,test33551,"public void test33551() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test33552,"public void test33552() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(0, FastDateFormat.FULL);
}",1,
project,0,test33553,"public void test33553() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test33554,"public void test33554() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test33555,"public void test33555() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test33556,"public void test33556() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertNotNull(fastDateFormat0);
}",1,
project,0,test33557,"public void test33557() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    fastDateFormat0.hashCode();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test33558,"public void test33558() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    fastDateFormat0.hashCode();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test33559,"public void test33559() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    fastDateFormat0.hashCode();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test33560,"public void test33560() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    fastDateFormat0.hashCode();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test33561,"public void test33561() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    fastDateFormat0.hashCode();
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test33562,"public void test33562() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    fastDateFormat0.hashCode();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test33563,"public void test33563() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    fastDateFormat0.hashCode();
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test34564,"public void test34564() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test34565,"public void test34565() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test34566,"public void test34566() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test34567,"public void test34567() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test34568,"public void test34568() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test34569,"public void test34569() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test34570,"public void test34570() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test34571,"public void test34571() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test34572,"public void test34572() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test34573,"public void test34573() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test34574,"public void test34574() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test34575,"public void test34575() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test34576,"public void test34576() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test34577,"public void test34577() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test34578,"public void test34578() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test34579,"public void test34579() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test35580,"public void test35580() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test35581,"public void test35581() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test35582,"public void test35582() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test35583,"public void test35583() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test35584,"public void test35584() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test35585,"public void test35585() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test35586,"public void test35586() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test35587,"public void test35587() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test35619,"public void test35619() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test35620,"public void test35620() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test35621,"public void test35621() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test35622,"public void test35622() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test35623,"public void test35623() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test35624,"public void test35624() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test35625,"public void test35625() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test35629,"public void test35629() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62352892746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=7,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=54,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test35645,"public void test35645() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
}",0,
project,0,test35646,"public void test35646() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test35647,"public void test35647() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test35648,"public void test35648() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(4, charArray0.length);
}",0,
project,0,test35649,"public void test35649() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",0,"assertEquals(stringBuffer0, stringBuffer1)"
project,0,test36831,"public void test36831() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test36848,"public void test36848() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test36849,"public void test36849() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test36850,"public void test36850() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test36851,"public void test36851() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test36852,"public void test36852() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(""yyyy-MM-dd"", fastDateFormat0.getPattern());
}",0,
project,0,test36853,"public void test36853() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test36854,"public void test36854() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test36862,"public void test36862() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test37869,"public void test37869() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(0, (-1548), (TimeZone) simpleTimeZone0, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style -1548
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test38877,"public void test38877() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(801, 2210, (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 2210
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test39880,"public void test39880() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance((-978), timeZone0, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style -978
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test40888,"public void test40888() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(2883, (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 2883
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test41898,"public void test41898() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test41899,"public void test41899() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test41900,"public void test41900() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test41901,"public void test41901() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test41909,"public void test41909() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test41910,"public void test41910() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test41911,"public void test41911() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test41912,"public void test41912() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test42913,"public void test42913() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(65, (TimeZone) null, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 65
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test43916,"public void test43916() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test43917,"public void test43917() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test43918,"public void test43918() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test43919,"public void test43919() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test43921,"public void test43921() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(""M/d/yy"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test43922,"public void test43922() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test43923,"public void test43923() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test43924,"public void test43924() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    assertNotNull(fastDateFormat0);
}",0,assertNotNull(fastDateFormat0)
project,0,test43926,"public void test43926() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test43927,"public void test43927() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test43928,"public void test43928() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test43929,"public void test43929() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test43931,"public void test43931() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""M/d/yy"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test43932,"public void test43932() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test43933,"public void test43933() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test43934,"public void test43934() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""Wed Jun 01 14:48:00 GMT 1910"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test43935,"public void test43935() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""6/1/10"", string0);
}",0,assertNotNull(string0)
project,0,test43936,"public void test43936() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test44944,"public void test44944() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test44945,"public void test44945() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test44946,"public void test44946() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test44947,"public void test44947() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test44954,"public void test44954() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test44955,"public void test44955() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test44956,"public void test44956() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test44957,"public void test44957() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test45960,"public void test45960() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test45961,"public void test45961() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test45962,"public void test45962() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test45963,"public void test45963() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test45965,"public void test45965() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test45966,"public void test45966() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test45967,"public void test45967() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test45968,"public void test45968() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test45976,"public void test45976() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test45977,"public void test45977() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test45978,"public void test45978() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test45979,"public void test45979() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test45986,"public void test45986() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat1.getPattern());
}",0,assertNotNull(fastDateFormat1.getPattern())
project,0,test45987,"public void test45987() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test45988,"public void test45988() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test45989,"public void test45989() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test45990,"public void test45990() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test45991,"public void test45991() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    assertNotNull(fastDateFormat1);
}",0,"assertEquals(fastDateFormat0, fastDateFormat1)"
project,0,test45992,"public void test45992() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test45993,"public void test45993() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test45994,"public void test45994() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test45995,"public void test45995() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test45996,"public void test45996() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test45997,"public void test45997() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test45998,"public void test45998() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test45999,"public void test45999() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test451001,"public void test451001() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test451002,"public void test451002() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test451003,"public void test451003() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test451010,"public void test451010() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals("""", fastDateFormat1.getPattern());
}",0,
project,0,test451011,"public void test451011() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test451012,"public void test451012() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test451013,"public void test451013() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test451014,"public void test451014() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test451015,"public void test451015() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertNotSame(fastDateFormat0, fastDateFormat1);
}",0,
project,0,test451016,"public void test451016() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test451017,"public void test451017() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test461024,"public void test461024() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test461025,"public void test461025() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test461026,"public void test461026() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test461027,"public void test461027() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test461033,"public void test461033() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test461034,"public void test461034() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test461035,"public void test461035() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test461036,"public void test461036() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test461044,"public void test461044() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test461045,"public void test461045() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test461046,"public void test461046() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test461047,"public void test461047() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test461053,"public void test461053() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test461054,"public void test461054() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test461055,"public void test461055() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test461059,"public void test461059() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertNull(object0);
}",0,
project,0,test461067,"public void test461067() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test461068,"public void test461068() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test461069,"public void test461069() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test461070,"public void test461070() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test461076,"public void test461076() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test461077,"public void test461077() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test461078,"public void test461078() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test461083,"public void test461083() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer2);
}",0,
project,0,test461084,"public void test461084() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test461085,"public void test461085() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertSame(stringBuffer2, stringBuffer0);
}",0,
project,0,test461086,"public void test461086() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertSame(stringBuffer2, stringBuffer1);
}",0,
project,0,test461087,"public void test461087() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertNotNull(stringBuffer2);
}",0,"assertEquals(stringBuffer0, stringBuffer2)"
project,0,test461088,"public void test461088() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test461089,"public void test461089() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test461090,"public void test461090() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test461091,"public void test461091() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test461097,"public void test461097() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test461098,"public void test461098() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test461099,"public void test461099() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test461107,"public void test461107() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test461108,"public void test461108() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test461109,"public void test461109() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test461110,"public void test461110() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test461122,"public void test461122() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test461123,"public void test461123() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test461124,"public void test461124() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""HH:mm' Uhr 'z"", fastDateFormat1.getPattern());
}",0,
project,0,test461125,"public void test461125() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test461126,"public void test461126() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test461127,"public void test461127() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertNotNull(fastDateFormat1);
}",0,
project,0,test461164,"public void test461164() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) mockSimpleDateFormat0, stringBuffer1, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test471165,"public void test471165() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test471166,"public void test471166() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test471167,"public void test471167() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test471168,"public void test471168() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test471169,"public void test471169() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test471170,"public void test471170() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test471171,"public void test471171() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test471172,"public void test471172() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat0);
}",0,
project,0,test471175,"public void test471175() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(1951L);
    boolean boolean0 = fastDateFormat0.equals(long0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test471176,"public void test471176() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(1951L);
    boolean boolean0 = fastDateFormat0.equals(long0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test471177,"public void test471177() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(1951L);
    boolean boolean0 = fastDateFormat0.equals(long0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test471178,"public void test471178() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(1951L);
    boolean boolean0 = fastDateFormat0.equals(long0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test471179,"public void test471179() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(1951L);
    boolean boolean0 = fastDateFormat0.equals(long0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test471180,"public void test471180() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(1951L);
    boolean boolean0 = fastDateFormat0.equals(long0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test471181,"public void test471181() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(1951L);
    boolean boolean0 = fastDateFormat0.equals(long0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test471182,"public void test471182() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long(1951L);
    boolean boolean0 = fastDateFormat0.equals(long0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test481183,"public void test481183() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test481184,"public void test481184() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test481185,"public void test481185() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test481186,"public void test481186() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test481187,"public void test481187() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test481188,"public void test481188() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test481189,"public void test481189() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test481190,"public void test481190() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test491194,"public void test491194() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test491195,"public void test491195() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test491196,"public void test491196() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test491197,"public void test491197() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test491199,"public void test491199() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test491200,"public void test491200() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test491201,"public void test491201() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test491202,"public void test491202() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test491212,"public void test491212() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test491213,"public void test491213() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test491214,"public void test491214() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test491215,"public void test491215() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test491217,"public void test491217() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test491218,"public void test491218() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test491219,"public void test491219() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test491227,"public void test491227() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test491228,"public void test491228() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertSame(stringBuffer1, stringBuffer0);
}",0,
project,0,test491229,"public void test491229() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertNotNull(stringBuffer1);
}",0,
project,0,test501239,"public void test501239() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501240,"public void test501240() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501241,"public void test501241() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501242,"public void test501242() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501249,"public void test501249() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test501250,"public void test501250() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test501251,"public void test501251() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    assertEquals(""E"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test501252,"public void test501252() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test501257,"public void test501257() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501258,"public void test501258() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501259,"public void test501259() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501260,"public void test501260() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501261,"public void test501261() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertEquals(""MMMM d, yyyy"", fastDateFormat1.getPattern());
}",0,
project,0,test501262,"public void test501262() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertEquals(20, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test501263,"public void test501263() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test501264,"public void test501264() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test501265,"public void test501265() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test501266,"public void test501266() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    assertNotNull(fastDateFormat1);
}",0,"assertEquals(fastDateFormat0, fastDateFormat1)"
project,0,test501285,"public void test501285() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501286,"public void test501286() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501287,"public void test501287() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501288,"public void test501288() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501295,"public void test501295() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar())
project,0,test501296,"public void test501296() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertEquals(""dd/MM/yy h:mm:ss z a"", fastDateFormat2.getPattern());
}",0,
project,0,test501297,"public void test501297() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertEquals(27, fastDateFormat2.getMaxLengthEstimate());
}",0,
project,0,test501299,"public void test501299() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
}",0,
project,0,test501300,"public void test501300() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
}",0,
project,0,test501301,"public void test501301() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertNotSame(locale0, locale1);
}",0,
project,0,test501302,"public void test501302() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertNotSame(fastDateFormat2, fastDateFormat1);
}",0,
project,0,test501303,"public void test501303() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertNotSame(fastDateFormat2, fastDateFormat0);
}",0,
project,0,test501304,"public void test501304() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertNotNull(fastDateFormat2);
}",0,"assertEquals(fastDateFormat0, fastDateFormat2)"
project,0,test501305,"public void test501305() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501306,"public void test501306() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501307,"public void test501307() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501308,"public void test501308() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501315,"public void test501315() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test501316,"public void test501316() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test501317,"public void test501317() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(""E"", fastDateFormat0.getPattern());
}",0,
project,0,test501319,"public void test501319() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test501320,"public void test501320() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
}",0,
project,0,test501322,"public void test501322() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertNotSame(locale0, locale1);
}",0,
project,0,test501323,"public void test501323() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertNotSame(fastDateFormat0, fastDateFormat1);
}",0,
project,0,test501324,"public void test501324() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertNotSame(fastDateFormat0, fastDateFormat2);
}",0,
project,0,test501325,"public void test501325() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(""E"", string1);
}",0,
project,0,test501326,"public void test501326() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertNotNull(string1);
}",0,
project,0,test501327,"public void test501327() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501328,"public void test501328() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501329,"public void test501329() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501330,"public void test501330() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501337,"public void test501337() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test501338,"public void test501338() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test501339,"public void test501339() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(""E"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test501342,"public void test501342() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test501343,"public void test501343() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
}",0,
project,0,test501344,"public void test501344() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertTrue(timeZone1.equals((Object) timeZone0));
}",0,
project,0,test501345,"public void test501345() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertNotSame(locale0, locale1);
}",0,
project,0,test501346,"public void test501346() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertNotSame(fastDateFormat0, fastDateFormat1);
}",0,
project,0,test501347,"public void test501347() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertNotSame(fastDateFormat0, fastDateFormat2);
}",0,
project,0,test501348,"public void test501348() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertNotSame(timeZone1, timeZone0);
}",0,
project,0,test501349,"public void test501349() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertNotNull(timeZone1);
}",0,
project,0,test501350,"public void test501350() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501351,"public void test501351() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501352,"public void test501352() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501353,"public void test501353() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501355,"public void test501355() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(""M/d/yy"", fastDateFormat3.getPattern());
}",0,assertNotNull(fastDateFormat3.getPattern())
project,0,test501356,"public void test501356() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertTrue(fastDateFormat3.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat3.getTimeZoneOverridesCalendar())
project,0,test501357,"public void test501357() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(10, fastDateFormat3.getMaxLengthEstimate());
}",0,
project,0,test501358,"public void test501358() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertTrue(timeZone0.equals((Object) timeZone1));
}",0,
project,0,test501359,"public void test501359() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
}",0,
project,0,test501360,"public void test501360() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
}",0,
project,0,test501361,"public void test501361() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
}",0,
project,0,test501362,"public void test501362() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertNotSame(timeZone0, timeZone1);
}",0,
project,0,test501363,"public void test501363() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertNotSame(fastDateFormat3, fastDateFormat0);
}",0,
project,0,test501364,"public void test501364() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertNotSame(fastDateFormat3, fastDateFormat2);
}",0,
project,0,test501365,"public void test501365() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertNotSame(fastDateFormat3, fastDateFormat1);
}",0,
project,0,test501366,"public void test501366() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    assertNotNull(fastDateFormat3);
}",0,
project,0,test501368,"public void test501368() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501369,"public void test501369() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501370,"public void test501370() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501371,"public void test501371() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501373,"public void test501373() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(""M/d/yy"", fastDateFormat3.getPattern());
}",0,
project,0,test501374,"public void test501374() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertTrue(fastDateFormat3.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat3.getTimeZoneOverridesCalendar())
project,0,test501375,"public void test501375() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(10, fastDateFormat3.getMaxLengthEstimate());
}",0,
project,0,test501376,"public void test501376() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(""Tue Dec 01 14:48:00 GMT 1908"", mockDate0.toString());
}",0,
project,0,test501377,"public void test501377() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertTrue(timeZone0.equals((Object) timeZone1));
}",0,
project,0,test501378,"public void test501378() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
}",0,
project,0,test501379,"public void test501379() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
}",0,
project,0,test501380,"public void test501380() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
}",0,
project,0,test501383,"public void test501383() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertNotSame(timeZone0, timeZone1);
}",0,
project,0,test501384,"public void test501384() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertNotSame(fastDateFormat3, fastDateFormat0);
}",0,
project,0,test501385,"public void test501385() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertNotSame(fastDateFormat3, fastDateFormat2);
}",0,
project,0,test501386,"public void test501386() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertNotSame(fastDateFormat3, fastDateFormat1);
}",0,
project,0,test501387,"public void test501387() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(""12/1/08"", string2);
}",0,
project,0,test501388,"public void test501388() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    assertNotNull(string2);
}",0,
project,0,test501393,"public void test501393() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501394,"public void test501394() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501395,"public void test501395() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501396,"public void test501396() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501403,"public void test501403() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar())
project,0,test501404,"public void test501404() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertEquals(""dd/MM/yy h:mm:ss z a"", fastDateFormat2.getPattern());
}",0,assertNotNull(fastDateFormat2.getPattern())
project,0,test501405,"public void test501405() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertEquals(27, fastDateFormat2.getMaxLengthEstimate());
}",0,
project,0,test501410,"public void test501410() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat3));
}",0,
project,0,test501411,"public void test501411() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
}",0,
project,0,test501412,"public void test501412() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
}",0,
project,0,test501413,"public void test501413() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertNotSame(locale0, locale1);
}",0,
project,0,test501414,"public void test501414() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertNotSame(fastDateFormat2, fastDateFormat3);
}",0,
project,0,test501415,"public void test501415() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertNotSame(fastDateFormat2, fastDateFormat1);
}",0,
project,0,test501416,"public void test501416() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertNotSame(fastDateFormat2, fastDateFormat0);
}",0,
project,0,test501417,"public void test501417() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    assertNull(object0);
}",0,
project,0,test501418,"public void test501418() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    assertFalse(mockDate1.equals((Object) mockDate0));
}",0,
project,0,test501483,"public void test501483() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501484,"public void test501484() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501485,"public void test501485() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501486,"public void test501486() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501487,"public void test501487() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertEquals(""Thu Feb 01 12:12:00 GMT 1900"", mockDate1.toString());
}",0,
project,0,test501521,"public void test501521() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat2.getTimeZoneOverridesCalendar())
project,0,test501522,"public void test501522() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertEquals(""dd/MM/yy h:mm:ss z a"", fastDateFormat2.getPattern());
}",0,
project,0,test501523,"public void test501523() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertEquals(27, fastDateFormat2.getMaxLengthEstimate());
}",0,
project,0,test501524,"public void test501524() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertFalse(mockDate1.equals((Object) mockDate0));
}",0,
project,0,test501526,"public void test501526() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat3));
}",0,
project,0,test501527,"public void test501527() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
}",0,
project,0,test501528,"public void test501528() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
}",0,
project,0,test501529,"public void test501529() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertNotSame(mockDate1, mockDate0);
}",0,
project,0,test501530,"public void test501530() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertNotSame(locale0, locale1);
}",0,
project,0,test501531,"public void test501531() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertSame(stringBuffer0, stringBuffer3);
}",0,
project,0,test501532,"public void test501532() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertSame(stringBuffer0, stringBuffer2);
}",0,
project,0,test501533,"public void test501533() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test501534,"public void test501534() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertSame(stringBuffer2, stringBuffer3);
}",0,
project,0,test501535,"public void test501535() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertSame(stringBuffer2, stringBuffer0);
}",0,
project,0,test501536,"public void test501536() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertSame(stringBuffer2, stringBuffer1);
}",0,
project,0,test501537,"public void test501537() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertSame(stringBuffer3, stringBuffer1);
}",0,
project,0,test501538,"public void test501538() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertSame(stringBuffer3, stringBuffer0);
}",0,
project,0,test501539,"public void test501539() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertSame(stringBuffer3, stringBuffer2);
}",0,
project,0,test501540,"public void test501540() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertNotSame(fastDateFormat2, fastDateFormat3);
}",0,
project,0,test501541,"public void test501541() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertNotSame(fastDateFormat2, fastDateFormat1);
}",0,
project,0,test501542,"public void test501542() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertNotSame(fastDateFormat2, fastDateFormat0);
}",0,
project,0,test501543,"public void test501543() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    assertNotNull(stringBuffer3);
}",0,"assertEquals(stringBuffer0, stringBuffer3)"
project,0,test501544,"public void test501544() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501545,"public void test501545() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test501546,"public void test501546() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test501547,"public void test501547() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test501554,"public void test501554() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar())
project,0,test501555,"public void test501555() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertEquals(""dd/MM/yy h:mm:ss z a"", fastDateFormat2.getPattern());
}",0,assertNotNull(fastDateFormat2.getPattern())
project,0,test501556,"public void test501556() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertEquals(27, fastDateFormat2.getMaxLengthEstimate());
}",0,
project,0,test501561,"public void test501561() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat3));
}",0,
project,0,test501562,"public void test501562() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
}",0,
project,0,test501563,"public void test501563() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
}",0,
project,0,test501564,"public void test501564() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertNotSame(locale0, locale1);
}",0,
project,0,test501565,"public void test501565() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertNotSame(fastDateFormat2, fastDateFormat3);
}",0,
project,0,test501566,"public void test501566() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertNotSame(fastDateFormat2, fastDateFormat1);
}",0,
project,0,test501567,"public void test501567() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertNotSame(fastDateFormat2, fastDateFormat0);
}",0,
project,0,test501568,"public void test501568() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    assertNull(object1);
}",0,"assertEquals(object0, object1)"
project,0,test501570,"public void test501570() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    TimeZone timeZone2 = TimeZone.getTimeZone(""Greenwich Mean Time"");
    assertTrue(timeZone2.equals((Object) timeZone0));
}",0,
project,0,test501571,"public void test501571() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""E"", locale0);
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
    String string0 = timeZone0.getDisplayName(locale0);
    Locale locale1 = Locale.forLanguageTag(""E"");
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
    MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
    String string2 = fastDateFormat3.format((Date) mockDate0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat2.parseObject("""", parsePosition0);
    MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer(""E"");
    StringBuffer stringBuffer1 = stringBuffer0.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(1);
    StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
    Object object1 = fastDateFormat2.parseObject(""I+iH4"", parsePosition0);
    TimeZone timeZone2 = TimeZone.getTimeZone(""Greenwich Mean Time"");
    assertTrue(timeZone2.equals((Object) timeZone1));
}",0,
project,0,test511584,"public void test511584() throws Throwable {
    String string0 = """";
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test511585,"public void test511585() throws Throwable {
    String string0 = """";
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test511586,"public void test511586() throws Throwable {
    String string0 = """";
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test511587,"public void test511587() throws Throwable {
    String string0 = """";
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test511595,"public void test511595() throws Throwable {
    String string0 = """";
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(""MMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test511596,"public void test511596() throws Throwable {
    String string0 = """";
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test511597,"public void test511597() throws Throwable {
    String string0 = """";
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test511598,"public void test511598() throws Throwable {
    String string0 = """";
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test511599,"public void test511599() throws Throwable {
    String string0 = """";
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""CjY3mZ!-QI }(r"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: C
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test521603,"public void test521603() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""u%F=Jb{Fk6<5bi1LAQ"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: u
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test531611,"public void test531611() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""htC+iAsdS2#%*>BG"", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: t
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test541617,"public void test541617() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    assertNotNull(timeZone0);
}",0,
project,0,test541618,"public void test541618() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""`r`JjOw"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: r
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test551619,"public void test551619() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""@H(d*8qNRb\u0001$;g;eW"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: q
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test561629,"public void test561629() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.US;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""<null>"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: n
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test571639,"public void test571639() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""iWKU+]K\""-?:et/0,"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: i
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test581647,"public void test581647() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""gl#+/t~.LgR_d%q"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: g
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test591661,"public void test591661() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, """");
    Locale locale0 = new Locale("""");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""];fP>%Q\""w"", (TimeZone) simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: f
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test601669,"public void test601669() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("">WK6e]DBk"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: e
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test611675,"public void test611675() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    assertNotNull(timeZone0);
}",0,
project,0,test611676,"public void test611676() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""cu+&Tf&53r^xfe!*`l@"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: c
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test621684,"public void test621684() throws Throwable {
    Locale locale0 = Locale.ROOT;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""-b>/gir%,"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: b
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test631685,"public void test631685() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""3(Wd<XHT"", (TimeZone) null, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: X
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test641692,"public void test641692() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("":Uhxdjbv"", (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: U
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test651693,"public void test651693() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""FTo'rGr4$NMLbEI2U\"""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: T
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test661701,"public void test661701() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""w$RV7HWI "", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: R
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test671702,"public void test671702() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""sP`u+I ,=U*"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: P
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test681710,"public void test681710() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""Nl"", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: N
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test691720,"public void test691720() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.CANADA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("".L$D&HvPb"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: L
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test701728,"public void test701728() throws Throwable {
    Locale locale0 = Locale.CHINA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""[#K.lmr7["", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: l
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test711732,"public void test711732() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""#%F=JFk6A5Dbi1LAQ"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: J
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test721739,"public void test721739() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test721740,"public void test721740() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test721741,"public void test721741() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test721742,"public void test721742() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test721748,"public void test721748() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test721749,"public void test721749() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test721750,"public void test721750() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test721751,"public void test721751() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertNotNull(fastDateFormat0);
}",0,
project,0,test721759,"public void test721759() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test721760,"public void test721760() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test721761,"public void test721761() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test721762,"public void test721762() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test721768,"public void test721768() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test721769,"public void test721769() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test721770,"public void test721770() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test721774,"public void test721774() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertNull(object0);
}",0,
project,0,test721782,"public void test721782() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test721783,"public void test721783() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test721784,"public void test721784() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test721785,"public void test721785() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test721791,"public void test721791() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test721792,"public void test721792() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test721793,"public void test721793() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test721798,"public void test721798() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer2);
}",0,
project,0,test721799,"public void test721799() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertSame(stringBuffer0, stringBuffer1);
}",0,
project,0,test721800,"public void test721800() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertSame(stringBuffer2, stringBuffer0);
}",0,
project,0,test721801,"public void test721801() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertSame(stringBuffer2, stringBuffer1);
}",0,
project,0,test721802,"public void test721802() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    assertNotNull(stringBuffer2);
}",0,"assertEquals(stringBuffer0, stringBuffer2)"
project,0,test721810,"public void test721810() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test721811,"public void test721811() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test721812,"public void test721812() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test721813,"public void test721813() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test721825,"public void test721825() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""HH:mm' Uhr 'z"", fastDateFormat1.getPattern());
}",0,
project,0,test721826,"public void test721826() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test721827,"public void test721827() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test721828,"public void test721828() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test721829,"public void test721829() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test721830,"public void test721830() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertNotNull(fastDateFormat1);
}",0,
project,0,test721863,"public void test721863() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test721864,"public void test721864() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test721865,"public void test721865() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test721866,"public void test721866() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test721873,"public void test721873() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar())
project,0,test721874,"public void test721874() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE"", fastDateFormat2.getPattern());
}",0,assertNotNull(fastDateFormat2.getPattern())
project,0,test721875,"public void test721875() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertEquals(17, fastDateFormat2.getMaxLengthEstimate());
}",0,
project,0,test721877,"public void test721877() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
}",0,
project,0,test721878,"public void test721878() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
}",0,
project,0,test721879,"public void test721879() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertNotSame(locale1, locale0);
}",0,
project,0,test721880,"public void test721880() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertNotSame(fastDateFormat2, fastDateFormat1);
}",0,
project,0,test721881,"public void test721881() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertNotSame(fastDateFormat2, fastDateFormat0);
}",0,
project,0,test721882,"public void test721882() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    assertNotNull(fastDateFormat2);
}",0,"assertEquals(fastDateFormat1, fastDateFormat2)"
project,0,test721887,"public void test721887() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) mockSimpleDateFormat0, stringBuffer1, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test731888,"public void test731888() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""9GIgE-"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: I
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test741896,"public void test741896() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""z}FWDo."", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: o
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test751897,"public void test751897() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""ZzBMHX.Xs,:pO[wVvQ"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: B
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test761898,"public void test761898() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The pattern must not be null
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test771899,"public void test771899() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 3, (-49), 0);
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    StringBuffer stringBuffer0 = new StringBuffer(""7t2Z)Umk`.3en(twdW3"");
    mockGregorianCalendar0.setFirstDayOfWeek(1693);
    StringBuffer stringBuffer1 = stringBuffer0.insert(0, ""org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField"");
    StringBuffer stringBuffer2 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
    Locale locale0 = Locale.CHINESE;
    locale0.getScript();
    Locale.forLanguageTag("""");
    FastDateFormat.getDateInstance(0, locale0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
    locale0.getDisplayCountry();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 3, (TimeZone) simpleTimeZone0, locale0);
    fastDateFormat2.applyRules(mockGregorianCalendar0, stringBuffer2);
    StringBuffer stringBuffer3 = fastDateFormat0.format((-2903L), stringBuffer1);
    fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    // Undeclared exception!
    try {
        fastDateFormat1.format((Object) stringBuffer0, stringBuffer0, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: java.lang.StringBuffer
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test791901,"public void test791901() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    String string0 = fastDateFormat0.format(0L);
    assertEquals(""Thursday, January 1, 1970 12:00:00 AM GMT"", string0);
}",0,
project,0,test801902,"public void test801902() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""\""\""v!j.#"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: v
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test811903,"public void test811903() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertTrue(boolean0);
}",0,
project,0,test821904,"public void test821904() throws Throwable {
    Locale locale0 = new Locale(""T{X#,(0"", ""T{X#,(0"", ""T{X#,(0"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), ""oI\""g!s`4Dh3d9"");
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""Friday, February 14, 2014"", string0);
}",0,
project,0,test831905,"public void test831905() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test831906,"public void test831906() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat1.getMaxLengthEstimate())"
project,0,test831907,"public void test831907() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertNotNull(fastDateFormat1);
}",0,
project,0,test841908,"public void test841908() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test841909,"public void test841909() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, int0);
}",0,
project,0,test851910,"public void test851910() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    String string0 = fastDateFormat0.toString();
    assertEquals(""FastDateFormat[]"", string0);
}",0,
project,0,test851911,"public void test851911() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    String string0 = fastDateFormat0.toString();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test871913,"public void test871913() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    fastDateFormat0.getLocale();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test881914,"public void test881914() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, (TimeZone) null);
    assertEquals(""h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test891915,"public void test891915() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    fastDateFormat0.getPattern();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test901916,"public void test901916() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    charArray0[0] = '^';
    charArray0[1] = 'j';
    charArray0[2] = '|';
    charArray0[3] = 'Q';
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2178);
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0);
    fastDateFormat0.equals(fastDateFormat1);
    FastDateFormat.getDateTimeInstance(0, 1);
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance((-2650), timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style -2650
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
