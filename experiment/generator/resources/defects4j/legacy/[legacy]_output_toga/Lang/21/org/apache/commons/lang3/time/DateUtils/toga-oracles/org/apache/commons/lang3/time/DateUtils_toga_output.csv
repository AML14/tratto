project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    Date date0 = DateUtils.parseDateStrictly("""", stringArray0);
    Date date1 = DateUtils.ceiling((Object) date0, 0);
    boolean boolean0 = DateUtils.truncatedEquals(date0, date1, 0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0011,"public void test0011() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3124), 870, 0, 0, (-3124), 870);
    // Undeclared exception!
    try {
        DateUtils.round((Calendar) mockGregorianCalendar0, (-3124));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field -3124 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test0023,"public void test0023() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
    mockGregorianCalendar0.setTimeInMillis(451L);
    Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
    DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
    boolean boolean0 = DateUtils.isSameInstant(calendar0, (Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0035,"public void test0035() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    Date date0 = DateUtils.parseDateStrictly("""", stringArray0);
    Date date1 = DateUtils.ceiling((Object) date0, 0);
    boolean boolean0 = DateUtils.isSameInstant(date0, date1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0046,"public void test0046() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    Date date0 = DateUtils.parseDateStrictly("""", stringArray0);
    Date date1 = DateUtils.ceiling(date0, 2);
    boolean boolean0 = DateUtils.isSameDay(date0, date1);
    assertFalse(boolean0);
}",0,
project,0,test0059,"public void test0059() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    Date date0 = DateUtils.parseDateStrictly("""", stringArray0);
    Date date1 = DateUtils.ceiling((Object) date0, 0);
    boolean boolean0 = DateUtils.isSameDay(date0, date1);
    assertFalse(boolean0);
}",0,
project,0,test00712,"public void test00712() throws Throwable {
    MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
    Date date0 = DateUtils.addWeeks(mockDate0, 828);
    mockDate0.setTime(1);
    int int0 = DateUtils.truncatedCompareTo((Date) mockDate0, date0, 1);
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test00813,"public void test00813() throws Throwable {
    MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
    Date date0 = DateUtils.addWeeks(mockDate0, 828);
    int int0 = DateUtils.truncatedCompareTo((Date) mockDate0, date0, 1);
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test00915,"public void test00915() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2, (-250), (-1835));
    int int0 = DateUtils.truncatedCompareTo((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1, 12);
    assertEquals(1, int0);
}",0,
project,0,test01622,"public void test01622() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, 12);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    long long0 = DateUtils.getFragmentInSeconds(date0, 12);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test01723,"public void test01723() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    long long0 = DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, 14);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test01824,"public void test01824() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3486, 1, 1618, 1618, (-1826), 2260);
    long long0 = DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, 1);
    assertEquals(366011L, long0);
}",0,"assertEquals(1, long0)"
project,0,test01925,"public void test01925() throws Throwable {
    MockDate mockDate0 = new MockDate(6, 6, 6);
    long long0 = DateUtils.getFragmentInMilliseconds((Date) mockDate0, 6);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test02026,"public void test02026() throws Throwable {
    MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
    long long0 = DateUtils.getFragmentInMilliseconds((Date) mockDate0, 1);
    assertEquals(1623660000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test02127,"public void test02127() throws Throwable {
    MockDate mockDate0 = new MockDate();
    long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 13);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test02228,"public void test02228() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 1);
    long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 1);
    assertEquals(32L, long0);
}",0,"assertEquals(1, long0)"
project,0,test02329,"public void test02329() throws Throwable {
    Instant instant0 = MockInstant.ofEpochSecond(1L);
    Date date0 = Date.from(instant0);
    Date date1 = DateUtils.addMonths(date0, 0);
    assertNotSame(date0, date1);
}",0,
project,0,test02430,"public void test02430() throws Throwable {
    MockDate mockDate0 = new MockDate(1, 1, 0, 2940, (-2659));
    // Undeclared exception!
    try {
        DateUtils.truncatedCompareTo((Date) mockDate0, (Date) null, (-15));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field -15 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test02531,"public void test02531() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    // Undeclared exception!
    try {
        DateUtils.truncatedCompareTo((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0, (-1170));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field -1170 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test02632,"public void test02632() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
    ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
    GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
    Date date0 = gregorianCalendar0.getGregorianChange();
    // Undeclared exception!
    try {
        DateUtils.truncate(date0, 3);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Calendar value too large for accurate calculations
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test02733,"public void test02733() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.toCalendar((Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02834,"public void test02834() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.setYears((Date) null, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test02935,"public void test02935() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.setSeconds((Date) null, 1215);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test03036,"public void test03036() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.setMonths((Date) null, 673);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test03137,"public void test03137() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.setMinutes((Date) null, (-2516));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test03238,"public void test03238() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.setHours((Date) null, 30);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test03339,"public void test03339() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.setDays((Date) null, (-1429));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test03440,"public void test03440() throws Throwable {
    MockDate mockDate0 = new MockDate(280000000, 2, 280000000, 3, 1810, 1138);
    // Undeclared exception!
    try {
        DateUtils.round((Date) mockDate0, 1810);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Calendar value too large for accurate calculations
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test03541,"public void test03541() throws Throwable {
    String[] stringArray0 = new String[0];
    try {
        DateUtils.parseDateStrictly(""8"", stringArray0);
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Unable to parse the date: 8
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test03642,"public void test03642() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""QO%s&W+ZZ"";
    // Undeclared exception!
    try {
        DateUtils.parseDateStrictly(""QO%s&W+ZZ"", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern character 'Q'
        //
        verifyException(""java.text.SimpleDateFormat"", e);
    }
}",1,
project,0,test03743,"public void test03743() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""Could not iterate based on "";
    // Undeclared exception!
    try {
        DateUtils.parseDate(""Could not iterate based on "", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern character 'C'
        //
        verifyException(""java.text.SimpleDateFormat"", e);
    }
}",1,
project,0,test03844,"public void test03844() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.getFragmentInMinutes((Date) null, 10);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test03945,"public void test03945() throws Throwable {
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    // Undeclared exception!
    try {
        DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar0, 4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fragment 4 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test04046,"public void test04046() throws Throwable {
    MockDate mockDate0 = new MockDate();
    // Undeclared exception!
    try {
        DateUtils.getFragmentInDays((Date) mockDate0, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fragment -1 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test04147,"public void test04147() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addYears((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test04248,"public void test04248() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addWeeks((Date) null, 2485);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test04349,"public void test04349() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addSeconds((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test04450,"public void test04450() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addMinutes((Date) null, 1584);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test04551,"public void test04551() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addMilliseconds((Date) null, (-1239));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test04652,"public void test04652() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addHours((Date) null, 5352);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test04753,"public void test04753() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addDays((Date) null, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test04854,"public void test04854() throws Throwable {
    DateUtils dateUtils0 = new DateUtils();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
    // Undeclared exception!
    try {
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 1001);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style 1001 is not valid.
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test04955,"public void test04955() throws Throwable {
    MockDate mockDate0 = new MockDate(1448L);
    boolean boolean0 = DateUtils.truncatedEquals((Date) mockDate0, (Date) mockDate0, 9);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test05056,"public void test05056() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Calendar) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test05258,"public void test05258() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test05359,"public void test05359() throws Throwable {
    Calendar calendar0 = MockCalendar.getInstance();
    boolean boolean0 = DateUtils.isSameDay(calendar0, calendar0);
    assertTrue(boolean0);
}",1,
project,0,test05460,"public void test05460() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(280000000, 1, 1, 1, (-1));
    int int0 = DateUtils.truncatedCompareTo((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0, 5);
    assertEquals(0, int0);
}",0,
project,0,test05561,"public void test05561() throws Throwable {
    MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
    int int0 = DateUtils.truncatedCompareTo((Date) mockDate0, (Date) mockDate0, 1);
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test05865,"public void test05865() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 1, 1, (-1), 1001);
    Date date0 = DateUtils.ceiling((Date) mockDate0, 2);
    boolean boolean0 = DateUtils.truncatedEquals(date0, (Date) mockDate0, 5);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test05967,"public void test05967() throws Throwable {
    Calendar calendar0 = MockCalendar.getInstance();
    boolean boolean0 = DateUtils.truncatedEquals(calendar0, calendar0, 0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test06068,"public void test06068() throws Throwable {
    Locale locale0 = new Locale("""", """");
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    Calendar calendar1 = DateUtils.ceiling(calendar0, 0);
    boolean boolean0 = DateUtils.truncatedEquals(calendar1, calendar0, 14);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test06170,"public void test06170() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    long long0 = DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, 14);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test06271,"public void test06271() throws Throwable {
    DateUtils dateUtils0 = new DateUtils();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
    long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 13);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test06372,"public void test06372() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    long long0 = DateUtils.getFragmentInMinutes(date0, 12);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test06473,"public void test06473() throws Throwable {
    MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10);
    // Undeclared exception!
    try {
        DateUtils.getFragmentInMilliseconds((Date) mockDate0, 10);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fragment 10 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test06574,"public void test06574() throws Throwable {
    Calendar calendar0 = MockCalendar.getInstance();
    // Undeclared exception!
    try {
        DateUtils.getFragmentInSeconds(calendar0, 9);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fragment 9 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test06675,"public void test06675() throws Throwable {
    MockDate mockDate0 = new MockDate();
    long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 5);
    assertEquals(20L, long0);
}",0,"assertEquals(0, long0)"
project,0,test06776,"public void test06776() throws Throwable {
    DateUtils dateUtils0 = new DateUtils();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
    // Undeclared exception!
    try {
        DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, 4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fragment 4 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test06877,"public void test06877() throws Throwable {
    MockDate mockDate0 = new MockDate(403L);
    // Undeclared exception!
    try {
        DateUtils.getFragmentInSeconds((Date) mockDate0, 3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fragment 3 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test06978,"public void test06978() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.getFragmentInMinutes((Calendar) null, 1229);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test07079,"public void test07079() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.getFragmentInHours((Date) null, (-1166));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test07180,"public void test07180() throws Throwable {
    Object object0 = new Object();
    // Undeclared exception!
    try {
        DateUtils.iterator(object0, 0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not iterate based on java.lang.Object@3659b77
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test07281,"public void test07281() throws Throwable {
    MockDate mockDate0 = new MockDate();
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) mockDate0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style 0 is not valid.
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test07382,"public void test07382() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) null, (-4149));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test07483,"public void test07483() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
    // Undeclared exception!
    try {
        DateUtils.iterator((Object) mockGregorianCalendar0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The range style 0 is not valid.
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test07584,"public void test07584() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 0);
    Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 4);
    assertNotNull(iterator0);
}",0,
project,0,test07786,"public void test07786() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 4);
    assertNotNull(iterator0);
}",0,
project,0,test07887,"public void test07887() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 3);
    assertNotNull(iterator0);
}",0,
project,0,test08089,"public void test08089() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
    Iterator<Calendar> iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 1);
    assertNotNull(iterator0);
}",0,
project,0,test08190,"public void test08190() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Calendar) null, 12);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test08291,"public void test08291() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.iterator((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test08798,"public void test08798() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
    ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
    GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
    Date date0 = gregorianCalendar0.getGregorianChange();
    // Undeclared exception!
    try {
        DateUtils.ceiling(date0, (-608));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Calendar value too large for accurate calculations
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test08899,"public void test08899() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    // Undeclared exception!
    try {
        DateUtils.ceiling((Object) mockGregorianCalendar0, 8);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field 8 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test089100,"public void test089100() throws Throwable {
    Object object0 = new Object();
    // Undeclared exception!
    try {
        DateUtils.ceiling(object0, 0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not find ceiling of for type: class java.lang.Object
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test090101,"public void test090101() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.ceiling((Object) null, 763);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test091102,"public void test091102() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.ceiling((Calendar) null, 4119);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test092103,"public void test092103() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.ceiling((Date) null, 723);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test093104,"public void test093104() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) ""Could not find ceiling of for type: "", 8);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not truncate Could not find ceiling of for type:
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test094105,"public void test094105() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1824, 1824, 1824, 1824, 1824);
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) mockGregorianCalendar0, 1824);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field 1824 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test095106,"public void test095106() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) null, 3598);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test096107,"public void test096107() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, (-1698), 0, 280000000);
    // Undeclared exception!
    try {
        DateUtils.truncate((Object) mockDate0, 30);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field 30 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test097108,"public void test097108() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.truncatedEquals((Date) null, (Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test098109,"public void test098109() throws Throwable {
    Object object0 = new Object();
    // Undeclared exception!
    try {
        DateUtils.round(object0, 111);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // Could not round java.lang.Object@9249ea
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test099110,"public void test099110() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    // Undeclared exception!
    try {
        DateUtils.round((Object) mockGregorianCalendar0, 1581);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field 1581 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test100111,"public void test100111() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Object) null, 10);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test101112,"public void test101112() throws Throwable {
    MockDate mockDate0 = new MockDate();
    // Undeclared exception!
    try {
        DateUtils.round((Object) mockDate0, 3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field 3 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test102113,"public void test102113() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Calendar) null, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test103115,"public void test103115() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
    Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1);
    boolean boolean0 = DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",1,
project,0,test104116,"public void test104116() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.round((Date) null, (-2836));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test105118,"public void test105118() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Date date0 = DateUtils.round((Date) mockDate0, 5);
    long long0 = DateUtils.getFragmentInHours(date0, 5);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test106119,"public void test106119() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.setMilliseconds((Date) null, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test107120,"public void test107120() throws Throwable {
    String[] stringArray0 = new String[9];
    stringArray0[0] = """";
    // Undeclared exception!
    try {
        DateUtils.parseDate(""$9-u,a2M&{ w8H].w"", stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test108121,"public void test108121() throws Throwable {
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""ZZ"";
    stringArray0[1] = ""ZZ"";
    stringArray0[2] = ""ZZ"";
    stringArray0[3] = ""ZZ"";
    stringArray0[4] = ""ZZ"";
    stringArray0[5] = ""ZZ"";
    stringArray0[6] = ""ZZ"";
    stringArray0[7] = ""ZZ"";
    try {
        DateUtils.parseDate(""ZZ"", stringArray0);
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Unable to parse the date: ZZ
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test109122,"public void test109122() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.parseDate("""", (String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Date and Patterns must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test110123,"public void test110123() throws Throwable {
    String[] stringArray0 = new String[6];
    // Undeclared exception!
    try {
        DateUtils.parseDateStrictly((String) null, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Date and Patterns must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test111124,"public void test111124() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, (-3412), 1);
    boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
    assertFalse(boolean0);
}",0,
project,0,test112125,"public void test112125() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
    assertTrue(boolean0);
}",0,
project,0,test113126,"public void test113126() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test114128,"public void test114128() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 12);
    boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
    assertFalse(boolean0);
}",1,
project,0,test115129,"public void test115129() throws Throwable {
    Calendar calendar0 = MockCalendar.getInstance();
    // Undeclared exception!
    try {
        DateUtils.isSameInstant(calendar0, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test116130,"public void test116130() throws Throwable {
    Calendar calendar0 = MockCalendar.getInstance();
    boolean boolean0 = DateUtils.isSameInstant(calendar0, calendar0);
    assertTrue(boolean0);
}",1,
project,0,test117131,"public void test117131() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameInstant((Calendar) null, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test118133,"public void test118133() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    Date date0 = DateUtils.parseDateStrictly("""", stringArray0);
    Date date1 = DateUtils.ceiling((Object) date0, 0);
    boolean boolean0 = DateUtils.isSameInstant(date1, date0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test119134,"public void test119134() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    Date date0 = DateUtils.parseDateStrictly("""", stringArray0);
    boolean boolean0 = DateUtils.isSameInstant(date0, date0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test120135,"public void test120135() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameInstant((Date) null, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test121137,"public void test121137() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    Date date0 = DateUtils.parseDateStrictly("""", stringArray0);
    Date date1 = DateUtils.ceiling((Object) date0, 1001);
    boolean boolean0 = DateUtils.isSameDay(date0, date1);
    assertFalse(boolean0);
}",0,
project,0,test122138,"public void test122138() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, (-3412), 1);
    boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
    assertFalse(boolean0);
}",1,
project,0,test123139,"public void test123139() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test124140,"public void test124140() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Calendar) null, (Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test125141,"public void test125141() throws Throwable {
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    Date date0 = DateUtils.parseDateStrictly("""", stringArray0);
    boolean boolean0 = DateUtils.isSameDay(date0, date0);
    assertTrue(boolean0);
}",0,
project,0,test126142,"public void test126142() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.isSameDay((Date) null, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test129145,"public void test129145() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 1090, (-1), 1090, 597);
    Calendar calendar0 = DateUtils.toCalendar(mockDate0);
    // Undeclared exception!
    try {
        DateUtils.getFragmentInMinutes(calendar0, (-1443));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fragment -1443 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test130146,"public void test130146() throws Throwable {
    DateUtils dateUtils0 = new DateUtils();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
    long long0 = DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar0, 2);
    assertEquals(356L, long0);
}",0,"assertEquals(1, long0)"
project,0,test132148,"public void test132148() throws Throwable {
    DateUtils dateUtils0 = new DateUtils();
    Calendar calendar0 = MockCalendar.getInstance(dateUtils0.UTC_TIME_ZONE);
    // Undeclared exception!
    try {
        DateUtils.truncatedEquals((Calendar) null, calendar0, 44);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test136152,"public void test136152() throws Throwable {
    MockDate mockDate0 = new MockDate();
    long long0 = DateUtils.getFragmentInMinutes((Date) mockDate0, 1);
    assertEquals(66021L, long0);
}",0,
project,0,test138154,"public void test138154() throws Throwable {
    // Undeclared exception!
    try {
        DateUtils.addMonths((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",1,
project,0,test139155,"public void test139155() throws Throwable {
    MockDate mockDate0 = new MockDate();
    long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 2);
    assertEquals(14L, long0);
}",0,"assertEquals(1, long0)"
project,0,test140156,"public void test140156() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1868), (-1868), 2140793667, (-2338), 0);
    // Undeclared exception!
    try {
        DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 2950);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fragment 2950 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test142158,"public void test142158() throws Throwable {
    DateUtils dateUtils0 = new DateUtils();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
    long long0 = DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, 6);
    assertEquals(73281320L, long0);
}",0,"assertEquals(1, long0)"
project,0,test143159,"public void test143159() throws Throwable {
    MockDate mockDate0 = new MockDate();
    long long0 = DateUtils.getFragmentInSeconds((Date) mockDate0, 1);
    assertEquals(3961281L, long0);
}",0,"assertEquals(1, long0)"
project,0,test146162,"public void test146162() throws Throwable {
    String[] stringArray0 = new String[4];
    // Undeclared exception!
    try {
        DateUtils.parseDateStrictly("""", stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test147163,"public void test147163() throws Throwable {
    MockDate mockDate0 = new MockDate(1433, 1433, (-155), 7, 0, 0);
    // Undeclared exception!
    try {
        DateUtils.getFragmentInMilliseconds((Date) mockDate0, 7);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fragment 7 is not supported
        //
        verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
    }
}",0,
project,0,test148164,"public void test148164() throws Throwable {
    Calendar calendar0 = MockCalendar.getInstance();
    long long0 = DateUtils.getFragmentInSeconds(calendar0, 11);
    assertEquals(1281L, long0);
}",0,"assertEquals(1, long0)"
