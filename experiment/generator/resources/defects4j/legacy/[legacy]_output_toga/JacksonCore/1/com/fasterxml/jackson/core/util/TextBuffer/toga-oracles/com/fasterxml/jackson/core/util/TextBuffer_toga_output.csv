project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.finishCurrentSegment();
    char[] charArray0 = textBuffer0.expandCurrentSegment();
    textBuffer0.resetWithShared(charArray0, 1500, 1500);
    // Undeclared exception!
    try {
        textBuffer0.getCurrentSegment();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.toString();
    char[] charArray0 = textBuffer0.contentsAsArray();
    assertArrayEquals(new char[] {}, charArray0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    try {
        textBuffer0.contentsAsDouble();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    int int0 = textBuffer0.getCurrentSegmentSize();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test044,"public void test044() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.releaseBuffers();
    assertEquals(0, textBuffer0.getCurrentSegmentSize());
}",0,"assertEquals(0, textBuffer0.getCurrentSegmentSize())"
project,0,test055,"public void test055() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    textBuffer0.releaseBuffers();
    assertEquals(0, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test056,"public void test056() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    textBuffer0.releaseBuffers();
    assertEquals(0, textBuffer0.getTextOffset());
}",0,"assertEquals(0, textBuffer0.getTextOffset())"
project,0,test067,"public void test067() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.finishCurrentSegment();
    assertEquals(200, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test068,"public void test068() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.finishCurrentSegment();
    textBuffer0.releaseBuffers();
    assertEquals(0, textBuffer0.size());
}",0,
project,0,test079,"public void test079() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = new char[0];
    // Undeclared exception!
    try {
        textBuffer0.resetWithCopy(charArray0, 2000, 2000);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.getCurrentSegment();
    char[] charArray0 = textBuffer0.finishCurrentSegment();
    // Undeclared exception!
    try {
        textBuffer0.resetWithCopy(charArray0, 2000, 2000);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test0911,"public void test0911() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    // Undeclared exception!
    try {
        textBuffer0.resetWithCopy(charArray0, 2000, 2000);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test1012,"public void test1012() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.resetWithString(""com.fasterxml.jackson.core.util.TextBuffer"");
    int int0 = textBuffer0.size();
    assertFalse(textBuffer0.hasTextAsCharacters());
}",0,assertTrue(textBuffer0.hasTextAsCharacters())
project,0,test1013,"public void test1013() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.resetWithString(""com.fasterxml.jackson.core.util.TextBuffer"");
    int int0 = textBuffer0.size();
    assertEquals(42, int0);
}",0,"assertEquals(1, int0)"
project,0,test1114,"public void test1114() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.finishCurrentSegment();
    textBuffer0.resetWithString(""&!Y!pm'&<N9(:mip4"");
    assertFalse(textBuffer0.hasTextAsCharacters());
}",0,assertTrue(textBuffer0.hasTextAsCharacters())
project,0,test1215,"public void test1215() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.getCurrentSegment();
    textBuffer0.finishCurrentSegment();
    textBuffer0.getTextBuffer();
    textBuffer0.toString();
    assertEquals(200, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test1316,"public void test1316() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    int int0 = textBuffer0.size();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1417,"public void test1417() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    assertEquals(200, charArray0.length);
}",0,
project,0,test1418,"public void test1418() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.contentsAsArray();
    assertNotNull(charArray1);
}",0,"assertEquals(charArray0, charArray1)"
project,0,test1419,"public void test1419() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.contentsAsArray();
    int int0 = textBuffer0.size();
    assertEquals(0, textBuffer0.getTextOffset());
}",0,"assertEquals(0, textBuffer0.getTextOffset())"
project,0,test1420,"public void test1420() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.contentsAsArray();
    int int0 = textBuffer0.size();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1521,"public void test1521() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.ensureNotShared();
    int int0 = textBuffer0.getTextOffset();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1522,"public void test1522() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.ensureNotShared();
    int int0 = textBuffer0.getTextOffset();
    assertEquals(0, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test1623,"public void test1623() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    int int0 = textBuffer0.getTextOffset();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1724,"public void test1724() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    boolean boolean0 = textBuffer0.hasTextAsCharacters();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1825,"public void test1825() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    assertEquals(200, charArray0.length);
}",0,
project,0,test1826,"public void test1826() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    boolean boolean0 = textBuffer0.hasTextAsCharacters();
    assertEquals(0, textBuffer0.getTextOffset());
}",0,
project,0,test1827,"public void test1827() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    boolean boolean0 = textBuffer0.hasTextAsCharacters();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1828,"public void test1828() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    boolean boolean0 = textBuffer0.hasTextAsCharacters();
    assertEquals(0, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test1929,"public void test1929() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    assertEquals(200, charArray0.length);
}",0,
project,0,test1930,"public void test1930() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.contentsAsArray();
    assertNotNull(charArray1);
}",0,"assertEquals(charArray0, charArray1)"
project,0,test1931,"public void test1931() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.contentsAsArray();
    boolean boolean0 = textBuffer0.hasTextAsCharacters();
    assertEquals(0, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test1932,"public void test1932() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.contentsAsArray();
    boolean boolean0 = textBuffer0.hasTextAsCharacters();
    assertEquals(0, textBuffer0.getTextOffset());
}",0,"assertEquals(0, textBuffer0.getTextOffset())"
project,0,test1933,"public void test1933() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.contentsAsArray();
    boolean boolean0 = textBuffer0.hasTextAsCharacters();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2034,"public void test2034() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.resetWithEmpty();
    textBuffer0.contentsAsString();
    boolean boolean0 = textBuffer0.hasTextAsCharacters();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2135,"public void test2135() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.getTextBuffer();
    assertNull(charArray0);
}",0,assertNotNull(charArray0)
project,0,test2236,"public void test2236() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    assertEquals(200, charArray0.length);
}",0,
project,0,test2237,"public void test2237() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.contentsAsArray();
    char[] charArray1 = textBuffer0.getTextBuffer();
    assertEquals(0, charArray1.length);
}",0,
project,0,test2238,"public void test2238() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.contentsAsArray();
    char[] charArray1 = textBuffer0.getTextBuffer();
    assertNotNull(charArray1);
}",0,"assertEquals(charArray0, charArray1)"
project,0,test2239,"public void test2239() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.contentsAsArray();
    char[] charArray1 = textBuffer0.getTextBuffer();
    assertEquals(0, textBuffer0.size());
}",0,
project,0,test2340,"public void test2340() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.resetWithString(""nL"");
    textBuffer0.getTextBuffer();
    assertEquals(2, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test2441,"public void test2441() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.getTextBuffer();
    assertSame(charArray1, charArray0);
}",0,
project,0,test2442,"public void test2442() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.getTextBuffer();
    assertEquals(0, textBuffer0.getCurrentSegmentSize());
}",0,"assertEquals(0, textBuffer0.getCurrentSegmentSize())"
project,0,test2443,"public void test2443() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.getTextBuffer();
    assertEquals(200, charArray1.length);
}",0,
project,0,test2444,"public void test2444() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.getTextBuffer();
    assertNotNull(charArray1);
}",0,"assertEquals(charArray0, charArray1)"
project,0,test2545,"public void test2545() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    textBuffer0.contentsAsString();
    String string0 = textBuffer0.contentsAsString();
    assertEquals("""", string0);
}",0,
project,0,test2646,"public void test2646() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.getCurrentSegment();
    textBuffer0.resetWithShared(charArray0, 2000, 2000);
    // Undeclared exception!
    try {
        textBuffer0.contentsAsString();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test2747,"public void test2747() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.finishCurrentSegment();
    textBuffer0.contentsAsString();
    assertFalse(textBuffer0.hasTextAsCharacters());
}",0,assertTrue(textBuffer0.hasTextAsCharacters())
project,0,test2848,"public void test2848() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
    char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 2000);
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.append(charArray0, 0, 2000);
    String string0 = textBuffer0.toString();
    textBuffer0.append(string0, 0, 2000);
    assertEquals(4000, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test2949,"public void test2949() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.contentsAsArray();
    char[] charArray0 = textBuffer0.contentsAsArray();
    assertArrayEquals(new char[] {}, charArray0);
}",0,
project,0,test3050,"public void test3050() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    // Undeclared exception!
    try {
        textBuffer0.contentsAsDecimal();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",0,
project,0,test3151,"public void test3151() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.contentsAsArray();
    try {
        textBuffer0.contentsAsDecimal();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",0,
project,0,test3252,"public void test3252() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.append('[');
    try {
        textBuffer0.contentsAsDecimal();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",0,
project,0,test3353,"public void test3353() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.append('[');
    textBuffer0.finishCurrentSegment();
    try {
        textBuffer0.contentsAsDecimal();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",0,
project,0,test3454,"public void test3454() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.resetWithEmpty();
    textBuffer0.ensureNotShared();
    assertTrue(textBuffer0.hasTextAsCharacters());
}",0,assertTrue(textBuffer0.hasTextAsCharacters())
project,0,test3555,"public void test3555() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.setCurrentLength(262144);
    char[] charArray0 = textBuffer0.expandCurrentSegment();
    // Undeclared exception!
    try {
        textBuffer0.append(charArray0, 1500, 1500);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test3656,"public void test3656() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    textBuffer0.emptyAndGetCurrentSegment();
    String string0 = textBuffer0.contentsAsString();
    // Undeclared exception!
    try {
        textBuffer0.append(string0, 262144, 262144);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test3757,"public void test3757() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    // Undeclared exception!
    try {
        textBuffer0.append("""", 2000, (-4210));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test3858,"public void test3858() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    assertEquals(0, textBuffer0.getTextOffset());
}",0,"assertEquals(0, textBuffer0.getTextOffset())"
project,0,test3859,"public void test3859() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.getCurrentSegment();
    assertEquals(1000, charArray1.length);
}",0,
project,0,test3860,"public void test3860() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.getCurrentSegment();
    assertSame(charArray1, charArray0);
}",0,
project,0,test3861,"public void test3861() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray1 = textBuffer0.getCurrentSegment();
    assertEquals(0, textBuffer0.getCurrentSegmentSize());
}",0,"assertEquals(0, textBuffer0.getCurrentSegmentSize())"
project,0,test3962,"public void test3962() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.resetWithEmpty();
    assertEquals(0, textBuffer0.getTextOffset());
}",0,"assertEquals(0, textBuffer0.getTextOffset())"
project,0,test3963,"public void test3963() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.resetWithEmpty();
    char[] charArray0 = textBuffer0.getCurrentSegment();
    assertEquals(200, charArray0.length);
}",0,
project,0,test4064,"public void test4064() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.TOKEN_BUFFER;
    char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 2000);
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.append(charArray0, (int) '(', 1768);
    textBuffer0.getCurrentSegment();
    assertEquals(1768, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test4165,"public void test4165() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.getCurrentSegment();
    textBuffer0.finishCurrentSegment();
    assertEquals(200, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test4166,"public void test4166() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.getCurrentSegment();
    textBuffer0.finishCurrentSegment();
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    assertEquals(300, charArray0.length);
}",0,
project,0,test4267,"public void test4267() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.finishCurrentSegment();
    textBuffer0.expandCurrentSegment();
    textBuffer0.expandCurrentSegment();
    textBuffer0.finishCurrentSegment();
    textBuffer0.finishCurrentSegment();
    textBuffer0.setCurrentLength(262144);
    textBuffer0.expandCurrentSegment();
    textBuffer0.append('h');
    textBuffer0.expandCurrentSegment();
    char[] charArray0 = textBuffer0.expandCurrentSegment();
    textBuffer0.expandCurrentSegment();
    textBuffer0.setCurrentLength(262144);
    textBuffer0.expandCurrentSegment();
    textBuffer0.append(charArray0, 1500, 1500);
    textBuffer0.expandCurrentSegment();
    textBuffer0.expandCurrentSegment();
    textBuffer0.expandCurrentSegment();
    assertEquals(1500, textBuffer0.getCurrentSegmentSize());
}",0,
project,0,test4368,"public void test4368() throws Throwable {
    TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
    textBuffer0.emptyAndGetCurrentSegment();
    char[] charArray0 = textBuffer0.expandCurrentSegment();
    textBuffer0.resetWithShared(charArray0, 1500, 1500);
    // Undeclared exception!
    try {
        textBuffer0.getCurrentSegment();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test4469,"public void test4469() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = new char[4];
    textBuffer0.resetWithShared(charArray0, 0, 45);
    textBuffer0.contentsAsArray();
    assertEquals(45, textBuffer0.size());
}",0,"assertEquals(0, textBuffer0.size())"
project,0,test4570,"public void test4570() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
    textBuffer0.resetWithShared(charArray0, 2000, 2000);
    // Undeclared exception!
    try {
        textBuffer0.contentsAsArray();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test4671,"public void test4671() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
    textBuffer0.append('r');
    textBuffer0.contentsAsArray();
    assertEquals(1, textBuffer0.getCurrentSegmentSize());
}",0,"assertEquals(0, textBuffer0.getCurrentSegmentSize())"
