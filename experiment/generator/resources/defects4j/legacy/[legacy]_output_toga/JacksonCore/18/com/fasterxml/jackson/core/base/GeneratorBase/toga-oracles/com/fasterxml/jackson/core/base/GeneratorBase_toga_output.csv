project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    SerializedString serializedString0 = new SerializedString(""EJcoi<V"");
    uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
    assertEquals(1198, uTF8JsonGenerator0.getFeatureMask());
}",0,
project,0,test011,"public void test011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
    SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
    uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test012,"public void test012() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
    SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
    uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test023,"public void test023() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.flush();
    assertEquals(1198, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test034,"public void test034() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    char[] charArray0 = new char[2];
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1672), (ObjectCodec) null, (Writer) null);
    writerBasedJsonGenerator0.writeRawValue(charArray0, 0, 2);
    assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
}",0,
project,0,test045,"public void test045() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringWriter stringWriter0 = new StringWriter(2834);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 10, (ObjectCodec) null, stringWriter0);
    writerBasedJsonGenerator0.writeRawValue(""SQjjAd~I,YoWvt"", 0, 1);
    assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
}",0,
project,0,test056,"public void test056() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
    uTF8JsonGenerator0.version();
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test067,"public void test067() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeString(""EJcoi<V"");
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(1, jsonGenerator0.getFeatureMask());
}",0,
project,0,test068,"public void test068() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeString(""EJcoi<V"");
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test079,"public void test079() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(1198, jsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, jsonGenerator0.getFeatureMask())"
project,0,test0810,"public void test0810() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, byteArrayBuilder0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
    filteringGeneratorDelegate0.writeStartObject();
    uTF8JsonGenerator0.setFeatureMask(563);
    assertEquals(563, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test0911,"public void test0911() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test0912,"public void test0912() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
    assertEquals((-3229), jsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, jsonGenerator0.getFeatureMask())"
project,0,test1013,"public void test1013() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-20), true);
    uTF8JsonGenerator0.setFeatureMask((byte) (-16));
    uTF8JsonGenerator0.setCodec((ObjectCodec) null);
    assertEquals((-16), uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test1114,"public void test1114() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1767), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeRawValue(""EJcoi<V"");
    uTF8JsonGenerator0.overrideStdFeatures(3, (-1767));
    assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
}",0,
project,0,test1215,"public void test1215() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, (-723), false);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-3230), 128);
    assertEquals(0, jsonGenerator0.getFeatureMask());
}",0,"assertEquals(1, jsonGenerator0.getFeatureMask())"
project,0,test1316,"public void test1316() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.close();
    boolean boolean0 = uTF8JsonGenerator0.isClosed();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1417,"public void test1417() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    uTF8JsonGenerator0.getOutputContext();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test1418,"public void test1418() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    uTF8JsonGenerator0.getOutputContext();
    assertEquals((-3229), uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test1519,"public void test1519() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeNumberField(""J^?ou=(.#@Q?"", (-695.73224F));
    uTF8JsonGenerator0.writeRawValue(""EJcoi<V"");
    uTF8JsonGenerator0.getOutputContext();
    assertEquals(34, uTF8JsonGenerator0.getOutputBuffered());
}",0,
project,0,test1620,"public void test1620() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    File file0 = MockFile.createTempFile(""Hc!wHe[6Z17`NY"", ""si"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
    byte[] byteArray0 = new byte[3];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 128, false);
    int int0 = uTF8JsonGenerator0.getFeatureMask();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test1721,"public void test1721() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[1];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 51, false);
    int int0 = uTF8JsonGenerator0.getFeatureMask();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test1822,"public void test1822() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.setCurrentValue(byteArrayBuilder0);
    uTF8JsonGenerator0.getCurrentValue();
    assertEquals(1198, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test1923,"public void test1923() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test1924,"public void test1924() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test2025,"public void test2025() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(1196, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test2126,"public void test2126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
    writerBasedJsonGenerator0.close();
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeTree((TreeNode) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.WriterBasedJsonGenerator"", e);
    }
}",0,
project,0,test2227,"public void test2227() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    try {
        uTF8JsonGenerator0.writeTree((TreeNode) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a null, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test2429,"public void test2429() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    char[] charArray0 = new char[0];
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1672), (ObjectCodec) null, (Writer) null);
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeRawValue(charArray0, 0, 2);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test2530,"public void test2530() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    char[] charArray0 = new char[0];
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1672), (ObjectCodec) null, (Writer) null);
    writerBasedJsonGenerator0.writeStartObject();
    try {
        writerBasedJsonGenerator0.writeRawValue(charArray0, 0, 2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write raw value, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test2631,"public void test2631() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1527), (ObjectCodec) null, (OutputStream) null);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeRawValue((String) null, 57343, (-1527));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8JsonGenerator"", e);
    }
}",1,
project,0,test2732,"public void test2732() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
    uTF8JsonGenerator0.writeStartObject();
    try {
        uTF8JsonGenerator0.writeRawValue(""0I!&C>^'sI5ly,"", 127, (int) (byte) (-41));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write raw value, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test2833,"public void test2833() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeRawValue((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8JsonGenerator"", e);
    }
}",1,
project,0,test2934,"public void test2934() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    try {
        uTF8JsonGenerator0.writeRawValue(""Ox\"""");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write raw value, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test3035,"public void test3035() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""com.fasterxml.jackson.core.base.GeneratorBase"", true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 56320);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeObject(byteArrayBuilder0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.util.ByteArrayBuilder)
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test3136,"public void test3136() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3246), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    try {
        uTF8JsonGenerator0.writeObject("""");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a string, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test3338,"public void test3338() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 354);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 1192);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8JsonGenerator"", e);
    }
}",0,
project,0,test3439,"public void test3439() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.enable((JsonGenerator.Feature) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.base.GeneratorBase"", e);
    }
}",0,
project,0,test3540,"public void test3540() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, filterOutputStream0);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.close();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.FilterOutputStream"", e);
    }
}",0,
project,0,test3641,"public void test3641() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeString(""EJcoi<V"");
    try {
        uTF8JsonGenerator0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",0,
project,0,test3742,"public void test3742() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringWriter stringWriter0 = new StringWriter(1);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
    boolean boolean0 = writerBasedJsonGenerator0.isEnabled(jsonGenerator_Feature0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3743,"public void test3743() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringWriter stringWriter0 = new StringWriter(1);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
    boolean boolean0 = writerBasedJsonGenerator0.isEnabled(jsonGenerator_Feature0);
    assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, writerBasedJsonGenerator0.getFeatureMask())"
project,0,test3844,"public void test3844() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    boolean boolean0 = uTF8JsonGenerator0.isEnabled(jsonGenerator_Feature0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3845,"public void test3845() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    boolean boolean0 = uTF8JsonGenerator0.isEnabled(jsonGenerator_Feature0);
    assertEquals(1198, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test3946,"public void test3946() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeTree((TreeNode) null);
    assertEquals((-3229), uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test3947,"public void test3947() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeTree((TreeNode) null);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test4048,"public void test4048() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeObject((Object) null);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test4049,"public void test4049() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeObject((Object) null);
    assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test4150,"public void test4150() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    JsonGenerator jsonGenerator1 = jsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(0, jsonGenerator1.getHighestEscapedChar());
}",0,
project,0,test4151,"public void test4151() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    JsonGenerator jsonGenerator1 = jsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(1, jsonGenerator1.getFeatureMask());
}",0,
project,0,test4252,"public void test4252() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3246), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.overrideStdFeatures(3, (-3246));
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test4353,"public void test4353() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.overrideStdFeatures((-3), 73);
    assertEquals(1263, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test4454,"public void test4454() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.overrideStdFeatures(3, 1198);
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test4555,"public void test4555() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
    uTF8JsonGenerator0.setFeatureMask((byte) (-16));
    assertEquals((-16), uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test4656,"public void test4656() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setFeatureMask(0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test4657,"public void test4657() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setFeatureMask(0);
    assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
}",0,
project,0,test4758,"public void test4758() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
    uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    uTF8JsonGenerator0.overrideStdFeatures(3, 1198);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test4859,"public void test4859() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(1, jsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, jsonGenerator0.getFeatureMask())"
project,0,test4860,"public void test4860() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test4961,"public void test4961() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals((-3485), uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test5062,"public void test5062() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals((-3229), jsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, jsonGenerator0.getFeatureMask())"
project,0,test5063,"public void test5063() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test5164,"public void test5164() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1199, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(127, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test5165,"public void test5165() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1199, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(1199, jsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, jsonGenerator0.getFeatureMask())"
project,0,test5266,"public void test5266() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1199, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(1199, jsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, jsonGenerator0.getFeatureMask())"
project,0,test5367,"public void test5367() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(1454, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test5468,"public void test5468() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals((-3229), jsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, jsonGenerator0.getFeatureMask())"
project,0,test5469,"public void test5469() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test5570,"public void test5570() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.getCodec();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test5571,"public void test5571() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.getCodec();
    assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test5672,"public void test5672() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
    assertEquals(3, jsonGenerator0.getFeatureMask());
}",0,"assertEquals(1, jsonGenerator0.getFeatureMask())"
project,0,test5773,"public void test5773() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    BigDecimal bigDecimal0 = new BigDecimal(564.0);
    uTF8JsonGenerator0.writeNumber(bigDecimal0);
    assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
}",0,
project,0,test5975,"public void test5975() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-879), (ObjectCodec) null, (OutputStream) null);
    int int0 = uTF8JsonGenerator0.getFeatureMask();
    assertEquals((-879), int0);
}",0,"assertEquals(0, int0)"
project,0,test6076,"public void test6076() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.getCurrentValue();
    assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test6077,"public void test6077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.getCurrentValue();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test6178,"public void test6178() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringWriter stringWriter0 = new StringWriter(2);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    SerializedString serializedString0 = new SerializedString(""c1"");
    writerBasedJsonGenerator0.writeRawValue((SerializableString) serializedString0);
    assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, writerBasedJsonGenerator0.getFeatureMask())"
project,0,test6279,"public void test6279() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeRawValue(""EJcoi<V"");
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
}",0,
project,0,test6380,"public void test6380() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    char[] charArray0 = new char[0];
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1672), (ObjectCodec) null, (Writer) null);
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeRawValue(charArray0, 3, 55296);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.WriterBasedJsonGenerator"", e);
    }
}",1,
project,0,test6481,"public void test6481() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeRawValue(""0I!&C>^'sI5ly,"", 127, (int) (byte) (-76));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",1,
project,0,test6582,"public void test6582() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.isClosed();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test6583,"public void test6583() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.isClosed();
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
