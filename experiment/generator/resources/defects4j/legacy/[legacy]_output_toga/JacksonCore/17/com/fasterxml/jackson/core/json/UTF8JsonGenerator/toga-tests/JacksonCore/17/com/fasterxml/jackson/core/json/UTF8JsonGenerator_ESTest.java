/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 19:07:28 GMT 2023
 */
package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "TGLGp,{$mug!SI", true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-183), (ObjectCodec) null, (OutputStream) null);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) (-7);
        uTF8JsonGenerator0.writeBinary(byteArray0, 0, 89);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ECzWuWEu~l", true);
        byte[] byteArray0 = new byte[20];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 13, false);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) 94, 0);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ECzWuWEu~l", true);
        byte[] byteArray0 = new byte[6];
        mockFileOutputStream0.close();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 13, false);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) 94, 0);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) 104, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-14), true);
        char[] charArray0 = new char[2];
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-115), 762);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("n)E", false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeString("n)E");
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile(">vnr|Tq33:");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-788), true);
        uTF8JsonGenerator0.writeStartObject();
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unrecognized token '");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator0.writeRaw("", 2, (int) (byte) 101);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        BigInteger bigInteger0 = BigInteger.ZERO;
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.close();
        uTF8JsonGenerator0.writeNumber(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2108), (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test1610() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unrecognized token '");
        byte[] byteArray0 = new byte[3];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Unrecognized token '", false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1889), false);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test1711() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        uTF8JsonGenerator0.flush();
    }

    @Test(timeout = 4000)
    public void test1812() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unrecognized token '");
        mockFileOutputStream0.close();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, mockFileOutputStream0);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        uTF8JsonGenerator0.flush();
    }

    @Test(timeout = 4000)
    public void test1913() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unrecognized token '");
        mockFileOutputStream0.close();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, mockFileOutputStream0);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test2014() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0._outputSurrogates(91, 33);
    }

    @Test(timeout = 4000)
    public void test2115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(7);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1000, true);
        uTF8JsonGenerator0._flushBuffer();
    }

    @Test(timeout = 4000)
    public void test2216() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, "", false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
        UTF8JsonGenerator uTF8JsonGenerator0 = null;
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-220), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-408), false);
    }

    @Test(timeout = 4000)
    public void test2317() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
        StringWriter stringWriter0 = new StringWriter(3);
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        byte[] byteArray0 = new byte[8];
        UTF8JsonGenerator uTF8JsonGenerator0 = null;
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) 117, true);
    }

    @Test(timeout = 4000)
    public void test2418() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = null;
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, byteArrayBuilder0);
    }

    @Test(timeout = 4000)
    public void test2519() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
        UTF8JsonGenerator uTF8JsonGenerator1 = null;
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
    }

    @Test(timeout = 4000)
    public void test3620() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
        uTF8JsonGenerator0._verifyPrettyValueWrite("IT", 33);
    }

    @Test(timeout = 4000)
    public void test4021() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[7];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
        uTF8JsonGenerator0.writeBoolean(false);
    }

    @Test(timeout = 4000)
    public void test4322() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 135, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
    }

    @Test(timeout = 4000)
    public void test5023() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte) (-118), false);
        uTF8JsonGenerator0.writeNumber((int) (byte) 109);
    }

    @Test(timeout = 4000)
    public void test5124() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ECzWuWEu~l", true);
        byte[] byteArray0 = new byte[6];
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-35), false);
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream("ECzWuWEu~l");
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 101);
    }

    @Test(timeout = 4000)
    public void test5325() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
        uTF8JsonGenerator0.writeRaw('S');
    }

    @Test(timeout = 4000)
    public void test5626() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ECzWuWEu~l", true);
        byte[] byteArray0 = new byte[6];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 13, false);
        char[] charArray0 = new char[1];
        uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte) 94, 2);
    }

    @Test(timeout = 4000)
    public void test5727() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2171), (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 14, true);
        BigInteger bigInteger0 = BigInteger.ONE;
        uTF8JsonGenerator0.writeNumber(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test5928() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ECzWuWEu~l", true);
        byte[] byteArray0 = new byte[6];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 13, false);
        SerializedString serializedString0 = new SerializedString("ECzWuWEu~l");
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test6129() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 42, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 1781);
    }

    @Test(timeout = 4000)
    public void test6230() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedInputStream pipedInputStream0 = new PipedInputStream(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-181), (ObjectCodec) null, pipedOutputStream0);
        byte[] byteArray0 = new byte[4];
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 482);
    }

    @Test(timeout = 4000)
    public void test6331() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        char[] charArray0 = new char[0];
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn(charArray0).when(iOContext0).allocConcatBuffer();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
        uTF8JsonGenerator0.writeString((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test6732() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unrecognized token '");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator0.writeString((char[]) null, 86, 6);
    }

    @Test(timeout = 4000)
    public void test6833() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
        uTF8JsonGenerator0.writeString("start an array");
    }

    @Test(timeout = 4000)
    public void test6934() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        byte[] byteArray0 = new byte[9];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 719, false);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
    }

    @Test(timeout = 4000)
    public void test7035() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("ROOT", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0._writePPFieldName("");
    }

    @Test(timeout = 4000)
    public void test7136() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2048);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        byte[] byteArray0 = new byte[9];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
        uTF8JsonGenerator0.writeEndObject();
    }

    @Test(timeout = 4000)
    public void test7237() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("n)E", false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeNumber((short) 49);
    }

    @Test(timeout = 4000)
    public void test7338() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeEndArray();
    }

    @Test(timeout = 4000)
    public void test7439() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("ROOT", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
        int[] intArray0 = new int[6];
        uTF8JsonGenerator0.writeArray(intArray0, 948, 0);
        uTF8JsonGenerator0._writePPFieldName("");
    }

    @Test(timeout = 4000)
    public void test7540() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeStartArray();
        byte[] byteArray0 = new byte[5];
        uTF8JsonGenerator0.writeBooleanField("eTG^V", true);
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test7641() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeString("~$N!z}q\"Q");
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test7742() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, (OutputStream) null);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test7843() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unrecognized token '");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, mockFileOutputStream0);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
    }

    @Test(timeout = 4000)
    public void test7944() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-771), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
        uTF8JsonGenerator0.writeFieldName("");
    }

    @Test(timeout = 4000)
    public void test8045() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        char[] charArray0 = new char[0];
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn(charArray0).when(iOContext0).allocConcatBuffer();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
        Object object0 = uTF8JsonGenerator0.getOutputTarget();
    }

    @Test(timeout = 4000)
    public void test8046() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        char[] charArray0 = new char[0];
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn(charArray0).when(iOContext0).allocConcatBuffer();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
        Object object0 = uTF8JsonGenerator0.getOutputTarget();
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test8147() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeNull();
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test8248() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[3];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-3840), true);
        uTF8JsonGenerator0.writeNumber(0.0F);
    }

    @Test(timeout = 4000)
    public void test8349() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, (OutputStream) null);
        int int0 = uTF8JsonGenerator0.getOutputBuffered();
        uTF8JsonGenerator0.getHighestEscapedChar();
        assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
    }

    @Test(timeout = 4000)
    public void test8350() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, (OutputStream) null);
        int int0 = uTF8JsonGenerator0.getOutputBuffered();
    }
}
