project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    long long0 = uTF8StreamJsonParser0.nextLongValue((-5673L));
    assertTrue(uTF8StreamJsonParser0.isClosed());
}",0,assertTrue(uTF8StreamJsonParser0.isClosed())
project,0,test0001,"public void test0001() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    long long0 = uTF8StreamJsonParser0.nextLongValue((-5673L));
    assertEquals((-5673L), long0);
}",0,
project,0,test0012,"public void test0012() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
    doReturn((String) null).when(objectCodec0).toString();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3220, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-63), 2000, true);
    TreeNode treeNode0 = uTF8StreamJsonParser0.readValueAsTree();
    assertNull(treeNode0);
}",0,assertNotNull(treeNode0)
project,0,test0023,"public void test0023() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 73;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 78, (byte) 3, true);
    SerializedString serializedString0 = new SerializedString("""");
    try {
        uTF8StreamJsonParser0.nextFieldName(serializedString0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'I\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 10]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test0034,"public void test0034() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2022), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-2103), 127, false);
    uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
    assertFalse(uTF8StreamJsonParser0.canReadObjectId());
}",0,assertTrue(uTF8StreamJsonParser0.canReadObjectId())
project,0,test0045,"public void test0045() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 85;
    byteArray0[4] = (byte) (-91);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-113), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 146, (byte) (-91), false);
    try {
        uTF8StreamJsonParser0.nextIntValue((byte) 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xa5
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000002; line: 1, column: -85]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test0056,"public void test0056() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    MockFile mockFile0 = new MockFile(""5^2'@jB$$\""!"", ""com.fasterxml.jackson.core.io.CharTypes"");
    File file0 = MockFile.createTempFile(""5^2'@jB$$\""!"", (String) null, (File) mockFile0);
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 16);
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 32, pushbackInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 32, 16, true);
    Object object0 = uTF8StreamJsonParser0.getInputSource();
    assertSame(object0, pushbackInputStream0);
}",0,
project,0,test0067,"public void test0067() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 85;
    byteArray0[1] = (byte) (-56);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3692), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 44, (-3692), true);
    try {
        uTF8StreamJsonParser0.nextTextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000003; line: 1, column: -3688]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test0078,"public void test0078() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (-805), false);
    int[] intArray0 = new int[7];
    intArray0[0] = (int) (byte) (-56);
    try {
        uTF8StreamJsonParser0.parseMediumName((byte) (-56), intArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000004; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test0089,"public void test0089() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3312, (-601), false);
    uTF8StreamJsonParser0._parseNumber((-601));
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test00910,"public void test00910() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 9, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, (byte) 0, true);
    int int0 = uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test01011,"public void test01011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    byte[] byteArray1 = new byte[0];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 202, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray1, 2000, 2000, false);
    try {
        uTF8StreamJsonParser0.nextIntValue(2000);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // InputStream.read() returned 0 characters when trying to read 0 bytes
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test01112,"public void test01112() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    MockFile mockFile0 = new MockFile(""5^2'@jB$$\""!"", ""com.fasterxml.jackson.core.io.CharTypes"");
    File file0 = MockFile.createTempFile(""5^2'@jB$$\""!"", (String) null, (File) mockFile0);
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 16);
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 32, pushbackInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 32, 16, true);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast((-921));
    assertTrue(boolean0);
}",0,
project,0,test01213,"public void test01213() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 848, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 4, 4, true);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(848);
    assertFalse(boolean0);
}",1,
project,0,test01315,"public void test01315() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 202, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-2518), (-1249), false);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(92);
    assertFalse(boolean0);
}",1,
project,0,test01416,"public void test01416() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 31, sequenceInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 31, 98, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._loadToHaveAtLeast(129);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test01517,"public void test01517() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 313, pushbackInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-54), 1058, false);
    try {
        uTF8StreamJsonParser0._loadToHaveAtLeast(214);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // InputStream.read() returned 0 characters when trying to read 1112 bytes
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test01719,"public void test01719() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    MockFile mockFile0 = new MockFile(""5^2'@jB$$\""!"", ""com.fasterxml.jackson.core.io.CharTypes"");
    File file0 = MockFile.createTempFile(""5^2'@jB$$\""!"", (String) null, (File) mockFile0);
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 16);
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 32, pushbackInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 32, 16, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Trying to release buffer not owned by the context
        //
        verifyException(""com.fasterxml.jackson.core.io.IOContext"", e);
    }
}",0,
project,0,test01820,"public void test01820() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1846, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 2000, 2000, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test01921,"public void test01921() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-56), 2000, false);
    String string0 = uTF8StreamJsonParser0.getText();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test02022,"public void test02022() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    String string0 = uTF8StreamJsonParser0.getValueAsString();
    assertNull(string0);
}",1,
project,0,test02123,"public void test02123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2648, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-2847), 1648, false);
    String string0 = uTF8StreamJsonParser0.getValueAsString(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
    assertEquals(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"", string0);
}",1,
project,0,test02224,"public void test02224() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Non-standard token '"", false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-58), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-278), false);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",0,
project,0,test02325,"public void test02325() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[9];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2), (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) 5, 0, false);
    JsonToken jsonToken0 = JsonToken.FIELD_NAME;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertNull(string0);
}",0,
project,0,test02426,"public void test02426() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 47, (-348), true);
    JsonToken jsonToken0 = JsonToken.VALUE_STRING;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",0,
project,0,test02527,"public void test02527() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 47, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 47, (byte) 47, false);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",0,
project,0,test02628,"public void test02628() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2821), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 47, (-4), false);
    JsonToken jsonToken0 = JsonToken.VALUE_NULL;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals(""null"", string0);
}",0,
project,0,test02729,"public void test02729() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Non-standard token '"", false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-58), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-278), false);
    char[] charArray0 = uTF8StreamJsonParser0.getTextCharacters();
    assertNull(charArray0);
}",0,
project,0,test02830,"public void test02830() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    MockFile mockFile0 = new MockFile(""5^2'@jB$$\""!"", ""com.fasterxml.jackson.core.io.CharTypes"");
    File file0 = MockFile.createTempFile(""5^2'@jB$$\""!"", (String) null, (File) mockFile0);
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 16);
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 32, pushbackInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 32, 16, true);
    int int0 = uTF8StreamJsonParser0.getTextLength();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test02931,"public void test02931() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1160), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1860, 1860, true);
    int int0 = uTF8StreamJsonParser0.getTextOffset();
    assertEquals(0, int0);
}",0,
project,0,test03032,"public void test03032() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 49;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1994, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2141, (byte) 49, true);
    uTF8StreamJsonParser0.nextIntValue((byte) 109);
    uTF8StreamJsonParser0.getTextOffset();
    assertTrue(uTF8StreamJsonParser0.hasCurrentToken());
}",0,assertTrue(uTF8StreamJsonParser0.hasCurrentToken())
project,0,test03133,"public void test03133() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1278, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 31, (byte) 31, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    try {
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000005; line: 1, column: 32]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test03234,"public void test03234() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1278, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 31, (byte) 31, false);
    uTF8StreamJsonParser0._tokenIncomplete = true;
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    try {
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000006; line: 1, column: 32]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test03335,"public void test03335() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 34, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 117, true);
    Base64Variant base64Variant0 = new Base64Variant("""", ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"", true, '-', 2000);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
    try {
        uTF8StreamJsonParser0._readBinary(base64Variant0, mockPrintStream0, byteArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: UNKNOWN; line: 1, column: 132]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test03436,"public void test03436() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 116;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 85, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1551, (byte) 116, false);
    try {
        uTF8StreamJsonParser0.nextIntValue((byte) 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 't\u0000': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000007; line: 1, column: 121]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test03537,"public void test03537() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    SerializedString serializedString0 = new SerializedString("""");
    boolean boolean0 = uTF8StreamJsonParser0.nextFieldName(serializedString0);
    assertTrue(uTF8StreamJsonParser0.isClosed());
}",0,assertTrue(uTF8StreamJsonParser0.isClosed())
project,0,test03538,"public void test03538() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    SerializedString serializedString0 = new SerializedString("""");
    boolean boolean0 = uTF8StreamJsonParser0.nextFieldName(serializedString0);
    assertFalse(boolean0);
}",0,
project,0,test03639,"public void test03639() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2520), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2648, 2258, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue(1907);
    assertTrue(uTF8StreamJsonParser0.isClosed());
}",0,assertTrue(uTF8StreamJsonParser0.isClosed())
project,0,test03640,"public void test03640() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2520), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2648, 2258, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue(1907);
    assertEquals(1907, int0);
}",0,
project,0,test03741,"public void test03741() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 74, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 2000, true);
    try {
        uTF8StreamJsonParser0._parseNumber(45);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer@0000000008; line: 1, column: 2002]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test03842,"public void test03842() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[6];
    PipedInputStream pipedInputStream0 = new PipedInputStream(1792);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, bufferedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-1830), 2000, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseNumber(45);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1830
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test03943,"public void test03943() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 214, true);
    uTF8StreamJsonParser0._parseNumber(48);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer@0000000009; line: 1, column: 216]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test04044,"public void test04044() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-280), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 49, 3728, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseNumber((byte) 46);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 49
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test04145,"public void test04145() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) 49;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 65536, (byte) 49, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue((byte) 49);
    assertTrue(uTF8StreamJsonParser0.hasCurrentToken());
}",0,assertTrue(uTF8StreamJsonParser0.hasCurrentToken())
project,0,test04146,"public void test04146() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) 49;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 65536, (byte) 49, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue((byte) 49);
    assertEquals(11, int0);
}",0,
project,0,test04247,"public void test04247() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) 49;
    byteArray0[2] = (byte) 49;
    byteArray0[3] = (byte) 49;
    byteArray0[4] = (byte) 49;
    byteArray0[5] = (byte) (-7);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 65536, (byte) 49, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue((byte) 49);
    assertTrue(uTF8StreamJsonParser0.hasCurrentToken());
}",0,assertTrue(uTF8StreamJsonParser0.hasCurrentToken())
project,0,test04248,"public void test04248() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) 49;
    byteArray0[2] = (byte) 49;
    byteArray0[3] = (byte) 49;
    byteArray0[4] = (byte) 49;
    byteArray0[5] = (byte) (-7);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 65536, (byte) 49, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue((byte) 49);
    assertEquals(11111, int0);
}",0,
project,0,test04450,"public void test04450() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 116, (byte) (-4));
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1416), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, 42, true);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber(42);
    assertTrue(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test04551,"public void test04551() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test04652,"public void test04652() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 46;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 9, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 422, 422, false);
    try {
        uTF8StreamJsonParser0._parseNumber((byte) 9);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: Decimal point not followed by a digit
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000010; line: 1, column: 425]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test04753,"public void test04753() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-56), 2000, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseNumber(48);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -56
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test04854,"public void test04854() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 29, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 38, (byte) 29, false);
    try {
        uTF8StreamJsonParser0._parseFieldName(38);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('&' (code 38)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
        //  at [Source: UNKNOWN; line: 1, column: 39]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",1,
project,0,test04955,"public void test04955() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-56), false);
    int[] intArray0 = new int[7];
    try {
        uTF8StreamJsonParser0.parseMediumName((byte) (-56), intArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000011; line: 1, column: 5]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05056,"public void test05056() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05157,"public void test05157() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) (-1);
    byteArray0[2] = (byte) (-99);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05258,"public void test05258() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) (-1);
    byteArray0[2] = (byte) (-99);
    byteArray0[3] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05359,"public void test05359() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[6];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 44, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 5, 44, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.slowParseName();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 6
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test05460,"public void test05460() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 85, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1551, (byte) 0, false);
    try {
        uTF8StreamJsonParser0.slowParseName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000012; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05561,"public void test05561() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), false);
    try {
        uTF8StreamJsonParser0.slowParseName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing '\""' for name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000013; line: 1, column: 346]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05662,"public void test05662() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[7] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05763,"public void test05763() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 422, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 422, (byte) 29, false);
    try {
        uTF8StreamJsonParser0.parseLongName(34);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: 36]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05864,"public void test05864() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byte[] byteArray1 = iOContext0.allocBase64Buffer();
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-280), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray1, (byte) 49, 3728, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseLongName((byte) 46);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2000
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test05965,"public void test05965() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byte[] byteArray1 = iOContext0.allocBase64Buffer();
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 422, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray1, (byte) 46, 78, false);
    try {
        uTF8StreamJsonParser0.parseLongName((-2277));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000014; line: 1, column: 81]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test06066,"public void test06066() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 422, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 29, (byte) 29, true);
    try {
        uTF8StreamJsonParser0._parseFieldName((byte) 29);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 29)): was expecting double-quote to start field name
        //  at [Source: UNKNOWN; line: 1, column: 30]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",1,
project,0,test06167,"public void test06167() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), false);
    try {
        uTF8StreamJsonParser0._handleOddName(242);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 1, column: 346]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",1,
project,0,test06268,"public void test06268() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 57, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 100, (byte) 52, true);
    Name name0 = uTF8StreamJsonParser0._handleOddName((byte) 49);
    assertEquals(""1"", name0.getName());
}",0,
project,0,test06369,"public void test06369() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 214, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 214, 2000, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 214
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test06470,"public void test06470() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), false);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing ''' for name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: 346]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test06571,"public void test06571() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[13];
    byteArray0[0] = (byte) 39;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1014), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2047, (-1014), true);
    Name name0 = uTF8StreamJsonParser0._parseAposName();
    assertEquals("""", name0.getName());
}",0,assertNotNull(name0.getName())
project,0,test06672,"public void test06672() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[6];
    byteArray0[3] = (byte) 39;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 52, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 52, 47, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer"", e);
    }
}",0,
project,0,test06773,"public void test06773() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) 109;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 52, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 52, 47, false);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000017; line: 1, column: 60]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test06874,"public void test06874() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-2), false);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000018; line: 1, column: 3999]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test06975,"public void test06975() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 109;
    byteArray0[1] = (byte) (-109);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 57, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 100, (byte) 52, true);
    try {
        uTF8StreamJsonParser0._handleOddName((byte) 49);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x93
        //  at [Source: UNKNOWN; line: 1, column: 55]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07076,"public void test07076() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 116;
    byteArray0[1] = (byte) 116;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 85, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1551, (byte) 116, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000019; line: 1, column: 121]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07177,"public void test07177() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-91), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 561, 0, true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000020; line: 1, column: 4001]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07278,"public void test07278() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[2] = (byte) 85;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-1), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 85, (byte) 85, true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000021; line: 1, column: 100]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07379,"public void test07379() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) (-63);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3220, 656, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000022; line: 1, column: 659]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07480,"public void test07480() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) (-8);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-756), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 180, (byte) 123, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xf8
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000023; line: 1, column: 125]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07581,"public void test07581() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 399, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 128, true);
    uTF8StreamJsonParser0._parseNumber(2257);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000024; line: 1, column: 130]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07682,"public void test07682() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 85, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, (-1265), true);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000025; line: 1, column: -1263]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07783,"public void test07783() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 116;
    byteArray0[1] = (byte) 116;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1721), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1224, 366, true);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000026; line: 1, column: 371]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07884,"public void test07884() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 85;
    byteArray0[1] = (byte) (-56);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-56), (byte) (-56), false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000027; line: 1, column: -52]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07985,"public void test07985() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-113), (-3632), true);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xff
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000028; line: 1, column: -3630]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test08086,"public void test08086() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 214, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3, 3, false);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(43);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: java.io.ByteArrayInputStream@0000000029; line: 1, column: 5]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test08187,"public void test08187() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 3, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, (byte) 3, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue((byte) 78);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'N\u0000\u0000\u0000\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000030; line: 1, column: 14]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test08288,"public void test08288() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 116, (byte) (-4));
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 32, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 116, 39, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(39);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
        //  at [Source: UNKNOWN; line: 1, column: 117]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test08389,"public void test08389() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3968, 139, true);
    uTF8StreamJsonParser0._parseNumber((byte) (-50));
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(39);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: UNKNOWN; line: 1, column: 141]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test08490,"public void test08490() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-474), 98, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test08591,"public void test08591() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 127;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, (-2528), false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000031; line: 1, column: -2525]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test08692,"public void test08692() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 85;
    byteArray0[1] = (byte) (-63);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-63), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 47, (byte) (-63), true);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000032; line: 1, column: -59]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test08793,"public void test08793() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-107);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 3, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 9, (byte) (-54), false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x95
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000033; line: 1, column: -52]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test08894,"public void test08894() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._matchToken(""y<lqw(U<fHu("", 5100);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",1,
project,0,test08995,"public void test08995() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 202, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(2000);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token '\u07D0\u0000\u0000': was expecting ('true', 'false' or 'null')
        //  at [Source: com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer@0000000034; line: 1, column: 207]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test09096,"public void test09096() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
    IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 9;
    byteArray0[1] = (byte) 9;
    byteArray0[2] = (byte) 98;
    byteArray0[3] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 46, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 9, (byte) 9, false);
    try {
        uTF8StreamJsonParser0.nextTextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'b': was expecting ('true', 'false' or 'null')
        //  at [Source: org.evosuite.runtime.testdata.FileSystemHandling@0000000035; line: 1, column: 14]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test09197,"public void test09197() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1160), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1860, 1860, true);
    try {
        uTF8StreamJsonParser0.nextIntValue(1860);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000036; line: 1, column: 1862]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test09298,"public void test09298() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) (-7);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-7), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1997, 1980, false);
    try {
        uTF8StreamJsonParser0.nextIntValue(256);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xf9
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000037; line: 1, column: 1982]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test09399,"public void test09399() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 92, (-1647), true);
    uTF8StreamJsonParser0._parseNumber((-1647));
    try {
        uTF8StreamJsonParser0.parseLongName(92);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer@0000000038; line: 1, column: -1645]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test094100,"public void test094100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), true);
    try {
        uTF8StreamJsonParser0._decodeEscaped();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in character escape sequence
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000039; line: 1, column: 346]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test095101,"public void test095101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 116;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 256, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 48, (-1925), false);
    char char0 = uTF8StreamJsonParser0._decodeEscaped();
    assertEquals('\t', char0);
}",0,
project,0,test096102,"public void test096102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 125, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 918, 2000, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._decodeCharForError((byte) (-27));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 918
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",1,
project,0,test097103,"public void test097103() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-59), (byte) (-77), true);
    try {
        uTF8StreamJsonParser0._decodeCharForError((byte) (-14));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test098104,"public void test098104() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    byteArray0[1] = (byte) (-56);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byteArrayInputStream0.read();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-128), (-1663), false);
    try {
        uTF8StreamJsonParser0.nextIntValue(132);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000040; line: 1, column: -1660]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test099105,"public void test099105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1774), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 110, false);
    uTF8StreamJsonParser0._skipCR();
    assertNull(uTF8StreamJsonParser0.getCurrentToken());
}",0,assertNotNull(uTF8StreamJsonParser0.getCurrentToken())
