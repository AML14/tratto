project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-67), (byte) (-67));
    ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, 0);
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "", state="", parser0);
    assertEquals("", state="", document0.baseUri());
}",0,
project,0,test022,"public void test022() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, 50);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",1,
project,0,test033,"public void test033() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    try {
        DataUtil.readToByteBuffer(mockFileInputStream0, 1234);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
    try {
        DataUtil.readToByteBuffer(bufferedInputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, ""content"", ""content"", parser0);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // content
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    ByteBuffer byteBuffer0 = ByteBuffer.allocate(65279);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, ""^-zSS]J}30h"", ""name"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // ^-zSS]J}30h
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    ByteBuffer byteBuffer0 = charset0.encode("""");
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, """", ""track"", (Parser) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""content"", (String) null, (Parser) null);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // content
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""m]0\""#[1w^^+,k'"", (String) null, parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // m]0\""#[1w^^+,k'
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, ""Sj`W[4f}"", ""57A=bIz*i\""|3<sq"", parser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",1,
project,0,test1212,"public void test1212() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, (String) null, (String) null, parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // BaseURI must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-73), 1468);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, "".oju3g&J;"", "".oju3g&J;"", parser0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",1,
project,0,test1414,"public void test1414() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // org.jsoup.parser.TreeBuilder
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""4XDE[>+9"", """");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // 4XDE[>+9
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 1, (byte) 0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, """", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""U.me~2\""aj1Fo.0RWD"", (String) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    MockFile mockFile0 = new MockFile(""Dw/HV&+u`s"", ""Dw/HV&+u`s"");
    File file0 = MockFile.createTempFile(""Dw/HV&+u`s"", ""Dw/HV&+u`s"", (File) mockFile0);
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""Dw/HV&+u`s"", ""Dw/HV&+u`s"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // Dw/HV&+u`s
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",1,
project,0,test1919,"public void test1919() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((File) null, ""U\""(.s>>e#=*>"", ""U\""(.s>>e#=*>"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    File file0 = MockFile.createTempFile(""0sP_!$--=9D"", ""em"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, """", ""em"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test2121,"public void test2121() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType((String) null);
    assertNull(string0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""charset"");
    assertNull(string0);
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""width must be > 0"");
    assertEquals(""width must be > 0"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test2424,"public void test2424() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // maxSize must be 0 (unlimited) or larger
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test2525,"public void test2525() throws Throwable {
    File file0 = MockFile.createTempFile(""H(w:[2zrBD3"", ""H(w:[2zrBD3"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""content"", ""maxSize must be 0 (unlimited) or larger"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // content
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",1,
project,0,test2626,"public void test2626() throws Throwable {
    MockFile mockFile0 = new MockFile(""http-equiv"");
    try {
        DataUtil.load((File) mockFile0, ""http-equiv"", ""http-equiv"");
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",1,
project,0,test2727,"public void test2727() throws Throwable {
    File file0 = MockFile.createTempFile(""charset"", ""charset"");
    Document document0 = DataUtil.load(file0, (String) null, ""!"");
    assertEquals(""!"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test2828,"public void test2828() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, ""http-equiv"", ""http-equiv"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
    try {
        DataUtil.load((InputStream) pushbackInputStream0, """", """", parser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedInputStream"", e);
    }
}",1,
