/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 05:59:36 GMT 2023
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Token;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class XmlTreeBuilder_ESTest extends XmlTreeBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        List<Node> list0 = xmlTreeBuilder0.parseFragment("CdataSection", "CdataSection", (ParseErrorList) null, parseSettings0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Token.Doctype token_Doctype0 = new Token.Doctype();
        xmlTreeBuilder0.process(token_Doctype0);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        xmlTreeBuilder0.parse("colgroup", "colgroup");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Token.Tag token_Tag0 = token_StartTag0.name("colgroup");
        token_Tag0.selfClosing = true;
        boolean boolean0 = xmlTreeBuilder0.process(token_StartTag0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("<P% a$ne?tFiy/>d", "<P% a$ne?tFiy/>d");
        document0.childNodeSize();
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("<!--", "<!--");
        document0.isBlock();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("<!", "<!");
        document0.baseUri();
        assertNotNull(document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("jT: <?n&F$mcbjfk", "jT: <?n&F$mcbjfk");
        document0.nodeName();
        assertNotNull(document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("r<!YXKBj", "r<!YXKBj");
        document0.isBlock();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        xmlTreeBuilder0.parse("colgroup", "colgroup");
        boolean boolean0 = xmlTreeBuilder0.processEndTag("colgroup");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        xmlTreeBuilder0.parse("b<sefomn>", "b<sefomn>");
        boolean boolean0 = xmlTreeBuilder0.processEndTag("#document");
        assertTrue(boolean0);
    }
}
