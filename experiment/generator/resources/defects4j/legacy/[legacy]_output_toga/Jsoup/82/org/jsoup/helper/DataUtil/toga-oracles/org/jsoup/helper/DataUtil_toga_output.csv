project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 85;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.xmlParser();
    try {
        DataUtil.parseInputStream(byteArrayInputStream0, ""maxSize must be 0 (unlimited) or larger"", ""maxSize must be 0 (unlimited) or larger"", parser0);
        fail(""Expecting exception: UnsupportedEncodingException"");
    } catch (UnsupportedEncodingException e) {
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    Document document0 = DataUtil.parseInputStream((InputStream) null, ""{s :nRKS"", ""{s :nRKS"", parser0);
    assertEquals(""{s :nRKS"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test033,"public void test033() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    Document document0 = DataUtil.load((InputStream) null, ""B1{8D6O+?{Yyd8MDK"", ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"", parser0);
    assertEquals(""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"", document0.location());
}",0,
project,0,test044,"public void test044() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
    // Undeclared exception!
    try {
        DataUtil.parseInputStream(byteArrayInputStream0, (String) null, ""th"", (Parser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseInputStream(pushbackInputStream0, """", """", parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    Parser parser0 = Parser.xmlParser();
    try {
        DataUtil.parseInputStream(pipedInputStream0, (String) null, "";RzBx"", parser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-56));
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""map"", (Parser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    try {
        DataUtil.load((InputStream) pushbackInputStream0, ""'{t@(KG04Kq_<$ctRsQ"", ""'{t@(KG04Kq_<$ctRsQ"");
        fail(""Expecting exception: UnsupportedEncodingException"");
    } catch (UnsupportedEncodingException e) {
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        DataUtil.load((InputStream) pipedInputStream0, """", """");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((File) null, ""U\""(.s>>e#=*>"", ""U\""(.s>>e#=*>"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    File file0 = MockFile.createTempFile(""UTF-16"", ""qrsU(UVwya%h"");
    try {
        DataUtil.load(file0, ""}ToZN/#\""Hzslw/Ey>g"", ""}ToZN/#\""Hzslw/Ey>g"");
        fail(""Expecting exception: UnsupportedEncodingException"");
    } catch (UnsupportedEncodingException e) {
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    MockFile mockFile0 = new MockFile(""N mU\r irs"");
    try {
        DataUtil.load((File) mockFile0, ""charset"", ""N mU\r irs"");
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
    // Undeclared exception!
    try {
        DataUtil.crossStreams((InputStream) null, byteArrayOutputStream0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",1,
project,0,test1414,"public void test1414() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    try {
        DataUtil.crossStreams(pipedInputStream0, byteArrayOutputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    try {
        DataUtil.readToByteBuffer((InputStream) null, 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedInputStream"", e);
    }
}",1,
project,0,test1616,"public void test1616() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[1] = (byte) (-29);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, (String) null, (String) null, parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // BaseURI must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) (-72);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, """", "".f K#;m1veQ?,K1+V3"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    String string0 = DataUtil.mimeBoundary();
    assertEquals(""--------------------------------"", string0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""PUBLIC"");
    assertNull(string0);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType((String) null);
    assertNull(string0);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""charset="");
    assertNull(string0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer(sequenceInputStream0, (-30));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // maxSize must be 0 (unlimited) or larger
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
    Document document0 = DataUtil.load((InputStream) dataInputStream0, ""UTF-16"", ""--------------------------------"");
    assertEquals(""--------------------------------"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test2424,"public void test2424() throws Throwable {
    File file0 = MockFile.createTempFile(""EAjjvqAW3`yfhFko "", (String) null);
    Document document0 = DataUtil.load(file0, (String) null, ""9xl8cN~IO2 d"");
    assertEquals(""9xl8cN~IO2 d"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test2525,"public void test2525() throws Throwable {
    Document document0 = DataUtil.load((InputStream) null, ""limitedQuirks"", ""limitedQuirks"");
    assertEquals(""limitedQuirks"", document0.location());
}",0,assertNotNull(document0.location())
project,0,test2726,"public void test2726() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    pipedOutputStream0.close();
    try {
        DataUtil.load((InputStream) pipedInputStream0, ""CONTINUE"", ""maxSize must be 0 (unlimited) or larger"", (Parser) null);
        fail(""Expecting exception: UnsupportedEncodingException"");
    } catch (UnsupportedEncodingException e) {
    }
}",0,
project,0,test2827,"public void test2827() throws Throwable {
    File file0 = MockFile.createTempFile(""y7:"", ""y7:"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, """", ""[\""']"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
