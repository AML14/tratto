project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test022,"public void test022() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""%v{<"");
    assertEquals(""%v{<"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test033,"public void test033() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, 190);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test044,"public void test044() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2432), (byte) 37);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer(pushbackInputStream0, (byte) 27);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",1,
project,0,test055,"public void test055() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(59);
    try {
        DataUtil.readToByteBuffer(pipedInputStream0, 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",1,
project,0,test066,"public void test066() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 2054);
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer(byteArrayInputStream0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    try {
        DataUtil.readToByteBuffer(mockFileInputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readFileToByteBuffer((File) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    try {
        DataUtil.readFileToByteBuffer(mockFile0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    MockFile mockFile0 = new MockFile(""--------------------------------"", ""--------------------------------"");
    try {
        DataUtil.readFileToByteBuffer(mockFile0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // File does not exist, and RandomAccessFile is not open in write mode
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    CharBuffer charBuffer0 = CharBuffer.allocate(1457);
    ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, ""=Fg@ryywr@HmQ^zj"", ""=Fg@ryywr@HmQ^zj"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // =Fg@ryywr@HmQ^zj
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, ""U\""(.s>>e#=*>"", ""U\""(.s>>e#=*>"", parser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) dataInputStream0, ""http-equiv"", ""http-equiv"", parser0);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // http-equiv
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""HA$xqe}&@"", ""+93d?}"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // HA$xqe}&@
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) dataInputStream0, """", """", parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2350), 14);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""p5yKSI(cg"", ""p5yKSI(cg"", (Parser) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
    Parser parser0 = Parser.htmlParser();
    try {
        DataUtil.load((InputStream) pushbackInputStream0, ""9T(g;UY\""6=Q"", (String) null, parser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""XMkJhJtHbP.1v"", ""%v{<"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // XMkJhJtHbP.1v
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, "",ewW_Cekp\u0001;<T"", "",ewW_Cekp\u0001;<T"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 65, (byte) 65);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, """", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-65), 65279);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) pushbackInputStream0, """", """");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        DataUtil.load((InputStream) pipedInputStream0, ""{H$gLRs'Ti^7lA'`1"", ""{H$gLRs'Ti^7lA'`1"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    File file0 = MockFile.createTempFile(""!Ft!bp T"", ""r"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""!Ft!bp T"", ""!Ft!bp T"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // !Ft!bp T
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((File) null, """", ""http-equiv"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    MockFile mockFile0 = new MockFile(""xml"", ""meter"");
    File file0 = MockFile.createTempFile(""meter"", (String) null, (File) mockFile0);
    // Undeclared exception!
    try {
        DataUtil.load(file0, """", ""xml"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.crossStreams((InputStream) null, (OutputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(5);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""`tgj4uH"");
    DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
    try {
        DataUtil.crossStreams(pipedInputStream0, dataOutputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[2] = (byte) 1;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byteArrayInputStream0.read();
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""ap[=w"", parser0);
    assertEquals(""ap[=w"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test3030,"public void test3030() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) (-74);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""ap[=w"", parser0);
    assertEquals(""ap[=w"", document0.location());
}",0,assertNotNull(document0.location())
project,0,test3131,"public void test3131() throws Throwable {
    String string0 = DataUtil.mimeBoundary();
    assertEquals(""--------------------------------"", string0);
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""charset="");
    assertNull(string0);
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType((String) null);
    assertNull(string0);
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    String string0 = ""O\\uHYC<!SsdX>DIw+"";
    String string1 = DataUtil.getCharsetFromContentType(string0);
    assertNull(string1);
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    MockFile.createTempFile(""--------------------------------"", ""10T_G?TG]/S"", (File) mockFile0);
    try {
        DataUtil.load((File) mockFile0, ""10T_G?TG]/S"", ""k+m5,CY cLcM(YN2E_I"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, (-2049));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // maxSize must be 0 (unlimited) or larger
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test3838,"public void test3838() throws Throwable {
    File file0 = MockFile.createTempFile(""c.bO}Xo"", ""c.bO}Xo"");
    Document document0 = DataUtil.load(file0, ""UTF-8"", ""UTF-8"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test4041,"public void test4041() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, """", """", (Parser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test4142,"public void test4142() throws Throwable {
    MockFile mockFile0 = new MockFile("" E;"", ""--------------------------------"");
    try {
        DataUtil.load((File) mockFile0, "" E;"", ""--------------------------------"");
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // File does not exist, and RandomAccessFile is not open in write mode
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}",0,
project,0,test4243,"public void test4243() throws Throwable {
    ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, """", ""sui>LN.I~DnL+"", parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test4344,"public void test4344() throws Throwable {
    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"", ""--------------------------------"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // -_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
