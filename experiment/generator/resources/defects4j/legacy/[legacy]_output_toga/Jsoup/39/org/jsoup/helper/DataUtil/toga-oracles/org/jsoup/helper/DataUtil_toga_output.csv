project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, ""(?i)\bcharset=s*(?:\""|')?([^s,;\""']*)"", parser0);
    assertEquals(0, document0.childNodeSize());
}",0,
project,0,test001,"public void test001() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, ""(?i)\bcharset=s*(?:\""|')?([^s,;\""']*)"", parser0);
    assertEquals(""(?i)\bcharset=s*(?:\""|')?([^s,;\""']*)"", document0.location());
}",0,
project,0,test012,"public void test012() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-67), (byte) (-67));
    ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, 0);
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, ""defer"", parser0);
    assertEquals(""defer"", document0.location());
}",0,
project,0,test023,"public void test023() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, 52);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",1,
project,0,test034,"public void test034() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    try {
        DataUtil.readToByteBuffer(mockFileInputStream0, 1234);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",0,
project,0,test045,"public void test045() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test056,"public void test056() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) 1);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer(sequenceInputStream0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",0,
project,0,test067,"public void test067() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
    try {
        DataUtil.readToByteBuffer(bufferedInputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test078,"public void test078() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    ByteBuffer byteBuffer0 = charset0.encode("""");
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, ""multiple"", ""g?om +#`"", parser0);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // multiple
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test089,"public void test089() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, ""[\""']"", ""[\""']"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // [\""']
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, (String) null, ""VQ/qUbu<b"", parser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.charset.CharsetDecoder"", e);
    }
}",0,
project,0,test1011,"public void test1011() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    ByteBuffer byteBuffer0 = charset0.encode("""");
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, """", ""amp"", (Parser) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1112,"public void test1112() throws Throwable {
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""big"", ""big"", parser0);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // big
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1213,"public void test1213() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""m]0\""#[1w^^+,k'"", (String) null, parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // m]0\""#[1w^^+,k'
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",1,
project,0,test1314,"public void test1314() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, ""Sj`W[4f}"", ""57A=bIz*i\""|3<sq"", parser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",1,
project,0,test1415,"public void test1415() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) sequenceInputStream0, """", (String) null, (Parser) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-73), 1468);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, "".oju3g&J;"", "".oju3g&J;"", parser0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",1,
project,0,test1617,"public void test1617() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""inert"", ""inert"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // inert
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1718,"public void test1718() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""4XDE[>+9"", """");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // 4XDE[>+9
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1819,"public void test1819() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 1, (byte) 0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, """", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1920,"public void test1920() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""U.me~2\""aj1Fo.0RWD"", (String) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    MockFile mockFile0 = new MockFile(""org.jsoup.select.Evaluator$Attribute"");
    File file0 = MockFile.createTempFile(""M_VtDs4uMx6"", ""M_VtDs4uMx6"", (File) mockFile0);
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""M_VtDs4uMx6"", ""M_VtDs4uMx6"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // M_VtDs4uMx6
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test2122,"public void test2122() throws Throwable {
    MockFile mockFile0 = new MockFile(""Dw/HV&+u`s"", ""Dw/HV&+u`s"");
    File file0 = MockFile.createTempFile(""Dw/HV&+u`s"", ""Dw/HV&+u`s"", (File) mockFile0);
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""Dw/HV&+u`s"", ""Dw/HV&+u`s"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // Dw/HV&+u`s
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",1,
project,0,test2223,"public void test2223() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((File) null, ""U\""(.s>>e#=*>"", ""U\""(.s>>e#=*>"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test2324,"public void test2324() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""charset="");
    assertNull(string0);
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType((String) null);
    assertNull(string0);
}",0,
project,0,test2526,"public void test2526() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""value"");
    assertNull(string0);
}",0,
project,0,test2829,"public void test2829() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, (-721));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // maxSize must be 0 (unlimited) or larger
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test2930,"public void test2930() throws Throwable {
    File file0 = MockFile.createTempFile(""value"", ""value"");
    Document document0 = DataUtil.load(file0, ""UTF-8"", ""_Y|UT"");
    assertEquals(""_Y|UT"", document0.location());
}",0,assertNotNull(document0.location())
project,0,test3031,"public void test3031() throws Throwable {
    File file0 = MockFile.createTempFile(""H(w:[2zrBD3"", ""H(w:[2zrBD3"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, """", ""charset="");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test3132,"public void test3132() throws Throwable {
    MockFile mockFile0 = new MockFile(""M_VtDs4uMx6"");
    try {
        DataUtil.load((File) mockFile0, ""M_VtDs4uMx6"", ""M_VtDs4uMx6"");
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",1,
project,0,test3233,"public void test3233() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, ""charset"", ""charset"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test3334,"public void test3334() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
    try {
        DataUtil.load((InputStream) pushbackInputStream0, """", """", parser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedInputStream"", e);
    }
}",1,
