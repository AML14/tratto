project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Document document0 = new Document(""Mm`"");
    document0.normalise();
    Node[] nodeArray0 = new Node[1];
    // Undeclared exception!
    try {
        document0.insertChildren((-1), nodeArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Array must not contain any null objects
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test0011,"public void test0011() throws Throwable {
    Document document0 = Document.createShell(""hL}"");
    LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
    Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
    assertEquals(""hL}"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test0022,"public void test0022() throws Throwable {
    Document document0 = new Document(""$mQCi.="");
    document0.nodelistChanged();
    assertEquals(""$mQCi.="", document0.baseUri());
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    Document document0 = Document.createShell(""option[selected]"");
    document0.ensureChildNodes();
    assertEquals(""option[selected]"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test0044,"public void test0044() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.htmlDefault;
    Tag tag0 = Tag.valueOf(""textarea"", parseSettings0);
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""textarea"", attributes0);
    element0.doSetBaseUri("":K"");
    assertEquals("":K"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test0055,"public void test0055() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    element0.html(""html"");
    element0.wrap(""id"");
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(0, element0.childNodeSize())"
project,0,test0066,"public void test0066() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.val(""[CDATA["");
    assertEquals(""#document"", element0.nodeName());
}",0,
project,0,test0077,"public void test0077() throws Throwable {
    Document document0 = Document.createShell(""d2<)"");
    Element element0 = document0.head();
    Element element1 = element0.toggleClass(""d2<)"");
    assertEquals(""d2<)"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test0088,"public void test0088() throws Throwable {
    Document document0 = Document.createShell(""#"");
    Element element0 = document0.createElement(""#"");
    Element element1 = element0.toggleClass("""");
    assertEquals(""#"", element1.baseUri());
}",0,
project,0,test0099,"public void test0099() throws Throwable {
    Document document0 = new Document(""head"");
    document0.toString();
    assertEquals(""head"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test01010,"public void test01010() throws Throwable {
    Document document0 = Document.createShell(""head"");
    document0.append(""head"");
    document0.text();
    assertEquals(2, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test01111,"public void test01111() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.tagName(""class"");
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(0, element0.childNodeSize())"
project,0,test01212,"public void test01212() throws Throwable {
    Document document0 = Document.createShell(""br"");
    Element element0 = document0.head();
    element0.tag();
    assertEquals(""br"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test01313,"public void test01313() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.selectFirst(""meta[charset]"");
    assertNull(element0);
}",0,
project,0,test01414,"public void test01414() throws Throwable {
    Document document0 = Document.createShell(""`"");
    document0.select(""BeforeDoctypeSystemIdentifier"");
    assertEquals(""`"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test01515,"public void test01515() throws Throwable {
    Document document0 = Document.createShell(""R\""'!U|t>ly1&l"");
    Element element0 = document0.body();
    Element element1 = element0.removeClass(""missing semicolon"");
    assertEquals(""R\""'!U|t>ly1&l"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test01616,"public void test01616() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.removeClass("""");
    assertEquals(""#root"", element0.tagName());
}",0,assertNotNull(element0.tagName())
project,0,test01717,"public void test01717() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    document0.siblingIndex = 32;
    Element element0 = document0.prependText(""ScriptDataEscapeStartDash"");
    assertEquals(""}X"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test01818,"public void test01818() throws Throwable {
    Document document0 = Document.createShell(""pGlJ?V;Y>]b"");
    Element element0 = document0.prependElement(""3gKWnzqyt'RR~#dx."");
    assertEquals(""pGlJ?V;Y>]b"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test01919,"public void test01919() throws Throwable {
    Document document0 = Document.createShell(""ti{"");
    document0.appendTo(document0);
    TextNode textNode0 = TextNode.createFromEncoded(""B_zS"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(""ti{"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test02020,"public void test02020() throws Throwable {
    Document document0 = Document.createShell(""Split offset must be not be negative"");
    Element element0 = document0.head();
    Element element1 = element0.prependChild(document0);
    assertEquals(""Split offset must be not be negative"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test02121,"public void test02121() throws Throwable {
    Element element0 = new Element("" wjTv/A*$la5L>]M"");
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration("" wjTv/A*$la5L>]M"", true);
    Element element1 = element0.prependChild(xmlDeclaration0);
    assertEquals(""wjTv/A*$la5L>]M"", element1.nodeName());
}",0,assertNotNull(element1.nodeName())
project,0,test02222,"public void test02222() throws Throwable {
    Document document0 = Document.createShell(""org.jsoup.nodes.Element"");
    Element element0 = document0.body();
    element0.prepend(""org.jsoup.nodes.Element"");
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(0, element0.childNodeSize())"
project,0,test02324,"public void test02324() throws Throwable {
    Document document0 = Document.createShell(""."");
    Element element0 = document0.body();
    Elements elements0 = element0.parents();
    assertEquals(""."", element0.baseUri());
}",0,
project,0,test02425,"public void test02425() throws Throwable {
    Document document0 = Document.createShell(""ti{"");
    document0.appendTo(document0);
    Element element0 = document0.lastElementSibling();
    assertEquals(""ti{"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test02526,"public void test02526() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    Element element1 = element0.wrap(""id"");
    assertEquals(0, element0.siblingIndex());
}",0,"assertEquals(0, element0.siblingIndex())"
project,0,test02527,"public void test02527() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    Element element1 = element0.wrap(""id"");
    Element element2 = element1.lastElementSibling();
    assertNotSame(element0, element2);
}",0,
project,0,test02628,"public void test02628() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    Element element0 = document0.head();
    element0.isBlock();
    assertEquals(""%<)"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test02629,"public void test02629() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    Element element0 = document0.head();
    element0.isBlock();
    assertEquals(0, element0.siblingIndex());
}",0,"assertEquals(0, element0.siblingIndex())"
project,0,test02730,"public void test02730() throws Throwable {
    Document document0 = new Document(""4S9!svdS"");
    Document document1 = document0.normalise();
    Element element0 = document1.body();
    Element element1 = element0.tagName(""4S9!svdS"");
    Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
    boolean boolean0 = element1.is((Evaluator) evaluator_IsLastOfType0);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test02731,"public void test02731() throws Throwable {
    Document document0 = new Document(""4S9!svdS"");
    Document document1 = document0.normalise();
    Element element0 = document1.body();
    Element element1 = element0.tagName(""4S9!svdS"");
    Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
    boolean boolean0 = element1.is((Evaluator) evaluator_IsLastOfType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test02832,"public void test02832() throws Throwable {
    Document document0 = Document.createShell(""br"");
    document0.is(""xmp"");
    assertEquals(""br"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test02833,"public void test02833() throws Throwable {
    Document document0 = Document.createShell(""br"");
    document0.is(""xmp"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test02934,"public void test02934() throws Throwable {
    Document document0 = new Document(""Mm`"");
    Node[] nodeArray0 = new Node[1];
    TextNode textNode0 = new TextNode(""N03|+4fzcm~2`"", "":#4]"");
    nodeArray0[0] = (Node) textNode0;
    Element element0 = document0.insertChildren((-1), nodeArray0);
    assertEquals(""Mm`"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test03035,"public void test03035() throws Throwable {
    Element element0 = new Element(""%z<=L)(/"");
    Element element1 = element0.html("""");
    assertSame(element0, element1);
}",0,
project,0,test03136,"public void test03136() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    element0.html();
    assertEquals(1, element0.siblingIndex());
}",0,"assertEquals(0, element0.siblingIndex())"
project,0,test03137,"public void test03137() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    element0.html();
    assertEquals(""E{"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test03238,"public void test03238() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""org.jsoup.nodes.Element"", parseSettings0);
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""org.jsoup.nodes.Element"", attributes0);
    boolean boolean0 = element0.hasAttributes();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03239,"public void test03239() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""org.jsoup.nodes.Element"", parseSettings0);
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""org.jsoup.nodes.Element"", attributes0);
    boolean boolean0 = element0.hasAttributes();
    assertEquals(""org.jsoup.nodes.Element"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test03340,"public void test03340() throws Throwable {
    Document document0 = new Document(""head"");
    document0.hasAttributes();
    assertEquals(""head"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test03441,"public void test03441() throws Throwable {
    Document document0 = Document.createShell(""."");
    Pattern pattern0 = Pattern.compile(""."", 4171);
    document0.getElementsMatchingText(pattern0);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test03442,"public void test03442() throws Throwable {
    Document document0 = Document.createShell(""."");
    Pattern pattern0 = Pattern.compile(""."", 4171);
    document0.getElementsMatchingText(pattern0);
    assertEquals(""."", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test03644,"public void test03644() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""0r>"", parseSettings0);
    Element element0 = new Element(tag0, ""0r>"");
    Pattern pattern0 = Pattern.compile("":lt(%d)"", 58);
    element0.getElementsMatchingOwnText(pattern0);
    assertEquals(""0r>"", element0.baseUri());
}",0,
project,0,test03745,"public void test03745() throws Throwable {
    Pattern pattern0 = Pattern.compile("""");
    Document document0 = Document.createShell(""class"");
    document0.getElementsMatchingOwnText(pattern0);
    assertEquals(1, document0.childNodeSize());
}",0,
project,0,test03746,"public void test03746() throws Throwable {
    Pattern pattern0 = Pattern.compile("""");
    Document document0 = Document.createShell(""class"");
    document0.getElementsMatchingOwnText(pattern0);
    assertEquals(""class"", document0.baseUri());
}",0,
project,0,test03847,"public void test03847() throws Throwable {
    Document document0 = new Document(""I7dK|bYjqyiQg6*"");
    Elements elements0 = document0.getElementsMatchingOwnText(""head"");
    assertEquals(""I7dK|bYjqyiQg6*"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test03949,"public void test03949() throws Throwable {
    Document document0 = Document.createShell(""d2<)"");
    document0.getElementsContainingText("""");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test03950,"public void test03950() throws Throwable {
    Document document0 = Document.createShell(""d2<)"");
    document0.getElementsContainingText("""");
    assertEquals(""d2<)"", document0.baseUri());
}",0,
project,0,test04051,"public void test04051() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.getElementsContainingOwnText("""");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test04152,"public void test04152() throws Throwable {
    Document document0 = new Document("" "");
    document0.getElementsByIndexLessThan(0);
    assertEquals("" "", document0.baseUri());
}",0,
project,0,test04253,"public void test04253() throws Throwable {
    Document document0 = Document.createShell(""{z>@Ha{CVQ}"");
    Elements elements0 = document0.getElementsByIndexGreaterThan((-42));
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test04254,"public void test04254() throws Throwable {
    Document document0 = Document.createShell(""{z>@Ha{CVQ}"");
    Elements elements0 = document0.getElementsByIndexGreaterThan((-42));
    assertEquals(""{z>@Ha{CVQ}"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test04356,"public void test04356() throws Throwable {
    ParseSettings parseSettings0 = new ParseSettings(false, false);
    Tag tag0 = Tag.valueOf(""checkbox"", parseSettings0);
    Comment comment0 = new Comment(""details"", ""Vyk~L~(LGcJ#7J4"");
    Attributes attributes0 = comment0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""checkbox"", attributes0);
    formElement0.getElementsByAttributeValueContaining(""Vyk~L~(LGcJ#7J4"", ""checkbox"");
    assertEquals(""checkbox"", formElement0.baseUri());
}",0,assertNotNull(formElement0.baseUri())
project,0,test04457,"public void test04457() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    document0.getElementsByAttribute(""#root"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test04458,"public void test04458() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    document0.getElementsByAttribute(""#root"");
    assertEquals(""}X"", document0.baseUri());
}",0,
project,0,test04559,"public void test04559() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.htmlDefault;
    Tag tag0 = Tag.valueOf(""th"", parseSettings0);
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""th"", attributes0);
    Element element0 = formElement0.empty();
    assertEquals(""th"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test04660,"public void test04660() throws Throwable {
    Document document0 = Document.createShell(""head"");
    Element element0 = document0.head();
    Element element1 = element0.doClone(document0);
    assertEquals(""head"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test04661,"public void test04661() throws Throwable {
    Document document0 = Document.createShell(""head"");
    Element element0 = document0.head();
    Element element1 = element0.doClone(document0);
    assertEquals(0, element1.siblingIndex());
}",0,
project,0,test04762,"public void test04762() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Element element0 = document0.clone();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test04763,"public void test04763() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Element element0 = document0.clone();
    assertEquals(""}X"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test04864,"public void test04864() throws Throwable {
    Document document0 = Document.createShell(""option[selected]"");
    Element element0 = document0.doClone(document0);
    Set<String> set0 = document0.classNames();
    Element element1 = element0.classNames(set0);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test04865,"public void test04865() throws Throwable {
    Document document0 = Document.createShell(""option[selected]"");
    Element element0 = document0.doClone(document0);
    Set<String> set0 = document0.classNames();
    Element element1 = element0.classNames(set0);
    assertEquals(""option[selected]"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test04966,"public void test04966() throws Throwable {
    Element element0 = new Element(""s+"");
    Locale locale0 = Locale.FRENCH;
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    Element element1 = element0.classNames(set0);
    assertSame(element0, element1);
}",0,
project,0,test05067,"public void test05067() throws Throwable {
    Document document0 = new Document(""vgv.`hU"");
    document0.children();
    assertEquals(""vgv.`hU"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test05168,"public void test05168() throws Throwable {
    Document document0 = Document.createShell(""body"");
    Element element0 = document0.body();
    element0.childNodeSize();
    assertEquals(1, element0.siblingIndex());
}",0,"assertEquals(0, element0.siblingIndex())"
project,0,test05169,"public void test05169() throws Throwable {
    Document document0 = Document.createShell(""body"");
    Element element0 = document0.body();
    element0.childNodeSize();
    assertEquals(""body"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test05270,"public void test05270() throws Throwable {
    Document document0 = Document.createShell(""1ic]jlJA=lE3QK2sB_"");
    Element element0 = document0.body();
    element0.before((Node) document0);
    assertTrue(document0.hasParent());
}",0,
project,0,test05271,"public void test05271() throws Throwable {
    Document document0 = Document.createShell(""1ic]jlJA=lE3QK2sB_"");
    Element element0 = document0.body();
    element0.before((Node) document0);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test05372,"public void test05372() throws Throwable {
    Document document0 = new Document(""option[selected]"");
    Element element0 = document0.doClone(document0);
    Element element1 = element0.before((Node) document0);
    assertEquals(""option[selected]"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test05473,"public void test05473() throws Throwable {
    Document document0 = Document.createShell(""option[selected]"");
    Element element0 = document0.doClone(document0);
    element0.before((Node) document0);
    assertEquals(2, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test05474,"public void test05474() throws Throwable {
    Document document0 = Document.createShell(""option[selected]"");
    Element element0 = document0.doClone(document0);
    element0.before((Node) document0);
    assertEquals(""option[selected]"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test05575,"public void test05575() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    element0.before("""");
    assertEquals(3, element0.siblingIndex());
}",0,"assertEquals(0, element0.siblingIndex())"
project,0,test05676,"public void test05676() throws Throwable {
    Document document0 = new Document(""H6yWYJaH8bHP={"");
    document0.normalise();
    Element element0 = document0.body();
    element0.attr(""html"", false);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test05677,"public void test05677() throws Throwable {
    Document document0 = new Document(""H6yWYJaH8bHP={"");
    document0.normalise();
    Element element0 = document0.body();
    element0.attr(""html"", false);
    assertEquals(""H6yWYJaH8bHP={"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test05778,"public void test05778() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    Element element1 = element0.attr("""", ""E{"");
    assertEquals(1, element1.siblingIndex());
}",0,
project,0,test05779,"public void test05779() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    Element element1 = element0.attr("""", ""E{"");
    assertEquals(""E{"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test05880,"public void test05880() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    Element element1 = element0.lastElementSibling();
    element1.appendText(""E{"");
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(0, element0.childNodeSize())"
project,0,test05881,"public void test05881() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    Element element1 = element0.lastElementSibling();
    element1.appendText(""E{"");
    assertSame(element0, element1);
}",0,
project,0,test05982,"public void test05982() throws Throwable {
    Document document0 = new Document(""zmHb.(TH<x,#XSO"");
    Element element0 = document0.appendElement(""zmHb.(TH<x,#XSO"");
    element0.prependText(""zmHb.(TH<x,#XSO"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test06083,"public void test06083() throws Throwable {
    Document document0 = Document.createShell(""Split offset must be not be negative"");
    Element element0 = document0.head();
    Element element1 = element0.appendChild(document0);
    assertEquals(0, element1.siblingIndex());
}",0,
project,0,test06084,"public void test06084() throws Throwable {
    Document document0 = Document.createShell(""Split offset must be not be negative"");
    Element element0 = document0.head();
    Element element1 = element0.appendChild(document0);
    assertEquals(""Split offset must be not be negative"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test06185,"public void test06185() throws Throwable {
    Document document0 = Document.createShell(""embed"");
    Element element0 = document0.body();
    element0.append(""-o?`SH&&a,F8$Wqb^l"");
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(0, element0.childNodeSize())"
project,0,test06286,"public void test06286() throws Throwable {
    Element element0 = new Element(""x<_}SSz)&g_9.80"");
    Element element1 = element0.append("""");
    assertSame(element0, element1);
}",0,
project,0,test06387,"public void test06387() throws Throwable {
    Document document0 = Document.createShell(""bk|?b3ZEQ Xe@tC}&N"");
    Element element0 = document0.body();
    Element element1 = element0.after(""bk|?b3ZEQ Xe@tC}&N"");
    assertEquals(1, element1.siblingIndex());
}",0,
project,0,test06388,"public void test06388() throws Throwable {
    Document document0 = Document.createShell(""bk|?b3ZEQ Xe@tC}&N"");
    Element element0 = document0.body();
    Element element1 = element0.after(""bk|?b3ZEQ Xe@tC}&N"");
    assertEquals(""bk|?b3ZEQ Xe@tC}&N"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test06489,"public void test06489() throws Throwable {
    Document document0 = new Document(""head"");
    Element element0 = document0.addClass(""head"");
    assertEquals(""head"", element0.baseUri());
}",0,
project,0,test06590,"public void test06590() throws Throwable {
    Document document0 = Document.createShell(""6=qvYdFRavA:H2FY!"");
    // Undeclared exception!
    try {
        document0.wrap("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test06791,"public void test06791() throws Throwable {
    Document document0 = Document.createShell(""hOs4xsE"");
    document0.html(""hOs4xsE"");
    // Undeclared exception!
    try {
        document0.text(""hOs4xsE"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Document"", e);
    }
}",0,
project,0,test06892,"public void test06892() throws Throwable {
    Document document0 = Document.createShell(""d2<)"");
    // Undeclared exception!
    try {
        document0.selectFirst(""X@?#@6"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query 'X@?#@6': unexpected token at '@?#@6'
        //
        verifyException(""org.jsoup.select.QueryParser"", e);
    }
}",0,
project,0,test06993,"public void test06993() throws Throwable {
    Document document0 = new Document(""&$!xy{_}"");
    // Undeclared exception!
    try {
        document0.select((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test07094,"public void test07094() throws Throwable {
    Document document0 = Document.createShell(""X-`4!O"");
    // Undeclared exception!
    try {
        document0.prependChild((Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test07195,"public void test07195() throws Throwable {
    Document document0 = Document.createShell(""Tag name must not be empty."");
    // Undeclared exception!
    try {
        document0.prepend((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test07296,"public void test07296() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.outerHtmlTail((Appendable) null, 60, (Document.OutputSettings) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test07397,"public void test07397() throws Throwable {
    Document document0 = Document.createShell(""."");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    StringBuilder stringBuilder0 = new StringBuilder();
    // Undeclared exception!
    try {
        document0.outerHtmlTail(stringBuilder0, (-2843), document_OutputSettings0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // width must be > 0
        //
        verifyException(""org.jsoup.helper.StringUtil"", e);
    }
}",0,
project,0,test07498,"public void test07498() throws Throwable {
    PipedWriter pipedWriter0 = new PipedWriter();
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    Document document0 = Document.createShell(""K<]M?(}m<kiQx}^7"");
    try {
        document0.outerHtmlTail(pipedWriter0, 1975, document_OutputSettings0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedWriter"", e);
    }
}",0,
project,0,test07599,"public void test07599() throws Throwable {
    Document document0 = Document.createShell("""");
    // Undeclared exception!
    try {
        document0.lastElementSibling();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}",0,
project,0,test076100,"public void test076100() throws Throwable {
    Document document0 = Document.createShell(""."");
    // Undeclared exception!
    try {
        document0.is((Evaluator) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}",0,
project,0,test077101,"public void test077101() throws Throwable {
    Document document0 = Document.createShell(""(.s>>e"");
    Node[] nodeArray0 = new Node[9];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    nodeArray0[8] = (Node) document0;
    // Undeclared exception!
    try {
        document0.insertChildren(0, nodeArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test079102,"public void test079102() throws Throwable {
    Document document0 = Document.createShell(""SY+-if^R7`1C{-*}+{"");
    // Undeclared exception!
    try {
        document0.html((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test082103,"public void test082103() throws Throwable {
    Document document0 = Document.createShell("" "");
    // Undeclared exception!
    try {
        document0.hasClass((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}",0,
project,0,test083104,"public void test083104() throws Throwable {
    Document document0 = Document.createShell(""ti{"");
    // Undeclared exception!
    try {
        document0.getElementsMatchingText(""fI3?H~2wGr~\""[9VZ"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Pattern syntax error: fI3?H~2wGr~\""[9VZ
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}",0,
project,0,test084105,"public void test084105() throws Throwable {
    Document document0 = new Document(""]O'jtn[(,"");
    // Undeclared exception!
    try {
        document0.getElementsMatchingOwnText(""]O'jtn[(,"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Pattern syntax error: ]O'jtn[(,
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}",0,
project,0,test085106,"public void test085106() throws Throwable {
    Element element0 = new Element("">uzkf+qpgno/ R"");
    TextNode textNode0 = new TextNode("">uzkf+qpgno/ R"");
    element0.parentNode = (Node) textNode0;
    // Undeclared exception!
    try {
        element0.getElementsByTag("">uzkf+qpgno/ R"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Leaf Nodes do not have child nodes.
        //
        verifyException(""org.jsoup.nodes.LeafNode"", e);
    }
}",0,
project,0,test086107,"public void test086107() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    // Undeclared exception!
    try {
        document0.getElementsByClass("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test087108,"public void test087108() throws Throwable {
    Document document0 = Document.createShell("""");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueStarting("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test088109,"public void test088109() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""org.jsoup.nodes.Element"", parseSettings0);
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""org.jsoup.nodes.Element"", attributes0);
    // Undeclared exception!
    try {
        element0.getElementsByAttributeValueNot(""),/#9M"", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test089110,"public void test089110() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    Element element0 = document0.head();
    element0.setSiblingIndex((-643));
    Pattern pattern0 = Pattern.compile("" w2NZ"");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueMatching(""n,`f@rErBc"", pattern0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test090111,"public void test090111() throws Throwable {
    Document document0 = Document.createShell(""#root"");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueMatching((String) null, ""3.JM[>[Y-Y,zRQ"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Pattern syntax error: 3.JM[>[Y-Y,zRQ
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}",0,
project,0,test091112,"public void test091112() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueEnding("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test092113,"public void test092113() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""q,"", parseSettings0);
    FormElement formElement0 = new FormElement(tag0, ""q,"", (Attributes) null);
    // Undeclared exception!
    try {
        formElement0.getElementsByAttributeValue(""bdi"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test093114,"public void test093114() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeStarting("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test094115,"public void test094115() throws Throwable {
    Document document0 = new Document(""-P"");
    // Undeclared exception!
    try {
        document0.getElementById((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test095116,"public void test095116() throws Throwable {
    Document document0 = Document.createShell(""P <uG4Nu.p`D"");
    // Undeclared exception!
    try {
        document0.firstElementSibling();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}",0,
project,0,test096117,"public void test096117() throws Throwable {
    Document document0 = Document.createShell(""br"");
    // Undeclared exception!
    try {
        document0.child(62);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 62, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test097118,"public void test097118() throws Throwable {
    Document document0 = Document.createShell("""");
    // Undeclared exception!
    try {
        document0.attr((String) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test098119,"public void test098119() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    // Undeclared exception!
    try {
        document0.attr((String) null, ""1;GQkEF<1*Y*c1hH|"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test099120,"public void test099120() throws Throwable {
    Tag tag0 = Tag.valueOf(""i`,\""_g27o"");
    FormElement formElement0 = new FormElement(tag0, ""i`,\""_g27o"", (Attributes) null);
    // Undeclared exception!
    try {
        formElement0.appendTo((Element) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test100121,"public void test100121() throws Throwable {
    Document document0 = new Document(""6-apl%[&-sXh"");
    // Undeclared exception!
    try {
        document0.appendElement("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test102122,"public void test102122() throws Throwable {
    Document document0 = Document.createShell(""L/ FL>gcC1q\""}"");
    // Undeclared exception!
    try {
        document0.addClass((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test103123,"public void test103123() throws Throwable {
    Element element0 = null;
    try {
        element0 = new Element((Tag) null, ""/D8k&k#p6sZ]"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test104124,"public void test104124() throws Throwable {
    Element element0 = null;
    try {
        element0 = new Element("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test105125,"public void test105125() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    String string0 = document0.html();
    assertEquals(""<html>\n <head></head>\n <body></body>\n</html>"", string0);
}",0,assertNotNull(string0)
project,0,test105126,"public void test105126() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    String string0 = document0.html();
    assertEquals(""E{"", document0.baseUri());
}",0,
project,0,test106127,"public void test106127() throws Throwable {
    Document document0 = Document.createShell(""."");
    boolean boolean0 = document0.hasClass("""");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test106128,"public void test106128() throws Throwable {
    Document document0 = Document.createShell(""."");
    boolean boolean0 = document0.hasClass("""");
    assertFalse(boolean0);
}",0,
project,0,test106129,"public void test106129() throws Throwable {
    Document document0 = Document.createShell(""."");
    boolean boolean0 = document0.hasClass("""");
    assertEquals(""."", document0.baseUri());
}",0,
project,0,test107130,"public void test107130() throws Throwable {
    Document document0 = Document.createShell(""bk|?b3ZEQ Xe@tC}&N"");
    Element element0 = document0.body();
    int int0 = element0.elementSiblingIndex();
    assertEquals(""bk|?b3ZEQ Xe@tC}&N"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test107131,"public void test107131() throws Throwable {
    Document document0 = Document.createShell(""bk|?b3ZEQ Xe@tC}&N"");
    Element element0 = document0.body();
    int int0 = element0.elementSiblingIndex();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test108132,"public void test108132() throws Throwable {
    Document document0 = new Document(""org.jsoup.examples.HtmlToPlainText$FormattingVisitor"");
    int int0 = document0.elementSiblingIndex();
    assertEquals(0, int0);
}",0,
project,0,test108133,"public void test108133() throws Throwable {
    Document document0 = new Document(""org.jsoup.examples.HtmlToPlainText$FormattingVisitor"");
    int int0 = document0.elementSiblingIndex();
    assertEquals(""org.jsoup.examples.HtmlToPlainText$FormattingVisitor"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test109134,"public void test109134() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    element0.wrap(""id"");
    element0.before("""");
    assertEquals(0, element0.siblingIndex());
}",0,"assertEquals(0, element0.siblingIndex())"
project,0,test110135,"public void test110135() throws Throwable {
    Document document0 = Document.createShell(""org.jsoup.nodes.Element"");
    document0.attributes();
    assertEquals(""org.jsoup.nodes.Element"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test110136,"public void test110136() throws Throwable {
    Document document0 = Document.createShell(""org.jsoup.nodes.Element"");
    document0.attributes();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test111137,"public void test111137() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.attr("""", ""d*:QeJT.wQQ@)wJ3"");
    Attributes attributes0 = document0.attributes();
    assertEquals(1, attributes0.size());
}",0,"assertEquals(0, attributes0.size())"
project,0,test111138,"public void test111138() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.attr("""", ""d*:QeJT.wQQ@)wJ3"");
    Attributes attributes0 = document0.attributes();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test113140,"public void test113140() throws Throwable {
    Document document0 = Document.createShell(""d2<)"");
    // Undeclared exception!
    try {
        document0.classNames((Set<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test114141,"public void test114141() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.htmlDefault;
    Tag tag0 = Tag.valueOf(""textarea"", parseSettings0);
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""textarea"", attributes0);
    element0.className();
    assertEquals(""textarea"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test115142,"public void test115142() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.parent();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test116143,"public void test116143() throws Throwable {
    Element element0 = new Element(""br"");
    // Undeclared exception!
    try {
        element0.getElementsMatchingOwnText((Pattern) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test117144,"public void test117144() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    document0.ownText();
    assertEquals(""%<)"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test117145,"public void test117145() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    document0.ownText();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test118146,"public void test118146() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    document0.parents();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test118147,"public void test118147() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    document0.parents();
    assertEquals(""}X"", document0.baseUri());
}",0,
project,0,test119148,"public void test119148() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test119149,"public void test119149() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    document0.empty();
    assertEquals(""E{"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test120150,"public void test120150() throws Throwable {
    Document document0 = Document.createShell("""");
    // Undeclared exception!
    try {
        document0.prependElement("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test121151,"public void test121151() throws Throwable {
    Attributes attributes0 = new Attributes();
    Element element0 = null;
    try {
        element0 = new Element((Tag) null, ""-pCbPee$@"", attributes0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test122152,"public void test122152() throws Throwable {
    Document document0 = Document.createShell("",`c=WEV"");
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration("",`c=WEV"", ""org.jsoup.nodes.TextNode"", false);
    document0.appendChild(xmlDeclaration0);
    assertEquals(1, xmlDeclaration0.siblingIndex());
}",0,"assertEquals(0, xmlDeclaration0.siblingIndex())"
project,0,test122153,"public void test122153() throws Throwable {
    Document document0 = Document.createShell("",`c=WEV"");
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration("",`c=WEV"", ""org.jsoup.nodes.TextNode"", false);
    document0.appendChild(xmlDeclaration0);
    assertEquals("",`c=WEV"", document0.baseUri());
}",0,
project,0,test123154,"public void test123154() throws Throwable {
    Document document0 = Document.createShell(""body"");
    int int0 = document0.childNodeSize();
    assertEquals(""body"", document0.baseUri());
}",0,
project,0,test123155,"public void test123155() throws Throwable {
    Document document0 = Document.createShell(""body"");
    int int0 = document0.childNodeSize();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test124156,"public void test124156() throws Throwable {
    Document document0 = Document.createShell(""3"");
    String string0 = document0.baseUri();
    assertEquals(1, document0.childNodeSize());
}",0,
project,0,test124157,"public void test124157() throws Throwable {
    Document document0 = Document.createShell(""3"");
    String string0 = document0.baseUri();
    assertEquals(""3"", string0);
}",0,
project,0,test125158,"public void test125158() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.tagName();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test126159,"public void test126159() throws Throwable {
    Document document0 = Document.createShell("""");
    Pattern pattern0 = Pattern.compile("""", 4171);
    document0.getElementsMatchingText(pattern0);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test127160,"public void test127160() throws Throwable {
    Tag tag0 = Tag.valueOf(""eKJiRuHS"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""eKJiRuHS"", attributes0);
    formElement0.nodeName();
    assertEquals(""eKJiRuHS"", formElement0.baseUri());
}",0,assertNotNull(formElement0.baseUri())
project,0,test128161,"public void test128161() throws Throwable {
    Document document0 = Document.createShell("""");
    Pattern pattern0 = Pattern.compile("""", 4171);
    document0.getElementsByAttributeValueMatching(""body"", pattern0);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test129162,"public void test129162() throws Throwable {
    Document document0 = Document.createShell("",`c=WEV"");
    // Undeclared exception!
    try {
        document0.append((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test130163,"public void test130163() throws Throwable {
    Document document0 = Document.createShell(""Vh|w2kb2{.\""W9"");
    document0.appendElement(""org.jsoup.select.Evaluator$AttributeWithValueNot"");
    assertEquals(2, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test131164,"public void test131164() throws Throwable {
    Document document0 = Document.createShell(""{z>@Ha{CVQ}"");
    // Undeclared exception!
    try {
        document0.select(""{z>@Ha{CVQ}"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query '{z>@Ha{CVQ}': unexpected token at '{z>@Ha{CVQ}'
        //
        verifyException(""org.jsoup.select.QueryParser"", e);
    }
}",0,
project,0,test132165,"public void test132165() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.tag();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test133166,"public void test133166() throws Throwable {
    Document document0 = Document.createShell(""head"");
    Element element0 = document0.head();
    Element element1 = element0.clone();
    assertEquals(""head"", element1.baseUri());
}",0,assertNotNull(element1.baseUri())
project,0,test133167,"public void test133167() throws Throwable {
    Document document0 = Document.createShell(""head"");
    Element element0 = document0.head();
    Element element1 = element0.clone();
    assertFalse(element1.hasParent());
}",0,assertFalse(element1.hasParent())
project,0,test133168,"public void test133168() throws Throwable {
    Document document0 = Document.createShell(""head"");
    Element element0 = document0.head();
    Element element1 = element0.clone();
    assertEquals(0, element0.siblingIndex());
}",0,"assertEquals(0, element0.siblingIndex())"
project,0,test134169,"public void test134169() throws Throwable {
    Document document0 = Document.createShell(""option[selected]"");
    document0.id();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test134170,"public void test134170() throws Throwable {
    Document document0 = Document.createShell(""option[selected]"");
    document0.id();
    assertEquals(""option[selected]"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test135171,"public void test135171() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    String string0 = document0.cssSelector();
    assertEquals(""#root"", string0);
}",0,assertNotNull(string0)
project,0,test135172,"public void test135172() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    String string0 = document0.cssSelector();
    Element element0 = document0.doClone((Node) null);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test135173,"public void test135173() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    String string0 = document0.cssSelector();
    Element element0 = document0.doClone((Node) null);
    assertEquals(""}X"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test135174,"public void test135174() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    String string0 = document0.cssSelector();
    Element element0 = document0.doClone((Node) null);
    assertNotSame(element0, document0);
}",0,
project,0,test137176,"public void test137176() throws Throwable {
    Document document0 = Document.createShell(""3"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""3\n<html>\n <head></head>\n <body></body>\n</html>"");
    BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
    document0.html(bufferedWriter0);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test137177,"public void test137177() throws Throwable {
    Document document0 = Document.createShell(""3"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""3\n<html>\n <head></head>\n <body></body>\n</html>"");
    BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
    document0.html(bufferedWriter0);
    assertEquals(""3"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test138178,"public void test138178() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.htmlDefault;
    Tag tag0 = Tag.valueOf(""th"", parseSettings0);
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""th"", attributes0);
    String string0 = formElement0.toString();
    assertEquals(""<th></th>"", string0);
}",0,assertNotNull(string0)
project,0,test138179,"public void test138179() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.htmlDefault;
    Tag tag0 = Tag.valueOf(""th"", parseSettings0);
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""th"", attributes0);
    String string0 = formElement0.toString();
    assertEquals(""th"", formElement0.baseUri());
}",0,assertNotNull(formElement0.baseUri())
project,0,test139180,"public void test139180() throws Throwable {
    Document document0 = new Document(""head"");
    Element element0 = document0.val(""head"");
    assertEquals(""head"", element0.baseUri());
}",0,
project,0,test140181,"public void test140181() throws Throwable {
    Document document0 = Document.createShell(""#"");
    document0.val();
    assertEquals(""#"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test140182,"public void test140182() throws Throwable {
    Document document0 = Document.createShell(""#"");
    document0.val();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test141183,"public void test141183() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.toggleClass("""");
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(0, element0.childNodeSize())"
project,0,test141184,"public void test141184() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.toggleClass("""");
    assertEquals(""E{"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test142185,"public void test142185() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    document0.data();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test142186,"public void test142186() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    document0.data();
    assertEquals(""%<)"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test143187,"public void test143187() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    document0.html(""html"");
    boolean boolean0 = document0.hasText();
    assertEquals(""E{"", document0.baseUri());
}",0,
project,0,test143188,"public void test143188() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    document0.html(""html"");
    boolean boolean0 = document0.hasText();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test143189,"public void test143189() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    document0.html(""html"");
    boolean boolean0 = document0.hasText();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test144190,"public void test144190() throws Throwable {
    Document document0 = Document.createShell(""head"");
    boolean boolean0 = document0.hasText();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test144191,"public void test144191() throws Throwable {
    Document document0 = Document.createShell(""head"");
    boolean boolean0 = document0.hasText();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test144192,"public void test144192() throws Throwable {
    Document document0 = Document.createShell(""head"");
    boolean boolean0 = document0.hasText();
    assertEquals(""head"", document0.baseUri());
}",0,
project,0,test145193,"public void test145193() throws Throwable {
    TextNode textNode0 = new TextNode(""hL}"", ""hL}"");
    boolean boolean0 = Element.preserveWhitespace(textNode0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test146194,"public void test146194() throws Throwable {
    Tag tag0 = Tag.valueOf(""[8fn`^J*Q$E}<"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""[8fn`^J*Q$E}<"", attributes0);
    formElement0.text("""");
    Elements elements0 = formElement0.getElementsContainingOwnText(""Z0a"");
    assertEquals(""[8fn`^J*Q$E}<"", formElement0.baseUri());
}",0,assertNotNull(formElement0.baseUri())
project,0,test147196,"public void test147196() throws Throwable {
    Document document0 = Document.createShell("" "");
    Element element0 = document0.prependText("" "");
    element0.text();
    assertEquals(2, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test147197,"public void test147197() throws Throwable {
    Document document0 = Document.createShell("" "");
    Element element0 = document0.prependText("" "");
    element0.text();
    assertEquals("" "", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test148198,"public void test148198() throws Throwable {
    Document document0 = Document.createShell(""3"");
    Element element0 = document0.getElementById(""3"");
    assertNull(element0);
}",0,
project,0,test148199,"public void test148199() throws Throwable {
    Document document0 = Document.createShell(""3"");
    Element element0 = document0.getElementById(""3"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test148200,"public void test148200() throws Throwable {
    Document document0 = Document.createShell(""3"");
    Element element0 = document0.getElementById(""3"");
    assertEquals(""3"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test149201,"public void test149201() throws Throwable {
    ParseSettings parseSettings0 = new ParseSettings(true, false);
    Tag tag0 = Tag.valueOf(""`"", parseSettings0);
    Element element0 = new Element(tag0, ""`"");
    Document document0 = Document.createShell(""`"");
    element0.appendTo(document0);
    element0.firstElementSibling();
    assertEquals(1, element0.siblingIndex());
}",0,
project,0,test150202,"public void test150202() throws Throwable {
    Document document0 = new Document("""");
    Node[] nodeArray0 = new Node[5];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.firstElementSibling();
    assertNull(element0);
}",0,assertNotNull(element0)
project,0,test151203,"public void test151203() throws Throwable {
    Document document0 = Document.createShell(""."");
    document0.previousElementSibling();
    assertEquals(""."", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test151204,"public void test151204() throws Throwable {
    Document document0 = Document.createShell(""."");
    document0.previousElementSibling();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test152205,"public void test152205() throws Throwable {
    Document document0 = new Document(""link"");
    document0.nextElementSibling();
    assertEquals(""link"", document0.baseUri());
}",0,
project,0,test153206,"public void test153206() throws Throwable {
    Document document0 = new Document(""-pCbPee$@"");
    Document document1 = document0.normalise();
    Element element0 = document1.head();
    Element element1 = element0.nextElementSibling();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test153207,"public void test153207() throws Throwable {
    Document document0 = new Document(""-pCbPee$@"");
    Document document1 = document0.normalise();
    Element element0 = document1.head();
    Element element1 = element0.nextElementSibling();
    assertNotSame(element0, element1);
}",0,
project,0,test154209,"public void test154209() throws Throwable {
    Document document0 = Document.createShell(""kD:[0gtHkC6OCW"");
    Element element0 = document0.head();
    Elements elements0 = element0.siblingElements();
    assertEquals(""kD:[0gtHkC6OCW"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test155210,"public void test155210() throws Throwable {
    Document document0 = new Document(""$mQCi.="");
    Element element0 = document0.appendTo(document0);
    String string0 = element0.cssSelector();
    assertEquals(""#root"", string0);
}",0,assertNotNull(string0)
project,0,test155211,"public void test155211() throws Throwable {
    Document document0 = new Document(""$mQCi.="");
    Element element0 = document0.appendTo(document0);
    String string0 = element0.cssSelector();
    assertEquals(""$mQCi.="", element0.baseUri());
}",0,
project,0,test156212,"public void test156212() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Node[] nodeArray0 = new Node[4];
    // Undeclared exception!
    try {
        document0.insertChildren((-1433506051), nodeArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Insert position out of bounds.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test157213,"public void test157213() throws Throwable {
    Document document0 = Document.createShell(""5NPZ_v"");
    Node[] nodeArray0 = new Node[8];
    // Undeclared exception!
    try {
        document0.insertChildren(26, nodeArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Insert position out of bounds.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test158214,"public void test158214() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Elements elements0 = document0.siblingElements();
    Element element0 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
    assertEquals(""}X"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test158215,"public void test158215() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Elements elements0 = document0.siblingElements();
    Element element0 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(0, element0.childNodeSize())"
project,0,test159216,"public void test159216() throws Throwable {
    Document document0 = Document.createShell(""org.jsoup.nodes.Element"");
    LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
    // Undeclared exception!
    try {
        document0.insertChildren((-329), (Collection<? extends Node>) linkedHashSet0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Insert position out of bounds.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test160217,"public void test160217() throws Throwable {
    Document document0 = Document.createShell("""");
    LinkedList<Document> linkedList0 = new LinkedList<Document>();
    // Undeclared exception!
    try {
        document0.insertChildren(1881, (Collection<? extends Node>) linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Insert position out of bounds.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test161218,"public void test161218() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    List<DataNode> list0 = document0.dataNodes();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test161219,"public void test161219() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    List<DataNode> list0 = document0.dataNodes();
    assertEquals(""E{"", document0.baseUri());
}",0,
project,0,test162222,"public void test162222() throws Throwable {
    Document document0 = Document.createShell(""."");
    List<TextNode> list0 = document0.textNodes();
    assertEquals(""."", document0.baseUri());
}",0,
project,0,test162223,"public void test162223() throws Throwable {
    Document document0 = Document.createShell(""."");
    List<TextNode> list0 = document0.textNodes();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test163224,"public void test163224() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    document0.prependText(""ScriptDataEscapeStartDash"");
    document0.getElementsByIndexLessThan(14);
    assertEquals(2, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test164225,"public void test164225() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    Element element1 = element0.lastElementSibling();
    element1.html(""html"");
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(1, element0.childNodeSize())"
project,0,test164226,"public void test164226() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Element element0 = document0.body();
    Element element1 = element0.lastElementSibling();
    element1.html(""html"");
    document0.getElementsMatchingText(""id"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test165228,"public void test165228() throws Throwable {
    Document document0 = Document.createShell("""");
    Elements elements0 = document0.getElementsByIndexGreaterThan(1510);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test166229,"public void test166229() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    // Undeclared exception!
    try {
        document0.selectFirst((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test167230,"public void test167230() throws Throwable {
    Document document0 = new Document(""$mQCi.="");
    // Undeclared exception!
    try {
        document0.is(""$mQCi.="");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query '$mQCi.=': unexpected token at '$mQCi.='
        //
        verifyException(""org.jsoup.select.QueryParser"", e);
    }
}",0,
project,0,test168231,"public void test168231() throws Throwable {
    Document document0 = Document.createShell(""."");
    Elements elements0 = document0.getAllElements();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test168233,"public void test168233() throws Throwable {
    Document document0 = Document.createShell(""."");
    Elements elements0 = document0.getAllElements();
    assertEquals(""."", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test169234,"public void test169234() throws Throwable {
    Document document0 = Document.createShell("""");
    // Undeclared exception!
    try {
        document0.before("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test170235,"public void test170235() throws Throwable {
    Document document0 = Document.createShell("""");
    // Undeclared exception!
    try {
        document0.getElementsByAttribute("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test171237,"public void test171237() throws Throwable {
    Document document0 = Document.createShell(""Tag name must not be empty."");
    Elements elements0 = document0.getElementsByAttributeValueNot(""AfterDoctypeSystemIdentifier"", ""AfterDoctypeSystemIdentifier"");
    assertEquals(""Tag name must not be empty."", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test171238,"public void test171238() throws Throwable {
    Document document0 = Document.createShell(""Tag name must not be empty."");
    Elements elements0 = document0.getElementsByAttributeValueNot(""AfterDoctypeSystemIdentifier"", ""AfterDoctypeSystemIdentifier"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test172239,"public void test172239() throws Throwable {
    Document document0 = new Document(""40<[X;q6OiP(sh*2"");
    Element element0 = document0.appendTo(document0);
    // Undeclared exception!
    try {
        document0.after((Node) element0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test173240,"public void test173240() throws Throwable {
    Document document0 = new Document(""40<[X;q6OiP(sh*2"");
    // Undeclared exception!
    try {
        document0.after((Node) document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test174241,"public void test174241() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.htmlDefault;
    Tag tag0 = Tag.valueOf(""-"", parseSettings0);
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, "">"", attributes0);
    // Undeclared exception!
    try {
        formElement0.getElementsByAttributeValueContaining("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test175242,"public void test175242() throws Throwable {
    Document document0 = new Document(""html"");
    Elements elements0 = document0.getElementsContainingText(""8(cTKZ"");
    assertEquals(""html"", document0.baseUri());
}",0,
project,0,test176245,"public void test176245() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Elements elements0 = document0.getElementsByClass(""E{"");
    assertEquals(""E{"", document0.baseUri());
}",0,
project,0,test176246,"public void test176246() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Elements elements0 = document0.getElementsByClass(""E{"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test177247,"public void test177247() throws Throwable {
    Document document0 = Document.createShell(""."");
    document0.getElementsByAttributeValueEnding(""br"", ""org.jsoup.nodes.Element$1"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test177248,"public void test177248() throws Throwable {
    Document document0 = Document.createShell(""."");
    document0.getElementsByAttributeValueEnding(""br"", ""org.jsoup.nodes.Element$1"");
    assertEquals(""."", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test178249,"public void test178249() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting(""<Y]A!z5}=3u"");
    document0.is((Evaluator) evaluator_AttributeStarting0);
    assertEquals(""E{"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test178250,"public void test178250() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting(""<Y]A!z5}=3u"");
    document0.is((Evaluator) evaluator_AttributeStarting0);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test179251,"public void test179251() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.getElementsByAttributeValueMatching("""", ""Z<$2^*d"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test180252,"public void test180252() throws Throwable {
    Document document0 = Document.createShell(""E{"");
    // Undeclared exception!
    try {
        document0.wrap(""id"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",0,
project,0,test181253,"public void test181253() throws Throwable {
    Document document0 = Document.createShell(""."");
    Elements elements0 = document0.getElementsByIndexEquals(1532);
    assertEquals(""."", document0.baseUri());
}",0,
project,0,test181254,"public void test181254() throws Throwable {
    Document document0 = Document.createShell(""."");
    Elements elements0 = document0.getElementsByIndexEquals(1532);
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test182256,"public void test182256() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""0r>"", parseSettings0);
    Element element0 = new Element(tag0, ""0r>"");
    element0.getElementsByAttributeStarting(""0r>"");
    assertEquals(""0r>"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test183257,"public void test183257() throws Throwable {
    Document document0 = Document.createShell(""3"");
    // Undeclared exception!
    try {
        document0.after(""org.jsoup.select.Evaluator$AttributeWithValueContaining"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test184259,"public void test184259() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Elements elements0 = document0.getElementsMatchingOwnText("""");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test184260,"public void test184260() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Elements elements0 = document0.getElementsMatchingOwnText("""");
    assertEquals(""}X"", document0.baseUri());
}",0,
project,0,test185261,"public void test185261() throws Throwable {
    Document document0 = Document.createShell("""");
    assertFalse(document0.hasParent());
}",0,assertTrue(document0.hasParent())
project,0,test185262,"public void test185262() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.prepend("""");
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(0, element0.childNodeSize())"
project,0,test186263,"public void test186263() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""0r>"", parseSettings0);
    Element element0 = new Element(tag0, ""0r>"");
    element0.prependChild(element0);
    // Undeclared exception!
    try {
        element0.cssSelector();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query '': unexpected token at ''
        //
        verifyException(""org.jsoup.select.QueryParser"", e);
    }
}",0,
project,0,test187264,"public void test187264() throws Throwable {
    Document document0 = Document.createShell(""bk|?b3ZEQ Xe@tC}&N"");
    assertFalse(document0.hasParent());
}",0,assertTrue(document0.hasParent())
project,0,test187265,"public void test187265() throws Throwable {
    Document document0 = Document.createShell(""bk|?b3ZEQ Xe@tC}&N"");
    document0.getElementsByAttributeValueStarting(""DoctypeSystemIdentifier_singleQuoted"", ""L"");
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test187266,"public void test187266() throws Throwable {
    Document document0 = Document.createShell(""bk|?b3ZEQ Xe@tC}&N"");
    document0.getElementsByAttributeValueStarting(""DoctypeSystemIdentifier_singleQuoted"", ""L"");
    assertEquals(""bk|?b3ZEQ Xe@tC}&N"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test189268,"public void test189268() throws Throwable {
    Document document0 = Document.createShell(""#"");
    Element element0 = document0.attr(""#"", true);
    assertFalse(element0.hasParent());
}",0,assertTrue(element0.hasParent())
project,0,test189269,"public void test189269() throws Throwable {
    Document document0 = Document.createShell(""#"");
    Element element0 = document0.attr(""#"", true);
    assertEquals(""#"", element0.baseUri());
}",0,
project,0,test189270,"public void test189270() throws Throwable {
    Document document0 = Document.createShell(""#"");
    Element element0 = document0.attr(""#"", true);
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(0, element0.childNodeSize())"
project,0,test190271,"public void test190271() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""0r>"", parseSettings0);
    Element element0 = new Element(tag0, ""0r>"");
    // Undeclared exception!
    try {
        element0.before((Node) element0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test191272,"public void test191272() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Element element0 = document0.addClass(""1/B"");
    assertFalse(element0.hasParent());
}",0,assertFalse(element0.hasParent())
project,0,test191273,"public void test191273() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Element element0 = document0.addClass(""1/B"");
    assertEquals(""}X"", element0.baseUri());
}",0,assertNotNull(element0.baseUri())
project,0,test191274,"public void test191274() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    Element element0 = document0.addClass(""1/B"");
    assertEquals(1, element0.childNodeSize());
}",0,"assertEquals(1, element0.childNodeSize())"
project,0,test192275,"public void test192275() throws Throwable {
    Document document0 = new Document(""html"");
    document0.dataset();
    assertEquals(""html"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test193276,"public void test193276() throws Throwable {
    Document document0 = Document.createShell(""}X"");
    // Undeclared exception!
    try {
        document0.tagName((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Tag name must not be empty.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test194277,"public void test194277() throws Throwable {
    Element element0 = new Element(""s+"");
    // Undeclared exception!
    try {
        element0.child((-3587));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test195278,"public void test195278() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    document0.isBlock();
    assertEquals(1, document0.childNodeSize());
}",0,"assertEquals(0, document0.childNodeSize())"
project,0,test195279,"public void test195279() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    document0.isBlock();
    assertEquals(""%<)"", document0.baseUri());
}",0,
project,0,test195280,"public void test195280() throws Throwable {
    Document document0 = Document.createShell(""%<)"");
    document0.isBlock();
    assertFalse(document0.hasParent());
}",0,assertTrue(document0.hasParent())
project,0,test196281,"public void test196281() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.appendText(""ismap"");
    assertEquals(2, document0.childNodeSize());
}",0,"assertEquals(1, document0.childNodeSize())"
project,0,test197282,"public void test197282() throws Throwable {
    Document document0 = Document.createShell(""3"");
    Elements elements0 = document0.children();
    assertFalse(document0.hasParent());
}",0,assertTrue(document0.hasParent())
project,0,test197283,"public void test197283() throws Throwable {
    Document document0 = Document.createShell(""3"");
    Elements elements0 = document0.children();
    assertEquals(""3"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
