project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test010,"public void test010() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""P#fU2u2;RkV/OVC_N}{"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    // Undeclared exception!
    try {
        tokeniser0.appropriateEndTagName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.Tokeniser"", e);
    }
}",0,
project,0,test021,"public void test021() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""NotLessTilde"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    // Undeclared exception!
    try {
        tokeniser0.emitDoctypePending();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test052,"public void test052() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""varphi"");
    ParseErrorList parseErrorList0 = new ParseErrorList(10765, 10765);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    // Undeclared exception!
    try {
        tokeniser0.isAppropriateEndTagToken();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.Tokeniser"", e);
    }
}",0,
project,0,test063,"public void test063() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""oO#k]W=uBw6Dy=~&"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token token0 = tokeniser0.read();
    assertEquals("""", characterReader0.toString());
}",0,
project,0,test075,"public void test075() throws Throwable {
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
    // Undeclared exception!
    try {
        tokeniser0.emitTagPending();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.Tokeniser"", e);
    }
}",0,
project,0,test086,"public void test086() throws Throwable {
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
    // Undeclared exception!
    try {
        tokeniser0.emitCommentPending();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test097,"public void test097() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""varphi"");
    ParseErrorList parseErrorList0 = new ParseErrorList(10765, 10765);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test128,"public void test128() throws Throwable {
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(881);
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
    Token.Tag token_Tag0 = tokeniser0.createTagPending(true);
    token_Tag0.selfClosing = true;
    tokeniser0.emit(token_Tag0);
    // Undeclared exception!
    try {
        tokeniser0.read();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.Tokeniser"", e);
    }
}",0,
project,0,test139,"public void test139() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
    Token token0 = tokeniser0.read();
    assertNotNull(token0);
}",0,assertNotNull(token0)
project,0,test1710,"public void test1710() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xb>/:&CH'<B^oZI|y{"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token token0 = tokeniser0.read();
    assertNotNull(token0);
}",0,assertNotNull(token0)
project,0,test1813,"public void test1813() throws Throwable {
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    CharacterReader characterReader0 = new CharacterReader(""ii;>,Xd1)2,tCu~"");
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = Character.valueOf('7');
    tokeniser0.consumeCharacterReference(character0, true);
    assertEquals("">,Xd1)2,tCu~"", characterReader0.toString());
}",0,
project,0,test1914,"public void test1914() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""There is an unread token pending!"");
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
    Character character0 = Character.valueOf('T');
    Character character1 = tokeniser0.consumeCharacterReference(character0, false);
    assertNull(character1);
}",0,
project,0,test2015,"public void test2015() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""&]5_I/<z9qJ"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
    assertNull(character0);
}",0,
project,0,test2116,"public void test2116() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#X3"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.consumeCharacterReference((Character) null, true);
    assertEquals("""", characterReader0.toString());
}",0,
project,0,test2217,"public void test2217() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#1"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.consumeCharacterReference((Character) null, false);
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
project,0,test2318,"public void test2318() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
    assertNull(character0);
}",0,
project,0,test2320,"public void test2320() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
    assertEquals(""#"", characterReader0.toString());
}",0,
project,0,test2422,"public void test2422() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""E=F&;bMGiwQG^+>F"");
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(3301);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.read();
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
project,0,test2523,"public void test2523() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""planck"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.consumeCharacterReference((Character) null, false);
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
project,0,test2625,"public void test2625() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""numeric reference with no numerals"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
    assertNull(character0);
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
    Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
    assertNotNull(token_Tag0);
}",0,assertNotNull(token_Tag0)
project,0,test2929,"public void test2929() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""BW{A@<"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.read();
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
project,0,test3031,"public void test3031() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("" X<"");
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(88);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token token0 = tokeniser0.read();
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
