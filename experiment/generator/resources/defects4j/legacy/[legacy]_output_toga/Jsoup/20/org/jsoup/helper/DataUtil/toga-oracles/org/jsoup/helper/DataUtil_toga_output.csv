project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"", parser0);
    assertEquals(""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test011,"public void test011() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.load((InputStream) pushbackInputStream0, (String) null, ""'3C^L}bw"", parser0);
    assertEquals(""'3C^L}bw"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test022,"public void test022() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    try {
        DataUtil.readToByteBuffer(mockFileInputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",0,
project,0,test054,"public void test054() throws Throwable {
    ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1270);
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, ""DGv"", (String) null, (Parser) null);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // DGv
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test065,"public void test065() throws Throwable {
    ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, ""cZ<"", ""cZ<"", (Parser) null);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // cZ<
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test076,"public void test076() throws Throwable {
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, (String) null, (String) null, parser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.charset.CharsetDecoder"", e);
    }
}",0,
project,0,test087,"public void test087() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 131072, 0);
    ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, """", ""n;~5OBK"", parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test098,"public void test098() throws Throwable {
    File file0 = MockFile.createTempFile(""\""uL]>WwZ)Ve"", ""\""uL]>WwZ)Ve"");
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) mockFileInputStream0, ""i1a5{:mf)xf~&LO"", ""(?i)\bcharset=s*\""?([^s;\""]*)"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // i1a5{:mf)xf~&LO
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test109,"public void test109() throws Throwable {
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, ""acronym"", ""acronym"", parser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
project,0,test1110,"public void test1110() throws Throwable {
    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 2);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) pushbackInputStream0, """", """", parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1211,"public void test1211() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-60), (byte) 45);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""8j}[~{K"", parser0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",1,
project,0,test1312,"public void test1312() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    Parser parser0 = Parser.xmlParser();
    try {
        DataUtil.load((InputStream) pipedInputStream0, ""l%KuX':e"", ""Tb=0.jI'"", parser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test1413,"public void test1413() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""param"", ""!cw?O'"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // param
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1514,"public void test1514() throws Throwable {
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) dataInputStream0, ""meta[http-equiv=content-type], meta[charset]"", ""S&Te"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // meta[http-equiv=content-type], meta[charset]
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1615,"public void test1615() throws Throwable {
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) pushbackInputStream0, """", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1716,"public void test1716() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        DataUtil.load((InputStream) pipedInputStream0, (String) null, """");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test1817,"public void test1817() throws Throwable {
    File file0 = MockFile.createTempFile(""meta[http-equiv=content-type], meta[charset]"", ""o"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""\"",>tv)7"", ""[%s^=%s]"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // \"",>tv)7
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1918,"public void test1918() throws Throwable {
    File file0 = MockFile.createTempFile(""J^bQ? uQNA!jS"", ""J^bQ? uQNA!jS"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, """", ""S_5"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test2019,"public void test2019() throws Throwable {
    MockFile mockFile0 = new MockFile(""(?i)\bcharset=s*\""?([^s;\""]*)"");
    try {
        DataUtil.load((File) mockFile0, ""(?i)\bcharset=s*\""?([^s;\""]*)"", """");
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",1,
project,0,test2120,"public void test2120() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType((String) null);
    assertNull(string0);
}",0,
project,0,test2221,"public void test2221() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType("""");
    assertNull(string0);
}",0,
project,0,test2322,"public void test2322() throws Throwable {
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""VO;h9!Ubi*B"");
    assertEquals(""VO;h9!Ubi*B"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test2423,"public void test2423() throws Throwable {
    File file0 = MockFile.createTempFile(""?DDX4fCsL(]"", ""UTF-8"");
    Document document0 = DataUtil.load(file0, ""UTF-8"", ""TU<]{!@.9<s7G"");
    assertNotNull(document0);
}",1,
project,0,test2424,"public void test2424() throws Throwable {
    File file0 = MockFile.createTempFile(""?DDX4fCsL(]"", ""UTF-8"");
    Document document0 = DataUtil.load(file0, ""UTF-8"", ""TU<]{!@.9<s7G"");
    assertEquals(""TU<]{!@.9<s7G"", document0.baseUri());
}",0,assertNotNull(document0.baseUri())
project,0,test2525,"public void test2525() throws Throwable {
    File file0 = MockFile.createTempFile(""?DDX4fCsL(]"", (String) null);
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""x"", ""TU<]{!@.9<s7G"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // x
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",1,
project,0,test2626,"public void test2626() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((File) null, """", """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",1,
project,0,test2727,"public void test2727() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
    DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) dataInputStream0, ""base"", ""base"", (Parser) null);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // base
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, (String) null, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",0,
