project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test066,"public void test066() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    // Undeclared exception!
    try {
        whitelist0.isSafeTag((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    // Undeclared exception!
    try {
        whitelist0.isSafeAttribute(""^(}3h;}>In!+;^v(A"", (Element) null, (Attribute) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.safety.Whitelist"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    Document document0 = Document.createShell("""");
    Attribute attribute0 = Attribute.createFromEncoded(""TpiR24~u4yA)l"", ""h1"");
    // Undeclared exception!
    try {
        whitelist0.isSafeAttribute((String) null, document0, attribute0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    // Undeclared exception!
    try {
        whitelist0.getEnforcedAttributes((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    String[] stringArray0 = new String[7];
    // Undeclared exception!
    try {
        whitelist0.addTags(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    Whitelist whitelist0 = Whitelist.basicWithImages();
    // Undeclared exception!
    try {
        whitelist0.addEnforcedAttribute((String) null, ""h5"", ""L'$Lu?`8<U~}wARG"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test1212,"public void test1212() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    String[] stringArray0 = new String[9];
    // Undeclared exception!
    try {
        whitelist0.addAttributes(""'PF:vg&>96:qIxO"", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test1313,"public void test1313() throws Throwable {
    Whitelist whitelist0 = Whitelist.basicWithImages();
    Document document0 = Document.createShell(""$VALUES"");
    Attribute attribute0 = new Attribute(""2ig"", """");
    boolean boolean0 = whitelist0.isSafeAttribute(""start"", document0, attribute0);
    assertFalse(boolean0);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""X"";
    stringArray0[1] = ""h6"";
    Whitelist whitelist1 = whitelist0.addTags(stringArray0);
    assertSame(whitelist1, whitelist0);
}",1,
project,0,test1717,"public void test1717() throws Throwable {
    Whitelist whitelist0 = Whitelist.simpleText();
    whitelist0.addEnforcedAttribute(""c!58'_:^z+="", ""sup"", ""u#hQ$_,"");
    Attributes attributes0 = whitelist0.getEnforcedAttributes(""c!58'_:^z+="");
    assertNotNull(attributes0);
}",0,assertNotNull(attributes0)
project,0,test1818,"public void test1818() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    Attributes attributes0 = whitelist0.getEnforcedAttributes(""CK}XQ3Th2"");
    assertNotNull(attributes0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    String[] stringArray0 = new String[7];
    stringArray0[0] = ""h5"";
    stringArray0[1] = ""h5"";
    stringArray0[2] = ""h5"";
    stringArray0[3] = ""CK}XQ3Th2"";
    stringArray0[4] = ""h5"";
    stringArray0[5] = ""h5"";
    stringArray0[6] = ""h5"";
    Whitelist whitelist1 = whitelist0.addAttributes(""h5"", stringArray0);
    whitelist0.addProtocols(""h5"", ""]_zCs1k?4+h#BKv"", stringArray0);
    Document document0 = new Document(""(>!$A|]j=B"");
    Attribute attribute0 = Attribute.createFromEncoded(""h5"", ""ul"");
    boolean boolean0 = whitelist1.isSafeAttribute(""h5"", document0, attribute0);
    assertTrue(boolean0);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    String[] stringArray0 = new String[7];
    stringArray0[0] = ""h5"";
    stringArray0[1] = ""h5"";
    stringArray0[2] = ""h5"";
    stringArray0[3] = ""CK}XQ3Th2"";
    stringArray0[4] = ""h5"";
    stringArray0[5] = ""h5"";
    stringArray0[6] = ""h5"";
    Whitelist whitelist1 = whitelist0.addAttributes(""h5"", stringArray0);
    Document document0 = new Document(""(>!$A|]j=B"");
    Attribute attribute0 = Attribute.createFromEncoded(""h5"", ""ul"");
    boolean boolean0 = whitelist1.isSafeAttribute(""h5"", document0, attribute0);
    assertTrue(boolean0);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[1] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[2] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[3] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[4] = ""org.jsoup.safety.whitelist$attributevalue"";
    whitelist0.addAttributes(""org.jsoup.safety.whitelist$attributevalue"", stringArray0);
    Document document0 = Document.createShell("""");
    Attribute attribute0 = Attribute.createFromEncoded(""|C-NA31w$6Dy"", ""h1"");
    boolean boolean0 = whitelist0.isSafeAttribute(""org.jsoup.safety.whitelist$attributevalue"", document0, attribute0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2222,"public void test2222() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    boolean boolean0 = whitelist0.isSafeTag(""KyJA)"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2323,"public void test2323() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    String[] stringArray0 = new String[7];
    // Undeclared exception!
    try {
        whitelist0.addProtocols(""blockquote"", ""Umacr"", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",1,
project,0,test2424,"public void test2424() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    Whitelist whitelist1 = whitelist0.addEnforcedAttribute(""io|-9u4z{BPik$:"", ""io|-9u4z{BPik$:"", ""io|-9u4z{BPik$:"");
    Whitelist whitelist2 = whitelist0.addEnforcedAttribute(""io|-9u4z{BPik$:"", ""Congruent"", ""T{<2vT-C]5"");
    assertSame(whitelist2, whitelist1);
}",1,
project,0,test2626,"public void test2626() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[1] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[2] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[3] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[4] = ""org.jsoup.safety.whitelist$attributevalue"";
    Whitelist whitelist1 = whitelist0.addAttributes(""org.jsoup.safety.whitelist$attributevalue"", stringArray0);
    Whitelist whitelist2 = whitelist1.addAttributes(""org.jsoup.safety.whitelist$attributevalue"", stringArray0);
    assertSame(whitelist0, whitelist2);
}",1,
project,0,test2727,"public void test2727() throws Throwable {
    Whitelist whitelist0 = Whitelist.basicWithImages();
    boolean boolean0 = whitelist0.isSafeTag(""dl"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2828,"public void test2828() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""8J%cfbH4E/i}yUkedb"";
    stringArray0[1] = ""table"";
    whitelist0.addProtocols(""8J%cfbH4E/i}yUkedb"", ""table"", stringArray0);
    Whitelist whitelist1 = whitelist0.addProtocols(""8J%cfbH4E/i}yUkedb"", ""table"", stringArray0);
    assertSame(whitelist0, whitelist1);
}",1,
project,0,test2929,"public void test2929() throws Throwable {
    Whitelist whitelist0 = Whitelist.none();
    assertNotNull(whitelist0);
}",0,assertNotNull(whitelist0)
project,0,test3030,"public void test3030() throws Throwable {
    Whitelist whitelist0 = Whitelist.simpleText();
    Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
    assertSame(whitelist0, whitelist1);
}",0,
