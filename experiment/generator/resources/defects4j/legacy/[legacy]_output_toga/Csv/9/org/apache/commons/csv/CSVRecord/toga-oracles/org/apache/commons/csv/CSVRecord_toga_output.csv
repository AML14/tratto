project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    String[] stringArray0 = new String[0];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = Integer.valueOf(0);
    hashMap0.put(""m,-Hym"", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""SQ>h' *d>-wRj["", 988L);
    cSVRecord0.toMap();
    assertEquals(988L, cSVRecord0.getRecordNumber());
}",0,
project,0,test011,"public void test011() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""4mz1bv"", 22L);
    Integer integer0 = Integer.getInteger(""4mz1bv"", 37);
    hashMap0.put(""4mz1bv"", integer0);
    boolean boolean0 = cSVRecord0.isSet(""4mz1bv"");
    assertEquals(22L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test012,"public void test012() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""4mz1bv"", 22L);
    Integer integer0 = Integer.getInteger(""4mz1bv"", 37);
    hashMap0.put(""4mz1bv"", integer0);
    boolean boolean0 = cSVRecord0.isSet(""4mz1bv"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test023,"public void test023() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer((-742));
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ""Rtrjh7xP1xby/w"", 0L);
    boolean boolean0 = cSVRecord0.isConsistent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test034,"public void test034() throws Throwable {
    String[] stringArray0 = new String[0];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.put(""o-tpk$6C$?0$<,OI"", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""o-tpk$6C$?0$<,OI"", 0L);
    // Undeclared exception!
    try {
        cSVRecord0.get(""o-tpk$6C$?0$<,OI"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index for header 'o-tpk$6C$?0$<,OI' is 0 but CSVRecord only has 0 values!
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}",1,
project,0,test045,"public void test045() throws Throwable {
    String[] stringArray0 = new String[0];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, (-1L));
    cSVRecord0.values();
    assertEquals((-1L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(0, cSVRecord0.getRecordNumber())"
project,0,test056,"public void test056() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 1L);
    Map<String, String> map0 = cSVRecord0.toMap();
    assertEquals(1L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(0, cSVRecord0.getRecordNumber())"
project,0,test068,"public void test068() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 1718L);
    cSVRecord0.putIn((HashMap<String, String>) null);
    assertEquals(1718L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(0, cSVRecord0.getRecordNumber())"
project,0,test079,"public void test079() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""4mz1bv"", 22L);
    HashMap<String, String> hashMap1 = new HashMap<String, String>();
    cSVRecord0.putIn(hashMap1);
    assertEquals(22L, cSVRecord0.getRecordNumber());
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 1L);
    long long0 = cSVRecord0.getRecordNumber();
    assertEquals(1L, long0);
}",0,
project,0,test0911,"public void test0911() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-1163L));
    long long0 = cSVRecord0.getRecordNumber();
    assertEquals((-1163L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1012,"public void test1012() throws Throwable {
    String[] stringArray0 = new String[0];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, (String) null, 1346L);
    cSVRecord0.getComment();
    assertEquals(1346L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test1113,"public void test1113() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, """", (-132L));
    cSVRecord0.getComment();
    assertEquals((-132L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test1214,"public void test1214() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""}4sRg C%:iCI!X}1+"";
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 1L);
    cSVRecord0.get("""");
    assertEquals(1L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test1315,"public void test1315() throws Throwable {
    String[] stringArray0 = new String[2];
    stringArray0[0] = """";
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-3325L));
    hashMap0.put(""]Qf(\"""", integer0);
    cSVRecord0.get(""]Qf(\"""");
    assertEquals((-3325L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test1416,"public void test1416() throws Throwable {
    String[] stringArray0 = new String[5];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""d,(of9oA+['0"", (-1L));
    cSVRecord0.get(0);
    assertEquals((-1L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test1517,"public void test1517() throws Throwable {
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""Ykb$~0MV"";
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 1898L);
    cSVRecord0.get(0);
    assertEquals(1898L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test1618,"public void test1618() throws Throwable {
    String[] stringArray0 = new String[2];
    stringArray0[1] = """";
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 1L);
    String string0 = cSVRecord0.get(1);
    assertNotNull(string0);
}",1,
project,0,test1619,"public void test1619() throws Throwable {
    String[] stringArray0 = new String[2];
    stringArray0[1] = """";
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 1L);
    String string0 = cSVRecord0.get(1);
    assertEquals(1L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test1720,"public void test1720() throws Throwable {
    String[] stringArray0 = new String[2];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, """", 3630L);
    // Undeclared exception!
    try {
        cSVRecord0.toMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}",0,
project,0,test1821,"public void test1821() throws Throwable {
    String[] stringArray0 = new String[4];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer((-191));
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""z64,]$;)k[X"", (-2039L));
    // Undeclared exception!
    try {
        cSVRecord0.toMap();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -191
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}",0,
project,0,test1922,"public void test1922() throws Throwable {
    String[] stringArray0 = new String[13];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(3);
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 0L);
    // Undeclared exception!
    try {
        cSVRecord0.putIn((HashMap<String, String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}",0,
project,0,test2023,"public void test2023() throws Throwable {
    String[] stringArray0 = new String[4];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer((-511));
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""2z$Sed*)ckLcX.1J|"", 0L);
    HashMap<String, String> hashMap1 = new HashMap<String, String>();
    // Undeclared exception!
    try {
        cSVRecord0.putIn(hashMap1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -511
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}",0,
project,0,test2124,"public void test2124() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-3325L));
    hashMap0.put(""]Qf(\"""", integer0);
    BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(biFunction0).apply(any(), any());
    hashMap0.replaceAll(biFunction0);
    // Undeclared exception!
    try {
        cSVRecord0.isSet(""]Qf(\"""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}",0,
project,0,test2225,"public void test2225() throws Throwable {
    String[] stringArray0 = new String[9];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, ""{JavKs!"", (-1506L));
    cSVRecord0.isMapped(""yP+1vZbk@@{k"");
    assertEquals((-1506L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test2326,"public void test2326() throws Throwable {
    String[] stringArray0 = new String[4];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(1173);
    hashMap0.put((String) null, integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-1280L));
    boolean boolean0 = cSVRecord0.isMapped((String) null);
    assertEquals((-1280L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test2327,"public void test2327() throws Throwable {
    String[] stringArray0 = new String[4];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(1173);
    hashMap0.put((String) null, integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-1280L));
    boolean boolean0 = cSVRecord0.isMapped((String) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2428,"public void test2428() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(3842);
    hashMap0.put(""Oz_uLlbHM]67j"", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 1L);
    cSVRecord0.toMap();
    assertEquals(1L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test2529,"public void test2529() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(2);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 2);
    hashMap0.put(""p"", integer0);
    boolean boolean0 = cSVRecord0.isSet(""p"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2530,"public void test2530() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(2);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 2);
    hashMap0.put(""p"", integer0);
    boolean boolean0 = cSVRecord0.isSet(""p"");
    assertEquals(2L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(0, cSVRecord0.getRecordNumber())"
project,0,test2631,"public void test2631() throws Throwable {
    String[] stringArray0 = new String[9];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.putIfAbsent("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-1917L));
    boolean boolean0 = cSVRecord0.isSet("""");
    assertEquals((-1917L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(0, cSVRecord0.getRecordNumber())"
project,0,test2632,"public void test2632() throws Throwable {
    String[] stringArray0 = new String[9];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.putIfAbsent("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-1917L));
    boolean boolean0 = cSVRecord0.isSet("""");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2733,"public void test2733() throws Throwable {
    String[] stringArray0 = new String[3];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""0%Jd}BE$.w"", (-1L));
    boolean boolean0 = cSVRecord0.isMapped("""");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2734,"public void test2734() throws Throwable {
    String[] stringArray0 = new String[3];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""0%Jd}BE$.w"", (-1L));
    boolean boolean0 = cSVRecord0.isMapped("""");
    assertEquals((-1L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test2835,"public void test2835() throws Throwable {
    String[] stringArray0 = new String[4];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, stringArray0[3], (-13L));
    boolean boolean0 = cSVRecord0.isSet(stringArray0[3]);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2836,"public void test2836() throws Throwable {
    String[] stringArray0 = new String[4];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, stringArray0[3], (-13L));
    boolean boolean0 = cSVRecord0.isSet(stringArray0[3]);
    assertEquals((-13L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test2937,"public void test2937() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer((-1879048235));
    hashMap0.put(stringArray0[0], integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-1879048235));
    boolean boolean0 = cSVRecord0.isConsistent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2938,"public void test2938() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer((-1879048235));
    hashMap0.put(stringArray0[0], integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-1879048235));
    boolean boolean0 = cSVRecord0.isConsistent();
    assertEquals((-1879048235L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test3039,"public void test3039() throws Throwable {
    String[] stringArray0 = new String[3];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""0%Jd}BE$.w"", (-1L));
    boolean boolean0 = cSVRecord0.isConsistent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3040,"public void test3040() throws Throwable {
    String[] stringArray0 = new String[3];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""0%Jd}BE$.w"", (-1L));
    boolean boolean0 = cSVRecord0.isConsistent();
    assertEquals((-1L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(0, cSVRecord0.getRecordNumber())"
project,0,test3141,"public void test3141() throws Throwable {
    String[] stringArray0 = new String[4];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, stringArray0[3], (-13L));
    boolean boolean0 = cSVRecord0.isConsistent();
    assertEquals((-13L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test3142,"public void test3142() throws Throwable {
    String[] stringArray0 = new String[4];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, stringArray0[3], (-13L));
    boolean boolean0 = cSVRecord0.isConsistent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3243,"public void test3243() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", (-3325L));
    hashMap0.put(""]Qf(\"""", integer0);
    cSVRecord0.get(""]Qf(\"""");
    assertEquals((-3325L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test3344,"public void test3344() throws Throwable {
    String[] stringArray0 = new String[4];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, stringArray0[3], (-13L));
    // Undeclared exception!
    try {
        cSVRecord0.get(""%wDsI9Nzy=4m"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No header mapping was specified, the record values can't be accessed by name
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}",1,
project,0,test3445,"public void test3445() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 2);
    // Undeclared exception!
    try {
        cSVRecord0.get(stringArray0[1]);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Mapping for null not found, expected one of []
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}",1,
project,0,test3546,"public void test3546() throws Throwable {
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, ""Mrf@WT?J6iLUs"", (-1691L));
    assertEquals(""[]"", cSVRecord0.toString());
}",0,assertNotNull(cSVRecord0.toString())
project,0,test3547,"public void test3547() throws Throwable {
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, ""Mrf@WT?J6iLUs"", (-1691L));
    cSVRecord0.size();
    assertEquals((-1691L), cSVRecord0.getRecordNumber());
}",0,"assertEquals(0, cSVRecord0.getRecordNumber())"
project,0,test3648,"public void test3648() throws Throwable {
    String[] stringArray0 = new String[4];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""=>E"", 0L);
    int int0 = cSVRecord0.size();
    assertEquals(4, int0);
}",0,"assertEquals(1, int0)"
project,0,test3749,"public void test3749() throws Throwable {
    String[] stringArray0 = new String[4];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""=>E"", 0L);
    cSVRecord0.getRecordNumber();
    assertEquals(4, cSVRecord0.size());
}",0,"assertEquals(0, cSVRecord0.size())"
project,0,test3850,"public void test3850() throws Throwable {
    String[] stringArray0 = new String[4];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""=>E"", 0L);
    // Undeclared exception!
    try {
        cSVRecord0.get((-2569));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -2569
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}",1,
project,0,test3951,"public void test3951() throws Throwable {
    String[] stringArray0 = new String[5];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 143L);
    String[] stringArray1 = cSVRecord0.values();
    assertEquals(5, stringArray1.length);
}",0,
project,0,test3952,"public void test3952() throws Throwable {
    String[] stringArray0 = new String[5];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 143L);
    String[] stringArray1 = cSVRecord0.values();
    assertEquals(143L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(0, cSVRecord0.getRecordNumber())"
project,0,test4053,"public void test4053() throws Throwable {
    String[] stringArray0 = new String[2];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, """", 3630L);
    String string0 = cSVRecord0.toString();
    assertEquals(""[null, null]"", string0);
}",0,
project,0,test4054,"public void test4054() throws Throwable {
    String[] stringArray0 = new String[2];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, """", 3630L);
    String string0 = cSVRecord0.toString();
    assertEquals(3630L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test4155,"public void test4155() throws Throwable {
    String[] stringArray0 = new String[4];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""=>E"", 0L);
    cSVRecord0.getComment();
    assertFalse(cSVRecord0.isConsistent());
}",0,assertFalse(cSVRecord0.isConsistent())
project,0,test4256,"public void test4256() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 2);
    cSVRecord0.iterator();
    assertEquals(2L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(1, cSVRecord0.getRecordNumber())"
project,0,test4257,"public void test4257() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 2);
    cSVRecord0.iterator();
    assertEquals(2, cSVRecord0.size());
}",0,"assertEquals(0, cSVRecord0.size())"
