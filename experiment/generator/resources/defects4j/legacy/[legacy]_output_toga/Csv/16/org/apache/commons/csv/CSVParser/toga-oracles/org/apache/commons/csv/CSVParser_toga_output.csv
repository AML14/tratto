project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    Charset charset0 = Charset.defaultCharset();
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVParser cSVParser0 = CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,
project,0,test011,"public void test011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""6Ih"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    cSVParser0.forEach(consumer0);
    cSVParser0.nextRecord();
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,
project,0,test022,"public void test022() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Escape=</Escape=<0Escape=<"");
    byte[] byteArray0 = new byte[8];
    byteArray0[6] = (byte) 10;
    FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
    MockFile mockFile0 = new MockFile(""Escape=<"");
    File file0 = MockFile.createTempFile(""Escape=<"", ""Escape=<"", (File) mockFile0);
    Charset charset0 = Charset.defaultCharset();
    CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0);
    cSVParser0.nextRecord();
    cSVParser0.nextRecord();
    assertEquals(2L, cSVParser0.getRecordNumber());
}",0,
project,0,test033,"public void test033() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.ORACLE;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    cSVParser0.iterator();
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test044,"public void test044() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = CSVParser.parse(""6Ih"", cSVFormat0);
    cSVParser0.close();
    boolean boolean0 = cSVParser0.isClosed();
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test045,"public void test045() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = CSVParser.parse(""6Ih"", cSVFormat0);
    cSVParser0.close();
    boolean boolean0 = cSVParser0.isClosed();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test056,"public void test056() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""6Ih"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    cSVParser0.forEach(consumer0);
    cSVParser0.getRecords();
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test067,"public void test067() throws Throwable {
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0);
    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 0L, (-1L));
    long long0 = cSVParser0.getRecordNumber();
    assertEquals((-2L), long0);
}",0,"assertEquals(1, long0)"
project,0,test078,"public void test078() throws Throwable {
    File file0 = MockFile.createTempFile(""charset"", ""charset"");
    Charset charset0 = Charset.defaultCharset();
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/charset0charset"");
    CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    FileSystemHandling.appendLineToFile(evoSuiteFile0, ""FORMAT"");
    CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
    cSVParser0.getFirstEndOfLine();
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test089,"public void test089() throws Throwable {
    MockFile mockFile0 = new MockFile(""P2494y_M+a~"", ""P2494y_M+a~"");
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    try {
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail(""Expecting exception: NoSuchFileException"");
    } catch (NoSuchFileException e) {
    }
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
    MockFile mockFile0 = new MockFile(""inputStream"");
    Path path0 = mockFile0.toPath();
    // Undeclared exception!
    try {
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.file.Files"", e);
    }
}",0,
project,0,test1011,"public void test1011() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    Path path0 = mockFile0.toPath();
    // Undeclared exception!
    try {
        CSVParser.parse(path0, (Charset) null, (CSVFormat) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'format' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test1112,"public void test1112() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.ORACLE;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    MockFile mockFile0 = new MockFile("""", """");
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    try {
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
    }
}",0,
project,0,test1213,"public void test1213() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    // Undeclared exception!
    try {
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'charset' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test1314,"public void test1314() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    CSVFormat cSVFormat0 = CSVFormat.ORACLE;
    URL uRL0 = MockURL.getHttpExample();
    try {
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Could not find: www.someFakeButWellFormedURL.org
        //
        verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
    }
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    // Undeclared exception!
    try {
        CSVParser.parse("""", (CSVFormat) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'format' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",1,
project,0,test1516,"public void test1516() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    // Undeclared exception!
    try {
        CSVParser.parse((Reader) null, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'reader' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test1617,"public void test1617() throws Throwable {
    PipedReader pipedReader0 = new PipedReader();
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    try {
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test1718,"public void test1718() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    CSVFormat cSVFormat0 = CSVFormat.ORACLE;
    // Undeclared exception!
    try {
        CSVParser.parse((InputStream) pipedInputStream0, (Charset) null, cSVFormat0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // charset
        //
        verifyException(""java.io.InputStreamReader"", e);
    }
}",1,
project,0,test1819,"public void test1819() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
    File file0 = MockFile.createTempFile(""No more CSV records available"", ""No more CSV records available"");
    // Undeclared exception!
    try {
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // charset
        //
        verifyException(""java.io.InputStreamReader"", e);
    }
}",0,
project,0,test1920,"public void test1920() throws Throwable {
    File file0 = MockFile.createTempFile(""charset"", ""charset"");
    Charset charset0 = Charset.defaultCharset();
    FileSystemHandling.shouldAllThrowIOExceptions();
    CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    try {
        CSVParser.parse(file0, charset0, cSVFormat1);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Simulated IOException
        //
        verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
    }
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    MockFile mockFile0 = new MockFile("""", """");
    Charset charset0 = Charset.defaultCharset();
    try {
        CSVParser.parse((File) mockFile0, charset0, cSVFormat0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test2122,"public void test2122() throws Throwable {
    PipedReader pipedReader0 = new PipedReader();
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
    try {
        cSVParser0.nextRecord();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test2223,"public void test2223() throws Throwable {
    PipedReader pipedReader0 = new PipedReader(1559);
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 1559, 509L);
    try {
        cSVParser0.getRecords();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test2526,"public void test2526() throws Throwable {
    StringReader stringReader0 = new StringReader(""inputStream"");
    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test2627,"public void test2627() throws Throwable {
    PipedReader pipedReader0 = new PipedReader();
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[4];
    stringArray0[1] = ""1"";
    stringArray0[2] = ""Unexpected Token type: "";
    stringArray0[3] = """";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, 0L);
    assertEquals((-1L), cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test2728,"public void test2728() throws Throwable {
    File file0 = MockFile.createTempFile(""charset"", ""charset"");
    Charset charset0 = Charset.defaultCharset();
    CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test2930,"public void test2930() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""6Ih"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    cSVParser0.getRecords();
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test3031,"public void test3031() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    StringReader stringReader0 = new StringReader(""P5, ?Y[|*"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    cSVParser0.getHeaderMap();
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test3132,"public void test3132() throws Throwable {
    PipedReader pipedReader0 = new PipedReader();
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[4];
    stringArray0[1] = ""1"";
    stringArray0[2] = ""Unexpected Token type: "";
    stringArray0[3] = "" valuels="";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, 0L);
    Map<String, Integer> map0 = cSVParser0.getHeaderMap();
    assertNotNull(map0);
}",0,assertNotNull(map0)
project,0,test3133,"public void test3133() throws Throwable {
    PipedReader pipedReader0 = new PipedReader();
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[4];
    stringArray0[1] = ""1"";
    stringArray0[2] = ""Unexpected Token type: "";
    stringArray0[3] = "" valuels="";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, 0L);
    Map<String, Integer> map0 = cSVParser0.getHeaderMap();
    assertEquals((-1L), cSVParser0.getRecordNumber());
}",0,"assertEquals(1, cSVParser0.getRecordNumber())"
project,0,test3235,"public void test3235() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Escape=</Escape=<0Escape=<"");
    FileSystemHandling.appendLineToFile(evoSuiteFile0, """");
    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
    MockFile mockFile0 = new MockFile(""Escape=<"");
    File file0 = MockFile.createTempFile(""Escape=<"", ""Escape=<"", (File) mockFile0);
    Charset charset0 = Charset.defaultCharset();
    CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0);
    cSVParser0.nextRecord();
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test3336,"public void test3336() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
    CSVParser cSVParser0 = CSVParser.parse(""thk,3Hy3DboF"", cSVFormat0);
    cSVParser0.nextRecord();
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,
project,0,test3437,"public void test3437() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVParser cSVParser0 = CSVParser.parse(""@_(Y\""+#u%[i<2A"", cSVFormat1);
    cSVParser0.nextRecord();
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(1, cSVParser0.getRecordNumber())"
project,0,test3538,"public void test3538() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVParser cSVParser0 = CSVParser.parse(""\""K>=/L(ei:8HpA.;e"", cSVFormat0);
    long long0 = cSVParser0.getRecordNumber();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3639,"public void test3639() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = CSVParser.parse(""6Ih"", cSVFormat0);
    cSVParser0.isClosed();
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(1, cSVParser0.getRecordNumber())"
project,0,test3740,"public void test3740() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Charset charset0 = Charset.defaultCharset();
    // Undeclared exception!
    try {
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'inputStream' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",1,
project,0,test3841,"public void test3841() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    MockFile mockFile0 = new MockFile("""", """");
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,
project,0,test3942,"public void test3942() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
    Charset charset0 = Charset.defaultCharset();
    URL uRL0 = MockURL.getFtpExample();
    // Undeclared exception!
    try {
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.net.URL"", e);
    }
}",0,
project,0,test4043,"public void test4043() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Charset charset0 = Charset.defaultCharset();
    // Undeclared exception!
    try {
        CSVParser.parse((File) null, charset0, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'file' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",1,
project,0,test4144,"public void test4144() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""6Ih"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    cSVParser0.getCurrentLineNumber();
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test4245,"public void test4245() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""6Ih"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    cSVParser0.getFirstEndOfLine();
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test4346,"public void test4346() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""6Ih"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    cSVParser0.forEach(consumer0);
    long long0 = cSVParser0.getRecordNumber();
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
