project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
    Object[] objectArray0 = new Object[7];
    objectArray0[4] = (Object) cSVFormat0;
    String string0 = cSVFormat0.format(objectArray0);
    assertNotNull(string0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""NONE"", true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords((Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",1,
project,0,test033,"public void test033() throws Throwable {
    File file0 = MockFile.createTempFile(""url"", ""org.apache.commons.csv.CSVPrinter$1"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords(resultSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",1,
project,0,test088,"public void test088() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""out"");
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    ByteBuffer byteBuffer0 = ByteBuffer.allocate(1161);
    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('&');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
    // Undeclared exception!
    try {
        cSVPrinter0.printComment(""S:p0sP_!"");
        fail(""Expecting exception: ReadOnlyBufferException"");
    } catch (ReadOnlyBufferException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.StringCharBuffer"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    char[] charArray0 = new char[6];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('P');
    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
    // Undeclared exception!
    try {
        cSVPrinter0.printComment(""FYGb0TDj"");
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.Buffer"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
    Float float0 = new Float((-594.9592F));
    // Undeclared exception!
    try {
        cSVPrinter0.print(float0);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    MockFileWriter mockFileWriter0 = new MockFileWriter(""k`.3en(twdW3W"", false);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
    cSVPrinter0.close();
    Double double0 = new Double(0.0);
    try {
        cSVPrinter0.print(double0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    MockFileWriter mockFileWriter0 = new MockFileWriter(""Tv/A*$"", true);
    Character character0 = new Character('/');
    Quote quote0 = Quote.NONE;
    String[] stringArray0 = new String[5];
    CSVFormat cSVFormat0 = new CSVFormat('/', character0, quote0, character0, character0, false, true, """", """", stringArray0, true);
    CSVPrinter cSVPrinter0 = null;
    try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The quoteChar character and the delimiter cannot be the same ('/')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1816,"public void test1816() throws Throwable {
    MockFileWriter mockFileWriter0 = new MockFileWriter(""[{"", false);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
    SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("""");
    Object[] objectArray0 = new Object[9];
    objectArray0[5] = (Object) sQLTransactionRollbackException0;
    cSVPrinter0.printRecords(objectArray0);
    assertEquals(9, objectArray0.length);
}",1,
project,0,test3022,"public void test3022() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
    Appendable appendable0 = cSVPrinter0.getOut();
    assertSame(appendable0, stringBuffer0);
}",0,
