project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    CSVRecord cSVRecord0 = cSVParser0.nextRecord();
    assertNull(cSVRecord0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""p@q=v?idwm|ufx"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = CSVParser.parse(""p@q=v?idwm|ufx"", cSVFormat1);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test023,"public void test023() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""p@q=v?idwm|ufx"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = CSVParser.parse(""p@q=v?idwm|ufx"", cSVFormat1);
    CSVRecord cSVRecord0 = cSVParser0.nextRecord();
    assertFalse(cSVRecord0.isConsistent());
}",0,assertTrue(cSVRecord0.isConsistent())
project,0,test034,"public void test034() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    cSVParser0.close();
    boolean boolean0 = cSVParser0.isClosed();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test056,"public void test056() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    StringReader stringReader0 = new StringReader(""`r`JjOw"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    cSVParser0.getRecords();
    long long0 = cSVParser0.getRecordNumber();
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test089,"public void test089() throws Throwable {
    Character character0 = Character.valueOf('4');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, """", """", stringArray0, false);
    CSVParser cSVParser0 = CSVParser.parse(""CSVParser has been closed"", cSVFormat0);
    long long0 = cSVParser0.getCurrentLineNumber();
    assertEquals(1L, long0);
}",1,
project,0,test0910,"public void test0910() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    URL uRL0 = MockURL.getFileExample();
    Charset charset0 = Charset.defaultCharset();
    // Undeclared exception!
    try {
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.net.URL"", e);
    }
}",0,
project,0,test1011,"public void test1011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    URL uRL0 = MockURL.getFtpExample();
    // Undeclared exception!
    try {
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'charset' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test1112,"public void test1112() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Charset charset0 = Charset.defaultCharset();
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    try {
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Could not find: www.someFakeButWellFormedURL.org
        //
        verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
    }
}",0,
project,0,test1213,"public void test1213() throws Throwable {
    Character character0 = new Character('W');
    Quote quote0 = Quote.MINIMAL;
    String[] stringArray0 = new String[6];
    CSVFormat cSVFormat0 = new CSVFormat(']', character0, quote0, character0, character0, false, false, ""Escape=<"", ""reader"", stringArray0, false);
    // Undeclared exception!
    try {
        CSVParser.parse(""No more CSV records available"", cSVFormat0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('W')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1314,"public void test1314() throws Throwable {
    // Undeclared exception!
    try {
        CSVParser.parse("""", (CSVFormat) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'format' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",1,
project,0,test1415,"public void test1415() throws Throwable {
    Character character0 = Character.valueOf('\'');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, """", """", stringArray0, false);
    try {
        CSVParser.parse(""'LRS;)z"", cSVFormat0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (startline 1) EOF reached before encapsulated token finished
        //
        verifyException(""org.apache.commons.csv.Lexer"", e);
    }
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    File file0 = MockFile.createTempFile(""qivQG~Ob6"", """");
    Character character0 = Character.valueOf('3');
    Quote quote0 = Quote.ALL;
    String[] stringArray0 = new String[4];
    CSVFormat cSVFormat0 = new CSVFormat('k', character0, quote0, character0, character0, true, true, ""qivQG~Ob6"", """", stringArray0, false);
    // Undeclared exception!
    try {
        CSVParser.parse(file0, cSVFormat0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('3')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1617,"public void test1617() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    // Undeclared exception!
    try {
        CSVParser.parse((File) null, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'file' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test1718,"public void test1718() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
    cSVParser0.close();
    try {
        cSVParser0.nextRecord();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedReader"", e);
    }
}",0,
project,0,test1819,"public void test1819() throws Throwable {
    Character character0 = Character.valueOf('4');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('z', character0, quote0, character1, character0, false, false, ""string"", """", stringArray0, false);
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    cSVParser0.close();
    try {
        cSVParser0.getRecords();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedReader"", e);
    }
}",0,
project,0,test1920,"public void test1920() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""g8MZtXg1E)E1@qzx{/t@{gJT,0?|"");
    FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    MockFile mockFile0 = new MockFile(""g8MZtXg1E)E1@qzx{"");
    File file0 = MockFile.createTempFile(""t@{gJT,"", ""?|"", (File) mockFile0);
    CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
    try {
        cSVParser0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Simulated IOException
        //
        verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
    }
}",0,
project,0,test2223,"public void test2223() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""V ykN~%xg'G"";
    stringArray0[1] = ""org.apache.commons.csv.csvrecord"";
    stringArray0[2] = ""string"";
    stringArray0[3] = ""@ms]N[hd"";
    stringArray0[4] = ""[qYO"";
    stringArray0[5] = ""IN;%,-Nk/E*ed=&`F "";
    stringArray0[7] = ""="";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    StringReader stringReader0 = new StringReader(""\r\n"");
    CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test2425,"public void test2425() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVParser cSVParser0 = CSVParser.parse(""nthi"", cSVFormat0);
    cSVParser0.close();
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    cSVParser0.forEach(consumer0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(1, cSVParser0.getRecordNumber())"
project,0,test2526,"public void test2526() throws Throwable {
    Character character0 = Character.valueOf(',');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, """", """", stringArray0, false);
    StringReader stringReader0 = new StringReader(""l"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test2627,"public void test2627() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""string"");
    CSVParser cSVParser0 = CSVParser.parse(""nthi"", cSVFormat1);
    cSVParser0.nextRecord();
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test2728,"public void test2728() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""http://www.someFakeButWellFormedURL.org/fooExample"");
    NetworkHandling.createRemoteTextFile(evoSuiteURL0, ""(line "");
    URL uRL0 = MockURL.getHttpExample();
    Charset charset0 = Charset.defaultCharset();
    CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test2829,"public void test2829() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVParser cSVParser0 = CSVParser.parse(""E0=S!pi@iL"", cSVFormat0);
    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    cSVParser0.forEach(consumer0);
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(1, cSVParser0.getRecordNumber())"
project,0,test2930,"public void test2930() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVParser cSVParser0 = CSVParser.parse(""nthi"", cSVFormat0);
    // Undeclared exception!
    try {
        cSVParser0.getHeaderMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.HashMap"", e);
    }
}",0,
project,0,test3031,"public void test3031() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVParser cSVParser0 = CSVParser.parse(""nthi"", cSVFormat0);
    long long0 = cSVParser0.getRecordNumber();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3132,"public void test3132() throws Throwable {
    Character character0 = Character.valueOf('4');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('z', character0, quote0, character1, character0, false, false, ""string"", """", stringArray0, false);
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    cSVParser0.getCurrentLineNumber();
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test3233,"public void test3233() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    MockFile mockFile0 = new MockFile(""E0=S!pi@iL"");
    try {
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test3334,"public void test3334() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    boolean boolean0 = cSVParser0.isClosed();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3435,"public void test3435() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
    assertNotNull(iterator0);
}",1,
