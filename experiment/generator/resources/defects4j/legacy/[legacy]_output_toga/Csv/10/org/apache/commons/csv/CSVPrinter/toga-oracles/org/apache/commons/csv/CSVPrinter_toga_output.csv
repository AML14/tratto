project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test010,"public void test010() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(30);
    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
    Object[] objectArray0 = new Object[3];
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords(objectArray0);
        fail(""Expecting exception: ReadOnlyBufferException"");
    } catch (ReadOnlyBufferException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.StringCharBuffer"", e);
    }
}",1,
project,0,test021,"public void test021() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
    CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords((Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",1,
project,0,test032,"public void test032() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""M%+A%RMx~,Ds"");
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
    cSVPrinter0.close();
    Object[] objectArray0 = new Object[2];
    try {
        cSVPrinter0.printRecords(objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
    }
}",1,
project,0,test053,"public void test053() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""$zqx9U"");
    CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test064,"public void test064() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1754);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",0,
project,0,test108,"public void test108() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    StringWriter stringWriter0 = new StringWriter(1295);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",1,
project,0,test119,"public void test119() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1754);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('+');
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
    // Undeclared exception!
    try {
        cSVPrinter0.printComment((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",0,
project,0,test1210,"public void test1210() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
    // Undeclared exception!
    try {
        cSVPrinter0.print(cSVFormat0);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",0,
project,0,test1311,"public void test1311() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""M%+A%RMx~,Ds"");
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
    outputStreamWriter0.close();
    CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
    try {
        cSVPrinter0.flush();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
    }
}",0,
project,0,test1412,"public void test1412() throws Throwable {
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""\"""");
    CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    CSVPrinter cSVPrinter0 = null;
    try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the delimiter cannot be the same ('c')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test2420,"public void test2420() throws Throwable {
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""/3kPo[q{N7q&"");
    CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('\\');
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
    Object[] objectArray0 = new Object[1];
    objectArray0[0] = (Object) mockPrintWriter0;
    cSVPrinter0.printRecords(objectArray0);
    assertEquals(1, objectArray0.length);
}",1,
project,0,test2521,"public void test2521() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('@');
    CharBuffer charBuffer0 = CharBuffer.allocate(101);
    CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
    cSVPrinter0.print(cSVFormat1);
    Object[] objectArray0 = new Object[4];
    objectArray0[0] = (Object) cSVFormat0;
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords(objectArray0);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",1,
project,0,test2622,"public void test2622() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""$zqx9U"");
    CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
    // Undeclared exception!
    try {
        cSVPrinter0.print(cSVFormat0);
        fail(""Expecting exception: ReadOnlyBufferException"");
    } catch (ReadOnlyBufferException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.StringCharBuffer"", e);
    }
}",0,
project,0,test2723,"public void test2723() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1754);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
    Object[] objectArray0 = new Object[3];
    objectArray0[0] = (Object) cSVFormat0;
    cSVPrinter0.printRecords(objectArray0);
    assertEquals(3, objectArray0.length);
}",0,
project,0,test2824,"public void test2824() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    Object[] objectArray0 = new Object[5];
    objectArray0[0] = (Object) cSVFormat0;
    String string0 = cSVFormat0.format(objectArray0);
    assertNotNull(string0);
}",0,
project,0,test3225,"public void test3225() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    MockFileWriter mockFileWriter0 = new MockFileWriter(""org.apache.commons.csv.CSVPrinter$1"", false);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
    Appendable appendable0 = cSVPrinter0.getOut();
    assertSame(mockFileWriter0, appendable0);
}",0,
