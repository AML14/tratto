/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 16:29:03 GMT 2023
 */
package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class PoissonDistributionImpl_ESTest extends PoissonDistributionImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(59.48167924, 59.48167924, 97);
        double double0 = poissonDistributionImpl0.cumulativeProbability(0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.030589580535888672);
        double double0 = poissonDistributionImpl0.probability(1548);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.030589580535888672);
        double double0 = poissonDistributionImpl0.probability(1548);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(4.9E-324, 4.9E-324, 32767);
        int int0 = poissonDistributionImpl0.sample();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(4.9E-324, 4.9E-324, 32767);
        int int0 = poissonDistributionImpl0.sample();
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1151.89, 1151.89);
        double double0 = poissonDistributionImpl0.normalApproximateProbability(0);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1151.89, 1151.89);
        double double0 = poissonDistributionImpl0.normalApproximateProbability(0);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(4.9E-324, 4.9E-324, 32767);
        poissonDistributionImpl0.normalApproximateProbability(0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2322.1383677551, (-1425.3620083599687));
        poissonDistributionImpl0.cumulativeProbability(95);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(5.650007086920087E-9, 5.650007086920087E-9, 0);
        poissonDistributionImpl0.cumulativeProbability(2396);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = null;
        poissonDistributionImpl0 = new PoissonDistributionImpl((-2289.0505632029985), (-36));
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = null;
        poissonDistributionImpl0 = new PoissonDistributionImpl(0.0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = null;
        poissonDistributionImpl0 = new PoissonDistributionImpl((-1067.2315), 0.0, 10000000);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        double double0 = poissonDistributionImpl0.cumulativeProbability((-603));
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        double double0 = poissonDistributionImpl0.cumulativeProbability((-603));
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl((double) 5775, 5775);
        double double0 = poissonDistributionImpl0.probability(5775);
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        double double0 = poissonDistributionImpl0.probability(0);
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(853.1);
        double double0 = poissonDistributionImpl0.probability((-278));
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(853.1);
        double double0 = poissonDistributionImpl0.probability((-278));
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = null;
        poissonDistributionImpl0 = new PoissonDistributionImpl((-278.599), (-278.599));
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        double double0 = poissonDistributionImpl0.normalApproximateProbability(1439);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        double double0 = poissonDistributionImpl0.normalApproximateProbability(1439);
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        int int0 = poissonDistributionImpl0.getDomainUpperBound(10000000);
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        int int0 = poissonDistributionImpl0.getDomainUpperBound(10000000);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        int int0 = poissonDistributionImpl0.sample();
        poissonDistributionImpl0.getMean();
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
        int int0 = poissonDistributionImpl0.sample();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(853.1);
        double double0 = poissonDistributionImpl0.getMean();
    }
}
