project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test230,"public void test230() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2041.233835653));
    GoalType goalType0 = GoalType.MINIMIZE;
    int int0 = 0;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, false, Double.POSITIVE_INFINITY, 0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    simplexTableau0.normalizeConstraints(linkedList0);
    double double0 = (-56.3216283894694);
    OpenMapRealVector openMapRealVector0 = null;
    try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optimization.linear.SimplexTableau"", e);
    }
}",0,
project,0,test251,"public void test251() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 0.0;
    double double0 = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1934.74176663;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 2112.1677119392566;
    doubleArray0[5] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0, (-1500));
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
    linkedList0.add(linearConstraint0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    int int0 = 3859;
    simplexTableau0.getBasicRow(3859);
    boolean boolean0 = true;
    double double1 = 1655.21305;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, boolean0, double1);
    simplexTableau1.isOptimal();
    simplexTableau1.getSolution();
    simplexTableau1.getNumObjectiveFunctions();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    Relationship relationship1 = Relationship.LEQ;
    LinearConstraint linearConstraint1 = null;
    try {
        linearConstraint1 = new LinearConstraint(doubleArray0, double0, relationship1, doubleArray0, doubleArray0[2]);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (3,859)
        //
        verifyException(""org.apache.commons.math3.linear.MatrixUtils"", e);
    }
}",0,
project,0,test352,"public void test352() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-741.0);
    doubleArray0[1] = (-2387.5755);
    doubleArray0[2] = 3.141592653589793;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 1235.2941803184;
    doubleArray0[5] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3466.844182332));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    boolean boolean0 = false;
    int int0 = 0;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1235.2941803184, 0);
    simplexTableau0.setEntry(4, 4, (-1059.0627017));
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MINIMIZE;
    double double0 = (-508.0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, boolean0, double0);
    simplexTableau0.getSolution();
    simplexTableau1.normalizeConstraints(list0);
    linkedList0.remove(int0);
    simplexTableau1.getRhsOffset();
    // Undeclared exception!
    try {
        simplexTableau0.getArtificialVariableOffset();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (4)
        //
        verifyException(""org.apache.commons.math3.linear.MatrixUtils"", e);
    }
}",0,
project,0,test553,"public void test553() throws Throwable {
    int int0 = (-880);
    int int1 = 2;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-880), 2);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    int int2 = (-859);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, (-859));
    // Undeclared exception!
    try {
        simplexTableau0.equals(openMapRealVector0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -878 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math3.linear.AbstractRealMatrix"", e);
    }
}",0,
project,0,test564,"public void test564() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = Double.NEGATIVE_INFINITY;
    doubleArray0[1] = 469.352;
    doubleArray0[2] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2049.027985503));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-127.1526));
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.getHeight();
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1408), Double.NEGATIVE_INFINITY);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    int int0 = 2;
    double double0 = 0.0;
    simplexTableau0.setEntry(int0, int0, double0);
    simplexTableau0.initializeColumnLabels();
    simplexTableau0.getSolution();
    simplexTableau0.getNumDecisionVariables();
    // Undeclared exception!
    try {
        simplexTableau0.dropPhase1Objective();
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.linear.OpenMapRealVector"", e);
    }
}",0,
project,0,test625,"public void test625() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1.0));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>(linkedList0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, false, 1.0E-12, 3);
    Collection<LinearConstraint> collection0 = null;
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (double) 1;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 1.0);
    linkedList1.offer(linearConstraint0);
    linearObjectiveFunction0.getValue(doubleArray0);
    openMapRealVector0.mapAdd((-1526.8747952501676));
    linearObjectiveFunction0.getValue(doubleArray0);
    Relationship relationship1 = Relationship.EQ;
    LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, 377.446993396333, relationship1, doubleArray0, (-3557.566494));
    linkedList0.add(linearConstraint1);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints((Collection<LinearConstraint>) null);
    linkedList0.add(linearConstraint1);
    boolean boolean0 = true;
    double double0 = (-1.0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, boolean0, double0);
    simplexTableau1.getSlackVariableOffset();
    simplexTableau0.dropPhase1Objective();
    // Undeclared exception!
    try {
        linearObjectiveFunction0.getValue(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optimization.linear.SimplexTableau"", e);
    }
}",0,
project,0,test696,"public void test696() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2324);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2324);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (double) 2324;
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = (double) 2324;
    doubleArray0[3] = 1.0E-12;
    Relationship relationship0 = Relationship.EQ;
    Relationship relationship1 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 1.0E-12, relationship1, doubleArray0, 1567.6957);
    openMapRealVector0.equals(linearConstraint0);
    LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship0, 0.0);
    linkedList0.add(linearConstraint1);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2324);
    int int0 = simplexTableau0.getNumArtificialVariables();
    simplexTableau0.equals(linkedList0);
    simplexTableau0.getHeight();
    int int1 = (-1);
    simplexTableau0.getBasicRow((-1));
    simplexTableau0.initializeColumnLabels();
    simplexTableau0.getBasicRow(int0);
    simplexTableau0.getData();
    // Undeclared exception!
    try {
        simplexTableau0.isOptimal();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (-1)
        //
        verifyException(""org.apache.commons.math3.linear.MatrixUtils"", e);
    }
}",0,
