project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test010,"public void test010() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-3));
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    doubleArray1[0] = (double) 30000;
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 3 != 1
        //
        verifyException(""org.apache.commons.math3.linear.ArrayRealVector"", e);
    }
}",0,
project,0,test021,"public void test021() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-3));
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 3 != 1
        //
        verifyException(""org.apache.commons.math3.linear.ArrayRealVector"", e);
    }
}",0,
project,0,test032,"public void test032() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    doubleArray0[0] = doubleArray1;
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 2628, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MINIMIZE;
    cMAESOptimizer0.optimize(1, microsphereInterpolatingFunction0, goalType0, doubleArray1);
    // Undeclared exception!
    try {
        cMAESOptimizer0.doOptimize();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (1) exceeded: evaluations
        //
        verifyException(""org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer"", e);
    }
}",0,
project,0,test043,"public void test043() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
    // Undeclared exception!
    try {
        cMAESOptimizer0.doOptimize();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer"", e);
    }
}",0,
project,0,test054,"public void test054() throws Throwable {
    Well44497a well44497a0 = new Well44497a();
    SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, (-2157.173657120076));
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(709, (double[]) null, 0, 709, true, (-961), 709, well44497a0, true, simplePointChecker0);
    assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
}",0,
project,0,test065,"public void test065() throws Throwable {
    double[] doubleArray0 = new double[0];
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, doubleArray0, 2, 2, true, 0, 2, (RandomGenerator) null, true, (ConvergenceChecker<PointValuePair>) null);
    assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
}",0,
project,0,test076,"public void test076() throws Throwable {
    Well19937a well19937a0 = new Well19937a();
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1796), (double[]) null, (-1796), (-1796), false, 0, 294, well19937a0, true);
    assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
}",0,
project,0,test087,"public void test087() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(10);
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    doubleArray0[0] = doubleArray1;
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
    assertNotNull(pointValuePair0);
}",0,
project,0,test108,"public void test108() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (double) 1187;
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1187, doubleArray0);
    double[][] doubleArray1 = new double[3][8];
    doubleArray1[0] = doubleArray0;
    doubleArray1[1] = doubleArray0;
    doubleArray1[2] = doubleArray0;
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, (UnitSphereRandomVectorGenerator) null);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        cMAESOptimizer0.optimize(0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 1,187 out of [0, 0] range
        //
        verifyException(""org.apache.commons.math3.optimization.direct.CMAESOptimizer"", e);
    }
}",0,
project,0,test119,"public void test119() throws Throwable {
    double[] doubleArray0 = new double[3];
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1187, doubleArray0);
    double[][] doubleArray1 = new double[3][8];
    doubleArray1[0] = doubleArray0;
    doubleArray1[1] = doubleArray0;
    doubleArray1[2] = doubleArray0;
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, (UnitSphereRandomVectorGenerator) null);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        cMAESOptimizer0.optimize(0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (0) exceeded: evaluations
        //
        verifyException(""org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer"", e);
    }
}",0,
project,0,test1210,"public void test1210() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    doubleArray0[0] = doubleArray1;
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MINIMIZE;
    PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
    PointValuePair pointValuePair1 = cMAESOptimizer0.doOptimize();
    assertFalse(pointValuePair1.equals((Object) pointValuePair0));
}",0,
