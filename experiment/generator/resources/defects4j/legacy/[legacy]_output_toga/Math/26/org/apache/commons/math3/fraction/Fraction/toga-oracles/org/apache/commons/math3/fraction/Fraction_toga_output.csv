project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.THREE_QUARTERS.divide(fraction1);
    String string0 = fraction2.toString();
    assertEquals(""-3 / 4"", string0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.divide((-413));
    boolean boolean0 = fraction2.equals(fraction1);
    assertFalse(fraction1.equals((Object) fraction2));
}",0,
project,0,test012,"public void test012() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.divide((-413));
    boolean boolean0 = fraction2.equals(fraction1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test013,"public void test013() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.divide((-413));
    boolean boolean0 = fraction2.equals(fraction1);
    assertEquals((-0.0012106537530266344), fraction2.doubleValue(), 0.01);
}",0,
project,0,test014,"public void test014() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.divide((-413));
    boolean boolean0 = fraction2.equals(fraction1);
    assertEquals((-1), fraction2.getNumerator());
}",0,
project,0,test025,"public void test025() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test026,"public void test026() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(2, fraction1.getDenominator());
}",1,
project,0,test027,"public void test027() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(1.5F, fraction1.floatValue(), 0.01F);
}",1,
project,0,test038,"public void test038() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = new Fraction(2543.70070575406, (-970));
    Fraction fraction2 = fraction0.subtract(fraction1);
    assertEquals((-2542.6666666666665), fraction2.doubleValue(), 0.01);
}",0,
project,0,test039,"public void test039() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = new Fraction(2543.70070575406, (-970));
    Fraction fraction2 = fraction0.subtract(fraction1);
    assertEquals((-7628), fraction2.getNumerator());
}",0,
project,0,test0410,"public void test0410() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(fraction0);
    assertEquals((-2), fraction1.getNumerator());
}",1,
project,0,test0411,"public void test0411() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(fraction0);
    assertEquals(5, fraction1.getDenominator());
}",1,
project,0,test0512,"public void test0512() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO_THIRDS.negate();
    Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(fraction1);
    assertEquals(1.1666666F, fraction2.floatValue(), 0.01F);
}",1,
project,0,test0513,"public void test0513() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO_THIRDS.negate();
    Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(fraction1);
    assertEquals(3, fraction1.getDenominator());
}",1,
project,0,test0614,"public void test0614() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.subtract(0);
    assertEquals(1, fraction2.getDenominator());
}",1,
project,0,test0615,"public void test0615() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.subtract(0);
    assertEquals(0.0, fraction2.doubleValue(), 0.01);
}",0,
project,0,test0716,"public void test0716() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.subtract(0);
    assertTrue(fraction1.equals((Object) fraction0));
}",0,
project,0,test0817,"public void test0817() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
    assertEquals((-1L), fraction1.longValue());
}",0,"assertEquals(0, fraction1.longValue())"
project,0,test0818,"public void test0818() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
    assertEquals(1, fraction1.getDenominator());
}",0,
project,0,test0919,"public void test0919() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    double double0 = fraction1.percentageValue();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test0920,"public void test0920() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    double double0 = fraction1.percentageValue();
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}",0,
project,0,test1021,"public void test1021() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    double double0 = fraction0.percentageValue();
    assertEquals(80.0, double0, 0.01);
}",0,
project,0,test1122,"public void test1122() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.negate();
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test1123,"public void test1123() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.negate();
    assertEquals(0.0F, fraction2.floatValue(), 0.01F);
}",1,
project,0,test1124,"public void test1124() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.negate();
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}",0,
project,0,test1225,"public void test1225() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.negate();
    assertEquals(1, fraction1.getNumerator());
}",1,
project,0,test1226,"public void test1226() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.negate();
    assertEquals(1L, fraction1.longValue());
}",0,"assertEquals(1, fraction1.longValue())"
project,0,test1327,"public void test1327() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.TWO.negate();
    assertEquals((-200.0), fraction1.percentageValue(), 0.01);
}",0,
project,0,test1328,"public void test1328() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.TWO.negate();
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test1429,"public void test1429() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.TWO_QUARTERS.add(fraction1);
    Fraction fraction3 = fraction0.negate();
    Fraction fraction4 = fraction3.multiply(fraction2);
    assertEquals((-100.0), fraction4.percentageValue(), 0.01);
}",0,
project,0,test1430,"public void test1430() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.TWO_QUARTERS.add(fraction1);
    Fraction fraction3 = fraction0.negate();
    Fraction fraction4 = fraction3.multiply(fraction2);
    assertEquals(3, fraction3.getDenominator());
}",1,
project,0,test1531,"public void test1531() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction1 = fraction0.TWO_FIFTHS.multiply(fraction0);
    assertEquals((-1), fraction0.getNumerator());
}",0,"assertEquals(1, fraction0.getNumerator())"
project,0,test1532,"public void test1532() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction1 = fraction0.TWO_FIFTHS.multiply(fraction0);
    assertEquals((-0.1520912547528517), fraction1.percentageValue(), 0.01);
}",0,
project,0,test1633,"public void test1633() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.ONE_HALF.add(998);
    Fraction fraction2 = fraction0.ONE_FIFTH.multiply(fraction1);
    assertEquals(2, fraction1.getDenominator());
}",1,
project,0,test1634,"public void test1634() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.ONE_HALF.add(998);
    Fraction fraction2 = fraction0.ONE_FIFTH.multiply(fraction1);
    assertEquals(19970.0, fraction2.percentageValue(), 0.01);
}",0,
project,0,test1735,"public void test1735() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = Fraction.TWO;
    Fraction fraction2 = fraction0.TWO_THIRDS.multiply(fraction1);
    long long0 = fraction2.longValue();
    assertEquals(1.3333334F, fraction2.floatValue(), 0.01F);
}",0,
project,0,test1736,"public void test1736() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = Fraction.TWO;
    Fraction fraction2 = fraction0.TWO_THIRDS.multiply(fraction1);
    long long0 = fraction2.longValue();
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1837,"public void test1837() throws Throwable {
    Fraction fraction0 = new Fraction((-1752.3966), (-1));
    long long0 = fraction0.longValue();
    assertEquals((-1753L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1938,"public void test1938() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    int int0 = fraction0.intValue();
    assertEquals(80.0, fraction0.percentageValue(), 0.01);
}",0,
project,0,test1939,"public void test1939() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    int int0 = fraction0.intValue();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2040,"public void test2040() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    int int0 = fraction0.intValue();
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test2141,"public void test2141() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(3, (-1));
    assertEquals(1, fraction0.getDenominator());
}",0,"assertEquals(1, fraction0.getDenominator())"
project,0,test2243,"public void test2243() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(4646, 31);
    assertEquals(14987.09677419355, fraction0.percentageValue(), 0.01);
}",0,
project,0,test2244,"public void test2244() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(4646, 31);
    assertEquals(31, fraction0.getDenominator());
}",0,
project,0,test2345,"public void test2345() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    int int0 = fraction0.getNumerator();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2446,"public void test2446() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    int int0 = fraction0.getNumerator();
    assertEquals(4, int0);
}",0,
project,0,test2547,"public void test2547() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.ZERO.abs();
    float float0 = fraction1.floatValue();
    assertEquals(0.0F, float0, 0.01F);
}",1,
project,0,test2548,"public void test2548() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.ZERO.abs();
    float float0 = fraction1.floatValue();
    assertEquals(2.0F, fraction0.floatValue(), 0.01F);
}",1,
project,0,test2649,"public void test2649() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.divide((-1894));
    float float0 = fraction1.floatValue();
    assertEquals((-5.279831E-4F), float0, 0.01F);
}",1,
project,0,test2650,"public void test2650() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.divide((-1894));
    float float0 = fraction1.floatValue();
    assertEquals(1894, fraction1.getDenominator());
}",1,
project,0,test2751,"public void test2751() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    double double0 = fraction1.doubleValue();
    assertEquals(0.8F, fraction0.floatValue(), 0.01F);
}",0,
project,0,test2752,"public void test2752() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    double double0 = fraction1.doubleValue();
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test2753,"public void test2753() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    double double0 = fraction1.doubleValue();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test2854,"public void test2854() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    double double0 = fraction0.doubleValue();
    assertEquals(0.8, double0, 0.01);
}",0,
project,0,test2955,"public void test2955() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction2 = fraction0.divide(fraction1);
    assertEquals(1, fraction2.getDenominator());
}",1,
project,0,test2956,"public void test2956() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction2 = fraction0.divide(fraction1);
    assertEquals((-263), fraction2.getNumerator());
}",0,"assertEquals(0, fraction2.getNumerator())"
project,0,test2957,"public void test2957() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction2 = fraction0.divide(fraction1);
    assertEquals((-0.38022813688212925), fraction1.percentageValue(), 0.01);
}",0,
project,0,test3058,"public void test3058() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.ONE_HALF.divide(fraction0);
    assertEquals(2.0, fraction1.doubleValue(), 0.01);
}",0,
project,0,test3159,"public void test3159() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.subtract((-3737));
    Fraction fraction2 = fraction1.divide(fraction0);
    assertEquals(1, fraction2.getDenominator());
}",1,
project,0,test3160,"public void test3160() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.subtract((-3737));
    Fraction fraction2 = fraction1.divide(fraction0);
    assertEquals(373800.0, fraction2.percentageValue(), 0.01);
}",0,
project,0,test3261,"public void test3261() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.ZERO.divide(508);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test3262,"public void test3262() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.ZERO.divide(508);
    assertEquals(0, fraction1.intValue());
}",0,"assertEquals(0, fraction1.intValue())"
project,0,test3363,"public void test3363() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.divide(2);
    assertEquals(100.0, fraction1.percentageValue(), 0.01);
}",0,
project,0,test3364,"public void test3364() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.divide(2);
    assertEquals(1, fraction1.getDenominator());
}",0,
project,0,test3465,"public void test3465() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(998);
    Fraction fraction2 = fraction1.divide(118);
    assertEquals((-1496), fraction2.getNumerator());
}",0,"assertEquals(0, fraction2.getNumerator())"
project,0,test3466,"public void test3466() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(998);
    Fraction fraction2 = fraction1.divide(118);
    assertEquals((-8.451977401129943), fraction2.doubleValue(), 0.01);
}",0,
project,0,test3467,"public void test3467() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(998);
    Fraction fraction2 = fraction1.divide(118);
    assertEquals((-997.3333333333334), fraction1.doubleValue(), 0.01);
}",0,
project,0,test3568,"public void test3568() throws Throwable {
    Fraction fraction0 = new Fraction(0);
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertSame(fraction1, fraction0);
}",1,
project,0,test3569,"public void test3569() throws Throwable {
    Fraction fraction0 = new Fraction(0);
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}",0,
project,0,test3570,"public void test3570() throws Throwable {
    Fraction fraction0 = new Fraction(0);
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertEquals(1, fraction0.getDenominator());
}",0,
project,0,test3772,"public void test3772() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = fraction0.ZERO.add(0);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test3773,"public void test3773() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = fraction0.ZERO.add(0);
    assertEquals(0.0F, fraction1.floatValue(), 0.01F);
}",1,
project,0,test3875,"public void test3875() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.MINUS_ONE.add(0);
    assertEquals((-1), fraction1.getNumerator());
}",1,
project,0,test3976,"public void test3976() throws Throwable {
    Fraction fraction0 = new Fraction(Integer.MAX_VALUE, 1025);
    Fraction fraction1 = fraction0.abs();
    assertEquals(2.0951059970731708E8, fraction1.percentageValue(), 0.01);
}",0,
project,0,test3977,"public void test3977() throws Throwable {
    Fraction fraction0 = new Fraction(Integer.MAX_VALUE, 1025);
    Fraction fraction1 = fraction0.abs();
    assertEquals(2095106.0F, fraction0.floatValue(), 0.01F);
}",1,
project,0,test4078,"public void test4078() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.abs();
    assertEquals(1, fraction1.intValue());
}",0,
project,0,test4079,"public void test4079() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.abs();
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test4180,"public void test4180() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    // Undeclared exception!
    try {
        fraction0.ONE_FIFTH.subtract((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test4281,"public void test4281() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    // Undeclared exception!
    try {
        fraction0.ZERO.reciprocal();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test4382,"public void test4382() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = fraction0.add(1870);
    Fraction fraction2 = fraction1.multiply(1870);
    // Undeclared exception!
    try {
        fraction1.multiply(fraction2);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // arithmetic exception
        //
        verifyException(""org.apache.commons.math3.util.ArithmeticUtils"", e);
    }
}",1,
project,0,test4483,"public void test4483() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(4, (-2546));
    // Undeclared exception!
    try {
        fraction0.compareTo((Fraction) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test4584,"public void test4584() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((-8.0E298));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert -80,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/-1)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test4685,"public void test4685() throws Throwable {
    Fraction fraction0 = new Fraction(1025, 1025);
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}",0,
project,0,test4686,"public void test4686() throws Throwable {
    Fraction fraction0 = new Fraction(1025, 1025);
    assertEquals(1, fraction0.getNumerator());
}",0,
project,0,test4787,"public void test4787() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(156, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 156/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test4888,"public void test4888() throws Throwable {
    Fraction fraction0 = new Fraction(1519, (-533));
    assertEquals((-2.8499062F), fraction0.floatValue(), 0.01F);
}",0,
project,0,test4889,"public void test4889() throws Throwable {
    Fraction fraction0 = new Fraction(1519, (-533));
    assertEquals(533, fraction0.getDenominator());
}",1,
project,0,test4990,"public void test4990() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(1, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test5091,"public void test5091() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    double double0 = fraction0.doubleValue();
    assertEquals((-112586), fraction0.getNumerator());
}",1,
project,0,test5092,"public void test5092() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    double double0 = fraction0.doubleValue();
    assertEquals((-248.53421633554083), double0, 0.01);
}",0,
project,0,test5193,"public void test5193() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    String string0 = fraction0.THREE_QUARTERS.toString();
    assertEquals(""3 / 4"", string0);
}",1,
project,0,test5194,"public void test5194() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    String string0 = fraction0.THREE_QUARTERS.toString();
    assertEquals((-4313L), fraction0.longValue());
}",0,
project,0,test5295,"public void test5295() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1204));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-1,204, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test5396,"public void test5396() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(371, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 371/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test5497,"public void test5497() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(0, 1);
    assertEquals(0.0, fraction0.percentageValue(), 0.01);
}",0,
project,0,test5598,"public void test5598() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction((-1), 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction -1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test5699,"public void test5699() throws Throwable {
    Fraction fraction0 = new Fraction(14.101419448852539, 25);
    Fraction fraction1 = Fraction.ZERO;
    // Undeclared exception!
    try {
        fraction0.divide(fraction1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // the fraction to divide by must not be zero: 0/1
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test57100,"public void test57100() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(2711, 2711);
    // Undeclared exception!
    try {
        fraction0.ZERO.divide((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test58101,"public void test58101() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ZERO.multiply(105);
    Fraction fraction2 = fraction1.FOUR_FIFTHS.multiply(fraction1);
    assertTrue(fraction2.equals((Object) fraction1));
}",0,
project,0,test58102,"public void test58102() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ZERO.multiply(105);
    Fraction fraction2 = fraction1.FOUR_FIFTHS.multiply(fraction1);
    assertEquals(0L, fraction1.longValue());
}",0,
project,0,test59103,"public void test59103() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    // Undeclared exception!
    try {
        fraction0.multiply((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test60104,"public void test60104() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = Fraction.getReducedFraction(156, Integer.MIN_VALUE);
    Fraction fraction2 = fraction0.TWO_FIFTHS.add(fraction0);
    // Undeclared exception!
    try {
        fraction2.add(fraction1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow, numerator too large after multiply: 2,415,918,909
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test61105,"public void test61105() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.add(fraction0);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test61106,"public void test61106() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.add(fraction0);
    assertEquals(1.0F, fraction1.floatValue(), 0.01F);
}",1,
project,0,test62107,"public void test62107() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
    assertEquals(249.03421F, fraction1.floatValue(), 0.01F);
}",0,
project,0,test63108,"public void test63108() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
    Fraction fraction2 = fraction0.ONE_HALF.subtract(fraction1);
    assertEquals(0.5, fraction2.doubleValue(), 0.01);
}",0,
project,0,test64109,"public void test64109() throws Throwable {
    Fraction fraction0 = new Fraction(1);
    // Undeclared exception!
    try {
        fraction0.add((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test65110,"public void test65110() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ZERO.multiply(105);
    Fraction fraction2 = fraction1.add(Integer.MIN_VALUE);
    // Undeclared exception!
    try {
        fraction1.subtract(fraction2);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/1, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test66111,"public void test66111() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.TWO_QUARTERS;
    boolean boolean0 = fraction0.equals(fraction1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test67112,"public void test67112() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertFalse(fraction1.equals((Object) fraction0));
}",0,
project,0,test67113,"public void test67113() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertFalse(fraction0.equals((Object) fraction1));
}",0,
project,0,test67114,"public void test67114() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertEquals(33.33333333333333, fraction2.percentageValue(), 0.01);
}",0,
project,0,test67115,"public void test67115() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test67116,"public void test67116() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertEquals(1, fraction2.getNumerator());
}",1,
project,0,test68117,"public void test68117() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Object object0 = new Object();
    boolean boolean0 = fraction0.equals(object0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test69118,"public void test69118() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    boolean boolean0 = fraction0.equals(fraction0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test69119,"public void test69119() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    boolean boolean0 = fraction0.equals(fraction0);
    assertEquals((-112586), fraction0.getNumerator());
}",1,
project,0,test70120,"public void test70120() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    fraction0.equals(fraction1);
    assertEquals(453, fraction0.getDenominator());
}",1,
project,0,test70121,"public void test70121() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    fraction0.equals(fraction1);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test70122,"public void test70122() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    fraction0.equals(fraction1);
    assertEquals(1.0, fraction1.doubleValue(), 0.01);
}",0,
project,0,test71123,"public void test71123() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    int int0 = fraction1.compareTo(fraction0);
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test71124,"public void test71124() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    int int0 = fraction1.compareTo(fraction0);
    assertEquals(1.0F, fraction1.floatValue(), 0.01F);
}",0,
project,0,test72125,"public void test72125() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = new Fraction(216);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test72126,"public void test72126() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = new Fraction(216);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(21600.0, fraction1.percentageValue(), 0.01);
}",0,
project,0,test73127,"public void test73127() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    int int0 = fraction0.compareTo(fraction0);
    assertEquals(0, int0);
}",0,
project,0,test73128,"public void test73128() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    int int0 = fraction0.compareTo(fraction0);
    assertEquals(453, fraction0.getDenominator());
}",1,
project,0,test74129,"public void test74129() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.abs();
    assertEquals(431377.0392749245, fraction1.percentageValue(), 0.01);
}",0,
project,0,test75130,"public void test75130() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-2283));
    assertEquals(1, fraction1.getDenominator());
}",0,"assertEquals(0, fraction1.getDenominator())"
project,0,test75131,"public void test75131() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-2283));
    assertEquals((-1427858), fraction0.getNumerator());
}",0,"assertEquals(1, fraction0.getNumerator())"
project,0,test75132,"public void test75132() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-2283));
    assertEquals((-761.0), fraction1.doubleValue(), 0.01);
}",0,
project,0,test76133,"public void test76133() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    // Undeclared exception!
    try {
        fraction0.ONE_THIRD.divide(Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 1/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test77134,"public void test77134() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test78135,"public void test78135() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((-3708.46337892569), 0.0032307692306403624, (-1));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Unable to convert -3,708.463 to fraction after -1 iterations
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test79136,"public void test79136() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(100.0, 4);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 100 to fraction (-99/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test80137,"public void test80137() throws Throwable {
    Fraction fraction0 = new Fraction(4173, 4173, 206);
    assertEquals(417300.0, fraction0.percentageValue(), 0.01);
}",0,
project,0,test81138,"public void test81138() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    double double0 = fraction0.percentageValue();
    assertEquals((-24853.421633554084), double0, 0.01);
}",0,
project,0,test81139,"public void test81139() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    double double0 = fraction0.percentageValue();
    assertEquals((-112586), fraction0.getNumerator());
}",0,"assertEquals(0, fraction0.getNumerator())"
project,0,test82140,"public void test82140() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    float float0 = fraction0.floatValue();
    assertEquals(0.6666667F, float0, 0.01F);
}",1,
project,0,test83141,"public void test83141() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    int int0 = fraction0.getNumerator();
    assertEquals((-112586), int0);
}",1,
project,0,test85142,"public void test85142() throws Throwable {
    Fraction fraction0 = new Fraction(1);
    int int0 = fraction0.intValue();
    assertEquals(1, int0);
}",0,
project,0,test85143,"public void test85143() throws Throwable {
    Fraction fraction0 = new Fraction(1);
    int int0 = fraction0.intValue();
    assertEquals(1, fraction0.getDenominator());
}",1,
project,0,test86144,"public void test86144() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    long long0 = fraction0.longValue();
    assertEquals(0.5F, fraction0.floatValue(), 0.01F);
}",1,
project,0,test86145,"public void test86145() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    long long0 = fraction0.longValue();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test87146,"public void test87146() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.reciprocal();
    assertEquals((-2.3181576E-4F), fraction1.floatValue(), 0.01F);
}",1,
project,0,test87147,"public void test87147() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.reciprocal();
    assertEquals((-331), fraction1.getNumerator());
}",0,"assertEquals(0, fraction1.getNumerator())"
project,0,test88148,"public void test88148() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    FractionField fractionField0 = fraction0.TWO_THIRDS.getField();
    assertNotNull(fractionField0);
}",0,
project,0,test89149,"public void test89149() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test89150,"public void test89150() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}",0,
project,0,test90151,"public void test90151() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    int int0 = fraction0.getDenominator();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
