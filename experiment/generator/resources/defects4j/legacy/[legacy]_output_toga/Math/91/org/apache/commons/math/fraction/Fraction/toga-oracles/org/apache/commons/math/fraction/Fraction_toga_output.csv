project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Fraction fraction0 = new Fraction(0.0);
    // Undeclared exception!
    try {
        fraction0.divide(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // the fraction to divide by must not be zero: 0/1
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test011,"public void test011() throws Throwable {
    Fraction fraction0 = new Fraction(1797.67598);
    Fraction fraction1 = fraction0.divide(fraction0);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test012,"public void test012() throws Throwable {
    Fraction fraction0 = new Fraction(1797.67598);
    Fraction fraction1 = fraction0.divide(fraction0);
    assertEquals(1.0F, fraction1.floatValue(), 0.01F);
}",0,
project,0,test023,"public void test023() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    boolean boolean0 = fraction0.equals(fraction1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test024,"public void test024() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    boolean boolean0 = fraction0.equals(fraction1);
    assertFalse(fraction1.equals((Object) fraction0));
}",0,
project,0,test025,"public void test025() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(0.5, fraction1.doubleValue(), 0.01);
}",0,
project,0,test026,"public void test026() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(1, fraction1.getNumerator());
}",0,"assertEquals(0, fraction1.getNumerator())"
project,0,test037,"public void test037() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(1, 1);
    Fraction fraction1 = fraction0.negate();
    boolean boolean0 = fraction0.equals(fraction1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test038,"public void test038() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(1, 1);
    Fraction fraction1 = fraction0.negate();
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals((-1), fraction1.getNumerator());
}",0,
project,0,test039,"public void test039() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(1, 1);
    Fraction fraction1 = fraction0.negate();
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(1, fraction0.intValue());
}",1,
project,0,test0410,"public void test0410() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN);
    Fraction fraction1 = Fraction.ZERO;
    Fraction fraction2 = fraction0.subtract(fraction1);
    assertEquals(1, fraction2.getNumerator());
}",0,"assertEquals(0, fraction2.getNumerator())"
project,0,test0512,"public void test0512() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
    Fraction fraction1 = fraction0.reciprocal();
    assertEquals(1, fraction0.getNumerator());
}",0,"assertEquals(1, fraction0.getNumerator())"
project,0,test0513,"public void test0513() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
    Fraction fraction1 = fraction0.reciprocal();
    assertEquals(0.0, fraction1.doubleValue(), 0.01);
}",0,
project,0,test0614,"public void test0614() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.reciprocal();
    assertTrue(fraction1.equals((Object) fraction0));
}",0,
project,0,test0715,"public void test0715() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    long long0 = fraction1.longValue();
    assertEquals(0.5, fraction1.doubleValue(), 0.01);
}",0,
project,0,test0716,"public void test0716() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    long long0 = fraction1.longValue();
    assertEquals(2, fraction1.getDenominator());
}",0,
project,0,test0717,"public void test0717() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    long long0 = fraction1.longValue();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test0818,"public void test0818() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    long long0 = fraction0.longValue();
    assertEquals((-1L), long0);
}",0,"assertEquals(1, long0)"
project,0,test0919,"public void test0919() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    int int0 = fraction0.intValue();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test1020,"public void test1020() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    int int0 = fraction0.intValue();
    assertEquals((-1), int0);
}",0,"assertEquals(1, int0)"
project,0,test1121,"public void test1121() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    int int0 = fraction0.getNumerator();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1222,"public void test1222() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.negate();
    int int0 = fraction1.getNumerator();
    assertEquals((-2), int0);
}",0,"assertEquals(1, int0)"
project,0,test1223,"public void test1223() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.negate();
    int int0 = fraction1.getNumerator();
    assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
}",0,
project,0,test1324,"public void test1324() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    int int0 = fraction0.getDenominator();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test1425,"public void test1425() throws Throwable {
    Fraction fraction0 = new Fraction(0.0, 2079.4, 0);
    float float0 = fraction0.floatValue();
    assertEquals(0.0F, float0, 0.01F);
}",0,
project,0,test1526,"public void test1526() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.abs();
    float float0 = fraction1.floatValue();
    assertEquals(1.0F, float0, 0.01F);
}",0,
project,0,test1527,"public void test1527() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.abs();
    float float0 = fraction1.floatValue();
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test1628,"public void test1628() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    double double0 = fraction0.doubleValue();
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test1729,"public void test1729() throws Throwable {
    Fraction fraction0 = new Fraction(9, (-922));
    double double0 = fraction0.doubleValue();
    assertEquals(922, fraction0.getDenominator());
}",1,
project,0,test1730,"public void test1730() throws Throwable {
    Fraction fraction0 = new Fraction(9, (-922));
    double double0 = fraction0.doubleValue();
    assertEquals((-0.009761388286334056), double0, 0.01);
}",0,
project,0,test1831,"public void test1831() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.TWO.divide(fraction0);
    assertEquals((-2), fraction1.getNumerator());
}",1,
project,0,test1932,"public void test1932() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN);
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertEquals(1, fraction0.getNumerator());
}",0,"assertEquals(1, fraction0.getNumerator())"
project,0,test1933,"public void test1933() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN);
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertEquals(Integer.MAX_VALUE, fraction1.intValue());
}",0,"assertEquals(0, fraction1.intValue())"
project,0,test2034,"public void test2034() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN);
    Fraction fraction1 = fraction0.abs();
    assertEquals(Integer.MAX_VALUE, fraction1.intValue());
}",0,"assertEquals(0, fraction1.intValue())"
project,0,test2035,"public void test2035() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN);
    Fraction fraction1 = fraction0.abs();
    assertEquals(1, fraction1.getNumerator());
}",0,"assertEquals(0, fraction1.getNumerator())"
project,0,test2136,"public void test2136() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1073741824), 5);
    Fraction fraction1 = fraction0.abs();
    assertEquals(2.147483648E8, fraction1.doubleValue(), 0.01);
}",0,
project,0,test2137,"public void test2137() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1073741824), 5);
    Fraction fraction1 = fraction0.abs();
    assertEquals((-1073741824), fraction0.getNumerator());
}",1,
project,0,test2238,"public void test2238() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN);
    // Undeclared exception!
    try {
        fraction0.subtract(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // / by zero
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",1,
project,0,test2339,"public void test2339() throws Throwable {
    Fraction fraction0 = new Fraction((-2147483647), 97);
    // Undeclared exception!
    try {
        fraction0.ONE.subtract(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: subtract
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test2440,"public void test2440() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.subtract(fraction0);
    // Undeclared exception!
    try {
        fraction1.reciprocal();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test2541,"public void test2541() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(613654404, (-3857));
    // Undeclared exception!
    try {
        fraction0.multiply(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test2642,"public void test2642() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = new Fraction((-2032.329579254536));
    Fraction fraction2 = fraction0.subtract(fraction1);
    Fraction fraction3 = fraction0.ONE.divide(fraction1);
    // Undeclared exception!
    try {
        fraction3.divide(fraction2);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test2743,"public void test2743() throws Throwable {
    Fraction fraction0 = new Fraction((-557.952506913556), (-1473));
    // Undeclared exception!
    try {
        fraction0.compareTo((Fraction) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",0,
project,0,test2844,"public void test2844() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN);
    Fraction fraction1 = Fraction.ONE;
    // Undeclared exception!
    try {
        fraction0.add(fraction1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test2945,"public void test2945() throws Throwable {
    Fraction fraction0 = new Fraction(569.819967);
    // Undeclared exception!
    try {
        fraction0.add((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fraction must not be null
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",1,
project,0,test3046,"public void test3046() throws Throwable {
    Fraction fraction0 = new Fraction(2088600, 1);
    Fraction fraction1 = fraction0.reciprocal();
    // Undeclared exception!
    try {
        fraction1.add(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test3147,"public void test3147() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(1, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test3248,"public void test3248() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
    assertEquals(0L, fraction1.longValue());
}",0,"assertEquals(0, fraction1.longValue())"
project,0,test3349,"public void test3349() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 55);
    // Undeclared exception!
    try {
        fraction0.negate();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/55, cannot negate
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test3450,"public void test3450() throws Throwable {
    Fraction fraction0 = new Fraction((-261), (-261));
    assertEquals(1.0, fraction0.doubleValue(), 0.01);
}",0,
project,0,test3451,"public void test3451() throws Throwable {
    Fraction fraction0 = new Fraction((-261), (-261));
    assertEquals(1, fraction0.getNumerator());
}",0,"assertEquals(1, fraction0.getNumerator())"
project,0,test3552,"public void test3552() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(185, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 185/0
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test3653,"public void test3653() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
    int int0 = fraction0.getDenominator();
    assertEquals(Float.POSITIVE_INFINITY, fraction0.floatValue(), 0.01F);
}",0,
project,0,test3654,"public void test3654() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
    int int0 = fraction0.getDenominator();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test3755,"public void test3755() throws Throwable {
    Fraction fraction0 = new Fraction(0.0);
    double double0 = fraction0.doubleValue();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test3856,"public void test3856() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
    int int0 = fraction0.getNumerator();
    assertEquals(0, fraction0.getDenominator());
}",0,
project,0,test3857,"public void test3857() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
    int int0 = fraction0.getNumerator();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test3958,"public void test3958() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2114));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-2,114, cannot negate
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test4059,"public void test4059() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction((-221), Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -221/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test4160,"public void test4160() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-3468), Integer.MIN_VALUE);
    assertEquals(1.6149133443832397E-6, fraction0.doubleValue(), 0.01);
}",0,
project,0,test4161,"public void test4161() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-3468), Integer.MIN_VALUE);
    assertEquals(536870912, fraction0.getDenominator());
}",0,"assertEquals(0, fraction0.getDenominator())"
project,0,test4262,"public void test4262() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(0, 2);
    assertEquals(0.0F, fraction0.floatValue(), 0.01F);
}",0,
project,0,test4363,"public void test4363() throws Throwable {
    Fraction fraction0 = new Fraction(Double.NaN);
    // Undeclared exception!
    try {
        fraction0.ONE.multiply(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test4464,"public void test4464() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.ZERO.abs();
    // Undeclared exception!
    try {
        fraction0.MINUS_ONE.divide(fraction1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // the fraction to divide by must not be zero: 0/1
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test4565,"public void test4565() throws Throwable {
    Fraction fraction0 = new Fraction(473.4698288);
    // Undeclared exception!
    try {
        fraction0.ONE.divide((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fraction must not be null
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",1,
project,0,test4666,"public void test4666() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(613654404, (-3857));
    Fraction fraction1 = fraction0.negate();
    Fraction fraction2 = fraction0.add(fraction1);
    Fraction fraction3 = fraction0.multiply(fraction2);
    assertEquals(0.0, fraction2.doubleValue(), 0.01);
}",1,
project,0,test4667,"public void test4667() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(613654404, (-3857));
    Fraction fraction1 = fraction0.negate();
    Fraction fraction2 = fraction0.add(fraction1);
    Fraction fraction3 = fraction0.multiply(fraction2);
    assertEquals((-613654404), fraction0.getNumerator());
}",0,"assertEquals(1, fraction0.getNumerator())"
project,0,test4668,"public void test4668() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(613654404, (-3857));
    Fraction fraction1 = fraction0.negate();
    Fraction fraction2 = fraction0.add(fraction1);
    Fraction fraction3 = fraction0.multiply(fraction2);
    assertEquals(0.0, fraction3.doubleValue(), 0.01);
}",1,
project,0,test4769,"public void test4769() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    assertEquals(0.0F, fraction1.floatValue(), 0.01F);
}",0,
project,0,test4871,"public void test4871() throws Throwable {
    Fraction fraction0 = new Fraction(1.0);
    // Undeclared exception!
    try {
        fraction0.MINUS_ONE.multiply((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fraction must not be null
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",1,
project,0,test4972,"public void test4972() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.ONE.multiply(fraction0);
    assertEquals((-2090.0), fraction1.doubleValue(), 0.01);
}",1,
project,0,test5073,"public void test5073() throws Throwable {
    Fraction fraction0 = new Fraction((-1994091957), 100);
    Fraction fraction1 = new Fraction((-379.15983));
    // Undeclared exception!
    try {
        fraction0.subtract(fraction1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow, numerator too large after multiply: -60,818,648,251
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test5174,"public void test5174() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    assertEquals((-2090.0), fraction0.doubleValue(), 0.01);
}",0,
project,0,test5175,"public void test5175() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = new Fraction((-2089.562449831285));
    Fraction fraction2 = fraction0.MINUS_ONE.add(fraction1);
    Fraction fraction3 = fraction2.add(fraction1);
    assertEquals((-5187535), fraction3.getNumerator());
}",1,
project,0,test5176,"public void test5176() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = new Fraction((-2089.562449831285));
    Fraction fraction2 = fraction0.MINUS_ONE.add(fraction1);
    Fraction fraction3 = fraction2.add(fraction1);
    assertEquals((-2090), fraction2.intValue());
}",0,"assertEquals(0, fraction2.intValue())"
project,0,test5277,"public void test5277() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.ZERO.negate();
    Fraction fraction2 = fraction1.add(fraction0);
    assertEquals((-2090), fraction2.getNumerator());
}",0,"assertEquals(1, fraction2.getNumerator())"
project,0,test5278,"public void test5278() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.ZERO.negate();
    Fraction fraction2 = fraction1.add(fraction0);
    assertSame(fraction2, fraction0);
}",1,
project,0,test5279,"public void test5279() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.ZERO.negate();
    Fraction fraction2 = fraction1.add(fraction0);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test5380,"public void test5380() throws Throwable {
    Fraction fraction0 = new Fraction((-391.221), (-1076));
    // Undeclared exception!
    try {
        fraction0.subtract((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fraction must not be null
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",1,
project,0,test5481,"public void test5481() throws Throwable {
    Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
    // Undeclared exception!
    try {
        fraction0.abs();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/1, cannot negate
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test5582,"public void test5582() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(fraction0.equals((Object) fraction1));
}",0,
project,0,test5583,"public void test5583() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(0.5F, fraction1.floatValue(), 0.01F);
}",1,
project,0,test5584,"public void test5584() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(1, fraction1.getNumerator());
}",0,"assertEquals(1, fraction1.getNumerator())"
project,0,test5585,"public void test5585() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test5686,"public void test5686() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = fraction0.negate();
    boolean boolean0 = fraction1.equals(fraction0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test5787,"public void test5787() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(1252, (-2444));
    Fraction fraction1 = Fraction.ONE;
    boolean boolean0 = fraction0.equals(fraction1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test5788,"public void test5788() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(1252, (-2444));
    Fraction fraction1 = Fraction.ONE;
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals((-313), fraction0.getNumerator());
}",0,"assertEquals(1, fraction0.getNumerator())"
project,0,test5789,"public void test5789() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(1252, (-2444));
    Fraction fraction1 = Fraction.ONE;
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals((-0.5122749590834698), fraction0.doubleValue(), 0.01);
}",0,
project,0,test5890,"public void test5890() throws Throwable {
    Fraction fraction0 = new Fraction((-1.0));
    boolean boolean0 = fraction0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test5891,"public void test5891() throws Throwable {
    Fraction fraction0 = new Fraction((-1.0));
    boolean boolean0 = fraction0.equals((Object) null);
    assertEquals((-1), fraction0.intValue());
}",1,
project,0,test5992,"public void test5992() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    boolean boolean0 = fraction0.equals(fraction0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test6093,"public void test6093() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    boolean boolean0 = fraction0.equals("""");
    assertEquals((-2090.0), fraction0.doubleValue(), 0.01);
}",1,
project,0,test6094,"public void test6094() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    boolean boolean0 = fraction0.equals("""");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test6195,"public void test6195() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = Fraction.ZERO;
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test6196,"public void test6196() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = Fraction.ZERO;
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(2.0F, fraction0.floatValue(), 0.01F);
}",0,
project,0,test6297,"public void test6297() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    int int0 = fraction0.compareTo(fraction0);
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test6298,"public void test6298() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    int int0 = fraction0.compareTo(fraction0);
    assertEquals(0.0, fraction0.doubleValue(), 0.01);
}",0,
project,0,test6399,"public void test6399() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.ONE.abs();
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1, fraction1.getNumerator());
}",0,"assertEquals(0, fraction1.getNumerator())"
project,0,test63100,"public void test63100() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.ONE.abs();
    int int0 = fraction0.compareTo(fraction1);
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test63101,"public void test63101() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.ONE.abs();
    int int0 = fraction0.compareTo(fraction1);
    assertEquals((-2090.0F), fraction0.floatValue(), 0.01F);
}",0,
project,0,test64102,"public void test64102() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((-3468), Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -3,468/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test65103,"public void test65103() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test66104,"public void test66104() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((-24.016514532197593), (-2147483645), (-2147483645));
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // Unable to convert -24.017 to fraction after -2,147,483,645 iterations
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",0,
project,0,test67105,"public void test67105() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(0.0, 37);
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",0,
project,0,test68106,"public void test68106() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(37, 0, 0);
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // Overflow trying to convert 37 to fraction (9,223,372,036,854,775,772/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",1,
project,0,test69107,"public void test69107() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(Double.POSITIVE_INFINITY);
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // Overflow trying to convert \u221E to fraction (9,223,372,036,854,775,807/1)
        //
        verifyException(""org.apache.commons.math.fraction.Fraction"", e);
    }
}",0,
project,0,test70108,"public void test70108() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    int int0 = fraction0.intValue();
    assertEquals(0.0F, fraction0.floatValue(), 0.01F);
}",0,
project,0,test70109,"public void test70109() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    int int0 = fraction0.intValue();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test71110,"public void test71110() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    float float0 = fraction0.floatValue();
    assertEquals((-2090.0F), float0, 0.01F);
}",0,
project,0,test72111,"public void test72111() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test72112,"public void test72112() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
    assertEquals(1, fraction0.getDenominator());
}",1,
project,0,test72113,"public void test72113() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
    assertEquals(2089.0F, fraction1.floatValue(), 0.01F);
}",0,
project,0,test73114,"public void test73114() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    fraction0.hashCode();
    assertEquals((-2090), fraction0.getNumerator());
}",1,
project,0,test73115,"public void test73115() throws Throwable {
    Fraction fraction0 = new Fraction((-2089.562449831285), 1);
    fraction0.hashCode();
    assertEquals(1, fraction0.getDenominator());
}",1,
project,0,test74116,"public void test74116() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.add(fraction0);
    assertEquals(3.0F, fraction1.floatValue(), 0.01F);
}",0,
project,0,test74117,"public void test74117() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO.add(fraction0);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test75118,"public void test75118() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    long long0 = fraction0.longValue();
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
