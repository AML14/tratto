project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test010,"public void test010() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    frequency0.addValue((-2007));
    String string0 = frequency0.toString();
    assertEquals(""Value \t Freq. \t Pct. \t Cum Pct. \n-2007\t2\t100%\t100%\n"", string0);
}",0,assertNotNull(string0)
project,0,test031,"public void test031() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('l');
    double double0 = frequency0.getPct((Object) """");
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test042,"public void test042() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    double double0 = frequency0.getPct((Object) """");
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test053,"public void test053() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(0L);
    double double0 = frequency0.getPct((Comparable<?>) 33);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test064,"public void test064() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('');
    double double0 = frequency0.getPct(796L);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test075,"public void test075() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    double double0 = frequency0.getPct(1L);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test086,"public void test086() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-797));
    double double0 = frequency0.getPct((-797));
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test097,"public void test097() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(770L);
    double double0 = frequency0.getPct('Y');
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test108,"public void test108() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    double double0 = frequency0.getPct(',');
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test119,"public void test119() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('a');
    Integer integer0 = new Integer(1961);
    double double0 = frequency0.getCumPct((Object) integer0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1210,"public void test1210() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    Long long0 = Long.getLong(""QiSON~eFIdi]WTwsEb"", (-1388L));
    double double0 = frequency0.getCumPct((Comparable<?>) long0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1311,"public void test1311() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(comparable0).compareTo(any());
    frequency0.addValue(comparable0);
    double double0 = frequency0.getCumPct(2L);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1412,"public void test1412() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-797));
    double double0 = frequency0.getCumPct((long) (-797));
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test1513,"public void test1513() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(770L);
    double double0 = frequency0.getCumPct((-2288));
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1614,"public void test1614() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2715L));
    double double0 = frequency0.getCumPct(520);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test1715,"public void test1715() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    double double0 = frequency0.getCumPct('+');
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1816,"public void test1816() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-797));
    double double0 = frequency0.getCumPct('>');
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test1917,"public void test1917() throws Throwable {
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyString(), anyString());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((Object) ""[H0Ka"");
    long long0 = frequency0.getCumFreq((Object) ""[H0Ka"");
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2018,"public void test2018() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-3471));
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq(1);
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2119,"public void test2119() throws Throwable {
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyString(), anyString());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((Object) ""[H0Ka"");
    long long0 = frequency0.getCumFreq('/');
    assertEquals(1L, long0);
}",0,
project,0,test2220,"public void test2220() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount((Object) ""org.apace.ommons.math.MathRntimeException2"");
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test2321,"public void test2321() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    long long0 = frequency0.getCount((Object) """");
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test2422,"public void test2422() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    long long0 = frequency0.getCount((long) (-2007));
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test2523,"public void test2523() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-797));
    long long0 = frequency0.getCount(3306);
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2624,"public void test2624() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    long long0 = frequency0.getCount('e');
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2725,"public void test2725() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(9);
    // Undeclared exception!
    try {
        frequency0.getPct((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test2826,"public void test2826() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Object object0 = new Object();
    // Undeclared exception!
    try {
        frequency0.getPct(object0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Object cannot be cast to java.lang.Comparable
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test2927,"public void test2927() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-571));
    frequency0.addValue(integer0);
    // Undeclared exception!
    try {
        frequency0.getPct((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test3028,"public void test3028() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    // Undeclared exception!
    try {
        frequency0.getCumPct((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test3129,"public void test3129() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
    // Undeclared exception!
    try {
        frequency0.getCumPct((Object) iterator0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test3230,"public void test3230() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(13);
    // Undeclared exception!
    try {
        frequency0.getCumPct((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test3331,"public void test3331() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((-450));
    // Undeclared exception!
    try {
        frequency0.getCumFreq((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test3432,"public void test3432() throws Throwable {
    Frequency frequency0 = new Frequency();
    Object object0 = new Object();
    // Undeclared exception!
    try {
        frequency0.getCumFreq(object0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Object cannot be cast to java.lang.Comparable
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test3533,"public void test3533() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(comparable0).compareTo(any());
    frequency0.addValue(comparable0);
    // Undeclared exception!
    try {
        frequency0.getCumFreq((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test3634,"public void test3634() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(1431655765, 1431655765).when(comparable0).compareTo(any());
    Integer integer0 = new Integer((-8));
    frequency0.addValue(integer0);
    frequency0.addValue(comparable0);
    // Undeclared exception!
    try {
        frequency0.getCumFreq((-8));
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test3735,"public void test3735() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.getCount((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test3836,"public void test3836() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.getCount((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test3937,"public void test3937() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    // Undeclared exception!
    try {
        frequency0.addValue((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",1,
project,0,test4038,"public void test4038() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    Integer integer0 = new Integer(237);
    // Undeclared exception!
    try {
        frequency0.addValue(integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Long not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test4139,"public void test4139() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    // Undeclared exception!
    try {
        frequency0.addValue((Integer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test4240,"public void test4240() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('a');
    Integer integer0 = new Integer(1961);
    // Undeclared exception!
    try {
        frequency0.addValue((Comparable<?>) integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Integer not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test4341,"public void test4341() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.addValue((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test4442,"public void test4442() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('\'');
    // Undeclared exception!
    try {
        frequency0.addValue((-148));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Long not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test4543,"public void test4543() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(770L);
    // Undeclared exception!
    try {
        frequency0.addValue('Y');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Character not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test4644,"public void test4644() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    double double0 = frequency0.getCumPct((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n-2007\t1\t100%\t100%\n"");
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test4745,"public void test4745() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Comparable<Frequency> comparable0 = (Comparable<Frequency>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    double double0 = frequency0.getCumPct(comparable0);
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test4846,"public void test4846() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(1431655765, 1, (-594), 0).when(comparable0).compareTo(any());
    long long0 = frequency0.getCumFreq(comparable0);
    assertEquals(0L, long0);
}",0,
project,0,test4947,"public void test4947() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(1610612736, (-687)).when(comparable0).compareTo(any());
    long long0 = frequency0.getCumFreq(comparable0);
    assertEquals(0L, long0);
}",0,
project,0,test5048,"public void test5048() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    Long long0 = new Long((-875L));
    frequency0.addValue('0');
    long long1 = frequency0.getCumFreq((Comparable<?>) long0);
    assertEquals(1L, long1);
}",0,
project,0,test5149,"public void test5149() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    Integer integer0 = new Integer((-617));
    long long0 = frequency0.getCumFreq((Comparable<?>) integer0);
    assertEquals(1L, long0);
}",0,
project,0,test5250,"public void test5250() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertEquals(0L, long0);
}",0,
project,0,test5351,"public void test5351() throws Throwable {
    Frequency frequency0 = new Frequency();
    double double0 = frequency0.getPct((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test5452,"public void test5452() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    double double0 = frequency0.getPct((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test5553,"public void test5553() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(comparable0).compareTo(any());
    frequency0.addValue(comparable0);
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(comparable1).compareTo(any());
    long long0 = frequency0.getCount(comparable1);
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test5654,"public void test5654() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test5755,"public void test5755() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('a');
    long long0 = frequency0.getSumFreq();
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test5856,"public void test5856() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getSumFreq();
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test6057,"public void test6057() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getCount((long) (-2007));
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test6158,"public void test6158() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""instance of class {0} not comparableto exiting values"");
    Frequency frequency1 = new Frequency();
    boolean boolean0 = frequency0.equals(frequency1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test6259,"public void test6259() throws Throwable {
    Frequency frequency0 = new Frequency();
    Frequency frequency1 = new Frequency();
    boolean boolean0 = frequency0.equals(frequency1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test6360,"public void test6360() throws Throwable {
    Frequency frequency0 = new Frequency();
    boolean boolean0 = frequency0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test6461,"public void test6461() throws Throwable {
    Frequency frequency0 = new Frequency();
    boolean boolean0 = frequency0.equals(frequency0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test6562,"public void test6562() throws Throwable {
    Frequency frequency0 = new Frequency();
    boolean boolean0 = frequency0.equals(""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test6663,"public void test6663() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-571));
    frequency0.addValue(integer0);
    frequency0.addValue(9);
    long long0 = frequency0.getCumFreq(1L);
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test6764,"public void test6764() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(9);
    long long0 = frequency0.getCumFreq(1L);
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test6865,"public void test6865() throws Throwable {
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(10, 10, 10, (-872), 10).when(comparator0).compare(anyString(), anyString());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n"");
    long long0 = frequency0.getCumFreq((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n"");
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test7066,"public void test7066() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    // Undeclared exception!
    try {
        frequency0.addValue((Object) frequency0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // class (org.apache.commons.math.stat.Frequency) does not implement Comparable
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test7167,"public void test7167() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer((-617));
    long long0 = frequency0.getCount((Comparable<?>) integer0);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test7268,"public void test7268() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-542));
    frequency0.addValue(integer0);
    double double0 = frequency0.getPct(0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test7369,"public void test7369() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getCount((-2007));
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test7470,"public void test7470() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
    // Undeclared exception!
    try {
        frequency0.getCount((Object) iterator0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test7571,"public void test7571() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('#');
    // Undeclared exception!
    try {
        frequency0.addValue(69L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Long not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test7672,"public void test7672() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq(':');
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test7773,"public void test7773() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount('b');
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test7874,"public void test7874() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    Integer integer0 = new Integer((-617));
    double double0 = frequency0.getCumPct((Object) integer0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test8075,"public void test8075() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq((-8));
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test8176,"public void test8176() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(1, 582, (-1234), 73).when(comparable0).compareTo(any());
    long long0 = frequency0.getCumFreq(comparable0);
    assertEquals(1L, long0);
}",0,
