project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(2834, 2834, 2434, 2434, 2434).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(2834);
    Object object0 = new Object();
    frequency0.addValue(1L);
    double double0 = frequency0.getCumPct(object0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test011,"public void test011() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-2595));
    frequency0.addValue((Object) integer0);
    frequency0.addValue(integer0);
    double double0 = frequency0.getPct((-2595));
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test022,"public void test022() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    Object object0 = new Object();
    long long0 = frequency0.getCount(object0);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test033,"public void test033() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(1);
    frequency0.addValue((Object) integer0);
    Object object0 = new Object();
    double double0 = frequency0.getPct(object0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test044,"public void test044() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn((-1), (-1)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-1));
    double double0 = frequency0.getPct(0L);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test055,"public void test055() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(1);
    frequency0.addValue((Object) integer0);
    double double0 = frequency0.getPct(1L);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test066,"public void test066() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(2834, 2834).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(2834);
    double double0 = frequency0.getPct(1);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test077,"public void test077() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1190, (-1412)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(853);
    frequency0.addValue(integer0);
    double double0 = frequency0.getPct('T');
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test088,"public void test088() throws Throwable {
    Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyLong(), anyLong());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue('V');
    double double0 = frequency0.getPct(':');
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test099,"public void test099() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn((-1543), (-1543), (-1543)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-1543));
    double double0 = frequency0.getCumPct((long) (-1543));
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1230);
    double double0 = frequency0.getCumPct((long) 1230);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('p');
    double double0 = frequency0.getCumPct(98);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(2834, 2834, 2434, 2434).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(2834);
    double double0 = frequency0.getCumPct((-1022));
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1190, (-1412), 1038, 1760, (-1068)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(853);
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq('*');
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1314,"public void test1314() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1190, (-1412), 1038, 1760, (-1068)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(853);
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq('*');
    double double0 = frequency0.getCumPct('T');
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(2834, 2834, 2434, 2434).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(2834);
    double double0 = frequency0.getCumPct('W');
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-4305));
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq((long) (-4305));
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1617,"public void test1617() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(0);
    long long0 = frequency0.getCount(0L);
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1718,"public void test1718() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2376L));
    long long0 = frequency0.getCount((-1280));
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1819,"public void test1819() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2376L));
    long long0 = frequency0.getCount('V');
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1920,"public void test1920() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    frequency0.addValue(0);
    // Undeclared exception!
    try {
        frequency0.getPct((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((long) 58);
    // Undeclared exception!
    try {
        frequency0.getCumPct((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test2122,"public void test2122() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    frequency0.addValue('\""');
    // Undeclared exception!
    try {
        frequency0.getCumFreq((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test2223,"public void test2223() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.getCount((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test2324,"public void test2324() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.addValue((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer('\u0019');
    frequency0.addValue('h');
    // Undeclared exception!
    try {
        frequency0.addValue((Object) integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test2526,"public void test2526() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.addValue((Integer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test2627,"public void test2627() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('p');
    // Undeclared exception!
    try {
        frequency0.addValue((-982L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('q');
    // Undeclared exception!
    try {
        frequency0.addValue(0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test2829,"public void test2829() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1537);
    // Undeclared exception!
    try {
        frequency0.addValue('r');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test2930,"public void test2930() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    double double0 = frequency0.getCumPct((Object) """");
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test3031,"public void test3031() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn((-1), (-3611), 1610612736, (-1008), 1).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    long long0 = frequency0.getCumFreq((Object) null);
    assertEquals(0L, long0);
}",0,
project,0,test3132,"public void test3132() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1190, (-1412), 1038, 1760, (-1068)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(853);
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq('*');
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test3133,"public void test3133() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1190, (-1412), 1038, 1760, (-1068)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(853);
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq('*');
    long long1 = frequency0.getCumFreq((Object) null);
    assertEquals(0L, long1);
}",0,
project,0,test3234,"public void test3234() throws Throwable {
    Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyLong(), anyLong());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue('V');
    Long long0 = new Long(0L);
    long long1 = frequency0.getCumFreq((Object) long0);
    assertEquals(1L, long1);
}",0,
project,0,test3335,"public void test3335() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    long long0 = frequency0.getCumFreq((Object) null);
    assertEquals(0L, long0);
}",0,
project,0,test3436,"public void test3436() throws Throwable {
    Frequency frequency0 = new Frequency();
    Long long0 = new Long(921);
    double double0 = frequency0.getPct((Object) long0);
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test3537,"public void test3537() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue('/');
    Long long0 = new Long(2488L);
    long long1 = frequency0.getCount((Object) long0);
    assertEquals(1L, long1);
}",0,"assertEquals(1, long1)"
project,0,test3638,"public void test3638() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getCount((Object) null);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3739,"public void test3739() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-1144));
    long long0 = frequency0.getCount((Object) integer0);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3840,"public void test3840() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(247);
    long long0 = frequency0.getSumFreq();
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test3941,"public void test3941() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getSumFreq();
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test4042,"public void test4042() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq((-1008L));
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test4143,"public void test4143() throws Throwable {
    Frequency frequency0 = new Frequency();
    Iterator iterator0 = frequency0.valuesIterator();
    assertNotNull(iterator0);
}",0,assertNotNull(iterator0)
project,0,test4244,"public void test4244() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-4305));
    frequency0.addValue(integer0);
    frequency0.addValue(162);
    Long long0 = new Long(1);
    long long1 = frequency0.getCumFreq((Object) long0);
    assertEquals(1L, long1);
}",0,
project,0,test4345,"public void test4345() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1190, (-1412), 1038, 1760, (-1068)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(853);
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq('*');
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test4346,"public void test4346() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1190, (-1412), 1038, 1760, (-1068)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(853);
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq('*');
    double double0 = frequency0.getCumPct((Object) integer0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test4447,"public void test4447() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1190, (-1412)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer(853);
    frequency0.addValue(integer0);
    double double0 = frequency0.getPct((Object) integer0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test4548,"public void test4548() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount(0L);
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test4749,"public void test4749() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    long long0 = frequency0.getCount(0);
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test4850,"public void test4850() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('P');
    Integer integer0 = new Integer(1);
    // Undeclared exception!
    try {
        frequency0.addValue(integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",0,
project,0,test4951,"public void test4951() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq('E');
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test5052,"public void test5052() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount(')');
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test5153,"public void test5153() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn((-1), (-3611), 1610612736, (-1008), 1).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    Integer integer0 = new Integer(1243);
    long long0 = frequency0.getCumFreq((Object) integer0);
    assertEquals(0L, long0);
}",0,
project,0,test5154,"public void test5154() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn((-1), (-3611), 1610612736, (-1008), 1).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    Integer integer0 = new Integer(1243);
    long long0 = frequency0.getCumFreq((Object) integer0);
    long long1 = frequency0.getCumFreq(1243);
    assertEquals(1L, long1);
}",0,
project,0,test5355,"public void test5355() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getCumFreq((-1));
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test5456,"public void test5456() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-2595));
    frequency0.addValue((Object) integer0);
    String string0 = frequency0.toString();
    assertEquals(""Value \t Freq. \t Pct. \t Cum Pct. \n-2595\t1\t100%\t100%\n"", string0);
}",0,
