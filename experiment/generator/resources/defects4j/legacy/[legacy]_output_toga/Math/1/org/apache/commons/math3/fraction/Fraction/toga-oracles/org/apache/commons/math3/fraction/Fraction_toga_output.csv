project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-1517));
    assertEquals((-1517), fraction1.getNumerator());
}",0,
project,0,test001,"public void test001() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-1517));
    assertEquals((-50566.66666666667), fraction1.percentageValue(), 0.01);
}",0,
project,0,test012,"public void test012() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    int int0 = fraction0.getDenominator();
    assertEquals(4, int0);
}",0,"assertEquals(1, int0)"
project,0,test023,"public void test023() throws Throwable {
    Fraction fraction0 = new Fraction(423, 423);
    Fraction fraction1 = fraction0.add(Integer.MAX_VALUE);
    // Undeclared exception!
    try {
        fraction1.negate();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/1, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test034,"public void test034() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.TWO_FIFTHS.divide(1399);
    assertEquals(6995, fraction1.getDenominator());
}",1,
project,0,test035,"public void test035() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.TWO_FIFTHS.divide(1399);
    assertEquals(2.859185E-4F, fraction1.floatValue(), 0.01F);
}",1,
project,0,test046,"public void test046() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.subtract(fraction0);
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}",0,
project,0,test057,"public void test057() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    FractionField fractionField0 = fraction0.getField();
    assertNotNull(fractionField0);
}",0,
project,0,test079,"public void test079() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    long long0 = fraction0.longValue();
    assertEquals(50.0, fraction0.percentageValue(), 0.01);
}",0,
project,0,test0710,"public void test0710() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    long long0 = fraction0.longValue();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test0811,"public void test0811() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.TWO_THIRDS.subtract(4268);
    assertEquals((-4267.333333333333), fraction1.doubleValue(), 0.01);
}",0,
project,0,test0812,"public void test0812() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.TWO_THIRDS.subtract(4268);
    assertEquals(3, fraction1.getDenominator());
}",1,
project,0,test0913,"public void test0913() throws Throwable {
    Fraction fraction0 = new Fraction(4);
    int int0 = fraction0.intValue();
    assertEquals(4, int0);
}",0,"assertEquals(0, int0)"
project,0,test0914,"public void test0914() throws Throwable {
    Fraction fraction0 = new Fraction(4);
    int int0 = fraction0.intValue();
    assertEquals(1, fraction0.getDenominator());
}",1,
project,0,test1115,"public void test1115() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    int int0 = fraction0.getNumerator();
    assertEquals(3, int0);
}",0,"assertEquals(1, int0)"
project,0,test1216,"public void test1216() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    float float0 = fraction0.floatValue();
    assertEquals(0.5F, float0, 0.01F);
}",1,
project,0,test1317,"public void test1317() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    double double0 = fraction0.percentageValue();
    assertEquals(75.0, double0, 0.01);
}",0,
project,0,test1418,"public void test1418() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((double) 4, 4);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 4 to fraction (-3/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test1519,"public void test1519() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test1620,"public void test1620() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((double) 9, 9);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 9 to fraction (9,223,372,036,854,775,800/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test1721,"public void test1721() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(4.671341494509873E-4, 4.671341494509873E-4, (-87));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Unable to convert 0 to fraction after -87 iterations
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test1822,"public void test1822() throws Throwable {
    Fraction fraction0 = new Fraction((-1044.2346729));
    assertEquals(473, fraction0.getDenominator());
}",1,
project,0,test1923,"public void test1923() throws Throwable {
    Fraction fraction0 = new Fraction(425.11148473894536, 2288);
    assertEquals(42511.14848630466, fraction0.percentageValue(), 0.01);
}",0,
project,0,test2024,"public void test2024() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(0, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 0/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test2125,"public void test2125() throws Throwable {
    Fraction fraction0 = new Fraction((-2059), (-2059));
    assertEquals(1, fraction0.getNumerator());
}",1,
project,0,test2126,"public void test2126() throws Throwable {
    Fraction fraction0 = new Fraction((-2059), (-2059));
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}",0,
project,0,test2227,"public void test2227() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test2328,"public void test2328() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(2, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 2/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test2429,"public void test2429() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.MINUS_ONE.abs();
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test2531,"public void test2531() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    Fraction fraction1 = fraction0.abs();
    assertEquals(0.2, fraction1.doubleValue(), 0.01);
}",0,
project,0,test2632,"public void test2632() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    int int0 = fraction0.compareTo(fraction0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2733,"public void test2733() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.MINUS_ONE.add(2);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals((-1), int0);
}",0,"assertEquals(1, int0)"
project,0,test2734,"public void test2734() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.MINUS_ONE.add(2);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1.0F, fraction1.floatValue(), 0.01F);
}",1,
project,0,test2835,"public void test2835() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.MINUS_ONE.add((-2682));
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test2937,"public void test2937() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.ONE_HALF;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(fraction0.equals((Object) fraction1));
}",0,
project,0,test2938,"public void test2938() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.ONE_HALF;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3039,"public void test3039() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    boolean boolean0 = fraction0.equals(fraction0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3140,"public void test3140() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Object object0 = new Object();
    boolean boolean0 = fraction0.equals(object0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3241,"public void test3241() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.TWO_THIRDS;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3242,"public void test3242() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.TWO_THIRDS;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(fraction0.equals((Object) fraction1));
}",0,
project,0,test3343,"public void test3343() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = Fraction.ONE_HALF;
    boolean boolean0 = fraction1.equals(fraction0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3444,"public void test3444() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    // Undeclared exception!
    try {
        fraction0.add((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test3545,"public void test3545() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
    assertEquals((-25.0), fraction1.percentageValue(), 0.01);
}",0,
project,0,test3546,"public void test3546() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
    assertEquals((-1), fraction1.getNumerator());
}",1,
project,0,test3647,"public void test3647() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertSame(fraction1, fraction0);
}",1,
project,0,test3748,"public void test3748() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.ZERO;
    Fraction fraction2 = fraction0.TWO_FIFTHS.add(fraction1);
    assertEquals(40.0, fraction2.percentageValue(), 0.01);
}",0,
project,0,test3849,"public void test3849() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.TWO_FIFTHS.add(fraction0);
    assertEquals(11, fraction1.getNumerator());
}",0,"assertEquals(1, fraction1.getNumerator())"
project,0,test3850,"public void test3850() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.TWO_FIFTHS.add(fraction0);
    assertEquals(73.33333333333333, fraction1.percentageValue(), 0.01);
}",0,
project,0,test3951,"public void test3951() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(fraction0);
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}",0,
project,0,test3952,"public void test3952() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(fraction0);
    assertEquals(1, fraction1.getDenominator());
}",1,
project,0,test4053,"public void test4053() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    Fraction fraction1 = Fraction.getReducedFraction(Integer.MAX_VALUE, 2880);
    // Undeclared exception!
    try {
        fraction1.add(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow, numerator too large after multiply: 2,147,484,223
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",0,
project,0,test4154,"public void test4154() throws Throwable {
    Fraction fraction0 = new Fraction(11, 11);
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    assertEquals(0, fraction1.getNumerator());
}",0,"assertEquals(0, fraction1.getNumerator())"
project,0,test4155,"public void test4155() throws Throwable {
    Fraction fraction0 = new Fraction(11, 11);
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    assertEquals(1, fraction0.getDenominator());
}",0,
project,0,test4156,"public void test4156() throws Throwable {
    Fraction fraction0 = new Fraction(11, 11);
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}",0,
project,0,test4257,"public void test4257() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    // Undeclared exception!
    try {
        fraction0.multiply((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test4358,"public void test4358() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.FOUR_FIFTHS.multiply(fraction0);
    assertEquals(0.4, fraction1.doubleValue(), 0.01);
}",0,
project,0,test4459,"public void test4459() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = fraction0.FOUR_FIFTHS.multiply(fraction0);
    assertEquals(0, fraction1.getNumerator());
}",1,
project,0,test4560,"public void test4560() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    // Undeclared exception!
    try {
        fraction0.THREE_FIFTHS.divide((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test4661,"public void test4661() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    // Undeclared exception!
    try {
        fraction0.ZERO.divide(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // the fraction to divide by must not be zero: 0/1
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test4762,"public void test4762() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(0, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 0/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test4863,"public void test4863() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(0, (-14612));
    assertEquals(0.0, fraction0.doubleValue(), 0.01);
}",0,
project,0,test4964,"public void test4964() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}",0,
project,0,test5065,"public void test5065() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(4507, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 4,507/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test5166,"public void test5166() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2212));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-2,212, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}",1,
project,0,test5267,"public void test5267() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    String string0 = fraction0.toString();
    assertEquals(""1 / 5"", string0);
}",0,
project,0,test5368,"public void test5368() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    String string0 = fraction0.toString();
    assertEquals(""-1"", string0);
}",0,
