project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    double[] doubleArray0 = new double[24];
    doubleArray0[0] = (-1469.24165998819);
    doubleArray0[5] = (-651.4657703215);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0, 5);
    double double0 = singularValueDecompositionImpl0.getConditionNumber();
    assertEquals(15702.66575521932, double0, 0.01);
}",0,
project,0,test022,"public void test022() throws Throwable {
    double[] doubleArray0 = new double[3];
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getSolver();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // row index -1 out of allowed range [0, 0]
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    double[] doubleArray0 = new double[14];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    double[] doubleArray1 = singularValueDecompositionImpl0.getSingularValues();
    assertArrayEquals(new double[] { 28363.113150986705 }, doubleArray1, 0.01);
}",0,
project,0,test034,"public void test034() throws Throwable {
    double[] doubleArray0 = new double[14];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    double[] doubleArray1 = singularValueDecompositionImpl0.getSingularValues();
    assertEquals(1, doubleArray1.length);
}",0,
project,0,test045,"public void test045() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 1657.6410258812;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 117);
    double double0 = singularValueDecompositionImpl0.getNorm();
    assertEquals(1657.6410258812, double0, 0.01);
}",0,
project,0,test056,"public void test056() throws Throwable {
    double[][] doubleArray0 = new double[1][4];
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getUT();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // column index -1 out of allowed range [0, 0]
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test087,"public void test087() throws Throwable {
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
    double[][] doubleArray0 = new double[1][7];
    array2DRowRealMatrix0.data = doubleArray0;
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getS();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid row dimension 0 (must be positive)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test098,"public void test098() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(7, 7);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(openMapRealMatrix0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getRank();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.math.linear.SingularValueDecompositionImpl"", e);
    }
}",0,
project,0,test109,"public void test109() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (-4091.30585795025);
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getCovariance(Double.POSITIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cutoff singular value is \u221E, should be at most 4,091.306
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test1210,"public void test1210() throws Throwable {
    double[] doubleArray0 = new double[12];
    doubleArray0[0] = (-1469.24165998819);
    doubleArray0[3] = 0.10664378144610108;
    doubleArray0[5] = (-651.4657703215);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
    try {
        singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0, 5);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        //
        //
        verifyException(""org.apache.commons.math.linear.EigenDecompositionImpl"", e);
    }
}",0,
project,0,test1311,"public void test1311() throws Throwable {
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
    try {
        singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) null, (-2635));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.SingularValueDecompositionImpl"", e);
    }
}",0,
project,0,test1412,"public void test1412() throws Throwable {
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
    try {
        singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.BiDiagonalTransformer"", e);
    }
}",0,
project,0,test1513,"public void test1513() throws Throwable {
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(1, 1);
    double[][] doubleArray0 = new double[4][2];
    double[] doubleArray1 = new double[4];
    doubleArray0[2] = doubleArray1;
    array2DRowRealMatrix0.data = doubleArray0;
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
    try {
        singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 46);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test1714,"public void test1714() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    doubleArray0[1] = 3341.3125;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
    try {
        singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        //
        //
        verifyException(""org.apache.commons.math.linear.EigenDecompositionImpl"", e);
    }
}",0,
project,0,test1815,"public void test1815() throws Throwable {
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
    try {
        singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.SingularValueDecompositionImpl"", e);
    }
}",0,
project,0,test1916,"public void test1916() throws Throwable {
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
    try {
        singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.BiDiagonalTransformer"", e);
    }
}",0,
project,0,test2017,"public void test2017() throws Throwable {
    double[] doubleArray0 = new double[3];
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    double[][] doubleArray1 = new double[8][2];
    doubleArray1[1] = doubleArray0;
    array2DRowRealMatrix0.data = doubleArray1;
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
    try {
        singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test2118,"public void test2118() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    int int0 = singularValueDecompositionImpl0.getRank();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test2119,"public void test2119() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    int int0 = singularValueDecompositionImpl0.getRank();
    assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
}",0,
project,0,test2220,"public void test2220() throws Throwable {
    BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(9, 1);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(blockRealMatrix0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getVT();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // column index -1 out of allowed range [0, 0]
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test2321,"public void test2321() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
    assertEquals(1, realMatrix1.getColumnDimension());
}",0,"assertEquals(0, realMatrix1.getColumnDimension())"
project,0,test2322,"public void test2322() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
    RealMatrix realMatrix2 = singularValueDecompositionImpl0.getVT();
    assertEquals(1, realMatrix2.getRowDimension());
}",0,"assertEquals(0, realMatrix2.getRowDimension())"
project,0,test2323,"public void test2323() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
    RealMatrix realMatrix2 = singularValueDecompositionImpl0.getVT();
    assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    double[][] doubleArray0 = new double[2][5];
    double[] doubleArray1 = new double[3];
    doubleArray1[1] = (-1.0);
    doubleArray0[0] = doubleArray1;
    double[] doubleArray2 = new double[3];
    doubleArray2[0] = 1.05;
    doubleArray0[1] = doubleArray2;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
    RealMatrix realMatrix0 = singularValueDecompositionImpl0.getV();
    assertEquals(1.05, singularValueDecompositionImpl0.getConditionNumber(), 0.01);
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    double[][] doubleArray0 = new double[2][5];
    double[] doubleArray1 = new double[3];
    doubleArray1[1] = (-1.0);
    doubleArray0[0] = doubleArray1;
    double[] doubleArray2 = new double[3];
    doubleArray2[0] = 1.05;
    doubleArray0[1] = doubleArray2;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
    RealMatrix realMatrix0 = singularValueDecompositionImpl0.getV();
    assertEquals(2, realMatrix0.getColumnDimension());
}",0,"assertEquals(1, realMatrix0.getColumnDimension())"
project,0,test2526,"public void test2526() throws Throwable {
    double[] doubleArray0 = new double[3];
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getV();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // column index -1 out of allowed range [0, 0]
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test2627,"public void test2627() throws Throwable {
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
    double[][] doubleArray0 = new double[1][7];
    array2DRowRealMatrix0.data = doubleArray0;
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getU();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // column index -1 out of allowed range [0, 0]
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[1] = (-1314.9147069);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    singularValueDecompositionImpl0.getU();
    singularValueDecompositionImpl0.getU();
    assertEquals(1729000.686421913, singularValueDecompositionImpl0.getNorm(), 0.01);
}",0,
project,0,test2829,"public void test2829() throws Throwable {
    double[] doubleArray0 = new double[11];
    doubleArray0[0] = 0.5;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
    assertTrue(decompositionSolver0.isNonSingular());
}",0,assertTrue(decompositionSolver0.isNonSingular())
project,0,test2830,"public void test2830() throws Throwable {
    double[] doubleArray0 = new double[11];
    doubleArray0[0] = 0.5;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
    assertEquals(0.5, singularValueDecompositionImpl0.getNorm(), 0.01);
}",0,
project,0,test2931,"public void test2931() throws Throwable {
    double[] doubleArray0 = new double[3];
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    openMapRealVector0.mapLog10ToSelf();
    RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    int int0 = singularValueDecompositionImpl0.getRank();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test3032,"public void test3032() throws Throwable {
    double[] doubleArray0 = new double[3];
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getCovariance(140.5950535212718);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.math.linear.SingularValueDecompositionImpl"", e);
    }
}",0,
project,0,test3133,"public void test3133() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    doubleArray0[2] = (-200.7204561);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(1190.52);
    assertEquals(6.6982543727467088E16, singularValueDecompositionImpl0.getConditionNumber(), 0.01);
}",0,
project,0,test3134,"public void test3134() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    doubleArray0[2] = (-200.7204561);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(1190.52);
    assertEquals(3, realMatrix1.getColumnDimension());
}",0,"assertEquals(0, realMatrix1.getColumnDimension())"
project,0,test3235,"public void test3235() throws Throwable {
    double[][] doubleArray0 = new double[2][5];
    double[] doubleArray1 = new double[3];
    doubleArray1[1] = 1.05;
    doubleArray0[0] = doubleArray1;
    double[] doubleArray2 = new double[3];
    doubleArray2[0] = 1.05;
    doubleArray0[1] = doubleArray2;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
    DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
    assertEquals(2, singularValueDecompositionImpl0.getRank());
}",0,"assertEquals(0, singularValueDecompositionImpl0.getRank())"
project,0,test3236,"public void test3236() throws Throwable {
    double[][] doubleArray0 = new double[2][5];
    double[] doubleArray1 = new double[3];
    doubleArray1[1] = 1.05;
    doubleArray0[0] = doubleArray1;
    double[] doubleArray2 = new double[3];
    doubleArray2[0] = 1.05;
    doubleArray0[1] = doubleArray2;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
    DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
    assertFalse(decompositionSolver0.isNonSingular());
}",0,assertTrue(decompositionSolver0.isNonSingular())
project,0,test3237,"public void test3237() throws Throwable {
    double[][] doubleArray0 = new double[2][5];
    double[] doubleArray1 = new double[3];
    doubleArray1[1] = 1.05;
    doubleArray0[0] = doubleArray1;
    double[] doubleArray2 = new double[3];
    doubleArray2[0] = 1.05;
    doubleArray0[1] = doubleArray2;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
    DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
    assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01);
}",0,
project,0,test3338,"public void test3338() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
    assertEquals(1, realMatrix1.getRowDimension());
}",0,
project,0,test3339,"public void test3339() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
    RealMatrix realMatrix2 = singularValueDecompositionImpl0.getV();
    assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
}",0,
project,0,test3340,"public void test3340() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
    RealMatrix realMatrix2 = singularValueDecompositionImpl0.getV();
    assertEquals(1, realMatrix2.getColumnDimension());
}",0,
project,0,test3441,"public void test3441() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    singularValueDecompositionImpl0.getS();
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getS();
    assertNotNull(realMatrix1);
}",0,
project,0,test3442,"public void test3442() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    singularValueDecompositionImpl0.getS();
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getS();
    assertEquals(1, realMatrix1.getRowDimension());
}",0,"assertEquals(0, realMatrix1.getRowDimension())"
project,0,test3443,"public void test3443() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    singularValueDecompositionImpl0.getS();
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getS();
    assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
}",0,
project,0,test3544,"public void test3544() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    singularValueDecompositionImpl0.getUT();
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getUT();
    assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01);
}",0,
project,0,test3545,"public void test3545() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    singularValueDecompositionImpl0.getUT();
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getUT();
    assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
}",0,
project,0,test3546,"public void test3546() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-119.0863408434962);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    singularValueDecompositionImpl0.getUT();
    RealMatrix realMatrix1 = singularValueDecompositionImpl0.getUT();
    assertNotNull(realMatrix1);
}",0,"assertEquals(realMatrix0, realMatrix1)"
project,0,test3647,"public void test3647() throws Throwable {
    double[][] doubleArray0 = new double[1][3];
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 2);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getNorm();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.math.linear.SingularValueDecompositionImpl"", e);
    }
}",0,
project,0,test3748,"public void test3748() throws Throwable {
    double[] doubleArray0 = new double[5];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
    double[] doubleArray1 = singularValueDecompositionImpl0.getSingularValues();
    assertEquals(0, doubleArray1.length);
}",0,
project,0,test3849,"public void test3849() throws Throwable {
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
    double[][] doubleArray0 = new double[1][7];
    array2DRowRealMatrix0.data = doubleArray0;
    SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
    // Undeclared exception!
    try {
        singularValueDecompositionImpl0.getConditionNumber();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.math.linear.SingularValueDecompositionImpl"", e);
    }
}",0,
