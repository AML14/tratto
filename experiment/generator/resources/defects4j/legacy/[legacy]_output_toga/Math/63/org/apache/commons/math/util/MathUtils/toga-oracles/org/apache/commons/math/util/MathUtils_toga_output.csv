project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[5] = 1.63E18;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(1.63E18, double0, 0.01);
}",0,
project,0,test0001,"public void test0001() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[5] = 1.63E18;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 1.63E18, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test0002,"public void test0002() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[5] = 1.63E18;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(8, doubleArray0.length);
}",0,
project,0,test0013,"public void test0013() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[7] = 3.834E-20;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(3.834E-20, double0, 0.01);
}",0,
project,0,test0014,"public void test0014() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[7] = 3.834E-20;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.834E-20, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test0015,"public void test0015() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[7] = 3.834E-20;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(9, doubleArray0.length);
}",0,
project,0,test0026,"public void test0026() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 61;
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
    MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    assertArrayEquals(new double[] { 61.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",1,
project,0,test0027,"public void test0027() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 61;
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
    MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    assertEquals(6, doubleArray0.length);
}",1,
project,0,test0038,"public void test0038() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[1] = (double) 2821L;
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
    // Undeclared exception!
    try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // points 0 and 1 are not strictly decreasing (0 <= 2,821)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test0049,"public void test0049() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 1060.6;
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
    // Undeclared exception!
    try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // points 1 and 2 are not increasing (1,060.6 > 0)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test00510,"public void test00510() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[1] = (double) 872356L;
    // Undeclared exception!
    try {
        MathUtils.checkOrder(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // points 1 and 2 are not strictly increasing (872,356 >= 0)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test00611,"public void test00611() throws Throwable {
    int[] intArray0 = new int[3];
    intArray0[0] = 14;
    double double0 = MathUtils.distance(intArray0, intArray0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test00612,"public void test00612() throws Throwable {
    int[] intArray0 = new int[3];
    intArray0[0] = 14;
    double double0 = MathUtils.distance(intArray0, intArray0);
    assertArrayEquals(new int[] { 14, 0, 0 }, intArray0);
}",0,
project,0,test00613,"public void test00613() throws Throwable {
    int[] intArray0 = new int[3];
    intArray0[0] = 14;
    double double0 = MathUtils.distance(intArray0, intArray0);
    assertEquals(3, intArray0.length);
}",0,
project,0,test00714,"public void test00714() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (double) 3628800L;
    double double0 = MathUtils.distance(doubleArray0, doubleArray0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test00715,"public void test00715() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (double) 3628800L;
    double double0 = MathUtils.distance(doubleArray0, doubleArray0);
    assertArrayEquals(new double[] { 3628800.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test00716,"public void test00716() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (double) 3628800L;
    double double0 = MathUtils.distance(doubleArray0, doubleArray0);
    assertEquals(5, doubleArray0.length);
}",0,
project,0,test00818,"public void test00818() throws Throwable {
    int[] intArray0 = new int[8];
    intArray0[0] = (int) (byte) 1;
    int[] intArray1 = new int[5];
    // Undeclared exception!
    try {
        MathUtils.distance1(intArray0, intArray1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 5
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test00919,"public void test00919() throws Throwable {
    int[] intArray0 = new int[8];
    intArray0[0] = (int) (byte) 1;
    int int0 = MathUtils.distance1(intArray0, intArray0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test00920,"public void test00920() throws Throwable {
    int[] intArray0 = new int[8];
    intArray0[0] = (int) (byte) 1;
    int int0 = MathUtils.distance1(intArray0, intArray0);
    assertArrayEquals(new int[] { 1, 0, 0, 0, 0, 0, 0, 0 }, intArray0);
}",0,
project,0,test00921,"public void test00921() throws Throwable {
    int[] intArray0 = new int[8];
    intArray0[0] = (int) (byte) 1;
    int int0 = MathUtils.distance1(intArray0, intArray0);
    assertEquals(8, intArray0.length);
}",0,
project,0,test01022,"public void test01022() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[5] = Double.NEGATIVE_INFINITY;
    double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test01023,"public void test01023() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[5] = Double.NEGATIVE_INFINITY;
    double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test01024,"public void test01024() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[5] = Double.NEGATIVE_INFINITY;
    double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    assertEquals(7, doubleArray0.length);
}",0,
project,0,test01125,"public void test01125() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test01126,"public void test01126() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    assertArrayEquals(new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test01127,"public void test01127() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    assertEquals(8, doubleArray0.length);
}",0,
project,0,test01233,"public void test01233() throws Throwable {
    byte[] byteArray0 = new byte[7];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    assertNotNull(bigInteger1);
}",1,
project,0,test01234,"public void test01234() throws Throwable {
    byte[] byteArray0 = new byte[7];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    assertNotSame(bigInteger0, bigInteger1);
}",1,
project,0,test01235,"public void test01235() throws Throwable {
    byte[] byteArray0 = new byte[7];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    assertNotSame(bigInteger1, bigInteger0);
}",1,
project,0,test01237,"public void test01237() throws Throwable {
    byte[] byteArray0 = new byte[7];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
}",1,
project,0,test01238,"public void test01238() throws Throwable {
    byte[] byteArray0 = new byte[7];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    assertEquals(7, byteArray0.length);
}",1,
project,0,test01343,"public void test01343() throws Throwable {
    long long0 = MathUtils.pow(0L, 0L);
    assertEquals(1L, long0);
}",1,
project,0,test01444,"public void test01444() throws Throwable {
    float float0 = MathUtils.round(Float.NaN, 0);
    assertEquals(Float.NaN, float0, 0.01F);
}",1,
project,0,test01545,"public void test01545() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) (short) (-310);
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    assertNotNull(doubleArray1);
}",1,
project,0,test01546,"public void test01546() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) (short) (-310);
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    assertNotSame(doubleArray0, doubleArray1);
}",1,
project,0,test01547,"public void test01547() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) (short) (-310);
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    assertNotSame(doubleArray1, doubleArray0);
}",1,
project,0,test01549,"public void test01549() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) (short) (-310);
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    assertArrayEquals(new double[] { (-310.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",1,
project,0,test01550,"public void test01550() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) (short) (-310);
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    assertArrayEquals(new double[] { 0.9999997615814209, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0 }, doubleArray1, 0.01);
}",1,
project,0,test01551,"public void test01551() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) (short) (-310);
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    assertEquals(8, doubleArray0.length);
}",1,
project,0,test01552,"public void test01552() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) (short) (-310);
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    assertEquals(8, doubleArray1.length);
}",1,
project,0,test01653,"public void test01653() throws Throwable {
    double double0 = MathUtils.scalb((-6340.6206967), (-1981));
    assertEquals((-9.357104580839268E23), double0, 0.01);
}",0,
project,0,test01754,"public void test01754() throws Throwable {
    short short0 = MathUtils.indicator((short) 0);
    assertEquals((short) 1, short0);
}",0,assertNotNull(short0)
project,0,test01855,"public void test01855() throws Throwable {
    long long0 = MathUtils.indicator(0L);
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test01956,"public void test01956() throws Throwable {
    int int0 = MathUtils.indicator(2471);
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test02057,"public void test02057() throws Throwable {
    double double0 = MathUtils.indicator((double) 0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test02158,"public void test02158() throws Throwable {
    byte byte0 = MathUtils.indicator((byte) 39);
    assertEquals((byte) 1, byte0);
}",0,assertNotNull(byte0)
project,0,test02259,"public void test02259() throws Throwable {
    long long0 = MathUtils.gcd(0L, 2216L);
    assertEquals(2216L, long0);
}",0,
project,0,test02360,"public void test02360() throws Throwable {
    double double0 = MathUtils.factorialDouble((byte) 110);
    assertEquals(1.588245541522966E178, double0, 0.01);
}",1,
project,0,test02462,"public void test02462() throws Throwable {
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[8];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertNotSame(doubleArray0, doubleArray1);
}",0,
project,0,test02463,"public void test02463() throws Throwable {
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[8];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertNotSame(doubleArray1, doubleArray0);
}",0,
project,0,test02466,"public void test02466() throws Throwable {
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[8];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02467,"public void test02467() throws Throwable {
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[8];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test02468,"public void test02468() throws Throwable {
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[8];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
}",0,
project,0,test02469,"public void test02469() throws Throwable {
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[8];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertEquals(6, doubleArray0.length);
}",0,
project,0,test02470,"public void test02470() throws Throwable {
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[8];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertEquals(8, doubleArray1.length);
}",0,
project,0,test02572,"public void test02572() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = new double[9];
    boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    assertNotSame(doubleArray0, doubleArray1);
}",0,
project,0,test02573,"public void test02573() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = new double[9];
    boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    assertNotSame(doubleArray1, doubleArray0);
}",0,
project,0,test02576,"public void test02576() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = new double[9];
    boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02577,"public void test02577() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = new double[9];
    boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    assertArrayEquals(new double[] {}, doubleArray0, 0.01);
}",0,
project,0,test02578,"public void test02578() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = new double[9];
    boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
}",0,
project,0,test02579,"public void test02579() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = new double[9];
    boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    assertEquals(0, doubleArray0.length);
}",0,
project,0,test02580,"public void test02580() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = new double[9];
    boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    assertEquals(9, doubleArray1.length);
}",0,
project,0,test02681,"public void test02681() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.equalsIncludingNaN(0.0, 752.22, 0);
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02782,"public void test02782() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN(0.4342944622039795, 0.0, 0.4342944622039795);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test02883,"public void test02883() throws Throwable {
    boolean boolean0 = MathUtils.equals(1.0, (double) 2L, 1.0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test02984,"public void test02984() throws Throwable {
    boolean boolean0 = MathUtils.equals(10.0, 3087.04427599);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03085,"public void test03085() throws Throwable {
    double double0 = MathUtils.binomialCoefficientDouble(61, (-6));
    assertEquals(1.0, double0, 0.01);
}",1,
project,0,test03186,"public void test03186() throws Throwable {
    long long0 = MathUtils.subAndCheck(0L, (long) 9);
    assertEquals((-9L), long0);
}",1,
project,0,test03287,"public void test03287() throws Throwable {
    long long0 = MathUtils.addAndCheck(1800L, 1800L);
    assertEquals(3600L, long0);
}",0,
project,0,test03388,"public void test03388() throws Throwable {
    int int0 = MathUtils.addAndCheck(31, 64);
    assertEquals(95, int0);
}",1,
project,0,test03489,"public void test03489() throws Throwable {
    long long0 = MathUtils.subAndCheck(471L, (long) 1);
    assertEquals(470L, long0);
}",1,
project,0,test03590,"public void test03590() throws Throwable {
    int int0 = MathUtils.subAndCheck((-639), (-639));
    assertEquals(0, int0);
}",1,
project,0,test03691,"public void test03691() throws Throwable {
    int int0 = MathUtils.subAndCheck(0, 2257);
    assertEquals((-2257), int0);
}",1,
project,0,test03792,"public void test03792() throws Throwable {
    double double0 = MathUtils.sinh(0.0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test03893,"public void test03893() throws Throwable {
    double double0 = MathUtils.sinh((-3052.3));
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}",0,
project,0,test03994,"public void test03994() throws Throwable {
    float float0 = MathUtils.round(0.0F, 9, 0);
    assertEquals(1.0E-9F, float0, 0.01F);
}",0,
project,0,test04095,"public void test04095() throws Throwable {
    float float0 = MathUtils.round((-3002.0F), 0, 0);
    assertEquals((-3003.0F), float0, 0.01F);
}",0,
project,0,test04196,"public void test04196() throws Throwable {
    float float0 = MathUtils.round((float) 0, 915);
    assertEquals(0.0F, float0, 0.01F);
}",1,
project,0,test04297,"public void test04297() throws Throwable {
    float float0 = MathUtils.round((float) 14, 14);
    assertEquals(14.0F, float0, 0.01F);
}",1,
project,0,test04398,"public void test04398() throws Throwable {
    float float0 = MathUtils.round((-3241.0F), 30);
    assertEquals((-3241.0F), float0, 0.01F);
}",1,
project,0,test04499,"public void test04499() throws Throwable {
    double double0 = MathUtils.round(0.0, 0, 0);
    assertEquals(0.0, double0, 0.01);
}",1,
project,0,test045100,"public void test045100() throws Throwable {
    double double0 = MathUtils.round((double) 1, 136, 0);
    assertEquals(1.0, double0, 0.01);
}",1,
project,0,test046101,"public void test046101() throws Throwable {
    double double0 = MathUtils.round(1062.0, 706);
    assertEquals(1062.0, double0, 0.01);
}",1,
project,0,test047102,"public void test047102() throws Throwable {
    double double0 = MathUtils.round((-1531.101501175026), 927);
    assertEquals((-1531.101501175026), double0, 0.01);
}",1,
project,0,test048108,"public void test048108() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 95;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertNotNull(bigInteger1);
}",1,
project,0,test048109,"public void test048109() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 95;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertNotSame(bigInteger0, bigInteger1);
}",1,
project,0,test048110,"public void test048110() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 95;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertNotSame(bigInteger1, bigInteger0);
}",1,
project,0,test048112,"public void test048112() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 95;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertArrayEquals(new byte[] { (byte) 95, (byte) 0 }, byteArray0);
}",1,
project,0,test048113,"public void test048113() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 95;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertEquals(2, byteArray0.length);
}",1,
project,0,test049121,"public void test049121() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
    assertNotNull(bigInteger1);
}",1,
project,0,test049122,"public void test049122() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
    assertNotSame(bigInteger0, bigInteger1);
}",1,
project,0,test049123,"public void test049123() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
    assertNotSame(bigInteger1, bigInteger0);
}",1,
project,0,test050134,"public void test050134() throws Throwable {
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 85;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertNotNull(bigInteger1);
}",1,
project,0,test050135,"public void test050135() throws Throwable {
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 85;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertNotSame(bigInteger0, bigInteger1);
}",1,
project,0,test050136,"public void test050136() throws Throwable {
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 85;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertNotSame(bigInteger1, bigInteger0);
}",1,
project,0,test050138,"public void test050138() throws Throwable {
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 85;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertArrayEquals(new byte[] { (byte) 85 }, byteArray0);
}",1,
project,0,test050139,"public void test050139() throws Throwable {
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 85;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertEquals(1, byteArray0.length);
}",1,
project,0,test051147,"public void test051147() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
    assertNotNull(bigInteger1);
}",1,
project,0,test051148,"public void test051148() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
    assertSame(bigInteger0, bigInteger1);
}",1,
project,0,test051149,"public void test051149() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
    assertSame(bigInteger1, bigInteger0);
}",1,
project,0,test052154,"public void test052154() throws Throwable {
    long long0 = MathUtils.pow(4635822497680326656L, (long) 1);
    assertEquals(4635822497680326656L, long0);
}",1,
project,0,test053155,"public void test053155() throws Throwable {
    long long0 = MathUtils.pow((-4035746434778044925L), 483L);
    assertEquals((-1661078885208841573L), long0);
}",1,
project,0,test054156,"public void test054156() throws Throwable {
    long long0 = MathUtils.pow((long) (byte) 0, 1);
    assertEquals(0L, long0);
}",1,
project,0,test055157,"public void test055157() throws Throwable {
    long long0 = MathUtils.pow((-309L), 0);
    assertEquals(1L, long0);
}",1,
project,0,test056158,"public void test056158() throws Throwable {
    int int0 = MathUtils.pow(1880, (long) 1880);
    assertEquals(0, int0);
}",1,
project,0,test057159,"public void test057159() throws Throwable {
    int int0 = MathUtils.pow(143, (long) 143);
    assertEquals((-1907505297), int0);
}",1,
project,0,test058160,"public void test058160() throws Throwable {
    int int0 = MathUtils.pow(1, (int) (byte) 0);
    assertEquals(1, int0);
}",1,
project,0,test059161,"public void test059161() throws Throwable {
    int int0 = MathUtils.pow(9, 272);
    assertEquals((-1741412735), int0);
}",1,
project,0,test060162,"public void test060162() throws Throwable {
    double double0 = MathUtils.normalizeAngle(0.0, 0.0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test061163,"public void test061163() throws Throwable {
    double double0 = MathUtils.normalizeAngle(2304L, (-2648.155));
    assertEquals((-2647.1500220575135), double0, 0.01);
}",0,
project,0,test062164,"public void test062164() throws Throwable {
    int int0 = MathUtils.mulAndCheck(0, 40);
    assertEquals(0, int0);
}",1,
project,0,test063165,"public void test063165() throws Throwable {
    int int0 = MathUtils.mulAndCheck((-2703), 3908);
    assertEquals((-10563324), int0);
}",1,
project,0,test064166,"public void test064166() throws Throwable {
    double double0 = MathUtils.log(0.0, 570.4046387729519);
    assertEquals(-0.0, double0, 0.01);
}",0,
project,0,test065167,"public void test065167() throws Throwable {
    double double0 = MathUtils.log(4507L, 4507L);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test066168,"public void test066168() throws Throwable {
    double double0 = MathUtils.log((byte) 1, 0.0);
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}",0,
project,0,test067169,"public void test067169() throws Throwable {
    int int0 = MathUtils.hash((double[]) null);
    assertEquals(0, int0);
}",0,
project,0,test068170,"public void test068170() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = Double.NEGATIVE_INFINITY;
    int int0 = MathUtils.hash(doubleArray0);
    assertEquals((-1985685345), int0);
}",0,"assertEquals(1, int0)"
project,0,test068171,"public void test068171() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = Double.NEGATIVE_INFINITY;
    int int0 = MathUtils.hash(doubleArray0);
    assertArrayEquals(new double[] { Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test068172,"public void test068172() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = Double.NEGATIVE_INFINITY;
    int int0 = MathUtils.hash(doubleArray0);
    assertEquals(5, doubleArray0.length);
}",0,
project,0,test069173,"public void test069173() throws Throwable {
    int int0 = MathUtils.hash(1.0);
    assertEquals(1072693248, int0);
}",0,
project,0,test070174,"public void test070174() throws Throwable {
    int int0 = MathUtils.hash(9.219544613762692E-9);
    assertEquals((-1287859880), int0);
}",0,
project,0,test071175,"public void test071175() throws Throwable {
    int int0 = MathUtils.gcd(0, 0);
    assertEquals(0, int0);
}",1,
project,0,test072177,"public void test072177() throws Throwable {
    int[] intArray0 = new int[3];
    int[] intArray1 = new int[6];
    intArray1[0] = (-2147483644);
    int int0 = MathUtils.distanceInf(intArray0, intArray1);
    assertNotSame(intArray0, intArray1);
}",0,
project,0,test072178,"public void test072178() throws Throwable {
    int[] intArray0 = new int[3];
    int[] intArray1 = new int[6];
    intArray1[0] = (-2147483644);
    int int0 = MathUtils.distanceInf(intArray0, intArray1);
    assertNotSame(intArray1, intArray0);
}",0,
project,0,test072181,"public void test072181() throws Throwable {
    int[] intArray0 = new int[3];
    int[] intArray1 = new int[6];
    intArray1[0] = (-2147483644);
    int int0 = MathUtils.distanceInf(intArray0, intArray1);
    assertEquals(2147483644, int0);
}",0,"assertEquals(0, int0)"
project,0,test072182,"public void test072182() throws Throwable {
    int[] intArray0 = new int[3];
    int[] intArray1 = new int[6];
    intArray1[0] = (-2147483644);
    int int0 = MathUtils.distanceInf(intArray0, intArray1);
    assertArrayEquals(new int[] { 0, 0, 0 }, intArray0);
}",0,
project,0,test072183,"public void test072183() throws Throwable {
    int[] intArray0 = new int[3];
    int[] intArray1 = new int[6];
    intArray1[0] = (-2147483644);
    int int0 = MathUtils.distanceInf(intArray0, intArray1);
    assertArrayEquals(new int[] { (-2147483644), 0, 0, 0, 0, 0 }, intArray1);
}",0,
project,0,test072184,"public void test072184() throws Throwable {
    int[] intArray0 = new int[3];
    int[] intArray1 = new int[6];
    intArray1[0] = (-2147483644);
    int int0 = MathUtils.distanceInf(intArray0, intArray1);
    assertEquals(3, intArray0.length);
}",0,
project,0,test072185,"public void test072185() throws Throwable {
    int[] intArray0 = new int[3];
    int[] intArray1 = new int[6];
    intArray1[0] = (-2147483644);
    int int0 = MathUtils.distanceInf(intArray0, intArray1);
    assertEquals(6, intArray1.length);
}",0,
project,0,test073187,"public void test073187() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    assertNotSame(doubleArray0, doubleArray1);
}",0,
project,0,test073188,"public void test073188() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    assertNotSame(doubleArray1, doubleArray0);
}",0,
project,0,test073191,"public void test073191() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    assertEquals(49.053375057164, double0, 0.01);
}",0,
project,0,test073192,"public void test073192() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test073193,"public void test073193() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 49.053375057164, 0.0 }, doubleArray1, 0.01);
}",0,
project,0,test073194,"public void test073194() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    assertEquals(2, doubleArray0.length);
}",0,
project,0,test073195,"public void test073195() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    assertEquals(2, doubleArray1.length);
}",0,
project,0,test074197,"public void test074197() throws Throwable {
    int[] intArray0 = new int[6];
    intArray0[2] = 1030;
    int[] intArray1 = new int[6];
    double double0 = MathUtils.distance(intArray0, intArray1);
    assertNotSame(intArray0, intArray1);
}",0,
project,0,test074198,"public void test074198() throws Throwable {
    int[] intArray0 = new int[6];
    intArray0[2] = 1030;
    int[] intArray1 = new int[6];
    double double0 = MathUtils.distance(intArray0, intArray1);
    assertNotSame(intArray1, intArray0);
}",0,
project,0,test074201,"public void test074201() throws Throwable {
    int[] intArray0 = new int[6];
    intArray0[2] = 1030;
    int[] intArray1 = new int[6];
    double double0 = MathUtils.distance(intArray0, intArray1);
    assertEquals(1030.0, double0, 0.01);
}",0,
project,0,test074202,"public void test074202() throws Throwable {
    int[] intArray0 = new int[6];
    intArray0[2] = 1030;
    int[] intArray1 = new int[6];
    double double0 = MathUtils.distance(intArray0, intArray1);
    assertArrayEquals(new int[] { 0, 0, 1030, 0, 0, 0 }, intArray0);
}",0,
project,0,test074203,"public void test074203() throws Throwable {
    int[] intArray0 = new int[6];
    intArray0[2] = 1030;
    int[] intArray1 = new int[6];
    double double0 = MathUtils.distance(intArray0, intArray1);
    assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0 }, intArray1);
}",0,
project,0,test074204,"public void test074204() throws Throwable {
    int[] intArray0 = new int[6];
    intArray0[2] = 1030;
    int[] intArray1 = new int[6];
    double double0 = MathUtils.distance(intArray0, intArray1);
    assertEquals(6, intArray0.length);
}",0,
project,0,test074205,"public void test074205() throws Throwable {
    int[] intArray0 = new int[6];
    intArray0[2] = 1030;
    int[] intArray1 = new int[6];
    double double0 = MathUtils.distance(intArray0, intArray1);
    assertEquals(6, intArray1.length);
}",0,
project,0,test075207,"public void test075207() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 114.316110400768;
    double[] doubleArray1 = new double[6];
    double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    assertNotSame(doubleArray0, doubleArray1);
}",0,
project,0,test075208,"public void test075208() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 114.316110400768;
    double[] doubleArray1 = new double[6];
    double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    assertNotSame(doubleArray1, doubleArray0);
}",0,
project,0,test075211,"public void test075211() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 114.316110400768;
    double[] doubleArray1 = new double[6];
    double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    assertEquals(114.316110400768, double0, 0.01);
}",0,
project,0,test075212,"public void test075212() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 114.316110400768;
    double[] doubleArray1 = new double[6];
    double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 114.316110400768, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test075213,"public void test075213() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 114.316110400768;
    double[] doubleArray1 = new double[6];
    double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
}",0,
project,0,test075214,"public void test075214() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 114.316110400768;
    double[] doubleArray1 = new double[6];
    double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    assertEquals(4, doubleArray0.length);
}",0,
project,0,test075215,"public void test075215() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 114.316110400768;
    double[] doubleArray1 = new double[6];
    double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    assertEquals(6, doubleArray1.length);
}",0,
project,0,test076216,"public void test076216() throws Throwable {
    long long0 = MathUtils.addAndCheck(0L, (long) (short) 0);
    assertEquals(0L, long0);
}",1,
project,0,test077217,"public void test077217() throws Throwable {
    long long0 = MathUtils.addAndCheck((long) (byte) 1, (-1694L));
    assertEquals((-1693L), long0);
}",1,
project,0,test078218,"public void test078218() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.safeNorm((double[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test079219,"public void test079219() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.round(2921.464137515, (int) (byte) 0, (-2682));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",1,
project,0,test080220,"public void test080220() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.round((-1725.28993636968), 710504735, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // BigInteger would overflow supported range
        //
        verifyException(""java.math.BigInteger"", e);
    }
}",1,
project,0,test081221,"public void test081221() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.pow((BigInteger) null, (BigInteger) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test082222,"public void test082222() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.pow((BigInteger) null, 65L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test083223,"public void test083223() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.pow((BigInteger) null, 883);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test084228,"public void test084228() throws Throwable {
    MockRandom mockRandom0 = new MockRandom((-37L));
    BigInteger bigInteger0 = new BigInteger(1162067162, mockRandom0);
    // Undeclared exception!
    try {
        MathUtils.pow(bigInteger0, 1162067162);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // BigInteger would overflow supported range
        //
        verifyException(""java.math.BigInteger"", e);
    }
}",1,
project,0,test085229,"public void test085229() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.normalizeArray((double[]) null, (-1067.364075367));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test086230,"public void test086230() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.lcm(4577762542105553359L, 121645100408832000L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: multiply
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test087231,"public void test087231() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.lcm((-1287859880), (-2376));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test089232,"public void test089232() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.distanceInf((int[]) null, (int[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test090234,"public void test090234() throws Throwable {
    int[] intArray0 = new int[6];
    int[] intArray1 = new int[1];
    // Undeclared exception!
    try {
        MathUtils.distanceInf(intArray0, intArray1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test091235,"public void test091235() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.distanceInf((double[]) null, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test092236,"public void test092236() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.distance1((int[]) null, (int[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test093237,"public void test093237() throws Throwable {
    double[] doubleArray0 = new double[1];
    // Undeclared exception!
    try {
        MathUtils.distance1(doubleArray0, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test094238,"public void test094238() throws Throwable {
    int[] intArray0 = new int[5];
    // Undeclared exception!
    try {
        MathUtils.distance((int[]) null, intArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test095240,"public void test095240() throws Throwable {
    int[] intArray0 = new int[7];
    int[] intArray1 = new int[1];
    // Undeclared exception!
    try {
        MathUtils.distance(intArray0, intArray1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test096241,"public void test096241() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.distance((double[]) null, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test097243,"public void test097243() throws Throwable {
    double[] doubleArray0 = new double[5];
    double[] doubleArray1 = new double[1];
    // Undeclared exception!
    try {
        MathUtils.distance(doubleArray0, doubleArray1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test098244,"public void test098244() throws Throwable {
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
    // Undeclared exception!
    try {
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test099245,"public void test099245() throws Throwable {
    double[] doubleArray0 = new double[0];
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
    // Undeclared exception!
    try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test100246,"public void test100246() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficientDouble((-2147483647), 72);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= k for binomial coefficient (n,k), got n = -2,147,483,647, k = 72
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test101247,"public void test101247() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficient((-386), 1547);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= k for binomial coefficient (n,k), got n = -386, k = 1,547
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test102248,"public void test102248() throws Throwable {
    double[] doubleArray0 = new double[6];
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
    // Undeclared exception!
    try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // points 0 and 1 are not strictly increasing (0 >= 0)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test103249,"public void test103249() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.mulAndCheck(287L, 2935890503282001226L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: multiply
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test104250,"public void test104250() throws Throwable {
    long long0 = MathUtils.mulAndCheck((long) (short) 1, 336L);
    assertEquals(336L, long0);
}",0,
project,0,test105251,"public void test105251() throws Throwable {
    long long0 = MathUtils.mulAndCheck((-5034868814120038111L), 1L);
    assertEquals((-5034868814120038111L), long0);
}",0,
project,0,test106252,"public void test106252() throws Throwable {
    long long0 = MathUtils.mulAndCheck(0L, 1800L);
    assertEquals(0L, long0);
}",0,
project,0,test107253,"public void test107253() throws Throwable {
    int int0 = MathUtils.mulAndCheck((-473), (-1621));
    assertEquals(766733, int0);
}",1,
project,0,test108254,"public void test108254() throws Throwable {
    float float0 = MathUtils.indicator((-1.0F));
    assertEquals((-1.0F), float0, 0.01F);
}",0,
project,0,test109255,"public void test109255() throws Throwable {
    long long0 = MathUtils.gcd(355687428096000L, 355687428096000L);
    assertEquals(355687428096000L, long0);
}",0,
project,0,test110256,"public void test110256() throws Throwable {
    int int0 = MathUtils.gcd(9, 1532);
    assertEquals(1, int0);
}",0,
project,0,test111257,"public void test111257() throws Throwable {
    long long0 = MathUtils.factorial(13);
    assertEquals(6227020800L, long0);
}",1,
project,0,test112258,"public void test112258() throws Throwable {
    boolean boolean0 = MathUtils.equals((double) 1, (double) (-978), 123);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test113259,"public void test113259() throws Throwable {
    boolean boolean0 = MathUtils.equals((-1409.0), (-1409.0), 902);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test114260,"public void test114260() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.equals(0.5000000000042687, 3087.04427599, 1073741824);
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test115261,"public void test115261() throws Throwable {
    boolean boolean0 = MathUtils.equals(545.8799724201457, 545.8799724201457, 1030);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test116262,"public void test116262() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.equals((-3010.7841332), 1439.9909648456148, (-2144));
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test117263,"public void test117263() throws Throwable {
    boolean boolean0 = MathUtils.equals((-2259.94506036678), (-2259.94506036678), (-2259.94506036678));
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test118264,"public void test118264() throws Throwable {
    boolean boolean0 = MathUtils.equals(2.2250738585072014E-308, (double) 1, 2.2250738585072014E-308);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test119265,"public void test119265() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test120266,"public void test120266() throws Throwable {
    boolean boolean0 = MathUtils.equals((-3052.3), (-3052.3));
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test121267,"public void test121267() throws Throwable {
    double double0 = MathUtils.binomialCoefficientLog(2025, 14);
    assertEquals(81.35029006264689, double0, 0.01);
}",1,
project,0,test122268,"public void test122268() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficient(119764, 927);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: multiply
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test123269,"public void test123269() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[2] = Double.NaN;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test123270,"public void test123270() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[2] = Double.NaN;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertArrayEquals(new double[] { 0.0, 0.0, Double.NaN }, doubleArray0, 0.01);
}",0,
project,0,test123271,"public void test123271() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[2] = Double.NaN;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(3, doubleArray0.length);
}",0,
project,0,test124272,"public void test124272() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 2.2250738585072014E-308;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(2.2250738585072014E-308, double0, 0.01);
}",0,
project,0,test124273,"public void test124273() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 2.2250738585072014E-308;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertArrayEquals(new double[] { 2.2250738585072014E-308, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test124274,"public void test124274() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 2.2250738585072014E-308;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(3, doubleArray0.length);
}",0,
project,0,test125275,"public void test125275() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[6] = Double.POSITIVE_INFINITY;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}",0,
project,0,test125276,"public void test125276() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[6] = Double.POSITIVE_INFINITY;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY }, doubleArray0, 0.01);
}",0,
project,0,test125277,"public void test125277() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[6] = Double.POSITIVE_INFINITY;
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(7, doubleArray0.length);
}",0,
project,0,test126278,"public void test126278() throws Throwable {
    double[] doubleArray0 = new double[8];
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test126279,"public void test126279() throws Throwable {
    double[] doubleArray0 = new double[8];
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test126280,"public void test126280() throws Throwable {
    double[] doubleArray0 = new double[8];
    double double0 = MathUtils.safeNorm(doubleArray0);
    assertEquals(8, doubleArray0.length);
}",0,
project,0,test127281,"public void test127281() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 1060.6;
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
    // Undeclared exception!
    try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // points 0 and 1 are not decreasing (0 < 1,060.6)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test128282,"public void test128282() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 61;
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
    // Undeclared exception!
    try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // points 1 and 2 are not strictly decreasing (0 <= 0)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test129283,"public void test129283() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[1] = 1.0;
    MathUtils.checkOrder(doubleArray0);
    assertArrayEquals(new double[] { 0.0, 1.0 }, doubleArray0, 0.01);
}",1,
project,0,test129284,"public void test129284() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[1] = 1.0;
    MathUtils.checkOrder(doubleArray0);
    assertEquals(2, doubleArray0.length);
}",1,
project,0,test130285,"public void test130285() throws Throwable {
    double[] doubleArray0 = new double[3];
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
    MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",1,
project,0,test130286,"public void test130286() throws Throwable {
    double[] doubleArray0 = new double[3];
    MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
    MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    assertEquals(3, doubleArray0.length);
}",1,
project,0,test131287,"public void test131287() throws Throwable {
    int[] intArray0 = new int[4];
    int int0 = MathUtils.distanceInf(intArray0, intArray0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test131288,"public void test131288() throws Throwable {
    int[] intArray0 = new int[4];
    int int0 = MathUtils.distanceInf(intArray0, intArray0);
    assertArrayEquals(new int[] { 0, 0, 0, 0 }, intArray0);
}",0,
project,0,test131289,"public void test131289() throws Throwable {
    int[] intArray0 = new int[4];
    int int0 = MathUtils.distanceInf(intArray0, intArray0);
    assertEquals(4, intArray0.length);
}",0,
project,0,test132290,"public void test132290() throws Throwable {
    double[] doubleArray0 = new double[4];
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test132291,"public void test132291() throws Throwable {
    double[] doubleArray0 = new double[4];
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test132292,"public void test132292() throws Throwable {
    double[] doubleArray0 = new double[4];
    double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
    assertEquals(4, doubleArray0.length);
}",0,
project,0,test133296,"public void test133296() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertNotNull(bigInteger1);
}",1,
project,0,test133297,"public void test133297() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertNotSame(bigInteger0, bigInteger1);
}",1,
project,0,test133298,"public void test133298() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertNotSame(bigInteger1, bigInteger0);
}",1,
project,0,test134309,"public void test134309() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) (-33);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    try {
        MathUtils.pow(bigInteger0, bigInteger0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cannot raise an integral value to a negative power (-608,742,554,432,415,203,328^-608,742,554,432,415,203,328)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test135313,"public void test135313() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertNotNull(bigInteger1);
}",1,
project,0,test135314,"public void test135314() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertNotSame(bigInteger0, bigInteger1);
}",1,
project,0,test135315,"public void test135315() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    assertNotSame(bigInteger1, bigInteger0);
}",1,
project,0,test136326,"public void test136326() throws Throwable {
    byte[] byteArray0 = new byte[1];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertNotNull(bigInteger1);
}",1,
project,0,test136327,"public void test136327() throws Throwable {
    byte[] byteArray0 = new byte[1];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertNotSame(bigInteger0, bigInteger1);
}",1,
project,0,test136328,"public void test136328() throws Throwable {
    byte[] byteArray0 = new byte[1];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertNotSame(bigInteger1, bigInteger0);
}",1,
project,0,test136330,"public void test136330() throws Throwable {
    byte[] byteArray0 = new byte[1];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertArrayEquals(new byte[] { (byte) 0 }, byteArray0);
}",1,
project,0,test136331,"public void test136331() throws Throwable {
    byte[] byteArray0 = new byte[1];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    assertEquals(1, byteArray0.length);
}",1,
project,0,test137339,"public void test137339() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    try {
        MathUtils.pow(bigInteger0, (-4607181111125649408L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cannot raise an integral value to a negative power (10^-4,607,181,111,125,649,408)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test138343,"public void test138343() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    try {
        MathUtils.pow(bigInteger0, (-997));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cannot raise an integral value to a negative power (1^-997)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test139347,"public void test139347() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
    assertNotNull(bigInteger1);
}",1,
project,0,test139348,"public void test139348() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
    assertNotSame(bigInteger0, bigInteger1);
}",1,
project,0,test139349,"public void test139349() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
    assertNotSame(bigInteger1, bigInteger0);
}",1,
project,0,test140355,"public void test140355() throws Throwable {
    try {
        MathUtils.pow(0L, (-638L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cannot raise an integral value to a negative power (0^-638)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test141356,"public void test141356() throws Throwable {
    long long0 = MathUtils.pow(0L, 1581L);
    assertEquals(0L, long0);
}",1,
project,0,test142357,"public void test142357() throws Throwable {
    try {
        MathUtils.pow((long) 1, (-1841));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cannot raise an integral value to a negative power (1^-1,841)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test143358,"public void test143358() throws Throwable {
    long long0 = MathUtils.pow(4294967295L, 596);
    assertEquals((-2559800508415L), long0);
}",1,
project,0,test144359,"public void test144359() throws Throwable {
    int int0 = MathUtils.pow((-2059), 2L);
    assertEquals(4239481, int0);
}",1,
project,0,test145360,"public void test145360() throws Throwable {
    try {
        MathUtils.pow(14, (-1445L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cannot raise an integral value to a negative power (14^-1,445)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test146361,"public void test146361() throws Throwable {
    int int0 = MathUtils.pow(395, (long) 0);
    assertEquals(1, int0);
}",1,
project,0,test147362,"public void test147362() throws Throwable {
    try {
        MathUtils.pow((-3551), (-3551));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cannot raise an integral value to a negative power (-3,551^-3,551)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test148363,"public void test148363() throws Throwable {
    int int0 = MathUtils.pow(0, 2682);
    assertEquals(0, int0);
}",1,
project,0,test149364,"public void test149364() throws Throwable {
    int int0 = MathUtils.subAndCheck(220, (-967));
    assertEquals(1187, int0);
}",1,
project,0,test150365,"public void test150365() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.subAndCheck((-2147483646), (int) (short) 238);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in subtraction: -2,147,483,646 - 238
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test151366,"public void test151366() throws Throwable {
    short short0 = MathUtils.sign((short) (-4654));
    assertEquals((short) (-1), short0);
}",0,assertNotNull(short0)
project,0,test152367,"public void test152367() throws Throwable {
    short short0 = MathUtils.sign((short) 0);
    assertEquals((short) 0, short0);
}",0,assertNotNull(short0)
project,0,test153368,"public void test153368() throws Throwable {
    short short0 = MathUtils.sign((short) 85);
    assertEquals((short) 1, short0);
}",0,assertNotNull(short0)
project,0,test154369,"public void test154369() throws Throwable {
    long long0 = MathUtils.sign((long) (-1367));
    assertEquals((-1L), long0);
}",0,"assertEquals(1, long0)"
project,0,test155370,"public void test155370() throws Throwable {
    long long0 = MathUtils.sign(0L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test156371,"public void test156371() throws Throwable {
    long long0 = MathUtils.sign((long) 916);
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test157372,"public void test157372() throws Throwable {
    int int0 = MathUtils.sign((-2355));
    assertEquals((-1), int0);
}",0,"assertEquals(1, int0)"
project,0,test158373,"public void test158373() throws Throwable {
    int int0 = MathUtils.sign(0);
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test159374,"public void test159374() throws Throwable {
    int int0 = MathUtils.sign(4239481);
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test160375,"public void test160375() throws Throwable {
    float float0 = MathUtils.sign(1694.555F);
    assertEquals(1.0F, float0, 0.01F);
}",0,
project,0,test161376,"public void test161376() throws Throwable {
    float float0 = MathUtils.sign((float) 0);
    assertEquals(0.0F, float0, 0.01F);
}",0,
project,0,test162377,"public void test162377() throws Throwable {
    float float0 = MathUtils.sign(Float.NaN);
    assertEquals(Float.NaN, float0, 0.01F);
}",1,
project,0,test163378,"public void test163378() throws Throwable {
    float float0 = MathUtils.sign((-61.0F));
    assertEquals((-1.0F), float0, 0.01F);
}",0,
project,0,test164379,"public void test164379() throws Throwable {
    double double0 = MathUtils.sign((-48.01345));
    assertEquals((-1.0), double0, 0.01);
}",0,
project,0,test165380,"public void test165380() throws Throwable {
    double double0 = MathUtils.sign(0.0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test166381,"public void test166381() throws Throwable {
    double double0 = MathUtils.sign(323.0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test167382,"public void test167382() throws Throwable {
    byte byte0 = MathUtils.sign((byte) (-31));
    assertEquals((byte) (-1), byte0);
}",0,assertNotNull(byte0)
project,0,test168383,"public void test168383() throws Throwable {
    byte byte0 = MathUtils.sign((byte) 0);
    assertEquals((byte) 0, byte0);
}",0,assertNotNull(byte0)
project,0,test169384,"public void test169384() throws Throwable {
    byte byte0 = MathUtils.sign((byte) 24);
    assertEquals((byte) 1, byte0);
}",0,assertNotNull(byte0)
project,0,test170385,"public void test170385() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.round((float) 0, 0, (-1687));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid rounding method -1,687, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test171386,"public void test171386() throws Throwable {
    float float0 = MathUtils.round((float) 2508, 2508, 1);
    assertEquals(Float.NaN, float0, 0.01F);
}",0,
project,0,test172387,"public void test172387() throws Throwable {
    float float0 = MathUtils.round((float) 0L, 9998, 0);
    assertEquals(0.0F, float0, 0.01F);
}",0,
project,0,test173388,"public void test173388() throws Throwable {
    double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 61, 0);
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}",1,
project,0,test174389,"public void test174389() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) Float.NaN;
    doubleArray0[2] = (double) 402;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    assertNotNull(doubleArray1);
}",1,
project,0,test174390,"public void test174390() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) Float.NaN;
    doubleArray0[2] = (double) 402;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    assertNotSame(doubleArray0, doubleArray1);
}",1,
project,0,test174391,"public void test174391() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) Float.NaN;
    doubleArray0[2] = (double) 402;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    assertNotSame(doubleArray1, doubleArray0);
}",1,
project,0,test174393,"public void test174393() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) Float.NaN;
    doubleArray0[2] = (double) 402;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    assertArrayEquals(new double[] { Double.NaN, 0.0, 402.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",1,
project,0,test174394,"public void test174394() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) Float.NaN;
    doubleArray0[2] = (double) 402;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    assertArrayEquals(new double[] { Double.NaN, 0.0, 2202.8, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
}",1,
project,0,test174395,"public void test174395() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) Float.NaN;
    doubleArray0[2] = (double) 402;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    assertEquals(6, doubleArray0.length);
}",1,
project,0,test174396,"public void test174396() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) Float.NaN;
    doubleArray0[2] = (double) 402;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    assertEquals(6, doubleArray1.length);
}",1,
project,0,test175397,"public void test175397() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) Float.NaN;
    try {
        MathUtils.normalizeArray(doubleArray0, 2202.8);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // array sums to zero
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test176398,"public void test176398() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[4] = Double.POSITIVE_INFINITY;
    try {
        MathUtils.normalizeArray(doubleArray0, (-3551.0));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Array contains an infinite element, \u221E at index 4
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test177399,"public void test177399() throws Throwable {
    double[] doubleArray0 = new double[3];
    try {
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Cannot normalize to NaN
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test178400,"public void test178400() throws Throwable {
    double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, (byte) 9);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}",0,
project,0,test179401,"public void test179401() throws Throwable {
    double double0 = MathUtils.scalb(0.0, (-64));
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test180402,"public void test180402() throws Throwable {
    long long0 = MathUtils.mulAndCheck(2307L, 0L);
    assertEquals(0L, long0);
}",1,
project,0,test181403,"public void test181403() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.mulAndCheck((long) (-1981), 2935890503282001226L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: multiply
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test182404,"public void test182404() throws Throwable {
    long long0 = MathUtils.mulAndCheck((-904L), 0L);
    assertEquals(0L, long0);
}",1,
project,0,test183405,"public void test183405() throws Throwable {
    long long0 = MathUtils.mulAndCheck((-934L), (-934L));
    assertEquals(872356L, long0);
}",0,
project,0,test184406,"public void test184406() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.mulAndCheck((-976L), (-4035746434778044925L));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: multiply
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",0,
project,0,test185407,"public void test185407() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.mulAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test186408,"public void test186408() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.mulAndCheck((-2146209931), 6);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test187409,"public void test187409() throws Throwable {
    long long0 = MathUtils.lcm((-95L), 0L);
    assertEquals(0L, long0);
}",1,
project,0,test188410,"public void test188410() throws Throwable {
    long long0 = MathUtils.lcm(0L, (-5241L));
    assertEquals(0L, long0);
}",1,
project,0,test189411,"public void test189411() throws Throwable {
    int int0 = MathUtils.lcm((-1712), 0);
    assertEquals(0, int0);
}",1,
project,0,test190412,"public void test190412() throws Throwable {
    int int0 = MathUtils.lcm(70, 70);
    assertEquals(70, int0);
}",0,
project,0,test191413,"public void test191413() throws Throwable {
    int int0 = MathUtils.lcm(0, 931);
    assertEquals(0, int0);
}",1,
project,0,test192414,"public void test192414() throws Throwable {
    short short0 = MathUtils.indicator((short) 78);
    assertEquals((short) 1, short0);
}",0,assertNotNull(short0)
project,0,test193415,"public void test193415() throws Throwable {
    short short0 = MathUtils.indicator((short) (-2116));
    assertEquals((short) (-1), short0);
}",0,assertNotNull(short0)
project,0,test194416,"public void test194416() throws Throwable {
    long long0 = MathUtils.indicator((long) 70);
    assertEquals(1L, long0);
}",0,"assertEquals(0, long0)"
project,0,test195417,"public void test195417() throws Throwable {
    long long0 = MathUtils.indicator((-2175L));
    assertEquals((-1L), long0);
}",0,"assertEquals(0, long0)"
project,0,test196418,"public void test196418() throws Throwable {
    int int0 = MathUtils.indicator(0);
    assertEquals(1, int0);
}",0,
project,0,test197419,"public void test197419() throws Throwable {
    int int0 = MathUtils.indicator((-1400));
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test198420,"public void test198420() throws Throwable {
    float float0 = MathUtils.indicator(1.0F);
    assertEquals(1.0F, float0, 0.01F);
}",0,
project,0,test199421,"public void test199421() throws Throwable {
    float float0 = MathUtils.indicator(Float.NaN);
    assertEquals(Float.NaN, float0, 0.01F);
}",0,
project,0,test200422,"public void test200422() throws Throwable {
    double double0 = MathUtils.indicator(1.0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test201423,"public void test201423() throws Throwable {
    double double0 = MathUtils.indicator((double) (-681));
    assertEquals((-1.0), double0, 0.01);
}",0,
project,0,test202424,"public void test202424() throws Throwable {
    byte byte0 = MathUtils.indicator((byte) 0);
    assertEquals((byte) 1, byte0);
}",0,assertNotNull(byte0)
project,0,test203425,"public void test203425() throws Throwable {
    byte byte0 = MathUtils.indicator((byte) (-31));
    assertEquals((byte) (-1), byte0);
}",0,assertNotNull(byte0)
project,0,test204426,"public void test204426() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.gcd((-9223372036854775808L), (-9223372036854775808L));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: gcd(-9,223,372,036,854,775,808, -9,223,372,036,854,775,808) is 2^63
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test205427,"public void test205427() throws Throwable {
    long long0 = MathUtils.lcm(395L, (-2144L));
    assertEquals(846880L, long0);
}",1,
project,0,test206428,"public void test206428() throws Throwable {
    long long0 = MathUtils.gcd((-1L), (long) (short) 0);
    assertEquals(1L, long0);
}",1,
project,0,test207429,"public void test207429() throws Throwable {
    long long0 = MathUtils.gcd((-9223372036854775808L), 4648655997399728128L);
    assertEquals(8796093022208L, long0);
}",0,
project,0,test208430,"public void test208430() throws Throwable {
    long long0 = MathUtils.gcd((long) 0, (long) 0);
    assertEquals(0L, long0);
}",1,
project,0,test209431,"public void test209431() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: gcd(-2,147,483,648, -2,147,483,648) is 2^31
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test210432,"public void test210432() throws Throwable {
    int int0 = MathUtils.gcd((-1172), (-2567));
    assertEquals(1, int0);
}",0,
project,0,test211433,"public void test211433() throws Throwable {
    int int0 = MathUtils.gcd((-1), 0);
    assertEquals(1, int0);
}",1,
project,0,test212434,"public void test212434() throws Throwable {
    int int0 = MathUtils.gcd(0, (-303));
    assertEquals(303, int0);
}",1,
project,0,test213435,"public void test213435() throws Throwable {
    double double0 = MathUtils.factorialLog(1300);
    assertEquals(8025.659468892016, double0, 0.01);
}",1,
project,0,test214436,"public void test214436() throws Throwable {
    double double0 = MathUtils.factorialLog(0);
    assertEquals(0.0, double0, 0.01);
}",1,
project,0,test215437,"public void test215437() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.factorialLog((-1192));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= 0 for n!, got n = -1,192
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test217438,"public void test217438() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.factorialDouble((-1108));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= 0 for n!, got n = -1,108
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test218439,"public void test218439() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.factorial(83);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // factorial value is too large to fit in a long
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test219440,"public void test219440() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.factorial((-82));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= 0 for n!, got n = -82
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test220441,"public void test220441() throws Throwable {
    double double0 = MathUtils.factorialDouble(0);
    assertEquals(1.0, double0, 0.01);
}",1,
project,0,test221443,"public void test221443() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertNotSame(doubleArray0, doubleArray1);
}",0,
project,0,test221444,"public void test221444() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertNotSame(doubleArray1, doubleArray0);
}",0,
project,0,test221447,"public void test221447() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test221448,"public void test221448() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test221449,"public void test221449() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 49.053375057164, 0.0 }, doubleArray1, 0.01);
}",0,
project,0,test221450,"public void test221450() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertEquals(2, doubleArray0.length);
}",0,
project,0,test221451,"public void test221451() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = new double[2];
    doubleArray1[0] = 49.053375057164;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertEquals(2, doubleArray1.length);
}",0,
project,0,test222453,"public void test222453() throws Throwable {
    double[] doubleArray0 = new double[9];
    double[] doubleArray1 = new double[5];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertNotSame(doubleArray0, doubleArray1);
}",0,
project,0,test222454,"public void test222454() throws Throwable {
    double[] doubleArray0 = new double[9];
    double[] doubleArray1 = new double[5];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertNotSame(doubleArray1, doubleArray0);
}",0,
project,0,test222457,"public void test222457() throws Throwable {
    double[] doubleArray0 = new double[9];
    double[] doubleArray1 = new double[5];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test222458,"public void test222458() throws Throwable {
    double[] doubleArray0 = new double[9];
    double[] doubleArray1 = new double[5];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test222459,"public void test222459() throws Throwable {
    double[] doubleArray0 = new double[9];
    double[] doubleArray1 = new double[5];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
}",0,
project,0,test222460,"public void test222460() throws Throwable {
    double[] doubleArray0 = new double[9];
    double[] doubleArray1 = new double[5];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertEquals(9, doubleArray0.length);
}",0,
project,0,test222461,"public void test222461() throws Throwable {
    double[] doubleArray0 = new double[9];
    double[] doubleArray1 = new double[5];
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    assertEquals(5, doubleArray1.length);
}",0,
project,0,test223462,"public void test223462() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test224463,"public void test224463() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    assertNotNull(doubleArray1);
}",1,
project,0,test224464,"public void test224464() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    assertNotSame(doubleArray0, doubleArray1);
}",1,
project,0,test224465,"public void test224465() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    assertNotSame(doubleArray1, doubleArray0);
}",1,
project,0,test224467,"public void test224467() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    assertArrayEquals(new double[] { 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",1,
project,0,test224468,"public void test224468() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    assertArrayEquals(new double[] { 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
}",1,
project,0,test224469,"public void test224469() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    assertEquals(8, doubleArray0.length);
}",1,
project,0,test224470,"public void test224470() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    assertEquals(8, doubleArray1.length);
}",1,
project,0,test224471,"public void test224471() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertNotSame(doubleArray0, doubleArray1);
}",0,
project,0,test224472,"public void test224472() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertNotSame(doubleArray1, doubleArray0);
}",0,
project,0,test224475,"public void test224475() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test224476,"public void test224476() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test224477,"public void test224477() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
}",0,
project,0,test224478,"public void test224478() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertEquals(8, doubleArray0.length);
}",0,
project,0,test224479,"public void test224479() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1.0F;
    doubleArray0[2] = (double) 1.0F;
    double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertEquals(8, doubleArray1.length);
}",0,
project,0,test225481,"public void test225481() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[] doubleArray1 = new double[6];
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertNotSame(doubleArray0, doubleArray1);
}",0,
project,0,test225482,"public void test225482() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[] doubleArray1 = new double[6];
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertNotSame(doubleArray1, doubleArray0);
}",0,
project,0,test225485,"public void test225485() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[] doubleArray1 = new double[6];
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test225486,"public void test225486() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[] doubleArray1 = new double[6];
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test225487,"public void test225487() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[] doubleArray1 = new double[6];
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
}",0,
project,0,test225488,"public void test225488() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[] doubleArray1 = new double[6];
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertEquals(4, doubleArray0.length);
}",0,
project,0,test225489,"public void test225489() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[] doubleArray1 = new double[6];
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertEquals(6, doubleArray1.length);
}",0,
project,0,test226490,"public void test226490() throws Throwable {
    double[] doubleArray0 = new double[1];
    boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test226491,"public void test226491() throws Throwable {
    double[] doubleArray0 = new double[1];
    boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    assertArrayEquals(new double[] { 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test226492,"public void test226492() throws Throwable {
    double[] doubleArray0 = new double[1];
    boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    assertEquals(1, doubleArray0.length);
}",0,
project,0,test227493,"public void test227493() throws Throwable {
    double[] doubleArray0 = new double[1];
    boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test227494,"public void test227494() throws Throwable {
    double[] doubleArray0 = new double[1];
    boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    assertArrayEquals(new double[] { 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test227495,"public void test227495() throws Throwable {
    double[] doubleArray0 = new double[1];
    boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    assertEquals(1, doubleArray0.length);
}",0,
project,0,test228496,"public void test228496() throws Throwable {
    boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test229497,"public void test229497() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0.0F, 647);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test230498,"public void test230498() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) 1, (double) (short) 19, 22);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test231499,"public void test231499() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-1769.71));
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test232500,"public void test232500() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.equalsIncludingNaN((double) 6L, 2.0, 4194304);
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test233501,"public void test233501() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN(11.0, 888.8365771801, 1242.851314);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test234502,"public void test234502() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2021.0989655927, (-189.65088836));
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test235503,"public void test235503() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, 10.0, 10.0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test236504,"public void test236504() throws Throwable {
    boolean boolean0 = MathUtils.equals(87.0, (double) 916, (double) 1300);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test237505,"public void test237505() throws Throwable {
    boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 1568.3587501037364);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test238506,"public void test238506() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = Double.NaN;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test238507,"public void test238507() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = Double.NaN;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
    assertArrayEquals(new double[] { Double.NaN, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test238508,"public void test238508() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = Double.NaN;
    boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
    assertEquals(3, doubleArray0.length);
}",0,
project,0,test239509,"public void test239509() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = Double.NaN;
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test239510,"public void test239510() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = Double.NaN;
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    assertArrayEquals(new double[] { Double.NaN, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test239511,"public void test239511() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = Double.NaN;
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    assertEquals(3, doubleArray0.length);
}",0,
project,0,test240512,"public void test240512() throws Throwable {
    int int0 = MathUtils.compareTo(Double.NaN, 0, 1);
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test241513,"public void test241513() throws Throwable {
    int int0 = MathUtils.compareTo(1.304E19, 1.304E19, 0.097);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test242514,"public void test242514() throws Throwable {
    int int0 = MathUtils.compareTo(647.3, 2294L, 0.0);
    assertEquals((-1), int0);
}",0,
project,0,test243515,"public void test243515() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficientLog((-2595), (-2595));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= 0 for binomial coefficient (n,k), got n = -2,595
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test244516,"public void test244516() throws Throwable {
    double double0 = MathUtils.binomialCoefficientLog(1627, 1525);
    assertEquals(378.0249090546729, double0, 0.01);
}",1,
project,0,test245517,"public void test245517() throws Throwable {
    double double0 = MathUtils.binomialCoefficientLog(524, (-3363));
    assertEquals(0.0, double0, 0.01);
}",1,
project,0,test246518,"public void test246518() throws Throwable {
    double double0 = MathUtils.binomialCoefficientLog(205, 0);
    assertEquals(0.0, double0, 0.01);
}",1,
project,0,test247519,"public void test247519() throws Throwable {
    double double0 = MathUtils.binomialCoefficientLog(1, (-681));
    assertEquals(0.0, double0, 0.01);
}",1,
project,0,test248520,"public void test248520() throws Throwable {
    double double0 = MathUtils.binomialCoefficientLog(0, 0);
    assertEquals(0.0, double0, 0.01);
}",1,
project,0,test249521,"public void test249521() throws Throwable {
    double double0 = MathUtils.binomialCoefficientDouble(2471, 13);
    assertEquals(1.9922011497261004E34, double0, 0.01);
}",0,
project,0,test250522,"public void test250522() throws Throwable {
    double double0 = MathUtils.binomialCoefficientDouble(2513, 1);
    assertEquals(2513.0, double0, 0.01);
}",0,
project,0,test251523,"public void test251523() throws Throwable {
    double double0 = MathUtils.binomialCoefficientDouble(2513, 0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test252524,"public void test252524() throws Throwable {
    double double0 = MathUtils.binomialCoefficientDouble(4, 4);
    assertEquals(1.0, double0, 0.01);
}",1,
project,0,test253525,"public void test253525() throws Throwable {
    long long0 = MathUtils.binomialCoefficient(1382, (-622));
    assertEquals(1L, long0);
}",1,
project,0,test254526,"public void test254526() throws Throwable {
    double double0 = MathUtils.binomialCoefficientDouble(66, 2);
    assertEquals(2145.0, double0, 0.01);
}",1,
project,0,test255527,"public void test255527() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficient(3239, 1924);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: multiply
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test256528,"public void test256528() throws Throwable {
    long long0 = MathUtils.binomialCoefficient(57, 1);
    assertEquals(57L, long0);
}",1,
project,0,test257529,"public void test257529() throws Throwable {
    long long0 = MathUtils.binomialCoefficient(1030, 0);
    assertEquals(1L, long0);
}",1,
project,0,test258530,"public void test258530() throws Throwable {
    double double0 = MathUtils.binomialCoefficientDouble(39, 22);
    assertEquals(5.102111781E10, double0, 0.01);
}",1,
project,0,test259531,"public void test259531() throws Throwable {
    long long0 = MathUtils.binomialCoefficient(0, 0);
    assertEquals(1L, long0);
}",1,
project,0,test260532,"public void test260532() throws Throwable {
    long long0 = MathUtils.subAndCheck((-1862L), (-1862L));
    assertEquals(0L, long0);
}",1,
project,0,test261533,"public void test261533() throws Throwable {
    long long0 = MathUtils.subAndCheck((-874L), 1421L);
    assertEquals((-2295L), long0);
}",1,
project,0,test262534,"public void test262534() throws Throwable {
    int int0 = MathUtils.addAndCheck((-1), 0);
    assertEquals((-1), int0);
}",1,
project,0,test263535,"public void test263535() throws Throwable {
    double double0 = MathUtils.round(1.4456468917292502E-16, 0);
    assertEquals(0.0, double0, 0.01);
}",1,
project,0,test264536,"public void test264536() throws Throwable {
    double double0 = MathUtils.cosh((-442.158));
    assertEquals(5.3180147029954794E191, double0, 0.01);
}",0,
project,0,test265537,"public void test265537() throws Throwable {
    double double0 = MathUtils.normalizeAngle((-1493.0), 0);
    assertEquals(2.398103108741452, double0, 0.01);
}",0,
project,0,test267538,"public void test267538() throws Throwable {
    double[] doubleArray0 = new double[0];
    int int0 = MathUtils.hash(doubleArray0);
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test268539,"public void test268539() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.checkOrder((double[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}",1,
project,0,test269540,"public void test269540() throws Throwable {
    int int0 = MathUtils.hash((double) 0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
