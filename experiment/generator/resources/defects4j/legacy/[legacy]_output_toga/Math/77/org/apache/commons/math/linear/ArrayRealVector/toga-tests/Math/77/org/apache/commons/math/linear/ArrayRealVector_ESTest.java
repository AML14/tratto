/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 19:04:18 GMT 2023
 */
package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
import org.apache.commons.math.linear.AbstractRealVector;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ArrayRealVector_ESTest extends ArrayRealVector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0080() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0E-12;
        doubleArray0[1] = 1.0E-12;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector0.ebeMultiply(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test0101() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((-1), (-1));
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test0112() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(4, 4);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((-1902), (-1902));
        arrayRealVector0.append(arrayRealVector1);
        arrayRealVector0.mapCeilToSelf();
    }

    @Test(timeout = 4000)
    public void test0123() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        RealVector realVector0 = arrayRealVector0.mapAbs();
        arrayRealVector0.projection(realVector0);
        double[] doubleArray0 = arrayRealVector0.toArray();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        arrayRealVector1.getDistance(doubleArray0);
        arrayRealVector0.outerProduct(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test0184() throws Throwable {
        int int0 = 1592;
        double double0 = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(1592, 0.0);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 1592;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        double[] doubleArray1 = new double[0];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, doubleArray1);
        arrayRealVector0.projection((RealVector) arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test0195() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1.0;
        Double[] doubleArray1 = new Double[1];
        doubleArray1[0] = (Double) 0.0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, (-2803), (-2803));
        arrayRealVector0.append((RealVector) arrayRealVector1);
        double double0 = 0.0;
        doubleArray0[3] = double0;
        ArrayRealVector arrayRealVector2 = null;
        arrayRealVector2 = new ArrayRealVector(arrayRealVector0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0206() throws Throwable {
        double[] doubleArray0 = null;
        ArrayRealVector arrayRealVector0 = null;
        arrayRealVector0 = new ArrayRealVector((double[]) null);
    }

    @Test(timeout = 4000)
    public void test0217() throws Throwable {
        ArrayRealVector arrayRealVector0 = null;
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, (ArrayRealVector) null);
    }

    @Test(timeout = 4000)
    public void test0228() throws Throwable {
        int int0 = (-269);
        ArrayRealVector arrayRealVector0 = null;
        arrayRealVector0 = new ArrayRealVector((-269));
    }

    @Test(timeout = 4000)
    public void test0259() throws Throwable {
        int int0 = 3;
        double double0 = 2501.1943011847;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 2501.1943011847);
        arrayRealVector0.mapInv();
        RealVector realVector0 = arrayRealVector0.mapTanToSelf();
        arrayRealVector0.equals(realVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        int int1 = 17;
        double[] doubleArray0 = new double[1];
        double double1 = 0.5;
        doubleArray0[0] = 0.5;
        arrayRealVector1.setSubVector(17, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02810() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((double[]) null, false);
        int int0 = (-347);
        arrayRealVector0.checkIndex(int0);
    }

    @Test(timeout = 4000)
    public void test03011() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-613.0005126029037);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        RealVector realVector0 = arrayRealVector0.mapAtan();
        realVector0.getDistance(doubleArray0);
        arrayRealVector0.checkIndex(3515);
        arrayRealVector0.getL1Norm();
        RealVector realVector1 = arrayRealVector0.append(doubleArray0);
        realVector1.mapTanToSelf();
    }

    @Test(timeout = 4000)
    public void test03112() throws Throwable {
        double[] doubleArray0 = null;
        ArrayRealVector arrayRealVector0 = null;
        arrayRealVector0 = new ArrayRealVector((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test03313() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1093.251566407);
        doubleArray0[1] = Double.POSITIVE_INFINITY;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = (-1015.1378);
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 844.147739695;
        doubleArray0[6] = 2260.3779548;
        doubleArray0[7] = 103.395669940721;
        boolean boolean0 = true;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(2);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
        arrayRealVector0.getDistance(arrayRealVector2);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, boolean0);
        arrayRealVector2.getL1Distance(arrayRealVector3);
        int int0 = 0;
        arrayRealVector3.setSubVector(int0, (RealVector) arrayRealVector2);
        arrayRealVector1.mapCoshToSelf();
        arrayRealVector2.mapSinh();
        ArrayRealVector arrayRealVector4 = new ArrayRealVector(doubleArray0, arrayRealVector2);
        arrayRealVector2.projection(arrayRealVector4);
        arrayRealVector1.mapLogToSelf();
    }

    @Test(timeout = 4000)
    public void test03514() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) null);
        arrayRealVector0.toString();
    }

    @Test(timeout = 4000)
    public void test03615() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((double[]) null, arrayRealVector0);
        arrayRealVector1.mapAtan();
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, openMapRealVector0);
        arrayRealVector2.getLInfDistance(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test03716() throws Throwable {
        int int0 = (-707);
        ArrayRealVector arrayRealVector0 = null;
        arrayRealVector0 = new ArrayRealVector((-707), (-707));
    }

    @Test(timeout = 4000)
    public void test03817() throws Throwable {
        double[] doubleArray0 = new double[2];
        double double0 = 2381.90953;
        doubleArray0[0] = 2381.90953;
        doubleArray0[1] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, (-4523));
        boolean boolean0 = false;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, boolean0);
        arrayRealVector1.getLInfDistance((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test03918() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        openMapRealVector0.mapExpm1();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector1.subtract((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test04019() throws Throwable {
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
        arrayRealVector0.checkVectorDimensions(arrayRealVector1);
        arrayRealVector0.ebeMultiply(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test04320() throws Throwable {
        ArrayRealVector arrayRealVector0 = null;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, false);
        arrayRealVector1.unitize();
    }

    @Test(timeout = 4000)
    public void test04821() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
        arrayRealVector0.mapAbsToSelf();
        arrayRealVector0.mapCosToSelf();
        arrayRealVector0.mapAsin();
        arrayRealVector0.append((double[]) null);
        arrayRealVector0.mapLog10ToSelf();
        arrayRealVector0.copy();
    }

    @Test(timeout = 4000)
    public void test05122() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        int int0 = 1703;
        arrayRealVector1.append((RealVector) arrayRealVector0);
        arrayRealVector0.mapAbs();
        arrayRealVector1.setSubVector(1703, (RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test05323() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 920.472526;
        doubleArray0[1] = (-987.631681);
        doubleArray0[2] = 1915.97416017;
        doubleArray0[3] = Double.NaN;
        doubleArray0[4] = 1.0;
        doubleArray0[5] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealVector realVector0 = arrayRealVector0.ebeMultiply(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeMultiply(arrayRealVector1);
        arrayRealVector2.getL1Distance(realVector0);
        int int0 = 16;
        arrayRealVector0.getEntry(int0);
        arrayRealVector2.getL1Distance(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test05524() throws Throwable {
        ArrayRealVector arrayRealVector0 = null;
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 677.082109753;
        doubleArray0[1] = 1.0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, doubleArray0);
        arrayRealVector1.sparseIterator();
        arrayRealVector1.add(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06125() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        double double0 = 3172.3716515232472;
        arrayRealVector0.mapAdd(3172.3716515232472);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 3172.3716515232472;
        doubleArray0[1] = 3172.3716515232472;
        doubleArray0[2] = 3172.3716515232472;
        doubleArray0[3] = 3172.3716515232472;
        doubleArray0[4] = 3172.3716515232472;
        doubleArray0[5] = 3172.3716515232472;
        arrayRealVector0.projection(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06326() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = (double) 0;
        doubleArray0[2] = (double) 0;
        doubleArray0[3] = (double) 0;
        doubleArray0[4] = (double) 0;
        arrayRealVector0.set(0.0);
        doubleArray0[5] = (-1676.8236);
        arrayRealVector0.add(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector1.mapCeilToSelf();
    }

    @Test(timeout = 4000)
    public void test06427() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (-1.0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(2, (-937.682037205));
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector0.getL1Distance(arrayRealVector1);
        arrayRealVector0.getL1Distance(arrayRealVector1);
        arrayRealVector0.mapExpm1();
        arrayRealVector1.unitVector();
        arrayRealVector1.mapCbrt();
    }

    @Test(timeout = 4000)
    public void test06528() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1108, 1108);
        openMapRealVector0.copy();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
        arrayRealVector0.mapExpm1();
        arrayRealVector0.mapAdd(1108);
        openMapRealVector0.mapSinhToSelf();
        arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
        double[] doubleArray0 = null;
        arrayRealVector0.projection((double[]) null);
        arrayRealVector0.mapCosToSelf();
    }

    @Test(timeout = 4000)
    public void test06629() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(11);
        ArrayRealVector arrayRealVector0 = null;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, (ArrayRealVector) null);
        openMapRealVector0.checkVectorDimensions(arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test06730() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        double double0 = 484.404376854;
        Double double1 = new Double(484.404376854);
        doubleArray0[0] = double1;
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
        arrayRealVector0.append((RealVector) null);
        arrayRealVector0.mapSqrtToSelf();
    }

    @Test(timeout = 4000)
    public void test06831() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 1.0;
        arrayRealVector0.outerProduct(doubleArray0);
        arrayRealVector0.mapAsinToSelf();
        arrayRealVector0.toArray();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        arrayRealVector1.iterator();
    }

    @Test(timeout = 4000)
    public void test06932() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test07133() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.isInfinite();
        double double0 = (-1058.5058225119);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1058.5058225119);
        doubleArray0[1] = (-1058.5058225119);
        doubleArray0[2] = (-1058.5058225119);
        doubleArray0[3] = (-1058.5058225119);
        arrayRealVector0.getLInfDistance(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test07234() throws Throwable {
        double[] doubleArray0 = null;
        int int0 = 749;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((double[]) null, 749, 0);
        arrayRealVector0.mapPow(int0);
    }

    @Test(timeout = 4000)
    public void test07335() throws Throwable {
        double[] doubleArray0 = new double[6];
        double double0 = (-1786.816);
        doubleArray0[0] = (-1786.816);
        doubleArray0[1] = 1.0;
        doubleArray0[2] = (-1052.361);
        doubleArray0[3] = 0.0;
        double double1 = (-1315.875487);
        doubleArray0[4] = (-1315.875487);
        doubleArray0[5] = 2878.799066;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.mapUlp();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
        arrayRealVector0.getLInfDistance(arrayRealVector1);
        arrayRealVector0.sparseIterator();
        int int0 = 353;
        arrayRealVector0.checkIndex(353);
        arrayRealVector0.dotProduct(doubleArray0);
        arrayRealVector0.ebeMultiply(doubleArray0);
        int int1 = (-2277);
        ArrayRealVector arrayRealVector2 = null;
        arrayRealVector0.sparseIterator();
    }

    @Test(timeout = 4000)
    public void test07636() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        arrayRealVector0.subtract(doubleArray0);
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test07737() throws Throwable {
        ArrayRealVector arrayRealVector0 = null;
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null);
    }

    @Test(timeout = 4000)
    public void test07838() throws Throwable {
        int int0 = 94;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(94);
        double[] doubleArray0 = new double[1];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, false);
        arrayRealVector1.mapSin();
        ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
        arrayRealVector2.mapExp();
        doubleArray0[0] = (double) 94;
        arrayRealVector0.add(doubleArray0);
        ArrayRealVector arrayRealVector3 = null;
        arrayRealVector3 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test07939() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-3414.006391140871);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (-502.4122467658);
        doubleArray0[3] = 1661.99393660041;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.isInfinite();
        int int0 = 7654;
        arrayRealVector0.mapMultiply(2334.00551443673);
        RealVector realVector0 = arrayRealVector0.append(0.0);
        arrayRealVector0.checkVectorDimensions(realVector0);
        arrayRealVector0.checkVectorDimensions(int0);
        RealVector realVector1 = null;
        arrayRealVector0.subtract(realVector1);
        arrayRealVector0.unitVector();
        arrayRealVector0.copy();
    }

    @Test(timeout = 4000)
    public void test08140() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (-1722.469731329125);
        doubleArray0[2] = (-2393.4920197687);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        arrayRealVector0.mapExp();
        arrayRealVector0.copy();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1722.469731329125));
        openMapRealVector0.getLInfNorm();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.subtract(arrayRealVector1);
        arrayRealVector2.iterator();
        openMapRealVector0.getLInfDistance(doubleArray0);
        arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
        arrayRealVector0.mapLog10ToSelf();
    }

    @Test(timeout = 4000)
    public void test08641() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        RealVector realVector0 = null;
        arrayRealVector0.getL1Distance((RealVector) null);
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test08742() throws Throwable {
        int int0 = 1926;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(1926, 1926);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1926;
        doubleArray0[1] = (double) 1926;
        doubleArray0[2] = (double) 1926;
        doubleArray0[3] = (double) 1926;
        doubleArray0[4] = (double) 1926;
        doubleArray0[5] = (double) 1926;
        doubleArray0[6] = (double) 1926;
        doubleArray0[7] = (double) 1926;
        arrayRealVector0.dotProduct(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test08843() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(37);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
        double[] doubleArray0 = null;
        arrayRealVector0.mapTan();
        arrayRealVector1.setSubVector(37, (double[]) null);
        arrayRealVector1.getLInfDistance(arrayRealVector0);
        arrayRealVector0.subtract(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test08944() throws Throwable {
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        arrayRealVector0.mapAcosToSelf();
        arrayRealVector0.mapCeil();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(0, 0);
        arrayRealVector1.mapAbs();
        arrayRealVector1.getL1Distance((RealVector) null);
        arrayRealVector1.checkIndex(int0);
    }

    @Test(timeout = 4000)
    public void test09545() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-719.4665661317331);
        doubleArray0[1] = 1043.70648;
        double double0 = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 1536.918579182796;
        doubleArray0[4] = 2412.7751052;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        arrayRealVector0.append((ArrayRealVector) null);
        arrayRealVector0.outerProduct(doubleArray0);
        arrayRealVector0.append(doubleArray0);
        arrayRealVector0.getLInfNorm();
        arrayRealVector0.mapTanToSelf();
        arrayRealVector0.mapAddToSelf(double0);
    }

    @Test(timeout = 4000)
    public void test09646() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        openMapRealVector0.mapTanhToSelf();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
        openMapRealVector1.getData();
        arrayRealVector0.add((RealVector) openMapRealVector1);
        arrayRealVector0.mapTanhToSelf();
    }

    @Test(timeout = 4000)
    public void test09947() throws Throwable {
        double[] doubleArray0 = new double[1];
        double double0 = (-1.0);
        doubleArray0[0] = (-1.0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        boolean boolean0 = true;
        Double[] doubleArray1 = new Double[0];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1);
        arrayRealVector1.mapSin();
        arrayRealVector0.ebeMultiply((RealVector) arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test10048() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 198.200051;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1683.279;
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = 0.5;
        doubleArray0[5] = 3868.739285;
        doubleArray0[6] = 2348.140665;
        doubleArray0[7] = Double.NEGATIVE_INFINITY;
        doubleArray0[8] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        double double0 = (-1788.455);
        arrayRealVector0.ebeDivide(doubleArray0);
        RealVector realVector0 = null;
        arrayRealVector0.dotProduct((RealVector) null);
        arrayRealVector0.mapDivideToSelf(double0);
        arrayRealVector0.outerProduct(realVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector1.dotProduct(doubleArray0);
        int int0 = 0;
        arrayRealVector1.checkIndex(int0);
        arrayRealVector0.outerProduct((RealVector) arrayRealVector1);
        arrayRealVector0.mapLogToSelf();
        arrayRealVector0.dotProduct(doubleArray0);
        arrayRealVector1.add(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test10149() throws Throwable {
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
        arrayRealVector0.getNorm();
        arrayRealVector0.mapAsinToSelf();
        RealVector realVector0 = arrayRealVector0.mapAddToSelf((-2978.30696652));
        arrayRealVector0.projection(realVector0);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = 2565.3156;
        doubleArray0[2] = (-2978.30696652);
        doubleArray0[3] = 0.0;
        doubleArray0[4] = (double) 0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = (double) 0;
        doubleArray0[7] = (double) 0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        arrayRealVector0.getLInfDistance(arrayRealVector1);
        arrayRealVector0.mapAsinToSelf();
        arrayRealVector0.checkVectorDimensions(int0);
    }

    @Test(timeout = 4000)
    public void test10350() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = 2587.4380300184325;
        doubleArray0[2] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.append(2587.4380300184325);
        RealVector realVector0 = arrayRealVector0.mapExp();
        arrayRealVector0.hashCode();
        arrayRealVector0.getLInfDistance(realVector0);
        arrayRealVector0.isNaN();
        arrayRealVector0.data = doubleArray0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector1.add(arrayRealVector0);
        arrayRealVector1.append((RealVector) arrayRealVector0);
        double double0 = (-1395.828743020574);
        arrayRealVector1.mapDivide(double0);
    }

    @Test(timeout = 4000)
    public void test10651() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.hashCode();
        double[] doubleArray0 = new double[2];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector0.dotProduct(arrayRealVector1);
        arrayRealVector0.mapInv();
        double double0 = (-1.0);
        arrayRealVector0.sparseIterator();
    }

    @Test(timeout = 4000)
    public void test10852() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-2773.93665084178);
        double double0 = (-1.0);
        doubleArray0[1] = (-1.0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.subtract(arrayRealVector1);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector3.mapAsinToSelf();
        int int0 = 2;
        arrayRealVector3.checkVectorDimensions(2);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        arrayRealVector0.ebeDivide(arrayRealVector2);
        polynomialFunction0.derivative();
    }

    @Test(timeout = 4000)
    public void test11153() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-1.0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector0.toString();
        arrayRealVector1.getL1Distance(doubleArray0);
        ArrayRealVector arrayRealVector2 = null;
        arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test11454() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        double[] doubleArray0 = new double[0];
        arrayRealVector0.getLInfDistance(doubleArray0);
        arrayRealVector0.checkVectorDimensions(5);
        arrayRealVector0.mapSqrt();
    }

    @Test(timeout = 4000)
    public void test11655() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-522));
        openMapRealVector0.mapFloorToSelf();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        arrayRealVector0.sparseIterator();
    }

    @Test(timeout = 4000)
    public void test11756() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1108, 1108);
        openMapRealVector0.copy();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        arrayRealVector0.mapExpm1();
        arrayRealVector0.mapAdd(1108);
        openMapRealVector0.mapSinhToSelf();
        arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
        double[] doubleArray0 = null;
        arrayRealVector0.projection((double[]) null);
        arrayRealVector0.mapCosToSelf();
    }

    @Test(timeout = 4000)
    public void test11957() throws Throwable {
        Double[] doubleArray0 = new Double[5];
        Double double0 = Double.valueOf(1141.288969656497);
        doubleArray0[0] = double0;
        double double1 = 1577.63635433;
        Double double2 = new Double(1577.63635433);
        doubleArray0[1] = double2;
        Double double3 = new Double((double) doubleArray0[1]);
        Double.isFinite((double) doubleArray0[0]);
        doubleArray0[2] = double3;
        Double double4 = new Double(1577.63635433);
        doubleArray0[3] = double4;
        Double double5 = new Double(1697.834);
        Double.min((-1385.522647566323), 0.0);
        doubleArray0[4] = double5;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector1.getL1Distance((RealVector) arrayRealVector0);
        Double.isFinite(double1);
        double double6 = 0.0;
        Double.sum((double) doubleArray0[1], double6);
        arrayRealVector1.mapLog();
    }

    @Test(timeout = 4000)
    public void test12058() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.mapSin();
        arrayRealVector0.getL1Distance(arrayRealVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        arrayRealVector1.mapAddToSelf(0.0);
        arrayRealVector1.checkVectorDimensions(arrayRealVector0);
        arrayRealVector1.mapTan();
        arrayRealVector1.ebeMultiply(arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test12359() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        int int0 = (-1645);
        double[] doubleArray0 = new double[1];
        arrayRealVector0.unitVector();
    }

    @Test(timeout = 4000)
    public void test12860() throws Throwable {
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        int int0 = 120;
        arrayRealVector0.mapSin();
        arrayRealVector0.dotProduct(doubleArray0);
        arrayRealVector0.getSubVector(120, 120);
    }

    @Test(timeout = 4000)
    public void test13061() throws Throwable {
        int int0 = 3352;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(3352, 3352);
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        arrayRealVector1.setSubVector(3352, doubleArray0);
        arrayRealVector1.projection((RealVector) arrayRealVector0);
        arrayRealVector0.subtract(arrayRealVector1);
        double[] doubleArray1 = new double[2];
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray1, arrayRealVector0);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector((RealVector) arrayRealVector2, arrayRealVector0);
        arrayRealVector1.getDistance(arrayRealVector3);
    }

    @Test(timeout = 4000)
    public void test13162() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        arrayRealVector0.mapMultiplyToSelf(22);
        arrayRealVector0.mapPowToSelf(3507);
        arrayRealVector0.set((double) 22);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3507, 22);
        arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
        arrayRealVector0.unitize();
        arrayRealVector0.mapTanhToSelf();
    }

    @Test(timeout = 4000)
    public void test13763() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1655, 1655);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 1.0E-12;
        doubleArray0[1] = 1.0E-12;
        doubleArray0[2] = (double) 1655;
        doubleArray0[3] = (double) 1655;
        doubleArray0[4] = (double) 1655;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        arrayRealVector0.getLInfDistance((RealVector) openMapRealVector0);
        arrayRealVector0.mapSinh();
    }

    @Test(timeout = 4000)
    public void test14064() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-2227.104140624);
        doubleArray0[1] = 1.0;
        doubleArray0[2] = 3483.0567179234795;
        doubleArray0[3] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
        arrayRealVector0.mapAbs();
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        polynomialFunction0.toString();
        polynomialFunction0.polynomialDerivative();
        UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
        arrayRealVector1.map(univariateRealFunction0);
        arrayRealVector1.append((RealVector) null);
        arrayRealVector1.ebeMultiply(doubleArray0);
        ArrayRealVector arrayRealVector2 = arrayRealVector1.subtract(arrayRealVector0);
        double double0 = 0.0;
        arrayRealVector2.mapSubtract(double0);
        arrayRealVector1.getLInfDistance(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test14265() throws Throwable {
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
        arrayRealVector0.data = doubleArray0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        arrayRealVector1.hashCode();
        arrayRealVector1.mapUlpToSelf();
        arrayRealVector1.add((ArrayRealVector) null);
        arrayRealVector1.mapTan();
        ArrayRealVector arrayRealVector2 = null;
        arrayRealVector2 = new ArrayRealVector(arrayRealVector0.data, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test14566() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        ArrayRealVector arrayRealVector2 = (ArrayRealVector) arrayRealVector1.mapRint();
        ArrayRealVector arrayRealVector3 = arrayRealVector0.projection(arrayRealVector1);
        arrayRealVector1.getDistance(arrayRealVector2);
        arrayRealVector1.getSubVector(1627, 1627);
        arrayRealVector2.getDistance(arrayRealVector3);
    }

    @Test(timeout = 4000)
    public void test14867() throws Throwable {
        int int0 = 3;
        double double0 = 2501.1943011847;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 2501.1943011847);
        RealVector realVector0 = arrayRealVector0.mapInv();
        RealVector realVector1 = realVector0.mapTanToSelf();
        arrayRealVector0.equals(realVector1);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        int int1 = 17;
        double[] doubleArray0 = new double[19];
        double double1 = 0.5;
        doubleArray0[0] = 0.5;
        arrayRealVector1.setSubVector(17, doubleArray0);
    }
}
