project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[3] = (-1476.86);
    doubleArray0[1] = (-1476.86);
    doubleArray0[3] = Double.NaN;
    doubleArray0[5] = (-1476.86);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) 0.0;
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) (-1476.86);
    doubleArray1[3] = doubleArray1[1];
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1151.079702577819);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    simplexTableau0.initializeColumnLabels();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau0.dropPhase1Objective();
    // Undeclared exception!
    try {
        simplexTableau0.getSolution();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (15)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test021,"public void test021() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[1] = 639.098447199516;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) 0.0;
    doubleArray0[1] = 639.098447199516;
    doubleArray1[3] = (Double) 1151.079702577819;
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, Double.NaN);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, (double) doubleArray1[1]);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, 2175.42114);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test052,"public void test052() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), (-2.260957518848075E-281));
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1.0));
    openMapRealVector0.set((-1945.205331824));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    linkedList1.add((Object) goalType0);
    linkedList0.removeAll(linkedList1);
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.990680456161499, (-1));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.OpenMapRealVector"", e);
    }
}",0,
project,0,test063,"public void test063() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[1] = 639.098447199516;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) 0.0;
    doubleArray0[1] = 639.098447199516;
    doubleArray1[3] = (Double) 1151.079702577819;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau1.isOptimal();
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    simplexTableau0.getNumSlackVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, 2175.42114);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test074,"public void test074() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[1] = 639.098447199516;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) 0.0;
    doubleArray0[1] = 639.098447199516;
    doubleArray1[3] = (Double) 1151.079702577819;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, (double) doubleArray1[1]);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, 2175.42114);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test095,"public void test095() throws Throwable {
    boolean boolean0 = false;
    double double0 = 1.0;
    int int0 = 11;
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = (double) 11;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = (double) 11;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 11);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1424.11);
    Collection<LinearConstraint> collection0 = null;
    // Undeclared exception!
    try {
        simplexTableau0.normalizeConstraints((Collection<LinearConstraint>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}",0,
project,0,test176,"public void test176() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 6101.397;
    doubleArray0[1] = (-2151.3);
    doubleArray0[2] = (-3632.5);
    doubleArray0[3] = (-3.5813506001861646E-8);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2151.3));
    int int0 = (-1);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
    LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, (-3632.5));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, true, 379.92880937120833);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.OpenMapRealVector"", e);
    }
}",0,
project,0,test197,"public void test197() throws Throwable {
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray0 = new Double[5];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double(1.0);
    doubleArray0[1] = double1;
    Double double2 = new Double(0);
    doubleArray0[2] = double2;
    Double.isFinite(1.0);
    Double double3 = new Double(0.0);
    doubleArray0[3] = double3;
    Double double4 = new Double(1695.062136499728);
    doubleArray0[4] = double4;
    Double.isFinite((double) doubleArray0[4]);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (double) doubleArray0[0]);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1695.062136499728, 1976);
    // Undeclared exception!
    try {
        simplexTableau0.subtractRow(0, 1976, 2707.873502311258);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,976)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test288,"public void test288() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 1.0E-9;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0E-9);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 1.3260791301727295, relationship0, doubleArray0, 2.5257552661512635E-165);
    linkedList0.add(linearConstraint0);
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>(linkedList0);
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship1 = Relationship.LEQ;
    LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship1, 1.0E-9);
    linkedList1.add(linearConstraint1);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, false, (-2072.9697838825));
    simplexTableau0.normalizeConstraints(linkedList1);
    simplexTableau0.getHeight();
    simplexTableau0.getRhsOffset();
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1341), (-1341), (-1446.9));
    // Undeclared exception!
    try {
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.OpenMapRealVector"", e);
    }
}",0,
project,0,test299,"public void test299() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.getHeight();
    simplexTableau0.getNumDecisionVariables();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    linkedList1.spliterator();
    linkedList0.addAll(0, (Collection<? extends LinearConstraint>) linkedList1);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    linkedList0.add(linearConstraint0);
    simplexTableau0.getOriginalNumDecisionVariables();
    simplexTableau0.getSolution();
    simplexTableau0.getNumSlackVariables();
    simplexTableau0.divideRow(0, 2631.35832);
    simplexTableau0.createTableau(false);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    linkedList1.add(linearConstraint0);
    simplexTableau0.subtractRow(0, 0, 0);
    simplexTableau0.getNumDecisionVariables();
    linkedList1.addAll((Collection<? extends LinearConstraint>) list0);
    simplexTableau0.normalizeConstraints(linkedList1);
    simplexTableau0.hashCode();
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    // Undeclared exception!
    try {
        simplexTableau0.createTableau(true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (2)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test3110,"public void test3110() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 41.03164;
    doubleArray0[1] = (-128.8756131);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-128.8756131));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    boolean boolean0 = false;
    Double[] doubleArray1 = new Double[8];
    doubleArray1[0] = (Double) (-128.8756131);
    doubleArray1[1] = (Double) (-128.8756131);
    doubleArray1[2] = (Double) 41.03164;
    doubleArray1[3] = (Double) (-128.8756131);
    doubleArray1[4] = (Double) 41.03164;
    doubleArray1[5] = (Double) 41.03164;
    doubleArray1[6] = (Double) (-128.8756131);
    doubleArray1[7] = (Double) (-128.8756131);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (double) doubleArray1[4], relationship0, arrayRealVector1, (-1.0));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-128.8756131));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test3511,"public void test3511() throws Throwable {
    int int0 = 0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1.0));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Comparator<LinearConstraint> comparator0 = (Comparator<LinearConstraint>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    linkedList0.sort(comparator0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1117.55383), 0);
    simplexTableau0.setEntry(0, 0, 1.0E-12);
    openMapRealVector0.mapAdd(0.0);
    openMapRealVector0.getNorm();
    simplexTableau0.createTableau(true);
    simplexTableau0.getNumArtificialVariables();
    // Undeclared exception!
    try {
        openMapRealVector0.getSubVector(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // index (0)
        //
        verifyException(""org.apache.commons.math.linear.RealVector"", e);
    }
}",1,
project,0,test3612,"public void test3612() throws Throwable {
    int int0 = (-4030);
    double double0 = 2.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-4030), 2.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double1 = 353.1209249552243;
    int int1 = (-1770);
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 353.1209249552243, (-1770));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -4,027 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}",0,
project,0,test4113,"public void test4113() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = (-4091.30585795025);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-4091.30585795025));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-4091.30585795025), relationship0, doubleArray0, 1.0E-12);
    linkedList0.add(linearConstraint0);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(31);
    Relationship relationship1 = Relationship.LEQ;
    LinearConstraint linearConstraint1 = new LinearConstraint(arrayRealVector0, 0.0, relationship1, arrayRealVector0, 1285.039736);
    linkedList0.add(linearConstraint1);
    Relationship relationship2 = Relationship.EQ;
    LinearConstraint linearConstraint2 = new LinearConstraint(arrayRealVector0, 2048.68712176, relationship2, arrayRealVector0, (-1446.6029898018262));
    linkedList0.add(linearConstraint2);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 3594);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test4214,"public void test4214() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1933), (-1933), 0.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2064.3949636);
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (double) (-1933);
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = (double) (-1933);
    doubleArray0[4] = 1.0E-12;
    LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    int int0 = 0;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, 0.0, 0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    SimplexTableau simplexTableau1 = null;
    try {
        simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 2064.3949636);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -1,930 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}",0,
project,0,test4315,"public void test4315() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (-2638.99);
    doubleArray0[1] = (-2139.206689553469);
    doubleArray0[2] = 1464.19;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-364.37117018);
    doubleArray0[5] = (-1172.189888672);
    doubleArray0[6] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-364.37117018));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 726.94629620667, (-3035));
    simplexTableau0.isOptimal();
    simplexTableau0.getHeight();
    ArrayRealVector arrayRealVector0 = null;
    try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 1, (-3035));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}",0,
project,0,test4516,"public void test4516() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 2855.6223866043;
    doubleArray0[1] = 1251.638551;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1251.638551);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 1109.421305, 1119);
    simplexTableau1.getBasicRow(0);
    // Undeclared exception!
    try {
        simplexTableau0.getEntry(0, 1119);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (1,119)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test4717,"public void test4717() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-1318.4864768652458);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 242.4038064295051);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, true, 1715.691804926);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}",0,
project,0,test4818,"public void test4818() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-6117.869348855));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 10);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    List<LinearConstraint> list1 = simplexTableau0.normalizeConstraints(list0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list1, goalType0, false, 0.0);
    // Undeclared exception!
    try {
        simplexTableau1.divideRow(10, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (10)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test5119,"public void test5119() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 119.363;
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = Double.NEGATIVE_INFINITY;
    doubleArray0[4] = 249.23235454789;
    doubleArray0[5] = 178.1313857385658;
    doubleArray0[6] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 249.23235454789);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 178.1313857385658);
    // Undeclared exception!
    try {
        simplexTableau0.subtractRow(1110, 0, 1.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,110)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test5420,"public void test5420() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (-3224.3891);
    doubleArray0[1] = 0.5;
    doubleArray0[2] = 860.1068512751797;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 860.1068512751797);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.5);
    // Undeclared exception!
    try {
        simplexTableau0.setEntry(4, 4, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (4)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test5521,"public void test5521() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-3524.5);
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = Double.NaN;
    doubleArray0[5] = 840.187671115898;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 332.0, 0);
    // Undeclared exception!
    try {
        simplexTableau0.setEntry(0, 250, 332.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (250)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test5922,"public void test5922() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 4277.09325596068;
    doubleArray0[1] = (-2742.6564151);
    doubleArray0[2] = (-1118.61378102298);
    doubleArray0[3] = 471.587095;
    doubleArray0[4] = 0.0;
    doubleArray0[5] = Double.POSITIVE_INFINITY;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3.141592653589793);
    // Undeclared exception!
    try {
        simplexTableau0.getEntry(0, (-406));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (-406)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test6023,"public void test6023() throws Throwable {
    // Undeclared exception!
    try {
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}",0,
project,0,test6124,"public void test6124() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 0.0;
    double double0 = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1934.74176663;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 2112.1677119392566;
    doubleArray0[5] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0, (-1500));
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
    linkedList0.add(linearConstraint0);
    simplexTableau0.normalizeConstraints(linkedList0);
    int int0 = 3859;
    // Undeclared exception!
    try {
        simplexTableau0.getBasicRow(3859);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (3,859)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test6225,"public void test6225() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 2644.888130468538;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 2807.984;
    doubleArray0[4] = 1123.543217;
    doubleArray0[5] = 2500.45592312;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2644.888130468538);
    linearObjectiveFunction0.getValue(doubleArray0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1123.543217);
    linkedList0.parallelStream();
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-46.1295), 0);
    simplexTableau0.getBasicRow(0);
    simplexTableau0.getOriginalNumDecisionVariables();
    linkedList0.add(linearConstraint0);
    simplexTableau0.getHeight();
    simplexTableau0.getArtificialVariableOffset();
    simplexTableau0.hashCode();
    double[] doubleArray1 = new double[9];
    doubleArray1[0] = (double) 2;
    doubleArray1[1] = (-46.1295);
    doubleArray1[2] = 2644.888130468538;
    doubleArray1[3] = 1846.96;
    doubleArray1[4] = 1123.543217;
    doubleArray1[5] = (double) 2;
    doubleArray1[6] = (double) 8;
    doubleArray1[7] = 2807.984;
    doubleArray1[8] = 2807.984;
    ArrayRealVector arrayRealVector0 = null;
    try {
        arrayRealVector0 = new ArrayRealVector(doubleArray1, (ArrayRealVector) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}",0,
project,0,test6326,"public void test6326() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2041.233835653));
    GoalType goalType0 = GoalType.MINIMIZE;
    int int0 = 0;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, false, Double.POSITIVE_INFINITY, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}",0,
project,0,test6427,"public void test6427() throws Throwable {
    Double[] doubleArray0 = new Double[5];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double(0.0);
    doubleArray0[1] = double1;
    Double double2 = Double.valueOf((double) doubleArray0[0]);
    doubleArray0[2] = double2;
    Double double3 = new Double(0.0);
    doubleArray0[3] = double3;
    Double double4 = new Double((-1721.36667));
    doubleArray0[4] = double4;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-3471.442816367518));
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 3426.53120054);
    Collection<LinearConstraint> collection0 = null;
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, false, (-685.11517));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}",0,
project,0,test6828,"public void test6828() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-2148.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2148.0));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2148.0));
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 0.0, 2711);
    // Undeclared exception!
    try {
        simplexTableau1.getBasicRow(10);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (10)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test6929,"public void test6929() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (-1476.464687214);
    doubleArray0[1] = 1647.7668589247;
    doubleArray0[2] = 1.0E-9;
    doubleArray0[3] = 1780.4812892102034;
    doubleArray0[4] = 2699.41821805;
    doubleArray0[5] = (-5636.940604490026);
    doubleArray0[6] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1687.829146036806);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 1.0E-9);
    linkedList0.addLast(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 17);
    // Undeclared exception!
    try {
        simplexTableau0.subtractRow(17, 546, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (17)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test7330,"public void test7330() throws Throwable {
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, false, (-2142.80194));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}",0,
project,0,test7631,"public void test7631() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 1.0;
    doubleArray0[1] = (-975.73314);
    doubleArray0[2] = 942.97;
    doubleArray0[3] = (-1.0);
    doubleArray0[5] = (-1.0);
    doubleArray0[6] = 58.0547673;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, (-2780.06341805081));
    RealPointValuePair realPointValuePair0 = simplexTableau1.getSolution();
    assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
}",0,
project,0,test7732,"public void test7732() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test7733,"public void test7733() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    assertEquals(8, int0);
}",0,"assertEquals(0, int0)"
project,0,test7734,"public void test7734() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    RealMatrix realMatrix0 = simplexTableau1.createTableau(false);
    assertEquals(11, realMatrix0.getColumnDimension());
}",0,"assertEquals(1, realMatrix0.getColumnDimension())"
project,0,test7735,"public void test7735() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    RealMatrix realMatrix0 = simplexTableau1.createTableau(false);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test7736,"public void test7736() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    RealMatrix realMatrix0 = simplexTableau1.createTableau(false);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.getSolution();
    assertFalse(simplexTableau0.equals((Object) simplexTableau1));
}",0,
project,0,test7837,"public void test7837() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1151.079702577819);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[1] = (Double) 0.0;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    assertEquals(8, int0);
}",0,"assertEquals(0, int0)"
project,0,test7838,"public void test7838() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1151.079702577819);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[1] = (Double) 0.0;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test7839,"public void test7839() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1151.079702577819);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[1] = (Double) 0.0;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    int int1 = simplexTableau1.getSlackVariableOffset();
    assertEquals(8, int1);
}",0,"assertEquals(0, int1)"
project,0,test7940,"public void test7940() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = (-1476.86);
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[1] = (-1476.86);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) 0.0;
    doubleArray0[1] = (-1476.86);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, (double) doubleArray1[1]);
    simplexTableau1.isOptimal();
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, (-1476.86));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test8041,"public void test8041() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    doubleArray0[1] = 0.0;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(1151.079702577819);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, 2175.42114);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test8142,"public void test8142() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = (-15.047511983814928);
    doubleArray0[3] = Double.NaN;
    doubleArray0[5] = 639.098447199516;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    simplexTableau0.getNumObjectiveFunctions();
    boolean boolean0 = simplexTableau0.equals(639.098447199516);
    simplexTableau0.getArtificialVariableOffset();
    boolean boolean1 = simplexTableau0.equals(simplexTableau0);
    assertFalse(boolean1 == boolean0);
}",0,
project,0,test8243,"public void test8243() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = Double.POSITIVE_INFINITY;
    doubleArray0[4] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, Double.POSITIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.equals(Double.POSITIVE_INFINITY);
    int int0 = simplexTableau0.getArtificialVariableOffset();
    assertEquals(8, int0);
}",0,"assertEquals(0, int0)"
project,0,test8244,"public void test8244() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = Double.POSITIVE_INFINITY;
    doubleArray0[4] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, Double.POSITIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.equals(Double.POSITIVE_INFINITY);
    int int0 = simplexTableau0.getArtificialVariableOffset();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test8345,"public void test8345() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[1] = (-790.66);
    double double0 = 1424.11;
    doubleArray0[2] = 1424.11;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 1.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    int int0 = 11;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-790.66), 11);
    // Undeclared exception!
    try {
        simplexTableau0.setEntry(20, 20, (-790.66));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (20)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}",0,
project,0,test8446,"public void test8446() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1509.4966);
    doubleArray0[5] = (-1578.8);
    doubleArray0[2] = (-4663.639503);
    doubleArray0[5] = (-4663.639503);
    doubleArray0[5] = (-1291.416448259596);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (-1509.4966), relationship0, openMapRealVector0, 2.0);
    linkedList0.add(linearConstraint0);
    Integer integer0 = new Integer(0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2.0, 2820);
    int int0 = simplexTableau0.getRhsOffset();
    assertEquals(8, int0);
}",0,"assertEquals(0, int0)"
project,0,test8547,"public void test8547() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[1] = 583.983576;
    doubleArray0[3] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 583.983576, relationship0, openMapRealVector0, 0.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-5138.939914));
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
}",0,
project,0,test8548,"public void test8548() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[1] = 583.983576;
    doubleArray0[3] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 583.983576, relationship0, openMapRealVector0, 0.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-5138.939914));
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    double[][] doubleArray1 = simplexTableau0.getData();
    assertEquals(3, doubleArray1.length);
}",0,
project,0,test8549,"public void test8549() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[1] = 583.983576;
    doubleArray0[3] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 583.983576, relationship0, openMapRealVector0, 0.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-5138.939914));
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    double[][] doubleArray1 = simplexTableau0.getData();
    boolean boolean0 = simplexTableau0.isOptimal();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test8650,"public void test8650() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
    boolean boolean0 = linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.getHeight();
    simplexTableau0.getNumDecisionVariables();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    linkedList0.addAll(0, (Collection<? extends LinearConstraint>) linkedList1);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    Integer integer0 = new Integer(0);
    simplexTableau0.getSolution();
    simplexTableau0.divideRow(0, 0.0);
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    linkedList1.add(linearConstraint0);
    simplexTableau0.subtractRow(0, 0, 0);
    simplexTableau0.getNumDecisionVariables();
    linkedList1.addAll((Collection<? extends LinearConstraint>) list0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.normalizeConstraints(linkedList1);
    linkedList0.offer(linearConstraint0);
    simplexTableau0.hashCode();
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    boolean boolean1 = simplexTableau0.isOptimal();
    assertTrue(boolean1 == boolean0);
}",0,
