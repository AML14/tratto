project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test001,"public void test001() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.9, double0, 0.01);
}",0,
project,0,test002,"public void test002() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test013,"public void test013() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
    double double0 = dormandPrince54Integrator0.getMinReduction();
    assertEquals(0.2, double0, 0.01);
}",0,
project,0,test014,"public void test014() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
    double double0 = dormandPrince54Integrator0.getMinReduction();
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test015,"public void test015() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
    double double0 = dormandPrince54Integrator0.getMinReduction();
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test026,"public void test026() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test027,"public void test027() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(10.0, double0, 0.01);
}",0,
project,0,test028,"public void test028() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test089,"public void test089() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1306.7655606344235, (-2471.2328452794), doubleArray0, doubleArray0);
    // Undeclared exception!
    try {
        dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, 1306.7655606344235);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.ode.AbstractIntegrator"", e);
    }
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    double[] doubleArray0 = new double[4];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-802.2175), doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    try {
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-802.2175));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 0 != 4
        //
        verifyException(""org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator"", e);
    }
}",0,
