project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0, (-1.0)).when(weightedMeasurement0).getWeight();
    EstimatedParameter estimatedParameter0 = new EstimatedParameter(""LU decomposition requires that the matrix be square."", 1.0);
    simpleEstimationProblem0.addParameter(estimatedParameter0);
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    WeightedMeasurement weightedMeasurement1 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement1).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
    doReturn(0.0).when(weightedMeasurement1).getResidual();
    doReturn(1590.261196097777, Double.POSITIVE_INFINITY).when(weightedMeasurement1).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement1);
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
    levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
    assertEquals(1, levenbergMarquardtEstimator0.getJacobianEvaluations());
}",0,"assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations())"
project,0,test011,"public void test011() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    EstimatedParameter estimatedParameter0 = new EstimatedParameter(""unable to compute covariances: singular problem"", 0.0, true);
    estimatedParameter0.setBound(false);
    simpleEstimationProblem0.addParameter(estimatedParameter0);
    levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
    try {
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // no degrees of freedom (0 measurements, 1 parameters)
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    levenbergMarquardtEstimator0.rows = (-108);
    try {
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // no degrees of freedom (0 measurements, 0 parameters)
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator((-2672), (-2672), (-2672));
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    simpleEstimationProblem0.addParameter((EstimatedParameter) null);
    try {
        gaussNewtonEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // no degrees of freedom (0 measurements, 1 parameters)
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0, 0.0, 0.0).when(weightedMeasurement0).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0, 0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    EstimatedParameter estimatedParameter0 = new EstimatedParameter(""vX~uBD,J#n/L2^QZ8z"", (-2246.12086661453));
    simpleEstimationProblem0.addParameter(estimatedParameter0);
    simpleEstimationProblem0.addParameter(estimatedParameter0);
    levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
    try {
        levenbergMarquardtEstimator0.getCovariances(simpleEstimationProblem0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // unable to compute covariances: singular problem
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(Double.NEGATIVE_INFINITY).when(weightedMeasurement0).getResidual();
    doReturn(0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test066,"public void test066() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
    double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
    assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
}",0,
project,0,test067,"public void test067() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
    double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test068,"public void test068() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
    double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
    assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
}",0,"assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations())"
project,0,test079,"public void test079() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    WeightedMeasurement weightedMeasurement1 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement1).getResidual();
    doReturn(0.0).when(weightedMeasurement1).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement1);
    double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    levenbergMarquardtEstimator0.rows = (-2563);
    levenbergMarquardtEstimator0.updateResidualsAndCost();
    assertEquals(1, levenbergMarquardtEstimator0.getCostEvaluations());
}",0,"assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations())"
project,0,test0911,"public void test0911() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    levenbergMarquardtEstimator0.setMaxCostEval(1);
    levenbergMarquardtEstimator0.updateResidualsAndCost();
    assertEquals(1, levenbergMarquardtEstimator0.getCostEvaluations());
}",0,"assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations())"
project,0,test1012,"public void test1012() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.001, Double.POSITIVE_INFINITY).when(weightedMeasurement0).getResidual();
    doReturn(0.0, 0.001, 0.001, 0.001, 0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
    levenbergMarquardtEstimator0.cols = (-3648);
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Matrix must have at least one row.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}",1,
project,0,test1113,"public void test1113() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    WeightedMeasurement weightedMeasurement1 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement1).getResidual();
    doReturn(0.0, 0.0, 0.0).when(weightedMeasurement1).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement1);
    levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
    assertEquals(1, levenbergMarquardtEstimator0.getJacobianEvaluations());
}",0,"assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations())"
project,0,test1214,"public void test1214() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
    levenbergMarquardtEstimator0.rows = (-1);
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Matrix must have at least one row.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}",1,
project,0,test1315,"public void test1315() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
    assertEquals(1, levenbergMarquardtEstimator0.getJacobianEvaluations());
}",0,"assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations())"
project,0,test1416,"public void test1416() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 480.34893).when(weightedMeasurement0).getResidual();
    doReturn(0.0, 0.0, 0.0, 1.0E-11).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
    double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
    assertEquals(1, levenbergMarquardtEstimator0.getCostEvaluations());
}",0,"assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations())"
project,0,test1417,"public void test1417() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 480.34893).when(weightedMeasurement0).getResidual();
    doReturn(0.0, 0.0, 0.0, 1.0E-11).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
    double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
    assertEquals(0.0015189966904247845, double0, 0.01);
}",0,
project,0,test1518,"public void test1518() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    levenbergMarquardtEstimator0.incrementJacobianEvaluationsCounter();
    int int0 = levenbergMarquardtEstimator0.getJacobianEvaluations();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test1619,"public void test1619() throws Throwable {
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    EstimatedParameter estimatedParameter0 = new EstimatedParameter(""LU decomposition requires that the matrix be square."", 1.0);
    simpleEstimationProblem0.addParameter(estimatedParameter0);
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn((-1502.78691445)).when(weightedMeasurement0).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
    doReturn((-1.0)).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
    levenbergMarquardtEstimator0.getCovariances(simpleEstimationProblem0);
    assertEquals(1, levenbergMarquardtEstimator0.getJacobianEvaluations());
}",0,"assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations())"
project,0,test1720,"public void test1720() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    levenbergMarquardtEstimator0.updateResidualsAndCost();
    int int0 = levenbergMarquardtEstimator0.getCostEvaluations();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test1821,"public void test1821() throws Throwable {
    GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(0, 584.6735773400344, 0);
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn((-1250.2)).when(weightedMeasurement0).getResidual();
    doReturn(584.6735773400344).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    double double0 = gaussNewtonEstimator0.getChiSquare(simpleEstimationProblem0);
    assertEquals(2673.2866005521414, double0, 0.01);
}",0,
project,0,test2022,"public void test2022() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    levenbergMarquardtEstimator0.rows = 1278;
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.updateResidualsAndCost();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",1,
project,0,test2123,"public void test2123() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
    levenbergMarquardtEstimator0.rows = 2786;
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.updateResidualsAndCost();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test2224,"public void test2224() throws Throwable {
    GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(0, 4984.32166029148, (-1721.36667));
    // Undeclared exception!
    try {
        gaussNewtonEstimator0.updateJacobian();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Arrays"", e);
    }
}",0,
project,0,test2325,"public void test2325() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.initializeEstimate((EstimationProblem) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test2426,"public void test2426() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Arrays"", e);
    }
}",1,
project,0,test2527,"public void test2527() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    simpleEstimationProblem0.addMeasurement((WeightedMeasurement) null);
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test2628,"public void test2628() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.getCovariances(simpleEstimationProblem0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Arrays"", e);
    }
}",0,
project,0,test2729,"public void test2729() throws Throwable {
    GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(938, 938, 938);
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    gaussNewtonEstimator0.initializeEstimate(simpleEstimationProblem0);
    // Undeclared exception!
    try {
        gaussNewtonEstimator0.getCovariances(simpleEstimationProblem0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Matrix must have at least one row.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}",0,
project,0,test2830,"public void test2830() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
    EstimatedParameter estimatedParameter0 = new EstimatedParameter(""Caused by: "", 285.0);
    simpleEstimationProblem0.addParameter(estimatedParameter0);
    simpleEstimationProblem0.addMeasurement((WeightedMeasurement) null);
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.getCovariances(simpleEstimationProblem0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test2931,"public void test2931() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.getChiSquare((EstimationProblem) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test3032,"public void test3032() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    EstimatedParameter estimatedParameter0 = new EstimatedParameter(""-$C#:Xv%H9/d"", (-2025.2));
    simpleEstimationProblem0.addParameter(estimatedParameter0);
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
    doReturn(Double.POSITIVE_INFINITY).when(weightedMeasurement0).getResidual();
    doReturn(Double.POSITIVE_INFINITY, (-2025.2), (-2025.2)).when(weightedMeasurement0).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    try {
        levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // unable to perform Q.R decomposition on the 1x1 jacobian matrix
        //
        verifyException(""org.apache.commons.math.estimation.LevenbergMarquardtEstimator"", e);
    }
}",0,
project,0,test3133,"public void test3133() throws Throwable {
    GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(0, 0, 0);
    // Undeclared exception!
    try {
        gaussNewtonEstimator0.estimate((EstimationProblem) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test3234,"public void test3234() throws Throwable {
    GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator((-584), (-584), (-584));
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    // Undeclared exception!
    try {
        gaussNewtonEstimator0.estimate(simpleEstimationProblem0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row and column dimensions must be postive
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}",0,
project,0,test3335,"public void test3335() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0).when(weightedMeasurement0).getWeight();
    EstimatedParameter estimatedParameter0 = new EstimatedParameter(""LU decomposition requires that the matrix be square."", 1.0);
    simpleEstimationProblem0.addParameter(estimatedParameter0);
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    WeightedMeasurement weightedMeasurement1 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement1).getResidual();
    doReturn(0.0).when(weightedMeasurement1).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement1);
    double[] doubleArray0 = new double[8];
    levenbergMarquardtEstimator0.jacobian = doubleArray0;
    try {
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // unable to compute covariances: singular problem
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",1,
project,0,test3436,"public void test3436() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0).when(weightedMeasurement0).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
    doReturn(0.0, 0.0).when(weightedMeasurement0).getResidual();
    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
    EstimatedParameter estimatedParameter0 = new EstimatedParameter(""LU decomposition requires that the matrix be square."", 1.0);
    simpleEstimationProblem0.addParameter(estimatedParameter0);
    simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
    levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
    WeightedMeasurement weightedMeasurement1 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
    doReturn(0.0).when(weightedMeasurement1).getResidual();
    doReturn(0.0).when(weightedMeasurement1).getWeight();
    simpleEstimationProblem0.addMeasurement(weightedMeasurement1);
    // Undeclared exception!
    try {
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",0,
project,0,test3537,"public void test3537() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    double double0 = levenbergMarquardtEstimator0.getChiSquare(simpleEstimationProblem0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test3638,"public void test3638() throws Throwable {
    GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator((-817), (-817), (-817));
    try {
        gaussNewtonEstimator0.updateResidualsAndCost();
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // maximal number of evaluations exceeded (-817)
        //
        verifyException(""org.apache.commons.math.estimation.AbstractEstimator"", e);
    }
}",1,
project,0,test3739,"public void test3739() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
    levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
    levenbergMarquardtEstimator0.updateJacobian();
    assertEquals(2, levenbergMarquardtEstimator0.getJacobianEvaluations());
}",0,"assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations())"
project,0,test3840,"public void test3840() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    int int0 = levenbergMarquardtEstimator0.getJacobianEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test3941,"public void test3941() throws Throwable {
    LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
    int int0 = levenbergMarquardtEstimator0.getCostEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
