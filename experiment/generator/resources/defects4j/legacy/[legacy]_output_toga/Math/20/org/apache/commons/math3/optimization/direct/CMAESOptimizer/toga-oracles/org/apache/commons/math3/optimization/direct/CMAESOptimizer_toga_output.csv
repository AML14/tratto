project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(47, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 30000, 0, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MINIMIZE;
    double[] doubleArray2 = new double[1];
    doubleArray2[0] = (double) 47;
    // Undeclared exception!
    try {
        cMAESOptimizer0.optimize((-576), (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray2);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (-576) exceeded: evaluations
        //
        verifyException(""org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(10);
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    doubleArray1[0] = (double) 30000;
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MINIMIZE;
    // Undeclared exception!
    try {
        cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 3 != 1
        //
        verifyException(""org.apache.commons.math3.linear.ArrayRealVector"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-16));
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MINIMIZE;
    // Undeclared exception!
    try {
        cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 3 != 1
        //
        verifyException(""org.apache.commons.math3.linear.ArrayRealVector"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    doubleArray0[0] = doubleArray1;
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MINIMIZE;
    PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
    PointValuePair pointValuePair1 = cMAESOptimizer0.doOptimize();
    assertNotSame(pointValuePair1, pointValuePair0);
}",0,
project,0,test054,"public void test054() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
    // Undeclared exception!
    try {
        cMAESOptimizer0.doOptimize();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer"", e);
    }
}",0,
project,0,test065,"public void test065() throws Throwable {
    Well44497a well44497a0 = new Well44497a();
    SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, (-2157.173657120076));
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-633066204), (double[]) null, 0, (-633066204), true, (-961), (-633066204), well44497a0, true, simplePointChecker0);
    assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
}",0,
project,0,test076,"public void test076() throws Throwable {
    double[] doubleArray0 = new double[0];
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, doubleArray0, 2, 2, true, 0, 2, (RandomGenerator) null, true, (ConvergenceChecker<PointValuePair>) null);
    assertNull(cMAESOptimizer0.getGoalType());
}",0,assertNotNull(cMAESOptimizer0.getGoalType())
project,0,test087,"public void test087() throws Throwable {
    Well19937a well19937a0 = new Well19937a();
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1796), (double[]) null, (-1796), (-1796), false, 0, 62, well19937a0, true);
    assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
}",0,
project,0,test118,"public void test118() throws Throwable {
    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
    double[][] doubleArray0 = new double[1][3];
    double[] doubleArray1 = new double[1];
    doubleArray0[0] = doubleArray1;
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
    assertNotNull(pointValuePair0);
}",0,
