/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 22:54:09 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypedScopeCreator_ESTest extends TypedScopeCreator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascrpt.rhino.jstype.BooleanLitealSet");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
        scope0.getVarCount();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("rp5QKRRlGF;u=R");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
        scope0.isLocal();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("xpY");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        Node node1 = new Node(118, node0, node0);
        typedScopeCreator0.createScope(node1, (Scope) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("xpY");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        Node node1 = Node.newString(33, "xpY", 32, 34);
        Node node2 = new Node(118, node1, node0);
        typedScopeCreator0.createScope(node2, (Scope) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("qY");
        node0.setType(105);
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        Node node1 = new Node(10, node0, node0);
        Scope scope0 = new Scope(node0, compiler0);
        typedScopeCreator0.createScope(node1, scope0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("|{");
        node0.setType(118);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        typedScopeCreator0.createScope(node0, (Scope) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("<ull>");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        Node node2 = Node.newString(49, "<ull>", 48, 33);
        Node node3 = new Node(18, node2, node1, node2, node1);
        Scope scope0 = typedScopeCreator0.createInitialScope(node0);
        typedScopeCreator0.createScope(node3, scope0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        Node node1 = new Node(37, node0, node0);
        Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
        scope0.isGlobal();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("goog.typedef");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
        scope0.isGlobal();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("4sItP-q`#Km0J");
        Node node1 = new Node(0, node0, node0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        node0.addChildToBack(node2);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        Scope scope0 = typedScopeCreator0.createInitialScope(node0);
        Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
        scope1.isGlobal();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("qY");
        node0.setType(118);
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        Node node1 = new Node(10, node0, node0);
        Scope scope0 = new Scope(node0, compiler0);
        typedScopeCreator0.createScope(node1, scope0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        Node node2 = Node.newString(49, "", 48, 33);
        Node node3 = new Node(18, node2, node1, node2, node1);
        Scope scope0 = typedScopeCreator0.createInitialScope(node0);
        Scope scope1 = typedScopeCreator0.createScope(node3, scope0);
        scope1.isLocal();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("VMBridge");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        Node node2 = Node.newString("VMBridge", 41, 1);
        Node node3 = new Node(23, node2, node0, node2, node1);
        Scope scope0 = typedScopeCreator0.createInitialScope(node0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node1);
        scope0.declare("VMBridge", node0, functionType0, (CompilerInput) null, true);
        typedScopeCreator0.createScope(node3, scope0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("undefined");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        Node node2 = Node.newString(38, "undefined", 47, 36);
        Node node3 = new Node(23, node2, node0, node2, node1);
        Scope scope0 = typedScopeCreator0.createInitialScope(node2);
        Scope scope1 = typedScopeCreator0.createScope(node3, scope0);
        scope1.isLocal();
    }
}
