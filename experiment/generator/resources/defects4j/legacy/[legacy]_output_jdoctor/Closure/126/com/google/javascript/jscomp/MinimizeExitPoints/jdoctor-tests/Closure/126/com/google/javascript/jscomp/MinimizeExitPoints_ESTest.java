/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 06:07:38 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.MinimizeExitPoints;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MinimizeExitPoints_ESTest extends MinimizeExitPoints_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}");
        node0.setType(113);
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
        minimizeExitPoints0.process(node0, node0);
        node0.isCall();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "J;xg3*=h4t48^$@Z");
        Node node1 = new Node(114, node0, node0, node0, 29, 0);
        minimizeExitPoints0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("7;");
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
        Node node1 = new Node(115, node0, 34, 40);
        minimizeExitPoints0.process(node0, node1);
        node0.isName();
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
        Node node1 = new Node(126, node0, node0, node0, 29, 0);
        minimizeExitPoints0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node((-219), 102, (-2314));
        Node node1 = new Node(77, node0);
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
        minimizeExitPoints0.tryMinimizeExits(node1, (-219), (String) null);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}");
        Node node1 = new Node(126, node0);
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
        minimizeExitPoints0.tryMinimizeExits(node1, (-816), "com.google.javascript.jscomp.MinimizeExitPoints");
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache");
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
        minimizeExitPoints0.tryMinimizeExits(node0, 40, "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache");
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("7;");
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
        Node node1 = new Node(115, node0, 34, 40);
        minimizeExitPoints0.tryMinimizeExits(node1, 115, (String) null);
        node1.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Compiler compiler0 = new Compiler();
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
        Node node0 = new Node(0, 0, 0);
        Node node1 = new Node(0, node0);
        minimizeExitPoints0.tryMinimizeExits(node1, 0, "");
    }
}
