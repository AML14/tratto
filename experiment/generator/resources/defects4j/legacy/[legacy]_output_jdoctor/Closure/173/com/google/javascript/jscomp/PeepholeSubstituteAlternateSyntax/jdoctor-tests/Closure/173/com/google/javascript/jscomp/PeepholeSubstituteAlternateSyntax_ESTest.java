/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 00:08:32 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeepholeSubstituteAlternateSyntax_ESTest extends PeepholeSubstituteAlternateSyntax_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = new Node(47);
        node0.setType(85);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Node node0 = Node.newString(4, "miss&ng goog.getCssName around literal ''{0}''");
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Node node0 = new Node(44);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = Node.newNumber(0.0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Node node0 = new Node(30);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isRegExp();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Node node0 = new Node(37);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Node node0 = new Node(37);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        node0.addChildToFront(node0);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(47);
        node0.setType(85);
        Node node1 = new Node(29, node0, node0, node0, node0, 40, 30);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node2.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(47);
        node0.setType(85);
        Node node1 = new Node(29, node0, node0, node0, node0, 40, 30);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isTypeOf();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        Node node1 = new Node(4, node0, node0, node0, node0, 8, 15);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        node2.isCall();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Node node0 = new Node(63);
        node0.addChildToFront(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Node node0 = new Node(63);
        Node node1 = Node.newString("");
        node0.addChildToFront(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isAdd();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        boolean boolean0 = PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("s1}hD8y_MOh}oR[|,");
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        boolean boolean0 = PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("tT;(< ,vN9~{TwrG");
    }
}
