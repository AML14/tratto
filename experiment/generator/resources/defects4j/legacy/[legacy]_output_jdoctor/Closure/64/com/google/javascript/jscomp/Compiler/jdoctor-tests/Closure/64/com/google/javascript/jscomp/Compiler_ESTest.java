/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:09:07 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.io.BufferedOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        JSModule jSModule0 = new JSModule("stripCode");
        compiler0.toSource(jSModule0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler0.toSource(compiler_CodeBuilder0, (-2192), (Node) null);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
        JSModule[] jSModuleArray0 = new JSModule[0];
        compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.resetUniqueNameId();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Level level0 = Level.CONFIG;
        Compiler.setLoggingLevel(level0);
        level0.intValue();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getCssRenamingMap();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    }

    @Test(timeout = 4000)
    public void test01211() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
    }

    @Test(timeout = 4000)
    public void test01312() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.rebuildInputsFromModules();
    }

    @Test(timeout = 4000)
    public void test01413() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.computeCFG();
    }

    @Test(timeout = 4000)
    public void test01514() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getPropertyMap();
    }

    @Test(timeout = 4000)
    public void test01615() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
    }

    @Test(timeout = 4000)
    public void test01716() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.check();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01817() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.parseSyntheticCode((String) null);
    }

    @Test(timeout = 4000)
    public void test01918() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.processDefines();
    }

    @Test(timeout = 4000)
    public void test02019() throws Throwable {
        Compiler.runCallableWithLargeStack((Callable<TightenTypes>) null);
    }

    @Test(timeout = 4000)
    public void test02120() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.languageMode();
    }

    @Test(timeout = 4000)
    public void test02221() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setCssRenamingMap((CssRenamingMap) null);
    }

    @Test(timeout = 4000)
    public void test02322() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02423() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
    }

    @Test(timeout = 4000)
    public void test02524() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    }

    @Test(timeout = 4000)
    public void test02625() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    }

    @Test(timeout = 4000)
    public void test02726() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.recordFunctionInformation();
    }

    @Test(timeout = 4000)
    public void test02827() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource((Node) null);
    }

    @Test(timeout = 4000)
    public void test02928() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("DWdf3", "DWdf3");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.ideMode = true;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.optimize();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("DWdf3", "DWdf3");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.ideMode = true;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.optimize();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceMap sourceMap0 = compiler0.getSourceMap();
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
    }

    @Test(timeout = 4000)
    public void test03534() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.setHasRegExpGlobalReferences(false);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test03635() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test03736() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getMessages();
    }

    @Test(timeout = 4000)
    public void test03837() throws Throwable {
        MockFile mockFile0 = new MockFile("1f :5WD-yg@*Yk8");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
    }

    @Test(timeout = 4000)
    public void test03938() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeTryCatchFinally();
    }

    @Test(timeout = 4000)
    public void test04039() throws Throwable {
        Compiler compiler0 = new Compiler();
        Scope scope0 = compiler0.getTopScope();
    }

    @Test(timeout = 4000)
    public void test04240() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
    }

    @Test(timeout = 4000)
    public void test04341() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
    }

    @Test(timeout = 4000)
    public void test04442() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04543() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
    }

    @Test(timeout = 4000)
    public void test04644() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
    }

    @Test(timeout = 4000)
    public void test04745() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04846() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("KLv{ih+iw>:|$A@");
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test04847() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("KLv{ih+iw>:|$A@");
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test04948() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{XKm^MP3)|n`KzC");
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.initOptions((CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test05049() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("5", "5");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        compilerOptions0.checkGlobalThisLevel = checkLevel0;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("5", "5");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        compilerOptions0.checkGlobalThisLevel = checkLevel0;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "";
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test05152() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "";
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test05153() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "";
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05254() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("p(LGM#\"#FgRE`M$K3G");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        jSSourceFileArray0[4] = jSSourceFile0;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05255() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("p(LGM#\"#FgRE`M$K3G");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        jSSourceFileArray0[4] = jSSourceFile0;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05356() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.compileModules(vector0, stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05457() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();
        JSModule jSModule0 = new JSModule("");
        linkedList0.offer(jSModule0);
        compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();
        JSModule jSModule0 = new JSModule("");
        linkedList0.offer(jSModule0);
        compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05559() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        compiler0.startPass((String) null);
        compiler0.startPass((String) null);
    }

    @Test(timeout = 4000)
    public void test05660() throws Throwable {
        Compiler compiler0 = new Compiler();
        OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
        Callable<OptimizeArgumentsArray> callable0 = (Callable<OptimizeArgumentsArray>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn(optimizeArgumentsArray0).when(callable0).call();
        OptimizeArgumentsArray optimizeArgumentsArray1 = Compiler.runCallable(callable0, false, true);
    }

    @Test(timeout = 4000)
    public void test05761() throws Throwable {
        Compiler.runCallable((Callable<OptimizeArgumentsArray>) null, false, false);
    }

    @Test(timeout = 4000)
    public void test05862() throws Throwable {
        Compiler.runCallable((Callable<OptimizeArgumentsArray>) null, false, true);
    }

    @Test(timeout = 4000)
    public void test06063() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        compiler0.setPassConfig(passConfig0);
    }

    @Test(timeout = 4000)
    public void test06164() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06165() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test06166() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test06267() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.endPass();
    }

    @Test(timeout = 4000)
    public void test06368() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("D");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        compiler0.parseInputs();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06469() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("Can't negate non-numeric value: {0}");
        compiler0.areNodesEqualForInlining(node0, node0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test06570() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("f#;", "f#;");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.removeInput("f#;");
    }

    @Test(timeout = 4000)
    public void test06671() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("x0<D.~TXd;W");
        compiler0.removeInput("x0<D.~TXd;W");
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test06772() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("f#;");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.removeInput("f#;");
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06873() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("x0<D./~TXd;W");
        compiler0.newExternInput("x0<D./~TXd;W");
    }

    @Test(timeout = 4000)
    public void test06974() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Invalid token: ");
        compiler0.newExternInput(" [testcode] ");
    }

    @Test(timeout = 4000)
    public void test07075() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("p(LGM#\"#FgRE`M$K3G");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07176() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("d8zVMy");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(" [synthetic] ", (String) null);
        JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07177() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("d8zVMy");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(" [synthetic] ", (String) null);
        JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07278() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07279() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07380() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("DWdf3", "DWdf3");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.ideMode = true;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07381() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("DWdf3", "DWdf3");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.ideMode = true;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07482() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("J*dYUPT&tcqx", "com.google.javascript.jscomp.PeepholeFoldWithTypes");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        JSSourceFile jSSourceFile1 = JSSourceFile.fromInputStream("$7", (InputStream) sequenceInputStream0);
        compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile1);
        compiler0.replaceIncrementalSourceAst(jsAst0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07583() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Mmo$/E+*");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test07584() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Mmo$/E+*");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07685() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("p(LGM#\"#FgRE`M$K3G");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07686() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("p(LGM#\"#FgRE`M$K3G");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07787() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.DevMode compilerOptions_DevMode0 = CompilerOptions.DevMode.START_AND_END;
        compilerOptions0.devMode = compilerOptions_DevMode0;
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07888() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test07889() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07890() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test07991() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("DWdf3", "DWdf3");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        compiler0.parseInputs();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test07992() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("DWdf3", "DWdf3");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        compiler0.parseInputs();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07993() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("DWdf3", "DWdf3");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        compiler0.parseInputs();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test08094() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.parseTestCode("H|D\"^(%5>3q-");
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test08195() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("jv8t7kCiM-+axu8viL");
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("com.google.protobuf.Descriptors$FieldDescriptor$Type");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("com.google.protobuf.Descriptors$FieldDescriptor$Type");
    }

    @Test(timeout = 4000)
    public void test08296() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("[source unknown]\n");
    }

    @Test(timeout = 4000)
    public void test08397() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("Conflicting externs name: ");
    }

    @Test(timeout = 4000)
    public void test08498() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("com.google.protobuf.Descriptors$FieldDescriptor$Type");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("9AB");
    }

    @Test(timeout = 4000)
    public void test08599() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("'joe[O([q5", "'joe[O([q5");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.optimize();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test086100() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("6>%a$Ls>/r");
        boolean boolean0 = compiler0.isInliningForbidden();
    }

    @Test(timeout = 4000)
    public void test086101() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("6>%a$Ls>/r");
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test088102() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("f#;", "f#;");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test088103() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("f#;", "f#;");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
    }

    @Test(timeout = 4000)
    public void test089104() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.disableThreads();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test090105() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Compiler compiler0 = new Compiler();
        String[] stringArray0 = new String[1];
        JSError jSError0 = JSError.make((String) null, (-778), (-778), compilerOptions0.checkUnreachableCode, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        compiler0.report(jSError0);
    }

    @Test(timeout = 4000)
    public void test091106() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.throwInternalError("JSC_EMPTY_MODULE_LIST_ERROR", (Exception) null);
    }

    @Test(timeout = 4000)
    public void test092107() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("// Input %num%");
        compiler0.check();
    }

    @Test(timeout = 4000)
    public void test093108() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion((String) null, (-1108));
    }

    @Test(timeout = 4000)
    public void test094109() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("d8zVMy");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.getSourceRegion((String) null, 2148);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test095110() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("D", "D");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.getSourceRegion("D", 132);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test095111() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("D", "D");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.getSourceRegion("D", 132);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test095112() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("D", "D");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.getSourceRegion("D", 132);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test096113() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("!h8[tF![V[!{");
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test097114() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test098115() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();
        compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test099116() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("@'`0Od|u.G9ftNKQ");
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(sourceFile_Generator0).getCode();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("@'`0Od|u.G9ftNKQ", sourceFile_Generator0);
        jSModule0.addFirst(jSSourceFile0);
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test100117() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test101118() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("f#;", "f#;");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.getAstDotGraph();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test102119() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Can't negate non-numeric value: {0}");
        compiler0.getErrorManager();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test103120() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test103121() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
    }

    @Test(timeout = 4000)
    public void test104122() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("3");
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(hashMap0, node0);
    }

    @Test(timeout = 4000)
    public void test105123() throws Throwable {
        Compiler compiler0 = new Compiler();
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        Node node0 = Node.newString("GETPROP");
        compiler0.updateGlobalVarReferences(hashMap0, node0);
    }

    @Test(timeout = 4000)
    public void test106124() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("RE7V4W1:olT8;)VZH\"");
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(hashMap0, node0);
    }
}
