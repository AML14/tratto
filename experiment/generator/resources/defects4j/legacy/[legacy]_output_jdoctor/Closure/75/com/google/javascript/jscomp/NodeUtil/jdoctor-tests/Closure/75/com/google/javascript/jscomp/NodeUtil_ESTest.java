/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:41:09 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.BufferedOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode((String) null, " ,}POZY_29)");
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = Node.newNumber((double) 1021, 1021, 1021);
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Node node0 = new Node(58, 58, 58);
        boolean boolean0 = NodeUtil.containsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Node node0 = Node.newNumber(33.2116);
        NodeUtil.getArgumentForCallOrNew(node0, 0);
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        Node node0 = Node.newString(21, "mMxI/6~", 21, 21);
        NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        Node node0 = Node.newNumber((double) 114);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        Node node0 = new Node(87);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Node node0 = Node.newString("QCP'=+2.zp,D3");
        NodeUtil.getPrototypePropertyName(node0);
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Node node0 = new Node(87);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Node node0 = new Node(116, 116, 116);
        NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "infinity", (Node) null, "q{&T!UNd()9gNj{I");
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Node node0 = Node.newString("N@L'Nfb6Q\"^");
        NodeUtil.getArgumentForFunction(node0, 4095);
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "cWK", 561, 561);
        Node node1 = NodeUtil.newName(closureCodingConvention0, "cWK", node0, "cWK");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "cWK", 561, 561);
        Node node1 = NodeUtil.newName(closureCodingConvention0, "cWK", node0, "cWK");
    }

    @Test(timeout = 4000)
    public void test01418() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "cWK", 561, 561);
        Node node1 = NodeUtil.newName(closureCodingConvention0, "cWK", node0, "cWK");
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test01419() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "cWK", 561, 561);
        Node node1 = NodeUtil.newName(closureCodingConvention0, "cWK", node0, "cWK");
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test01420() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "cWK", 561, 561);
        Node node1 = NodeUtil.newName(closureCodingConvention0, "cWK", node0, "cWK");
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test01521() throws Throwable {
        Node node0 = new Node(120);
        NodeUtil.isVarArgsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test01622() throws Throwable {
        Node node0 = new Node(117);
        int int0 = NodeUtil.getNameReferenceCount(node0, (String) null);
    }

    @Test(timeout = 4000)
    public void test01723() throws Throwable {
        Node node0 = new Node(68);
        NodeUtil.getFunctionBody(node0);
    }

    @Test(timeout = 4000)
    public void test01824() throws Throwable {
        Node node0 = new Node(71);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test01925() throws Throwable {
        Node node0 = new Node(147);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test01926() throws Throwable {
        Node node0 = new Node(147);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test02027() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "cW$", "cW$");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test02128() throws Throwable {
        Node node0 = Node.newString(129, "`=(kWsmx.ih>", 129, 110);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        Node node0 = Node.newString(100, "&");
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        Node node0 = Node.newString(".prototype");
        node0.setType(101);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03133() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        Logger logger0 = Logger.getLogger("undefined");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "undefined", 8233, 8233);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        Logger logger0 = Logger.getLogger("undefined");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "undefined", 8233, 8233);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04035() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Undefined", 35, 35);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test04036() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Undefined", 35, 35);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04037() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Undefined", 35, 35);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04138() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 122, 1045);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test04139() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 122, 1045);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04140() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 122, 1045);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04341() throws Throwable {
        Node node0 = new Node(43);
        Node node1 = new Node(26, node0, 5, 18);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04342() throws Throwable {
        Node node0 = new Node(43);
        Node node1 = new Node(26, node0, 5, 18);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04443() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "d_z#t:)(", 119, 119);
        Node node1 = new Node(18, node0, 26, 78);
        String string0 = NodeUtil.arrayToString(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "d_z#t:)(", 119, 119);
        Node node1 = new Node(18, node0, 26, 78);
        String string0 = NodeUtil.arrayToString(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04445() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "d_z#t:)(", 119, 119);
        Node node1 = new Node(18, node0, 26, 78);
        String string0 = NodeUtil.arrayToString(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04446() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "d_z#t:)(", 119, 119);
        Node node1 = new Node(18, node0, 26, 78);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test04447() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "d_z#t:)(", 119, 119);
        Node node1 = new Node(18, node0, 26, 78);
        String string0 = NodeUtil.arrayToString(node1);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test04548() throws Throwable {
        Node node0 = Node.newNumber((-1829.131));
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04649() throws Throwable {
        Node node0 = Node.newString("yIqGgn+u-yP{)=6vt(:");
        Node node1 = new Node(2, node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test04650() throws Throwable {
        Node node0 = Node.newString("yIqGgn+u-yP{)=6vt(:");
        Node node1 = new Node(2, node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test04751() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        Node node0 = new Node(59);
        Node node1 = new Node(44, node0, 4, 74);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04953() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04954() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05055() throws Throwable {
        Node node0 = Node.newNumber(2236.1222158928294);
        Node node1 = new Node(122, node0, 27, (-2416));
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05156() throws Throwable {
        Node node0 = Node.newString(147, "vL.rxg5N");
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05257() throws Throwable {
        Node node0 = Node.newNumber((double) 30, 30, 30);
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test05358() throws Throwable {
        Node node0 = new Node(43);
        Node node1 = new Node(26, node0, 5, 18);
        node0.setType(8);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05459() throws Throwable {
        Node node0 = Node.newNumber(2236.1222158928294);
        Node node1 = new Node(122, node0, 27, (-2416));
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05560() throws Throwable {
        Node node0 = Node.newString(124, "+infinity", 255, 46);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05661() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        Node node1 = new Node(26, node0, 5, 18);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05762() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "R5,&X", 72, 72);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05763() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "R5,&X", 72, 72);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test05764() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "R5,&X", 72, 72);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05765() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "R5,&X", 72, 72);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test05766() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "R5,&X", 72, 72);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test05867() throws Throwable {
        Node node0 = Node.newNumber(53.0);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05968() throws Throwable {
        Node node0 = Node.newString("0rs,+;cJMb");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05969() throws Throwable {
        Node node0 = Node.newString("0rs,+;cJMb");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06070() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(41, nodeArray0);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06171() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06272() throws Throwable {
        Node node0 = Node.newString(63, "lkj{");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06373() throws Throwable {
        Node node0 = Node.newNumber(2236.1222158928294);
        Node node1 = new Node(122, node0, 27, (-2416));
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06374() throws Throwable {
        Node node0 = Node.newNumber(2236.1222158928294);
        Node node1 = new Node(122, node0, 27, (-2416));
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06475() throws Throwable {
        Node node0 = Node.newString(1861, "printNameReferenceGraph", 1861, 1861);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06576() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(26, node0, 5, 18);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06677() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("+aIE");
    }

    @Test(timeout = 4000)
    public void test06678() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("+aIE");
    }

    @Test(timeout = 4000)
    public void test06779() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("infinity");
    }

    @Test(timeout = 4000)
    public void test06880() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("-infinity");
    }

    @Test(timeout = 4000)
    public void test06981() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(")\n");
    }

    @Test(timeout = 4000)
    public void test06982() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(")\n");
    }

    @Test(timeout = 4000)
    public void test07083() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" {G=rUuEGD");
    }

    @Test(timeout = 4000)
    public void test07084() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" {G=rUuEGD");
    }

    @Test(timeout = 4000)
    public void test07885() throws Throwable {
        Node node0 = new Node(43);
        Node node1 = new Node(26, node0, 5, 18);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
    }

    @Test(timeout = 4000)
    public void test07986() throws Throwable {
        Node node0 = new Node(77);
        Node node1 = new Node(29, node0, node0, node0, 1, (-1));
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
    }

    @Test(timeout = 4000)
    public void test08087() throws Throwable {
        Node node0 = Node.newString(95, "Kz+$", 136, 136);
        Node node1 = Node.newNumber((double) 13, 42, 4);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test08188() throws Throwable {
        Node node0 = Node.newString("destructuring assignment forbidden");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test08289() throws Throwable {
        Node node0 = Node.newString(41, ".prototype");
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test08390() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test08491() throws Throwable {
        Node node0 = Node.newString(30, ".rhototype", 30, (-1));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
    }

    @Test(timeout = 4000)
    public void test08592() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 45, 2);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test08593() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 45, 2);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test08594() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 45, 2);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test08595() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 45, 2);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test08696() throws Throwable {
        Node node0 = Node.newString(64, "2&pYg?i];Q ]Crg`MP");
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test08797() throws Throwable {
        Node node0 = Node.newString("cWK");
        node0.setType(105);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test08898() throws Throwable {
        Node node0 = Node.newString("o/RYYa}^W\"T;iVBo");
        node0.setType(105);
        NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test08999() throws Throwable {
        Node node0 = Node.newString(9, "Y\"PSRTVh.rHLE", 708, 9);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test090100() throws Throwable {
        Node node0 = Node.newString("i6|I:I-.Ez_Jq");
        Node node1 = new Node(10, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test091101() throws Throwable {
        Node node0 = new Node(131);
        Node node1 = new Node(11, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test092102() throws Throwable {
        Node node0 = Node.newString("Unknown precedence for ");
        Node node1 = new Node(12, node0, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test093103() throws Throwable {
        Node node0 = Node.newString(13, "null symbol name", 19, 132);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test094104() throws Throwable {
        Node node0 = Node.newString("E");
        Node node1 = new Node(15, node0, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test095105() throws Throwable {
        Node node0 = Node.newString((-1058), "");
        Node node1 = new Node(16, node0, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test096106() throws Throwable {
        Node node0 = new Node(17);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test097107() throws Throwable {
        Node node0 = new Node(19);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test098108() throws Throwable {
        Node node0 = Node.newString(20, ".prototype");
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test099109() throws Throwable {
        Node node0 = new Node(50);
        Node node1 = new Node(21, node0, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test100110() throws Throwable {
        Node node0 = Node.newString(22, ".prototype", 22, (-22));
        Locale locale0 = Locale.KOREA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test101111() throws Throwable {
        Node node0 = new Node(23);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test102112() throws Throwable {
        Node node0 = Node.newString(24, ".prototype", 24, (-39));
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test103113() throws Throwable {
        Node node0 = Node.newString(">jC");
        Node node1 = new Node(25, node0, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test104114() throws Throwable {
        Node node0 = new Node(43);
        Node node1 = new Node(26, node0, 5, 18);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test105115() throws Throwable {
        Node node0 = Node.newString("24ac/Ln");
        node0.setType(27);
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test106116() throws Throwable {
        Node node0 = Node.newString("i/j$mPXo");
        Node node1 = new Node(29, node0, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test107117() throws Throwable {
        Node node0 = Node.newString(30, "// In7ut %num%", 30, 30);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test108118() throws Throwable {
        Node node0 = Node.newString(31, "com.google.javascript.rhino.jstype.NumberType");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test109119() throws Throwable {
        Node node0 = Node.newString(32, "`(kWsmx.ih>");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test110120() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test110121() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test110122() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test110123() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test110124() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test111125() throws Throwable {
        Node node0 = Node.newString("[zMVAP0;eSQ5`$G");
        Node node1 = new Node(34, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test112126() throws Throwable {
        Node node0 = Node.newString(35, "Xr$E");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test113127() throws Throwable {
        Node node0 = Node.newString(37, "(au");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test114128() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test114129() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test114130() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test114131() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test115132() throws Throwable {
        Node node0 = Node.newNumber((double) 13, 42, 4);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test116133() throws Throwable {
        Node node0 = Node.newString(38, "`(kWsmx.ih>");
        Node node1 = new Node(41, node0, node0, node0, node0, 0, 44);
        Compiler compiler0 = new Compiler();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethods;
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test117134() throws Throwable {
        Node node0 = Node.newString(116, "lprototype", 116, 116);
        node0.setType(42);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test118135() throws Throwable {
        Node node0 = Node.newString(44, "ei/l;;+!", 59, 28);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test119136() throws Throwable {
        Node node0 = Node.newString(45, ".prototype", 45, (-1422));
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test120137() throws Throwable {
        Node node0 = Node.newString(46, "WtK", 3, 1);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test121138() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("_3Db2~s");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test121139() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("_3Db2~s");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test121140() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("_3Db2~s");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test122141() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("$F/)3x.Q&HRB.Pj\"");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test123142() throws Throwable {
        Node node0 = Node.newString(118, "Shift amount out of bounds: {0}", 118, 118);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test124143() throws Throwable {
        Node node0 = Node.newString(9, " does not have a condition.", 2421, 2421);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test125144() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
    }

    @Test(timeout = 4000)
    public void test126145() throws Throwable {
        Node node0 = new Node(11);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test127146() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
    }

    @Test(timeout = 4000)
    public void test128147() throws Throwable {
        Node node0 = Node.newString(14, "`=(kWsmx.ih>");
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    }

    @Test(timeout = 4000)
    public void test129148() throws Throwable {
        Node node0 = Node.newString("E");
        Node node1 = new Node(15, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test130149() throws Throwable {
        Node node0 = new Node(16);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test131150() throws Throwable {
        Node node0 = new Node(17, 17, 17);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test132151() throws Throwable {
        Node node0 = new Node(18);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test133152() throws Throwable {
        Node node0 = new Node(19, 19, 19);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test134153() throws Throwable {
        Node node0 = Node.newString(20, "// In7ut %num%", 20, 20);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test135154() throws Throwable {
        Node node0 = Node.newString(21, ".prototype", 21, 1858);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test136155() throws Throwable {
        Node node0 = Node.newString(22, ".prototype", 22, 22);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test137156() throws Throwable {
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test138157() throws Throwable {
        Node node0 = Node.newString(24, ".prototype", 24, 24);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test139158() throws Throwable {
        Node node0 = new Node(25);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test140159() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    }

    @Test(timeout = 4000)
    public void test141160() throws Throwable {
        Node node0 = Node.newString("o/RYYa}^W\"T;iVBo");
        node0.setType(27);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    }

    @Test(timeout = 4000)
    public void test142161() throws Throwable {
        Node node0 = new Node(28);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test143162() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "cW$", "cW$");
        Node node1 = new Node(29, node0, 47, 19);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test144163() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    }

    @Test(timeout = 4000)
    public void test145164() throws Throwable {
        Node node0 = new Node(31, 15, 38);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test146165() throws Throwable {
        Node node0 = new Node(32, 32, 32);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test147166() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test148167() throws Throwable {
        Node node0 = Node.newString("[zMVP0;eSQ5`$G");
        Node node1 = new Node(34, node0);
        Node node2 = node1.cloneTree();
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node2);
    }

    @Test(timeout = 4000)
    public void test149168() throws Throwable {
        Node node0 = Node.newString(110, "\"WY4)j5430RgaVE");
        Node node1 = new Node(35, node0, 38, 40);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test150169() throws Throwable {
        Node node0 = new Node(36);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test151170() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    }

    @Test(timeout = 4000)
    public void test152171() throws Throwable {
        Node node0 = Node.newString(38, "`(kWsmx.ih>", 38, 38);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    }

    @Test(timeout = 4000)
    public void test153172() throws Throwable {
        Node node0 = Node.newNumber(2228.2115593881085);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test154173() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    }

    @Test(timeout = 4000)
    public void test155174() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test156175() throws Throwable {
        Node node0 = Node.newString(45, "||");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test157176() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
    }

    @Test(timeout = 4000)
    public void test158177() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    }

    @Test(timeout = 4000)
    public void test159178() throws Throwable {
        Node node0 = new Node(48);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test160179() throws Throwable {
        Node node0 = Node.newString(49, "-infinity", (-331), 33);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test161180() throws Throwable {
        Node node0 = new Node(50);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test162181() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    }

    @Test(timeout = 4000)
    public void test163182() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
    }

    @Test(timeout = 4000)
    public void test164183() throws Throwable {
        Node node0 = new Node(53, 53, 53);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test165184() throws Throwable {
        Node node0 = Node.newString(32, "`(kWsmx.ih>");
        node0.setType(54);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test166185() throws Throwable {
        Node node0 = new Node(55, 55, 55);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test167186() throws Throwable {
        Node node0 = new Node(56, 56, 56);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test168187() throws Throwable {
        Node node0 = new Node(57, 57, 57);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test169188() throws Throwable {
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        Node node0 = Node.newString(58, "arguments", 901, 1);
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test170189() throws Throwable {
        Node node0 = new Node(59, 59, 59);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test171190() throws Throwable {
        Node node0 = Node.newString(60, "valueOf");
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test172191() throws Throwable {
        Node node0 = Node.newString(38, "`=(kWsmx.ih>", 38, 38);
        node0.setType(62);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test173192() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    }

    @Test(timeout = 4000)
    public void test174193() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    }

    @Test(timeout = 4000)
    public void test175194() throws Throwable {
        Node node0 = Node.newString(65, "clear", 591, 591);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test176195() throws Throwable {
        Node node0 = new Node(66);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test177196() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test178197() throws Throwable {
        Node node0 = new Node(68);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test179198() throws Throwable {
        Node node0 = new Node(69);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test180199() throws Throwable {
        Node node0 = new Node(70);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test181200() throws Throwable {
        Node node0 = new Node(72, 72, 72);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test182201() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test183202() throws Throwable {
        Node node0 = new Node(74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test184203() throws Throwable {
        Node node0 = new Node(75, 75, 4);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test185204() throws Throwable {
        Node node0 = new Node(76);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test186205() throws Throwable {
        Node node0 = new Node(77);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test187206() throws Throwable {
        Node node0 = new Node(78);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test188207() throws Throwable {
        Node node0 = new Node(79);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test189208() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test190209() throws Throwable {
        Node node0 = new Node(81);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test191210() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(82);
    }

    @Test(timeout = 4000)
    public void test192211() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test193212() throws Throwable {
        Node node0 = new Node(84);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test194213() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(85, nodeArray0, 85, 85);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test195214() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test196215() throws Throwable {
        Node node0 = new Node(88);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test197216() throws Throwable {
        Node node0 = new Node(89);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test198217() throws Throwable {
        Node node0 = new Node(90);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test199218() throws Throwable {
        Node node0 = Node.newString(92, "r", 129, (-1768));
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test200219() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test201220() throws Throwable {
        Node node0 = new Node(97);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test202221() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    }

    @Test(timeout = 4000)
    public void test203222() throws Throwable {
        Node node0 = new Node(99);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test204223() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    }

    @Test(timeout = 4000)
    public void test205224() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    }

    @Test(timeout = 4000)
    public void test206225() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test207226() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test208227() throws Throwable {
        Node node0 = Node.newString(104, "=[+:#h<Z", (-28), 73);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test209228() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    }

    @Test(timeout = 4000)
    public void test210229() throws Throwable {
        Node node0 = new Node(106);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test211230() throws Throwable {
        Node node0 = new Node(107, 107, 107);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test212231() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    }

    @Test(timeout = 4000)
    public void test213232() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test214233() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test215234() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test216235() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test217236() throws Throwable {
        Node node0 = new Node(116, 116, 116);
        node0.setType(113);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test218237() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test219238() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test220239() throws Throwable {
        Node node0 = new Node(116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test221240() throws Throwable {
        Node node0 = Node.newString(116, "EeE fy|<WA", 116, 116);
        Node node1 = NodeUtil.newVarNode("EeE fy|<WA", node0);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test222241() throws Throwable {
        Node node0 = Node.newString(119, "// In7ut %num%", 119, (-1621));
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test223242() throws Throwable {
        Node node0 = new Node(120, 120, 2);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test224243() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test225244() throws Throwable {
        Node node0 = new Node(122);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test226245() throws Throwable {
        Node node0 = Node.newString(147, "vL.rxg5N");
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test227246() throws Throwable {
        Node node0 = new Node(38);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test228247() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test229248() throws Throwable {
        Node node0 = new Node(42, 120, 120);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test230249() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test231250() throws Throwable {
        Node node0 = Node.newString("cWK");
        node0.setType(44);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test232251() throws Throwable {
        Node node0 = Node.newString(38, "`(kWsmx.ih>");
        node0.setType(46);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test233252() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test234253() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test235254() throws Throwable {
        Node node0 = new Node(50);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test236255() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test237256() throws Throwable {
        Node node0 = new Node(53, 53, 53);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test238257() throws Throwable {
        Node node0 = Node.newString(32, "`(kWsmx.ih>");
        node0.setType(54);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test239258() throws Throwable {
        Node node0 = new Node(55);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test240259() throws Throwable {
        Node node0 = new Node(56);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test241260() throws Throwable {
        Node node0 = new Node(58, 58, 58);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test242261() throws Throwable {
        Node node0 = new Node(59, 59, 59);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test243262() throws Throwable {
        Node node0 = Node.newString(61, "typeof", 61, 61);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test244263() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test245264() throws Throwable {
        Node node0 = new Node(65);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test246265() throws Throwable {
        Node node0 = new Node(66);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test247266() throws Throwable {
        Node node0 = new Node(68);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test248267() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test249268() throws Throwable {
        Node node0 = new Node(72);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test250269() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test251270() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test252271() throws Throwable {
        Node node0 = new Node(78);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test253272() throws Throwable {
        Node node0 = new Node(81);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test254273() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test255274() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test256275() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test257276() throws Throwable {
        Node node0 = new Node(104);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test258277() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test259278() throws Throwable {
        Node node0 = Node.newString(117, "-");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test260279() throws Throwable {
        Node node0 = NodeUtil.newVarNode("com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (Node) null);
    }

    @Test(timeout = 4000)
    public void test260280() throws Throwable {
        Node node0 = NodeUtil.newVarNode("com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (Node) null);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test260281() throws Throwable {
        Node node0 = NodeUtil.newVarNode("com.google.javascript.jscomp.NodeUtil$MatchDeclaration", (Node) null);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test261282() throws Throwable {
        Node node0 = Node.newString("mtFtx8\"S1!s2]cJ,ME");
        node0.setType(119);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test262283() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        Node node1 = new Node(123, node0, 1, 2);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test263284() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test264285() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("@S[wSgH");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test265286() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test266287() throws Throwable {
        Node node0 = Node.newString(127, "<<=", 127, 127);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test267288() throws Throwable {
        Node node0 = new Node(128);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test268289() throws Throwable {
        Node node0 = Node.newString(129, "`=(kWsmx.ih>", 129, 110);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test269290() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test270291() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        node0.addChildrenToFront(node0);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test271292() throws Throwable {
        Node node0 = Node.newString("0IM#-?C 4");
        node0.setType(105);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test272293() throws Throwable {
        Node node0 = Node.newString(1861, "printNameReferenceGraph", 3, 1861);
        node0.setType(105);
        Node node1 = new Node(2, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test273294() throws Throwable {
        Node node0 = new Node(30, 30, 119);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test274295() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = NodeUtil.newVarNode("]ApjrARq!.N*!V06reO", node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test274296() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = NodeUtil.newVarNode("]ApjrARq!.N*!V06reO", node0);
        node1.setType(30);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test275297() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[4];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        node0.setType(94);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test276298() throws Throwable {
        Node node0 = Node.newString((-1003), "\">$n-", (-1003), (-1003));
        Node node1 = new Node(96, node0, node0, 84, 47);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test277299() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("<");
        Compiler compiler0 = new Compiler((PrintStream) null);
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = new Node(91, node0, node0, node0, node0);
        node0.setType(12);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test278300() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test279301() throws Throwable {
        Node node0 = Node.newString(30, ".prototype", 30, 30);
        Compiler compiler0 = new Compiler();
        node0.addChildrenToFront(node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
    }

    @Test(timeout = 4000)
    public void test280302() throws Throwable {
        Node node0 = new Node((-761), (-761), (-761));
        NodeUtil.callHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test281303() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        Node node1 = new Node(37, node0, node0, 5, 34);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test282304() throws Throwable {
        Node node0 = new Node(41);
        NodeUtil.newHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test283305() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test284306() throws Throwable {
        Node node0 = Node.newString((-1003), "\">$n-", (-1003), (-1003));
        Node node1 = new Node(96, node0, node0, 84, 47);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test285307() throws Throwable {
        Node node0 = new Node(37, 78, (-171));
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test286308() throws Throwable {
        Node node0 = Node.newString(38, "`=(kWsmx.ih>", 38, 38);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test287309() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
        MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
    }

    @Test(timeout = 4000)
    public void test288310() throws Throwable {
        Node node0 = Node.newString(102, "Shift amount out of bounds: {0}", 102, 102);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test289311() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test290312() throws Throwable {
        Node node0 = Node.newString(30, ".prototype", 30, 30);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test291313() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test291314() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test291315() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test291316() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test291317() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "./<", 24, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test292318() throws Throwable {
        Node node0 = Node.newString(35, "Xr$E");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test293319() throws Throwable {
        Node node0 = Node.newString(37, "(au");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test294320() throws Throwable {
        Node node0 = Node.newString(1858, "printNameReferenceGraph", 11, 1858);
        node0.setType(105);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(20);
        NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test295321() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("_3Db2~s");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test295322() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("_3Db2~s");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test295323() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_3Db2~s", 55, 55);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("_3Db2~s");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test296324() throws Throwable {
        Node node0 = new Node(125);
        Node node1 = new Node((-1845939769), node0, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test297325() throws Throwable {
        int int0 = NodeUtil.precedence(9);
    }

    @Test(timeout = 4000)
    public void test298326() throws Throwable {
        NodeUtil.precedence(77);
    }

    @Test(timeout = 4000)
    public void test299327() throws Throwable {
        int int0 = NodeUtil.precedence(10);
    }

    @Test(timeout = 4000)
    public void test300328() throws Throwable {
        int int0 = NodeUtil.precedence(11);
    }

    @Test(timeout = 4000)
    public void test301329() throws Throwable {
        int int0 = NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test302330() throws Throwable {
        int int0 = NodeUtil.precedence(13);
    }

    @Test(timeout = 4000)
    public void test303331() throws Throwable {
        int int0 = NodeUtil.precedence(14);
    }

    @Test(timeout = 4000)
    public void test304332() throws Throwable {
        int int0 = NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test305333() throws Throwable {
        int int0 = NodeUtil.precedence(16);
    }

    @Test(timeout = 4000)
    public void test306334() throws Throwable {
        int int0 = NodeUtil.precedence(17);
    }

    @Test(timeout = 4000)
    public void test307335() throws Throwable {
        int int0 = NodeUtil.precedence(18);
    }

    @Test(timeout = 4000)
    public void test308336() throws Throwable {
        int int0 = NodeUtil.precedence(19);
    }

    @Test(timeout = 4000)
    public void test309337() throws Throwable {
        int int0 = NodeUtil.precedence(20);
    }

    @Test(timeout = 4000)
    public void test310338() throws Throwable {
        int int0 = NodeUtil.precedence(21);
    }

    @Test(timeout = 4000)
    public void test311339() throws Throwable {
        int int0 = NodeUtil.precedence(22);
    }

    @Test(timeout = 4000)
    public void test312340() throws Throwable {
        int int0 = NodeUtil.precedence(23);
    }

    @Test(timeout = 4000)
    public void test313341() throws Throwable {
        int int0 = NodeUtil.precedence(24);
    }

    @Test(timeout = 4000)
    public void test314342() throws Throwable {
        int int0 = NodeUtil.precedence(25);
    }

    @Test(timeout = 4000)
    public void test315343() throws Throwable {
        int int0 = NodeUtil.precedence(26);
    }

    @Test(timeout = 4000)
    public void test316344() throws Throwable {
        int int0 = NodeUtil.precedence(27);
    }

    @Test(timeout = 4000)
    public void test317345() throws Throwable {
        int int0 = NodeUtil.precedence(28);
    }

    @Test(timeout = 4000)
    public void test318346() throws Throwable {
        int int0 = NodeUtil.precedence(29);
    }

    @Test(timeout = 4000)
    public void test319347() throws Throwable {
        int int0 = NodeUtil.precedence(30);
    }

    @Test(timeout = 4000)
    public void test320348() throws Throwable {
        int int0 = NodeUtil.precedence(31);
    }

    @Test(timeout = 4000)
    public void test321349() throws Throwable {
        int int0 = NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test322350() throws Throwable {
        int int0 = NodeUtil.precedence(33);
    }

    @Test(timeout = 4000)
    public void test323351() throws Throwable {
        NodeUtil.precedence(34);
    }

    @Test(timeout = 4000)
    public void test324352() throws Throwable {
        int int0 = NodeUtil.precedence(35);
    }

    @Test(timeout = 4000)
    public void test325353() throws Throwable {
        NodeUtil.precedence(36);
    }

    @Test(timeout = 4000)
    public void test326354() throws Throwable {
        int int0 = NodeUtil.precedence(37);
    }

    @Test(timeout = 4000)
    public void test327355() throws Throwable {
        int int0 = NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test328356() throws Throwable {
        int int0 = NodeUtil.precedence(39);
    }

    @Test(timeout = 4000)
    public void test329357() throws Throwable {
        int int0 = NodeUtil.precedence(40);
    }

    @Test(timeout = 4000)
    public void test330358() throws Throwable {
        int int0 = NodeUtil.precedence(41);
    }

    @Test(timeout = 4000)
    public void test331359() throws Throwable {
        int int0 = NodeUtil.precedence(42);
    }

    @Test(timeout = 4000)
    public void test332360() throws Throwable {
        int int0 = NodeUtil.precedence(43);
    }

    @Test(timeout = 4000)
    public void test333361() throws Throwable {
        int int0 = NodeUtil.precedence(44);
    }

    @Test(timeout = 4000)
    public void test334362() throws Throwable {
        int int0 = NodeUtil.precedence(45);
    }

    @Test(timeout = 4000)
    public void test335363() throws Throwable {
        int int0 = NodeUtil.precedence(46);
    }

    @Test(timeout = 4000)
    public void test336364() throws Throwable {
        int int0 = NodeUtil.precedence(47);
    }

    @Test(timeout = 4000)
    public void test337365() throws Throwable {
        NodeUtil.precedence(48);
    }

    @Test(timeout = 4000)
    public void test338366() throws Throwable {
        NodeUtil.precedence(49);
    }

    @Test(timeout = 4000)
    public void test339367() throws Throwable {
        NodeUtil.precedence(50);
    }

    @Test(timeout = 4000)
    public void test340368() throws Throwable {
        int int0 = NodeUtil.precedence(51);
    }

    @Test(timeout = 4000)
    public void test341369() throws Throwable {
        int int0 = NodeUtil.precedence(52);
    }

    @Test(timeout = 4000)
    public void test342370() throws Throwable {
        NodeUtil.precedence(53);
    }

    @Test(timeout = 4000)
    public void test343371() throws Throwable {
        NodeUtil.precedence(55);
    }

    @Test(timeout = 4000)
    public void test344372() throws Throwable {
        NodeUtil.precedence(56);
    }

    @Test(timeout = 4000)
    public void test345373() throws Throwable {
        NodeUtil.precedence(57);
    }

    @Test(timeout = 4000)
    public void test346374() throws Throwable {
        NodeUtil.precedence(58);
    }

    @Test(timeout = 4000)
    public void test347375() throws Throwable {
        NodeUtil.precedence(59);
    }

    @Test(timeout = 4000)
    public void test348376() throws Throwable {
        NodeUtil.precedence(60);
    }

    @Test(timeout = 4000)
    public void test349377() throws Throwable {
        NodeUtil.precedence(61);
    }

    @Test(timeout = 4000)
    public void test350378() throws Throwable {
        NodeUtil.precedence(62);
    }

    @Test(timeout = 4000)
    public void test351379() throws Throwable {
        int int0 = NodeUtil.precedence(63);
    }

    @Test(timeout = 4000)
    public void test352380() throws Throwable {
        int int0 = NodeUtil.precedence(64);
    }

    @Test(timeout = 4000)
    public void test353381() throws Throwable {
        int int0 = NodeUtil.precedence(65);
    }

    @Test(timeout = 4000)
    public void test354382() throws Throwable {
        NodeUtil.precedence(66);
    }

    @Test(timeout = 4000)
    public void test355383() throws Throwable {
        NodeUtil.precedence(67);
    }

    @Test(timeout = 4000)
    public void test356384() throws Throwable {
        NodeUtil.precedence(68);
    }

    @Test(timeout = 4000)
    public void test357385() throws Throwable {
        NodeUtil.precedence(69);
    }

    @Test(timeout = 4000)
    public void test358386() throws Throwable {
        NodeUtil.precedence(70);
    }

    @Test(timeout = 4000)
    public void test359387() throws Throwable {
        NodeUtil.precedence(72);
    }

    @Test(timeout = 4000)
    public void test360388() throws Throwable {
        NodeUtil.precedence(73);
    }

    @Test(timeout = 4000)
    public void test361389() throws Throwable {
        NodeUtil.precedence(74);
    }

    @Test(timeout = 4000)
    public void test362390() throws Throwable {
        NodeUtil.precedence(75);
    }

    @Test(timeout = 4000)
    public void test363391() throws Throwable {
        NodeUtil.precedence(76);
    }

    @Test(timeout = 4000)
    public void test364392() throws Throwable {
        NodeUtil.precedence(78);
    }

    @Test(timeout = 4000)
    public void test365393() throws Throwable {
        NodeUtil.precedence(79);
    }

    @Test(timeout = 4000)
    public void test366394() throws Throwable {
        NodeUtil.precedence(80);
    }

    @Test(timeout = 4000)
    public void test367395() throws Throwable {
        NodeUtil.precedence(81);
    }

    @Test(timeout = 4000)
    public void test368396() throws Throwable {
        NodeUtil.precedence(82);
    }

    @Test(timeout = 4000)
    public void test369397() throws Throwable {
        int int0 = NodeUtil.precedence(83);
    }

    @Test(timeout = 4000)
    public void test370398() throws Throwable {
        NodeUtil.precedence(84);
    }

    @Test(timeout = 4000)
    public void test371399() throws Throwable {
        int int0 = NodeUtil.precedence(85);
    }

    @Test(timeout = 4000)
    public void test372400() throws Throwable {
        int int0 = NodeUtil.precedence(86);
    }

    @Test(timeout = 4000)
    public void test373401() throws Throwable {
        int int0 = NodeUtil.precedence(87);
    }

    @Test(timeout = 4000)
    public void test374402() throws Throwable {
        int int0 = NodeUtil.precedence(88);
    }

    @Test(timeout = 4000)
    public void test375403() throws Throwable {
        int int0 = NodeUtil.precedence(89);
    }

    @Test(timeout = 4000)
    public void test376404() throws Throwable {
        int int0 = NodeUtil.precedence(90);
    }

    @Test(timeout = 4000)
    public void test377405() throws Throwable {
        int int0 = NodeUtil.precedence(91);
    }

    @Test(timeout = 4000)
    public void test378406() throws Throwable {
        int int0 = NodeUtil.precedence(92);
    }

    @Test(timeout = 4000)
    public void test379407() throws Throwable {
        int int0 = NodeUtil.precedence(93);
    }

    @Test(timeout = 4000)
    public void test380408() throws Throwable {
        int int0 = NodeUtil.precedence(94);
    }

    @Test(timeout = 4000)
    public void test381409() throws Throwable {
        int int0 = NodeUtil.precedence(95);
    }

    @Test(timeout = 4000)
    public void test382410() throws Throwable {
        int int0 = NodeUtil.precedence(96);
    }

    @Test(timeout = 4000)
    public void test383411() throws Throwable {
        int int0 = NodeUtil.precedence(97);
    }

    @Test(timeout = 4000)
    public void test384412() throws Throwable {
        int int0 = NodeUtil.precedence(98);
    }

    @Test(timeout = 4000)
    public void test385413() throws Throwable {
        NodeUtil.precedence(99);
    }

    @Test(timeout = 4000)
    public void test386414() throws Throwable {
        int int0 = NodeUtil.precedence(100);
    }

    @Test(timeout = 4000)
    public void test387415() throws Throwable {
        int int0 = NodeUtil.precedence(101);
    }

    @Test(timeout = 4000)
    public void test388416() throws Throwable {
        int int0 = NodeUtil.precedence(102);
    }

    @Test(timeout = 4000)
    public void test389417() throws Throwable {
        int int0 = NodeUtil.precedence(103);
    }

    @Test(timeout = 4000)
    public void test390418() throws Throwable {
        NodeUtil.precedence(104);
    }

    @Test(timeout = 4000)
    public void test391419() throws Throwable {
        int int0 = NodeUtil.precedence(105);
    }

    @Test(timeout = 4000)
    public void test392420() throws Throwable {
        NodeUtil.precedence(106);
    }

    @Test(timeout = 4000)
    public void test393421() throws Throwable {
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test394422() throws Throwable {
        int int0 = NodeUtil.precedence(108);
    }

    @Test(timeout = 4000)
    public void test395423() throws Throwable {
        NodeUtil.precedence(109);
    }

    @Test(timeout = 4000)
    public void test396424() throws Throwable {
        NodeUtil.precedence(110);
    }

    @Test(timeout = 4000)
    public void test397425() throws Throwable {
        NodeUtil.precedence(111);
    }

    @Test(timeout = 4000)
    public void test398426() throws Throwable {
        NodeUtil.precedence(112);
    }

    @Test(timeout = 4000)
    public void test399427() throws Throwable {
        NodeUtil.precedence(113);
    }

    @Test(timeout = 4000)
    public void test400428() throws Throwable {
        NodeUtil.precedence(114);
    }

    @Test(timeout = 4000)
    public void test401429() throws Throwable {
        NodeUtil.precedence(115);
    }

    @Test(timeout = 4000)
    public void test402430() throws Throwable {
        NodeUtil.precedence(116);
    }

    @Test(timeout = 4000)
    public void test403431() throws Throwable {
        NodeUtil.precedence(117);
    }

    @Test(timeout = 4000)
    public void test404432() throws Throwable {
        NodeUtil.precedence(118);
    }

    @Test(timeout = 4000)
    public void test405433() throws Throwable {
        NodeUtil.precedence(119);
    }

    @Test(timeout = 4000)
    public void test406434() throws Throwable {
        NodeUtil.precedence(120);
    }

    @Test(timeout = 4000)
    public void test407435() throws Throwable {
        NodeUtil.precedence(121);
    }

    @Test(timeout = 4000)
    public void test408436() throws Throwable {
        int int0 = NodeUtil.precedence(122);
    }

    @Test(timeout = 4000)
    public void test409437() throws Throwable {
        NodeUtil.precedence(123);
    }

    @Test(timeout = 4000)
    public void test410438() throws Throwable {
        int int0 = NodeUtil.precedence(124);
    }

    @Test(timeout = 4000)
    public void test411439() throws Throwable {
        NodeUtil.precedence(2);
    }

    @Test(timeout = 4000)
    public void test412440() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test412441() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test412442() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test412443() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test413444() throws Throwable {
        Node node0 = Node.newString(86, "Expected NEW node, got ", 86, 86);
        NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test414445() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test415446() throws Throwable {
        Node node0 = new Node(101);
        NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test416447() throws Throwable {
        Node node0 = new Node(40, 40, 40);
        Node node1 = new Node(40, node0, node0, node0, 5, 20);
        node1.setType(100);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test417448() throws Throwable {
        Node node0 = Node.newNumber(2266.3499624084);
        Node node1 = new Node(40, node0, node0, node0, 5, 20);
        node1.setType(100);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test418449() throws Throwable {
        Node node0 = Node.newString(9, "7lsI-p5P");
        boolean boolean0 = NodeUtil.isNumericResult(node0);
    }

    @Test(timeout = 4000)
    public void test419450() throws Throwable {
        Node node0 = new Node(10);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test420451() throws Throwable {
        Node node0 = new Node(11);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test421452() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "d_z#t:)(", 119, 119);
        Node node1 = new Node(18, node0, 26, 78);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test421453() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "d_z#t:)(", 119, 119);
        Node node1 = new Node(18, node0, 26, 78);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test421454() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "d_z#t:)(", 119, 119);
        Node node1 = new Node(18, node0, 26, 78);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test421455() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "d_z#t:)(", 119, 119);
        Node node1 = new Node(18, node0, 26, 78);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test422456() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = new Node(20, node0, 17, 32);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test423457() throws Throwable {
        Node node0 = Node.newString(22, ".prototype", 22, 2364);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test424458() throws Throwable {
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test425459() throws Throwable {
        Node node0 = Node.newString(24, ".prototype", 24, (-22));
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        int int0 = NodeUtil.getCount(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test426460() throws Throwable {
        Node node0 = Node.newString("JSR");
        Node node1 = new Node(25, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
    }

    @Test(timeout = 4000)
    public void test427461() throws Throwable {
        Node node0 = Node.newString("o/RYYa}^W\"T;iVBo");
        node0.setType(27);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test428462() throws Throwable {
        Node node0 = new Node(28);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test429463() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        boolean boolean0 = NodeUtil.isNumericResult(node0);
    }

    @Test(timeout = 4000)
    public void test430464() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test431465() throws Throwable {
        Node node0 = Node.newString(1837, "2&pYg?Mi];Q ]Crg`MP", 1837, 1837);
        node0.setType(103);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = nodeUtil_NumbericResultPredicate0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test432466() throws Throwable {
        Node node0 = new Node(12);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test433467() throws Throwable {
        Node node0 = Node.newString(13, "mMxI/6~", 44, 14);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test434468() throws Throwable {
        Node node0 = Node.newString(14, "`=(kWsmx.ih>");
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test435469() throws Throwable {
        Node node0 = Node.newString("}");
        Node node1 = new Node(15, node0, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test436470() throws Throwable {
        Node node0 = new Node(16);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test437471() throws Throwable {
        Node node0 = Node.newString(17, ".prototype", 17, (-22));
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test438472() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(18, node0, node0, 14, 11);
        boolean boolean0 = NodeUtil.isBooleanResult(node1);
    }

    @Test(timeout = 4000)
    public void test439473() throws Throwable {
        Node node0 = new Node(19);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test440474() throws Throwable {
        Node node0 = Node.newString(21, "mMxI/6~", 21, 21);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test441475() throws Throwable {
        Node node0 = Node.newString(22, ".prototype", 22, (-22));
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test442476() throws Throwable {
        Node node0 = Node.newString(24, "Cg&Q)|$osE", 6, 41);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test443477() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        Node node1 = new Node(26, node0, 5, 18);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test444478() throws Throwable {
        Node node0 = Node.newString("o/RYYa}^W\"T;iVBo");
        node0.setType(27);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test445479() throws Throwable {
        Node node0 = Node.newString("");
        node0.setType(28);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test446480() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test447481() throws Throwable {
        Node node0 = new Node(31);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test448482() throws Throwable {
        Node node0 = Node.newString(32, "`(kWsmx.ih>");
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test449483() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.CombinedCompilerPass", (-2739), 3283);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test449484() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.CombinedCompilerPass", (-2739), 3283);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test449485() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.CombinedCompilerPass", (-2739), 3283);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test450486() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test451487() throws Throwable {
        Node node0 = new Node(35);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test452488() throws Throwable {
        Node node0 = Node.newString("MQj1T|O4U${BD");
        node0.setType(36);
        boolean boolean0 = NodeUtil.mayBeString(node0, true);
    }

    @Test(timeout = 4000)
    public void test453489() throws Throwable {
        Node node0 = Node.newString(37, "={9P>", 2752, 37);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test454490() throws Throwable {
        Node node0 = Node.newNumber((double) 3);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test455491() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test456492() throws Throwable {
        Node node0 = Node.newString(124, "SETNAME", 124, 124);
        node0.setType(42);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test457493() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test458494() throws Throwable {
        Node node0 = Node.newString(44, "n");
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test459495() throws Throwable {
        Node node0 = Node.newString(45, "||");
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test460496() throws Throwable {
        Node node0 = Node.newString((-5), "`(kWsmx.ih>", (-5), (-5));
        node0.setType(46);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 1, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test461497() throws Throwable {
        Node node0 = new Node(47, (-4203), 122);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test462498() throws Throwable {
        Node node0 = new Node(48);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test463499() throws Throwable {
        Node node0 = Node.newString("arg:ments");
        Node node1 = new Node(49, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test464500() throws Throwable {
        Node node0 = Node.newString(50, ".prhototype", 50, (-1));
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test465501() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test466502() throws Throwable {
        Node node0 = Node.newString(116, ".protoype", 116, 116);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
    }

    @Test(timeout = 4000)
    public void test467503() throws Throwable {
        Node node0 = new Node(4117);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test468504() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
    }

    @Test(timeout = 4000)
    public void test469505() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(0);
    }

    @Test(timeout = 4000)
    public void test470506() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(10);
    }

    @Test(timeout = 4000)
    public void test471507() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
    }

    @Test(timeout = 4000)
    public void test472508() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
    }

    @Test(timeout = 4000)
    public void test473509() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
    }

    @Test(timeout = 4000)
    public void test474510() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
    }

    @Test(timeout = 4000)
    public void test475511() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(9);
    }

    @Test(timeout = 4000)
    public void test476512() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(99);
    }

    @Test(timeout = 4000)
    public void test477513() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(10);
    }

    @Test(timeout = 4000)
    public void test478514() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(11);
    }

    @Test(timeout = 4000)
    public void test479515() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(23);
    }

    @Test(timeout = 4000)
    public void test480516() throws Throwable {
        Node node0 = Node.newString(87, "*BXZ$_P~B", 87, 103);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test481517() throws Throwable {
        Node node0 = Node.newString(92, "r", 129, (-1768));
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test482518() throws Throwable {
        Node node0 = new Node(88);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test483519() throws Throwable {
        Node node0 = Node.newString(91, ">>=", 91, 91);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test484520() throws Throwable {
        Node node0 = Node.newString(95, "ZE1($cb", 95, 95);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test485521() throws Throwable {
        Node node0 = new Node(96);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test486522() throws Throwable {
        Node node0 = Node.newString(97, "tr m uX)a", 81, 81);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test487523() throws Throwable {
        Node node0 = new Node(33, 114, 114);
        NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test488524() throws Throwable {
        Node node0 = new Node(96);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
    }

    @Test(timeout = 4000)
    public void test489525() throws Throwable {
        Node node0 = Node.newNumber(3325.28302, 79, 79);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
    }

    @Test(timeout = 4000)
    public void test490526() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.protobuf.DescriptorProtos$EnumOptions$Builder", (-798), (-798));
        boolean boolean0 = NodeUtil.isGet(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test490527() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.protobuf.DescriptorProtos$EnumOptions$Builder", (-798), (-798));
        boolean boolean0 = NodeUtil.isGet(node0);
    }

    @Test(timeout = 4000)
    public void test491528() throws Throwable {
        Node node0 = Node.newString(35, "`=(kWsmx.ih>", 35, 35);
        boolean boolean0 = NodeUtil.isGet(node0);
    }

    @Test(timeout = 4000)
    public void test492529() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", 49, 49);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test492530() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", 49, 49);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
    }

    @Test(timeout = 4000)
    public void test492531() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", 49, 49);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test492532() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", 49, 49);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test492533() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", 49, 49);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test493534() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "arguments", 126, 126);
        Node node1 = new Node(10, node0, 15, 49);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test493535() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "arguments", 126, 126);
        Node node1 = new Node(10, node0, 15, 49);
        NodeUtil.getAssignedValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test493536() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "arguments", 126, 126);
        Node node1 = new Node(10, node0, 15, 49);
        NodeUtil.getAssignedValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test494537() throws Throwable {
        Node node0 = Node.newString(107, "-infinity");
        Node node1 = NodeUtil.newVarNode("-infinity", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
    }

    @Test(timeout = 4000)
    public void test494538() throws Throwable {
        Node node0 = Node.newString(107, "-infinity");
        Node node1 = NodeUtil.newVarNode("-infinity", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test495539() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.isString(node0);
    }

    @Test(timeout = 4000)
    public void test496540() throws Throwable {
        Node node0 = Node.newString("LuLFEhR6BsM\"?Xp_[", 120, 120);
        boolean boolean0 = NodeUtil.isString(node0);
    }

    @Test(timeout = 4000)
    public void test497541() throws Throwable {
        Node node0 = Node.newString(1861, "printNameReferenceGraph", 3, 1861);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test498542() throws Throwable {
        Node node0 = Node.newString("GbXvf]Ri");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test498543() throws Throwable {
        Node node0 = Node.newString("GbXvf]Ri");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
    }

    @Test(timeout = 4000)
    public void test499544() throws Throwable {
        Node node0 = Node.newNumber(Double.NaN);
        boolean boolean0 = NodeUtil.isExprCall(node0);
    }

    @Test(timeout = 4000)
    public void test500545() throws Throwable {
        Node node0 = new Node(63);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test500546() throws Throwable {
        Node node0 = new Node(63);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
    }

    @Test(timeout = 4000)
    public void test501547() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test502548() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test503549() throws Throwable {
        Node node0 = new Node(116, 116, 116);
        node0.setType(113);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test504550() throws Throwable {
        Node node0 = Node.newString(9, " does not have a condition.", 2421, 2421);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test505551() throws Throwable {
        Node node0 = Node.newString(114, "arguments", 114, 114);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test506552() throws Throwable {
        Node node0 = Node.newString("&");
        Node node1 = new Node(35, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test507553() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test508554() throws Throwable {
        Node node0 = new Node(101);
        NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test509555() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test510556() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test511557() throws Throwable {
        Node node0 = Node.newString("4g8V*pqCRo#lVA2L");
        Node node1 = new Node(112, node0);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
    }

    @Test(timeout = 4000)
    public void test512558() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test513559() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        node0.setType(114);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test514560() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test515561() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test516562() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test517563() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test518564() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test519565() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test520566() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test521567() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test522568() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test523569() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test524570() throws Throwable {
        Node node0 = new Node(119, 1715, 1715);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test525571() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test526572() throws Throwable {
        Node node0 = Node.newString(126, "s->k", 126, 126);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test527573() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test528574() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test529575() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test530576() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test531577() throws Throwable {
        Node node0 = Node.newString(112, "Infinity", 1304, 2638);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test532578() throws Throwable {
        Node node0 = new Node(114);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        peepholeRemoveDeadCode0.tryFoldDo(node0);
    }

    @Test(timeout = 4000)
    public void test533579() throws Throwable {
        Node node0 = new Node(92);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test534580() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "SrRQ#WK,l", "SrRQ#WK,l");
        boolean boolean0 = NodeUtil.isStatementParent(node0);
    }

    @Test(timeout = 4000)
    public void test535581() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("AoY6}G/.6agZAuepOd");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        SyntheticAst syntheticAst0 = new SyntheticAst("AoY6}G/.6agZAuepOd");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = new Node(126, node0, node0, node0, node0, 676, 9);
        boolean boolean0 = NodeUtil.isStatementParent(node1);
    }

    @Test(timeout = 4000)
    public void test536582() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("|");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        boolean boolean0 = NodeUtil.isStatementParent(node0);
    }

    @Test(timeout = 4000)
    public void test537583() throws Throwable {
        Node node0 = new Node(111);
        NodeUtil.newVarNode("E fy|<WA", node0);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test538584() throws Throwable {
        Node node0 = Node.newString("4g8V*pqCRo#lVA2L");
        Node node1 = new Node(112, node0);
        boolean boolean0 = NodeUtil.isSwitchCase(node1);
    }

    @Test(timeout = 4000)
    public void test539585() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(41, nodeArray0);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test540586() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_f73jDb2~s", 37, 37);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test540587() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_f73jDb2~s", 37, 37);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test540588() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_f73jDb2~s", 37, 37);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test541589() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
    }

    @Test(timeout = 4000)
    public void test542590() throws Throwable {
        Node node0 = Node.newString(61, "typeof", 61, 61);
        boolean boolean0 = NodeUtil.isLabelName(node0);
    }

    @Test(timeout = 4000)
    public void test543591() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test544592() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("(au");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ">]Nb", "JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER TYPE");
        Node node1 = new Node(37, node0, 19, 2);
        NodeUtil.removeChild(node1, node0);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test544593() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("(au");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ">]Nb", "JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER TYPE");
        Node node1 = new Node(37, node0, 19, 2);
        NodeUtil.removeChild(node1, node0);
        node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test545594() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "cW$", "cW$");
        NodeUtil.newVarNode("Cq!(l$VY\u0001{", node0);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test546595() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        Node node1 = NodeUtil.newVarNode("com.google.javascript.jscomp.AmbiguateProperties$ProcessProperties", node0);
        NodeUtil.removeChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test547596() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        Node node1 = new Node(37, node0, node0, 5, 34);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test548597() throws Throwable {
        Node node0 = new Node(126);
        NodeUtil.newVarNode(", totalGets=", node0);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test549598() throws Throwable {
        Node node0 = Node.newString("~");
        NodeUtil.maybeAddFinally(node0);
    }

    @Test(timeout = 4000)
    public void test550599() throws Throwable {
        Node node0 = new Node(116, 116, 116);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test551600() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("$F/)3x.Q&HRB.Pj\"");
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test552601() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
    }

    @Test(timeout = 4000)
    public void test553602() throws Throwable {
        Node node0 = Node.newString(30, ".prototype", 30, (-22));
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
    }

    @Test(timeout = 4000)
    public void test554603() throws Throwable {
        Node node0 = Node.newString(1861, "printNameReferenceGraph", 3, 1861);
        node0.setType(105);
        NodeUtil.redeclareVarsInsideBranch(node0);
    }

    @Test(timeout = 4000)
    public void test555604() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.isThis(node0);
    }

    @Test(timeout = 4000)
    public void test556605() throws Throwable {
        Node node0 = Node.newString(".prototype");
        boolean boolean0 = NodeUtil.isArrayLiteral(node0);
    }

    @Test(timeout = 4000)
    public void test557606() throws Throwable {
        Node node0 = Node.newString(63, "-Sh");
        boolean boolean0 = NodeUtil.isArrayLiteral(node0);
    }

    @Test(timeout = 4000)
    public void test558607() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(41, nodeArray0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test559608() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test560609() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("(au");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ">]Nb", ">]Nb");
        Node node1 = new Node(37, node0, 19, 2);
        boolean boolean0 = NodeUtil.isObjectCallMethod(node1, ">]Nb");
    }

    @Test(timeout = 4000)
    public void test561610() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Undefined", (-570), (-570));
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
    }

    @Test(timeout = 4000)
    public void test562611() throws Throwable {
        Node node0 = Node.newString(86, "Expected NEW node, got ", 86, 86);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test563612() throws Throwable {
        Node node0 = Node.newString(110, "-infinity");
        Node node1 = NodeUtil.newVarNode("-infinity", node0);
        boolean boolean0 = NodeUtil.isLhs(node1, node1);
    }

    @Test(timeout = 4000)
    public void test563613() throws Throwable {
        Node node0 = Node.newString(110, "-infinity");
        Node node1 = NodeUtil.newVarNode("-infinity", node0);
        boolean boolean0 = NodeUtil.isLhs(node1, node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test564614() throws Throwable {
        Node node0 = Node.newNumber(Double.NaN);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    }

    @Test(timeout = 4000)
    public void test565615() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "cW.$", "cW.$");
    }

    @Test(timeout = 4000)
    public void test566616() throws Throwable {
        Node node0 = Node.newString(147, ".prototype");
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        boolean boolean0 = NodeUtil.isConstantByConvention(closureCodingConvention0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test567617() throws Throwable {
        Node node0 = Node.newString(148, "vL.rxg5N");
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test568618() throws Throwable {
        Node node0 = Node.newString("yIqGgn+u-yP{)=6vt(:");
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test569619() throws Throwable {
        Node node0 = Node.newString(147, "vL.rxg5N");
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test570620() throws Throwable {
        Node node0 = new Node((-3931), (-3931), (-3931));
        NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test571621() throws Throwable {
        Node node0 = Node.newString("aJZF8Enuf");
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test572622() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_PROTOTYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
        JSType jSType2 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType1);
        jSType2.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test573623() throws Throwable {
        Node node0 = Node.newString(147, "vL.rxg5N");
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test574624() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test575625() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(9);
    }

    @Test(timeout = 4000)
    public void test576626() throws Throwable {
        String string0 = NodeUtil.opToStr(33);
    }

    @Test(timeout = 4000)
    public void test577627() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
    }

    @Test(timeout = 4000)
    public void test578628() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(11);
    }

    @Test(timeout = 4000)
    public void test579629() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
    }

    @Test(timeout = 4000)
    public void test580630() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(13);
    }

    @Test(timeout = 4000)
    public void test581631() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(14);
    }

    @Test(timeout = 4000)
    public void test582632() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
    }

    @Test(timeout = 4000)
    public void test583633() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(16);
    }

    @Test(timeout = 4000)
    public void test584634() throws Throwable {
        String string0 = NodeUtil.opToStr(17);
    }

    @Test(timeout = 4000)
    public void test585635() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(18);
    }

    @Test(timeout = 4000)
    public void test586636() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(19);
    }

    @Test(timeout = 4000)
    public void test587637() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
    }

    @Test(timeout = 4000)
    public void test588638() throws Throwable {
        String string0 = NodeUtil.opToStr(21);
    }

    @Test(timeout = 4000)
    public void test589639() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
    }

    @Test(timeout = 4000)
    public void test590640() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(23);
    }

    @Test(timeout = 4000)
    public void test591641() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(24);
    }

    @Test(timeout = 4000)
    public void test592642() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(25);
    }

    @Test(timeout = 4000)
    public void test593643() throws Throwable {
        String string0 = NodeUtil.opToStr(26);
    }

    @Test(timeout = 4000)
    public void test594644() throws Throwable {
        String string0 = NodeUtil.opToStr(27);
    }

    @Test(timeout = 4000)
    public void test595645() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
    }

    @Test(timeout = 4000)
    public void test596646() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(29);
    }

    @Test(timeout = 4000)
    public void test597647() throws Throwable {
        String string0 = NodeUtil.opToStr(30);
    }

    @Test(timeout = 4000)
    public void test598648() throws Throwable {
        NodeUtil.opToStrNoFail(31);
    }

    @Test(timeout = 4000)
    public void test599649() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(32);
    }

    @Test(timeout = 4000)
    public void test600650() throws Throwable {
        String string0 = NodeUtil.opToStr(34);
    }

    @Test(timeout = 4000)
    public void test601651() throws Throwable {
        NodeUtil.opToStrNoFail(35);
    }

    @Test(timeout = 4000)
    public void test602652() throws Throwable {
        String string0 = NodeUtil.opToStr(36);
    }

    @Test(timeout = 4000)
    public void test603653() throws Throwable {
        NodeUtil.opToStrNoFail(37);
    }

    @Test(timeout = 4000)
    public void test604654() throws Throwable {
        String string0 = NodeUtil.opToStr(38);
    }

    @Test(timeout = 4000)
    public void test605655() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
    }

    @Test(timeout = 4000)
    public void test606656() throws Throwable {
        NodeUtil.opToStrNoFail(40);
    }

    @Test(timeout = 4000)
    public void test607657() throws Throwable {
        NodeUtil.opToStrNoFail(41);
    }

    @Test(timeout = 4000)
    public void test608658() throws Throwable {
        NodeUtil.opToStrNoFail(42);
    }

    @Test(timeout = 4000)
    public void test609659() throws Throwable {
        NodeUtil.opToStrNoFail(43);
    }

    @Test(timeout = 4000)
    public void test610660() throws Throwable {
        String string0 = NodeUtil.opToStr(44);
    }

    @Test(timeout = 4000)
    public void test611661() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(45);
    }

    @Test(timeout = 4000)
    public void test612662() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(46);
    }

    @Test(timeout = 4000)
    public void test613663() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
    }

    @Test(timeout = 4000)
    public void test614664() throws Throwable {
        NodeUtil.opToStrNoFail(48);
    }

    @Test(timeout = 4000)
    public void test615665() throws Throwable {
        String string0 = NodeUtil.opToStr(49);
    }

    @Test(timeout = 4000)
    public void test616666() throws Throwable {
        String string0 = NodeUtil.opToStr(50);
    }

    @Test(timeout = 4000)
    public void test617667() throws Throwable {
        String string0 = NodeUtil.opToStr(51);
    }

    @Test(timeout = 4000)
    public void test618668() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
    }

    @Test(timeout = 4000)
    public void test619669() throws Throwable {
        NodeUtil.opToStrNoFail(53);
    }

    @Test(timeout = 4000)
    public void test620670() throws Throwable {
        NodeUtil.opToStrNoFail(55);
    }

    @Test(timeout = 4000)
    public void test621671() throws Throwable {
        NodeUtil.opToStrNoFail(56);
    }

    @Test(timeout = 4000)
    public void test622672() throws Throwable {
        String string0 = NodeUtil.opToStr(58);
    }

    @Test(timeout = 4000)
    public void test623673() throws Throwable {
        String string0 = NodeUtil.opToStr(59);
    }

    @Test(timeout = 4000)
    public void test624674() throws Throwable {
        String string0 = NodeUtil.opToStr(60);
    }

    @Test(timeout = 4000)
    public void test625675() throws Throwable {
        String string0 = NodeUtil.opToStr(61);
    }

    @Test(timeout = 4000)
    public void test626676() throws Throwable {
        String string0 = NodeUtil.opToStr(62);
    }

    @Test(timeout = 4000)
    public void test627677() throws Throwable {
        NodeUtil.opToStrNoFail(63);
    }

    @Test(timeout = 4000)
    public void test628678() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
    }

    @Test(timeout = 4000)
    public void test629679() throws Throwable {
        NodeUtil.opToStrNoFail(65);
    }

    @Test(timeout = 4000)
    public void test630680() throws Throwable {
        String string0 = NodeUtil.opToStr(66);
    }

    @Test(timeout = 4000)
    public void test631681() throws Throwable {
        String string0 = NodeUtil.opToStr(67);
    }

    @Test(timeout = 4000)
    public void test632682() throws Throwable {
        String string0 = NodeUtil.opToStr(68);
    }

    @Test(timeout = 4000)
    public void test633683() throws Throwable {
        String string0 = NodeUtil.opToStr(69);
    }

    @Test(timeout = 4000)
    public void test634684() throws Throwable {
        String string0 = NodeUtil.opToStr(70);
    }

    @Test(timeout = 4000)
    public void test635685() throws Throwable {
        NodeUtil.opToStrNoFail(71);
    }

    @Test(timeout = 4000)
    public void test636686() throws Throwable {
        String string0 = NodeUtil.opToStr(72);
    }

    @Test(timeout = 4000)
    public void test637687() throws Throwable {
        NodeUtil.opToStrNoFail(73);
    }

    @Test(timeout = 4000)
    public void test638688() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
    }

    @Test(timeout = 4000)
    public void test639689() throws Throwable {
        String string0 = NodeUtil.opToStr(75);
    }

    @Test(timeout = 4000)
    public void test640690() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
    }

    @Test(timeout = 4000)
    public void test641691() throws Throwable {
        NodeUtil.opToStrNoFail(77);
    }

    @Test(timeout = 4000)
    public void test642692() throws Throwable {
        NodeUtil.opToStrNoFail(78);
    }

    @Test(timeout = 4000)
    public void test643693() throws Throwable {
        NodeUtil.opToStrNoFail(79);
    }

    @Test(timeout = 4000)
    public void test644694() throws Throwable {
        NodeUtil.opToStrNoFail(80);
    }

    @Test(timeout = 4000)
    public void test645695() throws Throwable {
        NodeUtil.opToStrNoFail(81);
    }

    @Test(timeout = 4000)
    public void test646696() throws Throwable {
        NodeUtil.opToStrNoFail(82);
    }

    @Test(timeout = 4000)
    public void test647697() throws Throwable {
        NodeUtil.opToStrNoFail(83);
    }

    @Test(timeout = 4000)
    public void test648698() throws Throwable {
        String string0 = NodeUtil.opToStr(84);
    }

    @Test(timeout = 4000)
    public void test649699() throws Throwable {
        NodeUtil.opToStrNoFail(85);
    }

    @Test(timeout = 4000)
    public void test650700() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(86);
    }

    @Test(timeout = 4000)
    public void test651701() throws Throwable {
        String string0 = NodeUtil.opToStr(87);
    }

    @Test(timeout = 4000)
    public void test652702() throws Throwable {
        String string0 = NodeUtil.opToStr(88);
    }

    @Test(timeout = 4000)
    public void test653703() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
    }

    @Test(timeout = 4000)
    public void test654704() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(90);
    }

    @Test(timeout = 4000)
    public void test655705() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
    }

    @Test(timeout = 4000)
    public void test656706() throws Throwable {
        String string0 = NodeUtil.opToStr(92);
    }

    @Test(timeout = 4000)
    public void test657707() throws Throwable {
        String string0 = NodeUtil.opToStr(93);
    }

    @Test(timeout = 4000)
    public void test658708() throws Throwable {
        String string0 = NodeUtil.opToStr(94);
    }

    @Test(timeout = 4000)
    public void test659709() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(95);
    }

    @Test(timeout = 4000)
    public void test660710() throws Throwable {
        String string0 = NodeUtil.opToStr(96);
    }

    @Test(timeout = 4000)
    public void test661711() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(97);
    }

    @Test(timeout = 4000)
    public void test662712() throws Throwable {
        String string0 = NodeUtil.opToStr(98);
    }

    @Test(timeout = 4000)
    public void test663713() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
    }

    @Test(timeout = 4000)
    public void test664714() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
    }

    @Test(timeout = 4000)
    public void test665715() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(101);
    }

    @Test(timeout = 4000)
    public void test666716() throws Throwable {
        String string0 = NodeUtil.opToStr(102);
    }

    @Test(timeout = 4000)
    public void test667717() throws Throwable {
        NodeUtil.opToStrNoFail(103);
    }

    @Test(timeout = 4000)
    public void test668718() throws Throwable {
        String string0 = NodeUtil.opToStr(104);
    }

    @Test(timeout = 4000)
    public void test669719() throws Throwable {
        NodeUtil.opToStrNoFail(105);
    }

    @Test(timeout = 4000)
    public void test670720() throws Throwable {
        String string0 = NodeUtil.opToStr(106);
    }

    @Test(timeout = 4000)
    public void test671721() throws Throwable {
        String string0 = NodeUtil.opToStr(107);
    }

    @Test(timeout = 4000)
    public void test672722() throws Throwable {
        NodeUtil.opToStrNoFail(108);
    }

    @Test(timeout = 4000)
    public void test673723() throws Throwable {
        NodeUtil.opToStrNoFail(109);
    }

    @Test(timeout = 4000)
    public void test674724() throws Throwable {
        NodeUtil.opToStrNoFail(110);
    }

    @Test(timeout = 4000)
    public void test675725() throws Throwable {
        String string0 = NodeUtil.opToStr(111);
    }

    @Test(timeout = 4000)
    public void test676726() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
    }

    @Test(timeout = 4000)
    public void test677727() throws Throwable {
        NodeUtil.opToStrNoFail(113);
    }

    @Test(timeout = 4000)
    public void test678728() throws Throwable {
        NodeUtil.opToStrNoFail(114);
    }

    @Test(timeout = 4000)
    public void test679729() throws Throwable {
        NodeUtil.opToStrNoFail(115);
    }

    @Test(timeout = 4000)
    public void test680730() throws Throwable {
        NodeUtil.opToStrNoFail(116);
    }

    @Test(timeout = 4000)
    public void test681731() throws Throwable {
        NodeUtil.opToStrNoFail(117);
    }

    @Test(timeout = 4000)
    public void test682732() throws Throwable {
        NodeUtil.opToStrNoFail(118);
    }

    @Test(timeout = 4000)
    public void test683733() throws Throwable {
        NodeUtil.opToStrNoFail(119);
    }

    @Test(timeout = 4000)
    public void test684734() throws Throwable {
        NodeUtil.opToStrNoFail(120);
    }

    @Test(timeout = 4000)
    public void test685735() throws Throwable {
        NodeUtil.opToStrNoFail(121);
    }

    @Test(timeout = 4000)
    public void test686736() throws Throwable {
        String string0 = NodeUtil.opToStr(122);
    }

    @Test(timeout = 4000)
    public void test687737() throws Throwable {
        String string0 = NodeUtil.opToStr(186);
    }

    @Test(timeout = 4000)
    public void test688738() throws Throwable {
        Node node0 = new Node(50);
        Node node1 = NodeUtil.newVarNode("9", node0);
        NodeUtil.redeclareVarsInsideBranch(node1);
    }

    @Test(timeout = 4000)
    public void test689739() throws Throwable {
        Node node0 = Node.newString("mtFtx8\"S1!s2]cJ,ME");
        NodeUtil.copyNameAnnotations(node0, node0);
    }

    @Test(timeout = 4000)
    public void test690740() throws Throwable {
        Node node0 = Node.newString(123, "cL]", 1837, 1837);
        node0.putIntProp(42, 116);
        NodeUtil.copyNameAnnotations(node0, node0);
        node0.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test691741() throws Throwable {
        Node node0 = Node.newString(117, "-");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("LZg&dA'e J_@J", linkedList0, node0, 0, 47);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test691742() throws Throwable {
        Node node0 = Node.newString(117, "-");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("LZg&dA'e J_@J", linkedList0, node0, 0, 47);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test691743() throws Throwable {
        Node node0 = Node.newString(117, "-");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("LZg&dA'e J_@J", linkedList0, node0, 0, 47);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test691744() throws Throwable {
        Node node0 = Node.newString(117, "-");
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node1 = NodeUtil.newFunctionNode("LZg&dA'e J_@J", linkedList0, node0, 0, 47);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test692745() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("arguments");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        linkedList0.add((Node) null);
        Node node0 = compiler0.parseTestCode("arguments");
        NodeUtil.newFunctionNode("iwnfinity", linkedList0, node0, 48, 15);
    }

    @Test(timeout = 4000)
    public void test693746() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "$F/)3x.Q&HRB.Pj\"", 113, 113);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test693747() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "$F/)3x.Q&HRB.Pj\"", 113, 113);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test693748() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "$F/)3x.Q&HRB.Pj\"", 113, 113);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test693749() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "$F/)3x.Q&HRB.Pj\"", 113, 113);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test694750() throws Throwable {
        Node node0 = Node.newString("4g8V*pqCRo#lVA2L");
        NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test695751() throws Throwable {
        Node node0 = Node.newString("4g8V*pqCRo#lVA2L");
        node0.setType(42);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test696752() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.ScriptableObject$Slot", (-1300), (-1300));
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test696753() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.ScriptableObject$Slot", (-1300), (-1300));
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test697754() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "RANGE_ERROR_FUNCTION_TYPE", node0);
        node1.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test697755() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "RANGE_ERROR_FUNCTION_TYPE", node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test698756() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("`=(kWsmx.ih>");
    }

    @Test(timeout = 4000)
    public void test699757() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("search");
    }

    @Test(timeout = 4000)
    public void test700758() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("false");
    }

    @Test(timeout = 4000)
    public void test701759() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test701760() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test701761() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test702762() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_f73jDb2~s", 37, 37);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test702763() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_f73jDb2~s", 37, 37);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test702764() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "_f73jDb2~s", 37, 37);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test703765() throws Throwable {
        Node node0 = Node.newString(95, "Kz+$", 136, 136);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test704766() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$52", 119, 21);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
    }

    @Test(timeout = 4000)
    public void test704767() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$52", 119, 21);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test704768() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$52", 119, 21);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test704769() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$52", 119, 21);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test704770() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$52", 119, 21);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test705771() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test705772() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test706773() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Undefined", (-570), (-570));
        boolean boolean0 = NodeUtil.isNameReferenced(node0, ": ");
    }

    @Test(timeout = 4000)
    public void test707774() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = NodeUtil.newVarNode("", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "");
    }

    @Test(timeout = 4000)
    public void test707775() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = NodeUtil.newVarNode("", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "");
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test707776() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = NodeUtil.newVarNode("", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "");
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test708777() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("q");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ">]Nb", ">]Nb");
        Node node1 = new Node(37, node0, 19, 2);
        boolean boolean0 = NodeUtil.containsCall(node1);
    }

    @Test(timeout = 4000)
    public void test709778() throws Throwable {
        Node node0 = new Node(2375);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test710779() throws Throwable {
        Node node0 = new Node(2375);
        Node node1 = NodeUtil.newVarNode("[object Object]", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
    }

    @Test(timeout = 4000)
    public void test710780() throws Throwable {
        Node node0 = new Node(2375);
        Node node1 = NodeUtil.newVarNode("[object Object]", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test711781() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(41, nodeArray0);
        node0.addChildAfter(node0, node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test712782() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$F/)3x.Q&HRB.Pj\"", 21, 21);
        boolean boolean0 = NodeUtil.referencesThis(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test712783() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$F/)3x.Q&HRB.Pj\"", 21, 21);
        boolean boolean0 = NodeUtil.referencesThis(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test712784() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$F/)3x.Q&HRB.Pj\"", 21, 21);
        boolean boolean0 = NodeUtil.referencesThis(node0);
    }

    @Test(timeout = 4000)
    public void test712785() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "$F/)3x.Q&HRB.Pj\"", 21, 21);
        boolean boolean0 = NodeUtil.referencesThis(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test713786() throws Throwable {
        Node node0 = new Node(63);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        Node node1 = new Node(1, node0, node0, node0, node0);
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 99, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test714787() throws Throwable {
        Node node0 = Node.newString(19, "=-FOs3%y");
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test715788() throws Throwable {
        Node node0 = Node.newString(110, "\"WY4)j5430RgaVE");
        Node node1 = new Node(35, node0, 38, 40);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, predicate0);
    }

    @Test(timeout = 4000)
    public void test716789() throws Throwable {
        Node node0 = Node.newString(124, "+infinity", 255, 46);
        NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test717790() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test718791() throws Throwable {
        Node node0 = new Node(19);
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test719792() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test720793() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test721794() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("o/RYYv}^W\"T;iVBo");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test722795() throws Throwable {
        Node node0 = Node.newString(9, "7lsI-p5P");
        NodeUtil.getFnParameters(node0);
    }

    @Test(timeout = 4000)
    public void test723796() throws Throwable {
        Node node0 = Node.newString(0, ".prototype", 0, 1858);
        node0.setType(105);
        NodeUtil.getFnParameters(node0);
    }

    @Test(timeout = 4000)
    public void test724797() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test725798() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.setJSDocInfo(jSDocInfo0);
        JSDocInfo jSDocInfo1 = NodeUtil.getInfoForNameNode(node0);
        jSDocInfo1.isHidden();
    }

    @Test(timeout = 4000)
    public void test726799() throws Throwable {
        Node node0 = Node.newString(100, "-");
        Node node1 = new Node(103, node0, 7, 42);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test727800() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test728801() throws Throwable {
        Node node0 = new Node(43);
        NodeUtil.getFunctionInfo(node0);
    }

    @Test(timeout = 4000)
    public void test729802() throws Throwable {
        Node node0 = Node.newString(1861, "printNameReferenceGraph", 3, 1861);
        node0.setType(105);
        NodeUtil.getFunctionInfo(node0);
    }

    @Test(timeout = 4000)
    public void test730803() throws Throwable {
        Node node0 = new Node(116);
        node0.setType(105);
        node0.addSuppression("v<f6X59E");
        JSDocInfo jSDocInfo0 = NodeUtil.getFunctionInfo(node0);
        jSDocInfo0.isNoCompile();
    }

    @Test(timeout = 4000)
    public void test731804() throws Throwable {
        Node node0 = Node.newString(1861, "printNameReferenceGraph", 3, 1861);
        node0.setType(105);
        Node node1 = new Node(2, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getFunctionInfo(node0);
    }

    @Test(timeout = 4000)
    public void test732805() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.common.collect.Collections2", "arguments");
        Node node0 = compiler0.parse(jSSourceFile0);
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test732806() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.common.collect.Collections2", "arguments");
        Node node0 = compiler0.parse(jSSourceFile0);
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test733807() throws Throwable {
        Node node0 = new Node(74);
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test734808() throws Throwable {
        Node node0 = new Node(56, (-1655), (-1655));
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test735809() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        Logger logger0 = Logger.getLogger("undefined");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "undefined", 8233, 8233);
        Node[] nodeArray0 = new Node[2];
        NodeUtil.newCallNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test736810() throws Throwable {
        Node node0 = new Node(31, 15, 38);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test737811() throws Throwable {
        Node node0 = Node.newString(32, "E fy|<WA", 26, 4);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test738812() throws Throwable {
        Node node0 = new Node(33, 114, 114);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test739813() throws Throwable {
        Node node0 = Node.newString(34, ".prototype");
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test740814() throws Throwable {
        Node node0 = Node.newString("&");
        Node node1 = new Node(35, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test741815() throws Throwable {
        Node node0 = Node.newString(124, "SETNAME", 124, 124);
        node0.setType(42);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test742816() throws Throwable {
        Node node0 = Node.newString(45, "0tIM\"-?Cg4", 3, 24);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test743817() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test744818() throws Throwable {
        Node node0 = Node.newString(48, "valueOf");
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test745819() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test746820() throws Throwable {
        Node node0 = Node.newString(61, " d\"f`}jTA4", 61, 10);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test747821() throws Throwable {
        Node node0 = Node.newString(63, "NJwr,kkMNH':e");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test748822() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test749823() throws Throwable {
        Node node0 = new Node(74, 135, (-2699));
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test750824() throws Throwable {
        Node node0 = new Node(75, 75, 75);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test751825() throws Throwable {
        Node node0 = new Node(76);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test752826() throws Throwable {
        Node node0 = new Node(79, 100, 79);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test753827() throws Throwable {
        Node node0 = new Node(80);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test754828() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test754829() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test754830() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test754831() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "@}J<Mo$O/4}_", 1905, 82);
        Node node1 = new Node(85, node0, 9, 712);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test755832() throws Throwable {
        Node node0 = Node.newString(86, "// In7ut %num%", 86, 86);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test756833() throws Throwable {
        Node node0 = new Node(88);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test757834() throws Throwable {
        Node node0 = Node.newString(89, " of ");
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test758835() throws Throwable {
        Node node0 = new Node(90, 121, 107);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test759836() throws Throwable {
        Node node0 = Node.newString(91, ">>=", 91, 91);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test760837() throws Throwable {
        Node node0 = new Node(92);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test761838() throws Throwable {
        Node node0 = new Node(93);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test762839() throws Throwable {
        Node node0 = new Node(94, 114, (-1655));
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test763840() throws Throwable {
        Node node0 = Node.newString(95, "Kz+$", 136, 136);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test764841() throws Throwable {
        Node node0 = new Node(96, 96, 96);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test765842() throws Throwable {
        Node node0 = Node.newString(97, "tr m uX)a", 81, 81);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test766843() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test767844() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test768845() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test769846() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d_z#t:)(", 126, 119);
        Node node1 = new Node(101, node0, 16, 29);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test769847() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d_z#t:)(", 126, 119);
        Node node1 = new Node(101, node0, 16, 29);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test769848() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d_z#t:)(", 126, 119);
        Node node1 = new Node(101, node0, 16, 29);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test770849() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test771850() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test772851() throws Throwable {
        Node node0 = Node.newString(1861, "printNameReferenceGraph", 1861, 1861);
        node0.setType(105);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test773852() throws Throwable {
        Node node0 = Node.newString(147, "vL.rxg5N");
        Node node1 = new Node(37, node0, node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test774853() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }
}
