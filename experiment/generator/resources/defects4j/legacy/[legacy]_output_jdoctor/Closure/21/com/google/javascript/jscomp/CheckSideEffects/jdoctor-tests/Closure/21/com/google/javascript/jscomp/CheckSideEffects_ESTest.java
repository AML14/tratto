/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 03 22:50:28 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CheckSideEffects_ESTest extends CheckSideEffects_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        Node node0 = compiler0.parseTestCode("pfiltO");
        Node node1 = new Node(85, node0);
        Node node2 = new Node(85, node1);
        checkSideEffects0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects((AbstractCompiler) null, checkLevel0, true);
        checkSideEffects0.hotSwapScript((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        Node node0 = compiler0.parseTestCode(";oHN");
        checkSideEffects0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(2918, 2918, 2918);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        Node node1 = new Node(42, node0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0, syntacticScopeCreator0);
        Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
        node2.addSuppression("D*~Xd80Ivxq2zL`G");
        checkSideEffects0.visit(nodeTraversal0, node2, node1);
        node1.isHook();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(2918, 2918, 2918);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        Node node1 = new Node(37, node0, node0, node0, node0, 85, 49);
        Node node2 = new Node(85, node1);
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
        checkSideEffects0.visit(nodeTraversal0, node0, node2);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "tVl=OSGtw,MX", "com.google.javascrip.jsomp.SourceKle");
        checkSideEffects0.process(node0, node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        Node node0 = Node.newString("b\"K:FjrPe>~m}Ffe]K2", 85, 85);
        Node node1 = new Node(85, node0);
        Node node2 = new Node(125, node1);
        checkSideEffects0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node((-3043));
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        Node node1 = new Node(85, node0);
        Node node2 = new Node(54, node1);
        checkSideEffects0.process(node2, node1);
        node1.isIn();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, false);
        Node node0 = compiler0.parseInputs();
        checkSideEffects0.process(node0, node0);
        node0.isIn();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
        Node node0 = Node.newNumber((double) 115);
        Node node1 = new Node(115, node0);
        checkSideEffects0.process(node0, node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "v83UJNj&CNdS", "v83UJNj&CNdS");
        checkSideEffects0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(2918, 2918, 2918);
        Node node1 = new Node(37, node0, node0, node0, node0, 1, 49);
        CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
        checkSideEffects_StripProtection0.process(node1, node1);
        node1.isOr();
    }
}
