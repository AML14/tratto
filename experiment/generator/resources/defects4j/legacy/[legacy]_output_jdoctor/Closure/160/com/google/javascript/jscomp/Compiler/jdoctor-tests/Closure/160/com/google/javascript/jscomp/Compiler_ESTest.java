/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 07:43:19 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AstValidator;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.io.CharArrayReader;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        File file0 = MockFile.createTempFile(" in ", (String) null);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);
        JSModule[] jSModuleArray0 = new JSModule[1];
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("9_<");
        compiler0.toSource(jSModule0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.disableThreads();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        String string0 = compiler0.toSource();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.disableThreads();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        String string0 = compiler0.toSource();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.disableThreads();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        String string0 = compiler0.toSource();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule((String) null);
        compiler0.toSourceArray(jSModule0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        ConsoleHandler consoleHandler0 = new ConsoleHandler();
        Level level0 = consoleHandler0.getLevel();
        Compiler.setLoggingLevel(level0);
        level0.getName();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        MockFile mockFile0 = new MockFile("com.google.javascript.jscomp");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.getCssRenamingMap();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.ControlFlowGraph$Branch");
        compiler0.parse(jSSourceFile0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.ControlFlowGraph$Branch");
        compiler0.parse(jSSourceFile0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((JSSourceFile[]) null, (JSSourceFile[]) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.rebuildInputsFromModules();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.computeCFG();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getPropertyMap();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode((String) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.processDefines();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Callable<AstValidator> callable0 = (Callable<AstValidator>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        AstValidator astValidator0 = Compiler.runCallableWithLargeStack(callable0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.languageMode();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setCssRenamingMap((CssRenamingMap) null);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        Logger logger0 = Logger.getLogger("w");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        int int0 = compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.recordFunctionInformation();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceMap sourceMap0 = compiler0.getSourceMap();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        Compiler compiler0 = new Compiler();
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        File file0 = MockFile.createTempFile(" in ", (String) null);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);
        JSModule[] jSModuleArray0 = new JSModule[1];
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test3433() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getMessages();
    }

    @Test(timeout = 4000)
    public void test3534() throws Throwable {
        Compiler compiler0 = new Compiler();
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
    }

    @Test(timeout = 4000)
    public void test3635() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeTryCatchFinally();
    }

    @Test(timeout = 4000)
    public void test3736() throws Throwable {
        Compiler compiler0 = new Compiler();
        Scope scope0 = compiler0.getTopScope();
    }

    @Test(timeout = 4000)
    public void test3837() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
    }

    @Test(timeout = 4000)
    public void test3938() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
    }

    @Test(timeout = 4000)
    public void test4039() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
    }

    @Test(timeout = 4000)
    public void test4140() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
    }

    @Test(timeout = 4000)
    public void test4241() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test4342() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.javascript.jscomp.Compiler$8", "com.google.javascript.jscomp.Compiler$8");
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parse();
        compiler0.check();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test4443() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ErrorManager errorManager0 = compiler0.getErrorManager();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup("Root module has no inputs", diagnosticGroupArray0);
        DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup("Root module has no inputs", diagnosticGroupArray0);
        DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("~?50iH,fu9(IIR", "~?50iH,fu9(IIR");
        CompilerOptions compilerOptions0 = compiler0.options;
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("~?50iH,fu9(IIR", "~?50iH,fu9(IIR");
        CompilerOptions compilerOptions0 = compiler0.options;
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        compilerOptions0.checkGlobalThisLevel = checkLevel0;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test4749() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compilerOptions0.checkSymbols = true;
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compilerOptions0.checkSymbols = true;
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("j/5Qf`-G%KDV");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSModule[] jSModuleArray0 = new JSModule[2];
        jSModuleArray0[0] = jSModule0;
        jSModuleArray0[1] = jSModule0;
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        compiler0.getNodeForCodeInsertion(jSModule0);
        jSModule0.getDepth();
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("{0} expressions are not callable");
        arrayList0.add(jSSourceFile0);
        arrayList0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("{0} expressions are not callable");
        arrayList0.add(jSSourceFile0);
        arrayList0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSModule jSModule0 = new JSModule((String) null);
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        vector0.add(jSModule0);
        compiler0.compileModules(stack0, vector0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test5156() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSModule jSModule0 = new JSModule((String) null);
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        vector0.add(jSModule0);
        compiler0.compileModules(stack0, vector0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test5257() throws Throwable {
        Callable<NameAnalyzer> callable0 = (Callable<NameAnalyzer>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        NameAnalyzer nameAnalyzer0 = Compiler.runCallable(callable0, false, true);
    }

    @Test(timeout = 4000)
    public void test5358() throws Throwable {
        Compiler.runCallable((Callable<NameAnalyzer>) null, false, false);
    }

    @Test(timeout = 4000)
    public void test5459() throws Throwable {
        Compiler.runCallable((Callable<NameAnalyzer>) null, false, true);
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
        compiler0.setPassConfig(passConfig_PassConfigDelegate0);
    }

    @Test(timeout = 4000)
    public void test5761() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test5762() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.stripCode(compilerOptions0.stripNameSuffixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNamePrefixes);
    }

    @Test(timeout = 4000)
    public void test5763() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.stripCode(compilerOptions0.stripNameSuffixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNamePrefixes);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test5864() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.endPass();
    }

    @Test(timeout = 4000)
    public void test5965() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.reportCodeChange();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test5966() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.reportCodeChange();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test6067() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test6068() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        Node node0 = compiler0.parseInputs();
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test6069() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        Node node0 = compiler0.parseInputs();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test6170() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.areNodesEqualForInlining((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test6271() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.newExternInput((String) null);
        compiler0.removeInput((String) null);
        compiler0.acceptConstKeyword();
    }

    @Test(timeout = 4000)
    public void test6372() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.removeInput((String) null);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test6373() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.removeInput((String) null);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test6474() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.newExternInput("[[singleton]]");
    }

    @Test(timeout = 4000)
    public void test6575() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        MockFile mockFile0 = new MockFile((File) null, "[[singleton]]");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test6676() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("TYobZX?");
        MockFile mockFile0 = new MockFile("TYobZX?");
        SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test6777() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test6778() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        char[] charArray0 = new char[7];
        CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
        SourceFile sourceFile0 = SourceFile.fromReader("[[singleton]]", charArrayReader0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test6879() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Gqsz@:itDX9]k^Y)AJe");
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.replaceIncrementalSourceAst(jsAst0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test6980() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test6981() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test7082() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        defaultPassConfig0.makeTypeCheck(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test7183() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        Node node0 = compiler0.parseInputs();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test7184() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        Node node0 = compiler0.parseInputs();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test7285() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("xi|%*USa[");
        ArrayList<JSSourceFile> arrayList1 = new ArrayList<JSSourceFile>();
        arrayList1.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList1, compilerOptions0);
        compiler0.parse();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test7286() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("xi|%*USa[");
        ArrayList<JSSourceFile> arrayList1 = new ArrayList<JSSourceFile>();
        arrayList1.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList1, compilerOptions0);
        compiler0.parse();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test7387() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.parseTestCode((String) null);
    }

    @Test(timeout = 4000)
    public void test7488() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.disableThreads();
        compiler0.toSource();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test7589() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("/*\n");
    }

    @Test(timeout = 4000)
    public void test7690() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("maXvo'PF");
    }

    @Test(timeout = 4000)
    public void test7791() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("com.google.javascript.jscomp.Compiler$4");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("&#06+!");
    }

    @Test(timeout = 4000)
    public void test7892() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("L1*3mJ%A}LS>x)nx");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("");
    }

    @Test(timeout = 4000)
    public void test7993() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.javascript.jscomp.Compiler$8", "com.google.javascript.jscomp.Compiler$8");
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parse();
        compiler0.optimize();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test8094() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        boolean boolean0 = compiler0.isInliningForbidden();
    }

    @Test(timeout = 4000)
    public void test8095() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test8196() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        compilerOptions0.setCodingConvention(closureCodingConvention0);
        compiler0.disableThreads();
        Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test8297() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.acceptEcmaScript5();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test8398() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSError jSError0 = JSError.make("com.google.common.collect.Synchronized$SynchronizedSetMultimap", (-984), (-1394), compilerOptions0.checkGlobalNamesLevel, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
        compiler0.report(jSError0);
    }

    @Test(timeout = 4000)
    public void test8499() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.throwInternalError("com.google.javascript.jscomp.Compiler$9", (Exception) null);
    }

    @Test(timeout = 4000)
    public void test85100() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.parseTestCode("/&c@q0zh");
        Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test86101() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(".U<pVfLGD|nroI/", ".U<pVfLGD|nroI/");
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        arrayList0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test86102() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(".U<pVfLGD|nroI/", ".U<pVfLGD|nroI/");
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        arrayList0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test87103() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion((String) null, (-708));
    }

    @Test(timeout = 4000)
    public void test88104() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.getSourceRegion("// Input %num%", 65263);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test89105() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.Compiler$CodeBuilder");
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test90106() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test91107() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test92108() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test93109() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getErrorManager();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test94110() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        Node node0 = compiler0.parseSyntheticCode("// Input %num%");
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test95111() throws Throwable {
        Compiler compiler0 = new Compiler();
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        Node node0 = new Node(2643);
        compiler0.updateGlobalVarReferences(treeMap0, node0);
    }

    @Test(timeout = 4000)
    public void test96112() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        Node node0 = compiler_IntermediateState0.externsRoot;
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test96113() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        Node node0 = compiler_IntermediateState0.externsRoot;
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        node0.getChildCount();
    }
}
