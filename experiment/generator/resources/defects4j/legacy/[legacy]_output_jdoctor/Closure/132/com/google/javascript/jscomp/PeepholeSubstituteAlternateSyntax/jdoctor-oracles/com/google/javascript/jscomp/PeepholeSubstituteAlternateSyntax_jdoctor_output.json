[
  {
    "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(boolean late)",
    "name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
      "name": "PeepholeSubstituteAlternateSyntax",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "late"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "late"
        },
        "comment": "When late is false this mean we are currently running before most of the other optimizations. In this case we would avoid optimizations that would make the code harder to analyze (such as using string splitting merging statements with commas etc). When this is true we would do anything to minimize for size.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "optimizeSubtree(com.google.javascript.rhino.Node node)",
    "name": "optimizeSubtree",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
      "name": "PeepholeSubstituteAlternateSyntax",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isPure(com.google.javascript.rhino.Node n)",
    "name": "isPure",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
      "name": "PeepholeSubstituteAlternateSyntax",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the expression does not produces and can not be affected by side-effects., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "skipFinallyNodes(com.google.javascript.rhino.Node n)",
    "name": "skipFinallyNodes",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
      "name": "PeepholeSubstituteAlternateSyntax",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "n or the node following any following finally nodes.",
      "kind": "RETURN",
      "condition": "true ? methodResultID.equals(args[0])"
    },
    "throwsTags": []
  },
  {
    "signature": "areMatchingExits(com.google.javascript.rhino.Node nodeThis, com.google.javascript.rhino.Node nodeThat)",
    "name": "areMatchingExits",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
      "name": "PeepholeSubstituteAlternateSyntax",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "nodeThis"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "nodeThat"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isExceptionPossible(com.google.javascript.rhino.Node n)",
    "name": "isExceptionPossible",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
      "name": "PeepholeSubstituteAlternateSyntax",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getExceptionHandler(com.google.javascript.rhino.Node n)",
    "name": "getExceptionHandler",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
      "name": "PeepholeSubstituteAlternateSyntax",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "containsUnicodeEscape(java.lang.String s)",
    "name": "containsUnicodeEscape",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
      "name": "PeepholeSubstituteAlternateSyntax",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  }
]