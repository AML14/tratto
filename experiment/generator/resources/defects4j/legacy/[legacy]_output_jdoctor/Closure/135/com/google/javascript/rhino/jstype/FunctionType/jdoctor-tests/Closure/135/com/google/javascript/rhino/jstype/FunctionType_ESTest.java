/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 22:33:50 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("...[", (Node) null);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", functionType0);
        functionType0.getLeastSupertype(enumType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((double) 105);
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ObjectType objectType0 = recordType0.getImplicitPrototype();
        FunctionType functionType0 = null;
        functionType0 = new FunctionType(jSTypeRegistry0, "kh", node0, node0, objectType0, recordType0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        noObjectType0.getGreatestSubtype(functionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        noObjectType0.getGreatestSubtype(functionType0);
        noObjectType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.hasEqualCallType(noType0);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.hasEqualCallType(noType0);
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.hasEqualCallType(noType0);
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.isInstanceType();
        noObjectType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
        boolean boolean0 = indexedType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
        boolean boolean0 = indexedType0.canBeCalled();
        indexedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "kD\"{IAk[z3~.y6V@A");
        Node node0 = errorFunctionType0.getSource();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "kD\"{IAk[z3~.y6V@A");
        Node node0 = errorFunctionType0.getSource();
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "kD\"{IAk[z3~.y6V@A");
        Node node0 = errorFunctionType0.getSource();
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setSource((Node) null);
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.getSubTypes();
        noObjectType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((double) 105);
        Node node1 = new Node(105, node0, node0, node0);
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ObjectType objectType0 = recordType0.getImplicitPrototype();
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "kh", node1, node0, objectType0, recordType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((double) 105);
        Node node1 = new Node(105, node0, node0, node0);
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ObjectType objectType0 = recordType0.getImplicitPrototype();
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "kh", node1, node0, objectType0, recordType0);
        functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Rm(9:|z(q-Kyz1~J", (Node) null);
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "Rm(9:|z(q-Kyz1~J", (Node) null, (Node) null, functionType0, functionType0, "RANGE_ERROR_FUNCTION_TYPE", true, true);
        functionType1.getTemplateTypeName();
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Rm(9:|z(q-Kyz1~J", (Node) null);
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "Rm(9:|z(q-Kyz1~J", (Node) null, (Node) null, functionType0, functionType0, "RANGE_ERROR_FUNCTION_TYPE", true, true);
        functionType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = new Node(105);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "Not declared as a constructor", node0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = new Node(0);
        FunctionType functionType0 = null;
        functionType0 = new FunctionType(jSTypeRegistry0, "Unknown class name", node0);
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Z)=s,\"ts=aRi", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test1423() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Z)=s,\"ts=aRi", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test1524() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1525() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isOrdinaryFunction();
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test1626() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[6];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
        FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ";$}Pr6#< H)~`3", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, "Not declared as a type name", false, false);
        boolean boolean0 = functionType1.isOrdinaryFunction();
        functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test1627() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[6];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
        FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ";$}Pr6#< H)~`3", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, "Not declared as a type name", false, false);
        boolean boolean0 = functionType1.isOrdinaryFunction();
        functionType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test1628() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[6];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
        FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ";$}Pr6#< H)~`3", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, "Not declared as a type name", false, false);
        boolean boolean0 = functionType1.isOrdinaryFunction();
        functionType1.getTemplateTypeName();
    }

    @Test(timeout = 4000)
    public void test1629() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[6];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
        FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ";$}Pr6#< H)~`3", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, "Not declared as a type name", false, false);
        boolean boolean0 = functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1630() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[6];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
        FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ";$}Pr6#< H)~`3", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, "Not declared as a type name", false, false);
        boolean boolean0 = functionType1.isOrdinaryFunction();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test1731() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMinArguments();
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test1732() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1833() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        int int0 = errorFunctionType0.getMinArguments();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test1834() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        int int0 = errorFunctionType0.getMinArguments();
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test1835() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        int int0 = errorFunctionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1936() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ")", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2037() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test2038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMinArguments();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        JSType[] jSTypeArray0 = new JSType[4];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test2140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        JSType[] jSTypeArray0 = new JSType[4];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2241() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMaxArguments();
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2343() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMaxArguments();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2344() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2445() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
        int int0 = functionType0.getMaxArguments();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2446() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
        int int0 = functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2547() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        int int0 = errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2548() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        int int0 = errorFunctionType0.getMaxArguments();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2649() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
        functionType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test2750() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test2751() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.hasUnknownSupertype();
        noType0.setPrototypeBasedOn(noType0);
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2852() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.setPrototype((FunctionPrototypeType) null);
    }

    @Test(timeout = 4000)
    public void test2853() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.setPrototype((FunctionPrototypeType) null);
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2954() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getPrototype();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test3055() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) functionType0);
        functionType0.setImplementedInterfaces(linkedList0);
        Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test3156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) functionType0);
        functionType0.setImplementedInterfaces(linkedList0);
        functionType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test3257() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ")", (Node) null);
        functionType0.getAllImplementedInterfaces();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3358() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "J,1RStX!tR*&=H");
        boolean boolean0 = errorFunctionType0.hasProperty("prototype");
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test3359() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "J,1RStX!tR*&=H");
        boolean boolean0 = errorFunctionType0.hasProperty("prototype");
    }

    @Test(timeout = 4000)
    public void test3360() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "J,1RStX!tR*&=H");
        boolean boolean0 = errorFunctionType0.hasProperty("prototype");
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test3461() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.defineInferredProperty("valueOf", noType0, true);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("valueOf");
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test3462() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.defineInferredProperty("valueOf", noType0, true);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("valueOf");
    }

    @Test(timeout = 4000)
    public void test3463() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.defineInferredProperty("valueOf", noType0, true);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("valueOf");
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test3564() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        errorFunctionType0.getPropertyType("apply");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3665() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        errorFunctionType0.getPropertyType("prototype");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3766() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3867() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3868() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3869() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test3870() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test3971() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType");
        errorFunctionType0.getPropertyType("eR&oR");
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test3972() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType");
        errorFunctionType0.getPropertyType("eR&oR");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3973() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType");
        errorFunctionType0.getPropertyType("eR&oR");
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test4074() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", numberType0, false, false);
    }

    @Test(timeout = 4000)
    public void test4075() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", numberType0, false, false);
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test4076() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", numberType0, false, false);
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test4177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("prototype");
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test4178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("prototype");
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test4179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("prototype");
    }

    @Test(timeout = 4000)
    public void test4280() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("valueOf");
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test4281() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("valueOf");
    }

    @Test(timeout = 4000)
    public void test4282() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("valueOf");
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test4383() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("akG9UF", (Node) null);
        functionType0.getLeastSupertype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4484() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("tGx/(", (Node) null);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test4485() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("tGx/(", (Node) null);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4486() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("tGx/(", (Node) null);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4587() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.getLeastSupertype(functionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4588() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.getLeastSupertype(functionType0);
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test4589() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.getLeastSupertype(functionType0);
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test4690() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test4691() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4692() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4693() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType1);
        functionType0.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test4794() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType$Kind", (Node) null);
        functionType0.getGreatestSubtype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4895() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4896() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4897() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test4898() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4999() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        functionType0.getGreatestSubtype(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test49100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        functionType0.getGreatestSubtype(errorFunctionType0);
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test50101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getSuperClassConstructor();
    }

    @Test(timeout = 4000)
    public void test51102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setPrototypeBasedOn((ObjectType) null);
        boolean boolean0 = noType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test51103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setPrototypeBasedOn((ObjectType) null);
        boolean boolean0 = noType0.hasUnknownSupertype();
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test52104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", 0, 1);
        noType0.setPrototypeBasedOn(namedType0);
        boolean boolean0 = noType0.hasUnknownSupertype();
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test52105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", 0, 1);
        noType0.setPrototypeBasedOn(namedType0);
        boolean boolean0 = noType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test53106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("INTERFACE", (Node) null);
        functionType0.getTopMostDefiningType("INTERFACE");
    }

    @Test(timeout = 4000)
    public void test54107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getTopMostDefiningType("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test55108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setPrototypeBasedOn(noType0);
        JSType jSType0 = noType0.getTopMostDefiningType("Unknown class name");
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test56109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.isSubtype(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test56110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.isSubtype(noType0);
    }

    @Test(timeout = 4000)
    public void test57111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "1|.Ip_5[-thB", (Node) null);
        JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test57112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "1|.Ip_5[-thB", (Node) null);
        JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test57113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "1|.Ip_5[-thB", (Node) null);
        JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test57114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "1|.Ip_5[-thB", (Node) null);
        JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test57115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "1|.Ip_5[-thB", (Node) null);
        JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test58116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(functionType0);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test58117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(functionType0);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
        functionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test59118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "7k");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test59119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "7k");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test60120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toString();
    }

    @Test(timeout = 4000)
    public void test61121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "Not declared as a constructor", (Node) null);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test62122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test63123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.toString();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test63124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test64125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        JSType[] jSTypeArray0 = new JSType[3];
        jSTypeArray0[0] = (JSType) errorFunctionType0;
        jSTypeArray0[1] = (JSType) errorFunctionType0;
        jSTypeArray0[2] = (JSType) errorFunctionType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
        functionType0.toString();
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test64126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        JSType[] jSTypeArray0 = new JSType[3];
        jSTypeArray0[0] = (JSType) errorFunctionType0;
        jSTypeArray0[1] = (JSType) errorFunctionType0;
        jSTypeArray0[2] = (JSType) errorFunctionType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test64127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        JSType[] jSTypeArray0 = new JSType[3];
        jSTypeArray0[0] = (JSType) errorFunctionType0;
        jSTypeArray0[1] = (JSType) errorFunctionType0;
        jSTypeArray0[2] = (JSType) errorFunctionType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
        functionType0.toString();
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test65128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[2];
        jSTypeArray0[0] = (JSType) unionType0;
        jSTypeArray0[1] = (JSType) noType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs((JSType) null, jSTypeArray0);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test66129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType$Kind", (Node) null);
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "-9kF", (Node) null);
        boolean boolean0 = functionType1.canAssignTo(functionType0);
        functionType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test66130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType$Kind", (Node) null);
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "-9kF", (Node) null);
        boolean boolean0 = functionType1.canAssignTo(functionType0);
    }

    @Test(timeout = 4000)
    public void test66131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType$Kind", (Node) null);
        FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "-9kF", (Node) null);
        boolean boolean0 = functionType1.canAssignTo(functionType0);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test67132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("tGx/(", (Node) null);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test67133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("tGx/(", (Node) null);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test67134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("tGx/(", (Node) null);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
    }

    @Test(timeout = 4000)
    public void test67135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("tGx/(", (Node) null);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test68136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test68137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
    }

    @Test(timeout = 4000)
    public void test69138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        functionType1.setInstanceType(noType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test69139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        functionType1.setInstanceType(noType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test70140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test70141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
    }

    @Test(timeout = 4000)
    public void test70142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test70143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test70144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test71145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test71146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test72147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        boolean boolean0 = errorFunctionType0.isNumber();
        errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test72148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        boolean boolean0 = errorFunctionType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test72149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        boolean boolean0 = errorFunctionType0.isNumber();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test73150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("", (Node) null);
        boolean boolean0 = functionType0.hasInstanceType();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test73151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("", (Node) null);
        boolean boolean0 = functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test74152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test75153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test76154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "rSU~(i;_P");
        errorFunctionType0.getImplementedInterfaces();
        boolean boolean0 = errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test77155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0);
        functionPrototypeType0.differsFrom(noType0);
        noType0.setImplicitPrototype(functionPrototypeType0);
    }

    @Test(timeout = 4000)
    public void test78156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) errorFunctionType0);
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        EmptyScope emptyScope0 = new EmptyScope();
        errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test79157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ObjectType objectType0 = recordType0.getImplicitPrototype();
        EnumType enumType0 = new EnumType(jSTypeRegistry0, ")", objectType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        FunctionType functionType0 = enumElementType0.getConstructor();
    }

    @Test(timeout = 4000)
    public void test79158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ObjectType objectType0 = recordType0.getImplicitPrototype();
        EnumType enumType0 = new EnumType(jSTypeRegistry0, ")", objectType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        FunctionType functionType0 = enumElementType0.getConstructor();
        EmptyScope emptyScope0 = new EmptyScope();
        FunctionType functionType1 = (FunctionType) functionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        functionType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test79159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ObjectType objectType0 = recordType0.getImplicitPrototype();
        EnumType enumType0 = new EnumType(jSTypeRegistry0, ")", objectType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        FunctionType functionType0 = enumElementType0.getConstructor();
        EmptyScope emptyScope0 = new EmptyScope();
        FunctionType functionType1 = (FunctionType) functionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        functionType1.getMaxArguments();
    }
}
