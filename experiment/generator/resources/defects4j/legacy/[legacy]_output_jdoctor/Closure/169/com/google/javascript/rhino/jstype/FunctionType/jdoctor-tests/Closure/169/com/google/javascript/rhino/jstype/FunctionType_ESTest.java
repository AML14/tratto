/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 31 06:43:37 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.setDict();
        boolean boolean0 = errorFunctionType0.makesDicts();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.setDict();
        boolean boolean0 = errorFunctionType0.makesDicts();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.setDict();
        boolean boolean0 = errorFunctionType0.makesDicts();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setStruct();
        boolean boolean0 = noResolvedType0.makesStructs();
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setStruct();
        boolean boolean0 = noResolvedType0.makesStructs();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, errorFunctionType0);
        modificationVisitor0.caseParameterizedType(parameterizedType0);
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, errorFunctionType0);
        modificationVisitor0.caseParameterizedType(parameterizedType0);
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0037() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("bind");
        String string0 = functionType0.toStringHelper(false);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0038() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("bind");
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test0049() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.hasEqualCallType(noResolvedType0);
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test00510() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test00511() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    }

    @Test(timeout = 4000)
    public void test00512() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType2.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test00513() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test00514() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType2.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test00515() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    }

    @Test(timeout = 4000)
    public void test00616() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) stringType0.autoboxesTo();
        JSType[] jSTypeArray0 = new JSType[5];
        jSTypeArray0[4] = (JSType) stringType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) instanceObjectType0, jSTypeArray0);
        functionType0.isReturnTypeInferred();
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test00617() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) stringType0.autoboxesTo();
        JSType[] jSTypeArray0 = new JSType[5];
        jSTypeArray0[4] = (JSType) stringType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) instanceObjectType0, jSTypeArray0);
        functionType0.isReturnTypeInferred();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test00618() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) stringType0.autoboxesTo();
        JSType[] jSTypeArray0 = new JSType[5];
        jSTypeArray0[4] = (JSType) stringType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) instanceObjectType0, jSTypeArray0);
        functionType0.isReturnTypeInferred();
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test00719() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType0.isInstanceType();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test00720() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test00821() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = indexedType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test00822() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = indexedType0.canBeCalled();
        indexedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test00923() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("\u06DD\u070F\u1680\u180E", (Node) null);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType1 = functionType0.supAndInfHelper(noType0, false);
        boolean boolean0 = functionType1.isSubtype(functionType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test00924() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("\u06DD\u070F\u1680\u180E", (Node) null);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType1 = functionType0.supAndInfHelper(noType0, false);
        boolean boolean0 = functionType1.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test01025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.getExtendedInterfacesCount();
        noObjectType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01227() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getOwnImplementedInterfaces();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01328() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getSubTypes();
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01429() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        jSTypeRegistry0.createConstructorType("Not declared as a constructor", node0, node0, (JSType) noObjectType0);
    }

    @Test(timeout = 4000)
    public void test01530() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "T8~oa`lyga#I_[-l\u0005");
        Node node0 = Node.newNumber((double) 1);
        Node node1 = new Node(105, node0, node0, 36, 55);
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType("Unknown class name", node1, node0, (JSType) errorFunctionType0);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01531() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "T8~oa`lyga#I_[-l\u0005");
        Node node0 = Node.newNumber((double) 1);
        Node node1 = new Node(105, node0, node0, 36, 55);
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType("Unknown class name", node1, node0, (JSType) errorFunctionType0);
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test01632() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((double) 0);
        jSTypeRegistry0.createInterfaceType("Not declared as a type name", node0);
    }

    @Test(timeout = 4000)
    public void test01733() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        Node node0 = new Node(105, 105, 105);
        FunctionType.forInterface(jSTypeRegistry0, (String) null, node0);
    }

    @Test(timeout = 4000)
    public void test01834() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.makesStructs();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test01835() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.makesStructs();
    }

    @Test(timeout = 4000)
    public void test01936() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "jaz");
        boolean boolean0 = errorFunctionType0.makesStructs();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01937() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "jaz");
        boolean boolean0 = errorFunctionType0.makesStructs();
    }

    @Test(timeout = 4000)
    public void test02038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, recordType0, true);
        ImmutableList<String> immutableList0 = ImmutableList.of("com.googe.common.base.Predicates$1", "Named type with empty name component", "ef :rD");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ",SbQzcT1f:31", (Node) null, arrowType0, (ObjectType) null, immutableList0, false, false);
        boolean boolean0 = functionType0.makesDicts();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test02039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, recordType0, true);
        ImmutableList<String> immutableList0 = ImmutableList.of("com.googe.common.base.Predicates$1", "Named type with empty name component", "ef :rD");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ",SbQzcT1f:31", (Node) null, arrowType0, (ObjectType) null, immutableList0, false, false);
        boolean boolean0 = functionType0.makesDicts();
    }

    @Test(timeout = 4000)
    public void test02140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test02242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a type name", (Node) null);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test02243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a type name", (Node) null);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test02244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a type name", (Node) null);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test02345() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<inRalid>");
        boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test02346() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<inRalid>");
        boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test02447() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        int int0 = errorFunctionType0.getMinArguments();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02448() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        int int0 = errorFunctionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test02549() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<inRalid>");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, (List<JSType>) immutableList0);
        int int0 = functionType0.getMinArguments();
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02550() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<inRalid>");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, (List<JSType>) immutableList0);
        int int0 = functionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test02651() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test02652() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMinArguments();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02753() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMaxArguments();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02754() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test02855() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
        int int0 = functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test02856() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
        int int0 = functionType0.getMaxArguments();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test02957() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c7q%Ww(q{jWk<kB");
        int int0 = errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test02958() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c7q%Ww(q{jWk<kB");
        int int0 = errorFunctionType0.getMaxArguments();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03059() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        errorFunctionType0.getPropertyType("prototype");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.makesDicts();
        noResolvedType0.getOwnPropertyNames();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Set<String> set0 = noResolvedType0.getOwnPropertyNames();
        set0.size();
    }

    @Test(timeout = 4000)
    public void test03262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Set<String> set0 = noResolvedType0.getOwnPropertyNames();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03363() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{) 6?A[rZdD");
        Node node0 = Node.newString("Not declared as a constructor");
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, false, node0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03364() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{) 6?A[rZdD");
        Node node0 = Node.newString("Not declared as a constructor");
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, false, node0);
    }

    @Test(timeout = 4000)
    public void test03465() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a type name", (Node) null);
        functionType0.setPrototypeBasedOn((ObjectType) indexedType0, (Node) null);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03466() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a type name", (Node) null);
        functionType0.setPrototypeBasedOn((ObjectType) indexedType0, (Node) null);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test03567() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[1];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
    }

    @Test(timeout = 4000)
    public void test03568() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[1];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03669() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03670() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test03671() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03772() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{) 6?A[rZdD");
        Node node0 = Node.newString("Not declared as a constructor");
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        errorFunctionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, false, node0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03773() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{) 6?A[rZdD");
        Node node0 = Node.newString("Not declared as a constructor");
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        errorFunctionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, false, node0);
    }

    @Test(timeout = 4000)
    public void test03874() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        noResolvedType0.getAllImplementedInterfaces();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03975() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("G}~ft9,r", (Node) null);
        functionType0.getAllImplementedInterfaces();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03976() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("G}~ft9,r", (Node) null);
        functionType0.getAllImplementedInterfaces();
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test04077() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "7 }FmY:i-Iix~1Q");
        errorFunctionType0.getAllImplementedInterfaces();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test04178() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(677);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
        functionType0.setImplementedInterfaces(immutableList0);
    }

    @Test(timeout = 4000)
    public void test04279() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getAllExtendedInterfaces();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test04380() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Vector<ObjectType> vector0 = new Vector<ObjectType>();
        noResolvedType0.setExtendedInterfaces(vector0);
    }

    @Test(timeout = 4000)
    public void test04481() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
        functionType0.setExtendedInterfaces((List<ObjectType>) null);
    }

    @Test(timeout = 4000)
    public void test04582() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<inRalid>");
        errorFunctionType0.defineProperty("_`Y~<lc{", errorFunctionType0, false, (Node) null);
        JSType jSType0 = errorFunctionType0.getPropertyType("_`Y~<lc{");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test04583() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<inRalid>");
        errorFunctionType0.defineProperty("_`Y~<lc{", errorFunctionType0, false, (Node) null);
        JSType jSType0 = errorFunctionType0.getPropertyType("_`Y~<lc{");
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test04684() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test04785() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        errorFunctionType0.getPropertyType("apply");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test04886() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType((-1205374168));
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test04987() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(1685);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test05088() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, (Node) null);
        boolean boolean0 = functionType0.defineProperty("prototype", numberType0, true, (Node) null);
    }

    @Test(timeout = 4000)
    public void test05089() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, (Node) null);
        boolean boolean0 = functionType0.defineProperty("prototype", numberType0, true, (Node) null);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test05190() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, false);
        functionType1.supAndInfHelper(functionType0, false);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test05191() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, false);
        functionType1.supAndInfHelper(functionType0, false);
    }

    @Test(timeout = 4000)
    public void test05292() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test05293() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType2.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test05294() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test05395() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    }

    @Test(timeout = 4000)
    public void test05396() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        functionType2.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test05497() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test05498() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    }

    @Test(timeout = 4000)
    public void test05599() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        functionType2.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test055100() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        functionType2.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test055101() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    }

    @Test(timeout = 4000)
    public void test055102() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        functionType2.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test056103() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test056104() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
    }

    @Test(timeout = 4000)
    public void test057105() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test057106() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
    }

    @Test(timeout = 4000)
    public void test058107() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) voidType0, (JSType) functionType0, (JSType) functionType0, (JSType) voidType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList1);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    }

    @Test(timeout = 4000)
    public void test058108() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) voidType0, (JSType) functionType0, (JSType) functionType0, (JSType) voidType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList1);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    }

    @Test(timeout = 4000)
    public void test058109() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) voidType0, (JSType) functionType0, (JSType) functionType0, (JSType) voidType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList1);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        functionType2.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test059110() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noResolvedType0, true);
        errorFunctionType0.supAndInfHelper(functionType0, false);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test060111() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noResolvedType0, true);
        noResolvedType0.supAndInfHelper(functionType0, true);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test060112() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noResolvedType0, true);
        noResolvedType0.supAndInfHelper(functionType0, true);
        noResolvedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test061113() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        NoResolvedType noResolvedType1 = (NoResolvedType) noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        noResolvedType1.supAndInfHelper(noResolvedType0, true);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test061114() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        NoResolvedType noResolvedType1 = (NoResolvedType) noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        noResolvedType1.supAndInfHelper(noResolvedType0, true);
        noResolvedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test062115() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test062116() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        functionType0.getTypesUnderShallowEquality(errorFunctionType0);
        noResolvedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test063117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType2.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test063118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType2.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test063119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    }

    @Test(timeout = 4000)
    public void test064120() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        functionType0.getSuperClassConstructor();
    }

    @Test(timeout = 4000)
    public void test065121() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        ObjectType objectType0 = FunctionType.getTopDefiningInterface(errorFunctionType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test066122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
        functionType0.setInstanceType(noResolvedType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test066123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
        functionType0.setInstanceType(noResolvedType0);
        ObjectType objectType0 = functionType0.getTopMostDefiningType("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test066124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
        functionType0.setInstanceType(noResolvedType0);
        ObjectType objectType0 = functionType0.getTopMostDefiningType("Unknown class name");
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test067125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
        functionType0.getTopMostDefiningType("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test068126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        functionType0.getTopMostDefiningType("Not declared as a type name");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test068127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        functionType0.getTopMostDefiningType("Not declared as a type name");
        noResolvedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test069128() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "i");
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = errorFunctionType0.isSubtype(proxyObjectType0);
    }

    @Test(timeout = 4000)
    public void test070129() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("G}~ft9,r", (Node) null);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "U0#B?gY]C;{X%9]", (Node) null);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test070130() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("G}~ft9,r", (Node) null);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "U0#B?gY]C;{X%9]", (Node) null);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
        functionType2.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test070131() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("G}~ft9,r", (Node) null);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "U0#B?gY]C;{X%9]", (Node) null);
        FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
        functionType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test071132() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "lR` nmVLW");
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
        functionType0.supAndInfHelper(errorFunctionType0, true);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test072133() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    }

    @Test(timeout = 4000)
    public void test073134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        String string0 = functionType0.toDebugHashCodeString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test073135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test075136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "STRUCT");
        errorFunctionType0.setPrettyPrint(false);
        String string0 = errorFunctionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test076137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        String string0 = errorFunctionType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test077138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        NoResolvedType noResolvedType1 = (NoResolvedType) noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        String string0 = noResolvedType1.toStringHelper(true);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test077139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        NoResolvedType noResolvedType1 = (NoResolvedType) noResolvedType0.supAndInfHelper(errorFunctionType0, true);
        String string0 = noResolvedType1.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test078140() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a constructor", (Node) null);
        String string0 = functionType0.toAnnotationString();
    }

    @Test(timeout = 4000)
    public void test079141() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test080142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) voidType0, (List<JSType>) immutableList0);
        String string0 = functionType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test081143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "jaz");
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test081144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "jaz");
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test082145() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qz'B%@L6e<^I");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Qz'B%@L6e<^I");
        boolean boolean0 = errorFunctionType0.isSubtype(errorFunctionType1);
    }

    @Test(timeout = 4000)
    public void test082146() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qz'B%@L6e<^I");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Qz'B%@L6e<^I");
        boolean boolean0 = errorFunctionType0.isSubtype(errorFunctionType1);
        errorFunctionType1.equals((Object) errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test083147() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        JSType jSType0 = errorFunctionType0.getPropertyType("bind");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test083148() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        JSType jSType0 = errorFunctionType0.getPropertyType("bind");
        boolean boolean0 = jSType0.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test084149() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        ObjectType objectType0 = noObjectType0.getTypeOfThis();
        objectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test085150() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setSource((Node) null);
        noResolvedType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test086151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
        JSType jSType0 = instanceObjectType0.getRestrictedTypeGivenToBooleanOutcome(false);
        instanceObjectType0.getGreatestSubtype(jSType0);
        Node node0 = new Node(0, (-528), (-2004603710));
        noObjectType0.setSource(node0);
        noObjectType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test087152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getAllImplementedInterfaces();
        noResolvedType0.setSource((Node) null);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test088153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
        JSType jSType0 = instanceObjectType0.getRestrictedTypeGivenToBooleanOutcome(false);
        UnknownType unknownType0 = (UnknownType) instanceObjectType0.getGreatestSubtype(jSType0);
        Node node0 = new Node(0, (-528), (-2004603710));
        noObjectType0.setPrototypeBasedOn((ObjectType) unknownType0, node0);
        noObjectType0.setSource(node0);
        node0.isScript();
    }

    @Test(timeout = 4000)
    public void test089154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        errorFunctionType0.makesDicts();
        Node node0 = new Node(0);
        errorFunctionType0.setPrototypeBasedOn((ObjectType) errorFunctionType0, node0);
        errorFunctionType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test090155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "BITNOT", (Node) null);
        functionType0.clearCachedValues();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test091156() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        FunctionType functionType1 = (FunctionType) functionType0.resolveInternal((ErrorReporter) null, noResolvedType0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType1, false);
        instanceObjectType0.getPropertyNode("Not declared as a type name");
        functionType1.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test092157() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        ObjectType objectType0 = noObjectType0.getTopMostDefiningType((String) null);
        boolean boolean0 = objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test093158() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) errorFunctionType0.supAndInfHelper(noResolvedType0, true);
        errorFunctionType1.setImplicitPrototype(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test094159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "L7^Guai%p'YAm;", "com.google.javascript.rhino.jstype.IndexedType", (-1394), Integer.MAX_VALUE);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noObjectType0, (ObjectType) namedType0, (ObjectType) namedType0, (ObjectType) namedType0);
        errorFunctionType0.setImplementedInterfaces(immutableList0);
        JSType jSType0 = errorFunctionType0.resolve(simpleErrorReporter0, noObjectType0);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test095160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) errorFunctionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        errorFunctionType1.isObject();
    }

    @Test(timeout = 4000)
    public void test096161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.toDebugHashCodeString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test097162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
        String string0 = functionType0.toDebugHashCodeString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test097163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test098164() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) noObjectType0, true, jSTypeArray0);
        functionType0.toDebugHashCodeString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test099165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, recordType0, true);
        ImmutableList<String> immutableList0 = ImmutableList.of("com.googe.common.base.Predicates$1", "Named type with empty name component", "ef :rD");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ",SbQzcT1f:31", (Node) null, arrowType0, (ObjectType) null, immutableList0, false, false);
        boolean boolean0 = functionType0.hasAnyTemplateInternal();
    }

    @Test(timeout = 4000)
    public void test100166() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "ZJ5CD+2z =icYk");
        JSType[] jSTypeArray0 = new JSType[5];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, jSTypeArray0);
        boolean boolean0 = functionType0.hasAnyTemplateInternal();
    }
}
