/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 31 06:40:25 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.Visitor;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ArrowType_ESTest extends ArrowType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        arrowType0.canTestForEqualityWith(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(arrowType0);
        arrowType0.getTypesUnderShallowEquality(jSType0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c^v LFVr%rlw#8w");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        arrowType0.getLeastSupertype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        String string0 = arrowType0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        arrowType0.visit((Visitor<BooleanType>) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        NoType noType0 = (NoType) arrowType0.getRestrictedTypeGivenToBooleanOutcome(false);
        noType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        boolean boolean0 = arrowType0.isSubtype(arrowType0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, (Node) null, arrowType0);
        boolean boolean0 = arrowType1.isSubtype(arrowType0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = new Node((-2257));
        Node node1 = new Node(2, node0, node0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
        ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
        boolean boolean0 = arrowType1.isSubtype(arrowType0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        Node node0 = Node.newString("Unknown class name");
        Node node1 = new Node(52, node0, 52, 54);
        ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
        boolean boolean0 = arrowType1.isSubtype(arrowType0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        Node node0 = new Node(1, 1, 0);
        Node node1 = new Node(52, node0, 52, 54);
        ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
        boolean boolean0 = arrowType0.isSubtype(arrowType1);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) arrowType0, (JSType) arrowType0, (JSType) arrowType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node0);
        boolean boolean0 = arrowType0.isSubtype(arrowType1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isSubtype(arrowType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isSubtype(arrowType0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = new Node((-5), (-5), (-5));
        Node node1 = new Node(55, node0, node0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
        boolean boolean0 = arrowType0.isSubtype(arrowType0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "K[/8;=>");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        Node node0 = new Node(1, 1, 0);
        Node node1 = new Node(1, node0, node0, node0);
        ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
        boolean boolean0 = arrowType1.isSubtype(arrowType0);
        errorFunctionType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "K[/8;=>");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        Node node0 = new Node(1, 1, 0);
        Node node1 = new Node(1, node0, node0, node0);
        ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
        boolean boolean0 = arrowType1.isSubtype(arrowType0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isSubtype(arrowType1);
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isSubtype(arrowType1);
        errorFunctionType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber(0.0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType1.isSubtype(arrowType0);
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber(0.0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType1.isSubtype(arrowType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber(0.0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType1.isSubtype(arrowType0);
        errorFunctionType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test2622() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        arrowType0.resolveInternal(simpleErrorReporter0, noObjectType0);
        noObjectType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test2723() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        Node node0 = Node.newString(304, "NmWwShC&Q;x`{6$G", 304, 304);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, (JSType) null);
        boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    }

    @Test(timeout = 4000)
    public void test2824() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = new Node(1);
        Node node1 = new Node(55, node0, node0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
        boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    }

    @Test(timeout = 4000)
    public void test2925() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2926() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    }

    @Test(timeout = 4000)
    public void test3027() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    }

    @Test(timeout = 4000)
    public void test3128() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        Node node0 = Node.newString(304, "NmWwShC&Q;x`{6$G", 304, 304);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, (JSType) null);
        arrowType0.returnType = null;
        boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    }

    @Test(timeout = 4000)
    public void test3229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = new Node((-285));
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, templateType0);
        boolean boolean0 = arrowType0.hasAnyTemplateInternal();
    }

    @Test(timeout = 4000)
    public void test3330() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) templateType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
        boolean boolean0 = arrowType0.hasAnyTemplateInternal();
        noObjectType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test3331() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) templateType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
        boolean boolean0 = arrowType0.hasAnyTemplateInternal();
    }

    @Test(timeout = 4000)
    public void test3432() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = new Node((-2257));
        Node node1 = new Node(2, node0, node0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
        boolean boolean0 = arrowType0.hasAnyTemplateInternal();
    }
}
