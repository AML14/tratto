/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 05:41:22 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckMissingGetCssName;
import com.google.javascript.jscomp.CheckMissingReturn;
import com.google.javascript.jscomp.CheckRegExp;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.InlineProperties;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PureFunctionIdentifier;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.RemoveUnusedClassProperties;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.TemplateType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, functionType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        typeValidator0.expectValidTypeofName(nodeTraversal0, node0, "?");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectNumber(nodeTraversal0, node0, objectType0, "variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectNumber(nodeTraversal0, node0, objectType0, "variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}");
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        DiagnosticType diagnosticType0 = PureFunctionIdentifier.INVALID_MODIFIES_ANNOTATION;
        JSError jSError0 = JSError.make(diagnosticType0, (String[]) null);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null, jSError0);
        String string0 = typeValidator_TypeMismatch0.toString();
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, functionType0, "8k;Aw-|.G^fIp");
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        typeValidator0.expectActualObject(nodeTraversal0, node0, objectType0, "Object#Element");
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        typeValidator0.expectActualObject(nodeTraversal0, node0, objectType0, "Object#Element");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, "msg.continue.nonloop");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        typeValidator0.expectAnyObject(nodeTraversal0, node0, objectType0, "Not declared as a type name");
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
        typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType0, "Object#Element");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, "Unknown class name");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, "Unknown class name");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType(" 9+NY");
        typeValidator0.expectString(nodeTraversal0, node0, templateType0, " 9+NY");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        typeValidator0.expectString(nodeTraversal0, node0, objectType0, "Object#Element");
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        typeValidator0.expectString(nodeTraversal0, node0, objectType0, "Object#Element");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType(" 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0, (ScopeCreator) null);
        typeValidator0.expectNumber(nodeTraversal0, node0, templateType0, "");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType(" 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0, (ScopeCreator) null);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, templateType0, "");
        node0.isComma();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, objectType0, "Not declared as a type name");
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, objectType0, "Not declared as a type name");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType(" 9+NY");
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, templateType0, "Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "array access");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, "zv-y[|0/N!e9sHo}");
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "array access");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, "zv-y[|0/N!e9sHo}");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("vH_ljC#t");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("X{SHS)D6L_E6", node0, templateType0);
        RemoveUnusedClassProperties removeUnusedClassProperties0 = new RemoveUnusedClassProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, removeUnusedClassProperties0);
        typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, enumType0, "Named type with empty name component");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, objectType0, "Not declared as a type name", objectType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, objectType0, "Not declared as a type name", objectType0);
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType(" 9+NY");
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, templateType0, "Unknown class name", templateType0);
    }

    @Test(timeout = 4000)
    public void test2227() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType(" 9+NY");
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, templateType0, templateType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType0, jSType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
        JSType jSType1 = modificationVisitor0.caseNoType();
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType1, node0, "Unknown class name");
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, templateType0, templateType0, node0, "Object#Element");
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, objectType0, objectType0, "Object#Key");
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, jSType0, "Not declared as a type name");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, jSType0, "Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType0, node0, 4095);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2935() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("H_ljC#t");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, functionType0, jSType0, node0, 0);
    }

    @Test(timeout = 4000)
    public void test3036() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        typeValidator0.expectCanOverride(nodeTraversal0, node0, objectType0, objectType0, "Not declared as a constructor", objectType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3137() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        JSType[] jSTypeArray0 = new JSType[5];
        jSTypeArray0[2] = jSType0;
        jSTypeArray0[4] = jSType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, true, jSTypeArray0);
        typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, jSTypeArray0[2], "x#?q9o'ryW", functionType0);
    }

    @Test(timeout = 4000)
    public void test3238() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
    }

    @Test(timeout = 4000)
    public void test3339() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, " 9+NY");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType(" 9+NY");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0, (ScopeCreator) null);
        typeValidator0.expectSuperType(nodeTraversal0, node0, templateType0, templateType0);
        node0.isIf();
    }

    @Test(timeout = 4000)
    public void test3440() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Q\"'");
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(templateType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        typeValidator0.expectCanCast(nodeTraversal0, node0, jSType0, jSType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3541() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("vH_ljC#t");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("X{SHS)D6L_E6", node0, templateType0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        JSType jSType1 = jSTypeRegistry0.createOptionalType(enumType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, syntacticScopeCreator0);
        typeValidator0.expectCanCast(nodeTraversal0, node0, jSType1, jSType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3642() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("array access");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        typeValidator0.expectUndeclaredVariable("Unknown class name", (CompilerInput) null, node0, node0, (Scope.Var) null, "Named type with empty name component", objectType0);
    }

    @Test(timeout = 4000)
    public void test3743() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType0);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test3844() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, templateType0);
        ObjectType objectType0 = enumType0.getImplicitPrototype();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType0, enumType0, node0, "Not declared as a constructor");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3845() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, templateType0);
        ObjectType objectType0 = enumType0.getImplicitPrototype();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType0, enumType0, node0, "Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test3946() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        String string0 = typeValidator0.getReadableJSTypeName(node0, false);
    }

    @Test(timeout = 4000)
    public void test4047() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" 9+NY");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        Node node1 = new Node(42, node0, node0, node0, node0, (-2712), 29);
        String string0 = typeValidator0.getReadableJSTypeName(node1, true);
    }

    @Test(timeout = 4000)
    public void test4148() throws Throwable {
        DiagnosticType diagnosticType0 = PureFunctionIdentifier.INVALID_MODIFIES_ANNOTATION;
        JSError jSError0 = JSError.make(diagnosticType0, (String[]) null);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test4249() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(1722, 1722, 1722);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        String[] stringArray0 = new String[0];
        JSError jSError0 = JSError.make("JSC_OPTIMIZE_LOOP_ERROR", node0, checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("JSC_OPTIMIZE_LOOP_ERROR");
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(templateType0, templateType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
    }

    @Test(timeout = 4000)
    public void test4350() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node((-3449), (-3449), 249);
        String[] stringArray0 = new String[2];
        JSError jSError0 = JSError.make("[Y0yVz2@?8^u", node0, compiler0.OPTIMIZE_LOOP_ERROR.level, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(templateType0, templateType0, jSError0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
    }

    @Test(timeout = 4000)
    public void test4451() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(1722, 1722, 1722);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        String[] stringArray0 = new String[0];
        JSError jSError0 = JSError.make("JSC_OPTIMIZE_LOOP_ERROR", node0, checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("JSC_OPTIMIZE_LOOP_ERROR");
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(templateType0, templateType0, jSError0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(templateType0, jSType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
    }

    @Test(timeout = 4000)
    public void test4452() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(1722, 1722, 1722);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        String[] stringArray0 = new String[0];
        JSError jSError0 = JSError.make("JSC_OPTIMIZE_LOOP_ERROR", node0, checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("JSC_OPTIMIZE_LOOP_ERROR");
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(templateType0, templateType0, jSError0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(templateType0, jSType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
        typeValidator_TypeMismatch1.equals((Object) typeValidator_TypeMismatch0);
    }
}
