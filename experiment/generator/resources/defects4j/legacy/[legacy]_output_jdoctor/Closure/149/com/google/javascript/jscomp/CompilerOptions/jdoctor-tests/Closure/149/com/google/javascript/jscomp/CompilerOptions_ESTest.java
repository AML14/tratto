/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:08:23 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CreateSyntheticBlocks;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroupWarningsGuard;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.ProcessDefines;
import com.google.javascript.jscomp.ShowByPathWarningsGuard;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CompilerOptions_ESTest extends CompilerOptions_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test0110() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0111() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0112() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0113() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0114() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0115() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0116() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0117() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0118() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0119() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0220() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0221() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0222() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0223() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0224() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0225() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0226() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0227() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0228() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0229() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0330() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0331() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0332() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0333() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0334() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0335() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0336() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0337() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0338() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0339() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0440() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0441() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0442() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0443() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0444() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0445() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0446() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0447() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0448() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0449() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0550() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test0651() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0652() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0653() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0654() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0655() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0656() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0657() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0658() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0659() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0660() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0761() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0762() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0763() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0764() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0765() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0766() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0767() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0768() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0769() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0770() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0871() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0872() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0873() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0874() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0875() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0876() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0877() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0878() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0879() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0880() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0881() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0982() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test0983() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test0984() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test0985() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test0986() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test0987() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test0988() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test0989() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test0990() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test0991() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test1092() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test1193() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test1194() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test1195() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test1196() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test1197() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test1198() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test1199() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test11100() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test11101() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test11102() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test12103() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test12104() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test12105() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test12106() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test12107() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test12108() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test12109() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test12110() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test12111() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test12112() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test13113() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13114() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13115() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13116() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13117() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13118() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13119() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13120() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test13121() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13122() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13123() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test14124() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test14125() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test14126() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test14127() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test14128() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test14129() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test14130() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test14131() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test14132() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test14133() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test15134() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test15135() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test15136() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test15137() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test15138() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test15139() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test15140() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test15141() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test15142() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test15143() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test16144() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16145() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16146() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16147() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16148() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16149() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16150() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16151() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16152() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16153() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test16154() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test17155() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test17156() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test17157() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test17158() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test17159() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test17160() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test17161() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test17162() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test18163() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test18164() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test18165() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test18166() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test18167() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test18168() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test18169() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test18170() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test18171() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test18172() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test19173() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test19174() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test19175() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test19176() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test19177() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test19178() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test19179() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test19180() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test19181() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test19182() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test20183() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test20184() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test20185() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test20186() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test20187() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test20188() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test20189() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test20190() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test20191() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test20192() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test21193() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test21194() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test21195() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test21196() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test21197() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test21198() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test21199() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test21200() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test21201() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test21202() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test22203() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22204() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22205() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22206() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22207() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22208() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22209() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22210() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22211() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22212() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test22213() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test23214() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test23215() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test23216() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test23217() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test23218() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test23219() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test23220() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test23221() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test23222() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test23223() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test24224() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test24225() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test24226() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test24227() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test24228() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test24229() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test24230() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test24231() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test24232() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test24233() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test25234() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test25235() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test25236() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test25237() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test25238() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test25239() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test25240() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test25241() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test25242() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test25243() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test26244() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26245() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26246() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test26247() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26248() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26249() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26250() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26251() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26252() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26253() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26254() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27255() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27256() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27257() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27258() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27259() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test27260() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27261() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27262() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27263() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28264() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28265() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28266() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28267() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28268() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28269() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28270() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28271() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28272() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28273() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test28274() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test29275() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29276() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29277() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29278() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29279() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29280() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29281() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29282() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29283() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29284() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test29285() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30286() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30287() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30288() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30289() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30290() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30291() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30292() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30293() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30294() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30295() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30296() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test31297() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[3];
        DiagnosticGroup diagnosticGroup0 = TypeCheck.ALL_DIAGNOSTICS;
        diagnosticGroupArray0[0] = diagnosticGroup0;
        DiagnosticType diagnosticType0 = CreateSyntheticBlocks.UNMATCHED_END_MARKER;
        diagnosticType0.format(diagnosticGroupArray0);
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[5];
        DiagnosticType diagnosticType1 = TypeCheck.INEXISTENT_PROPERTY;
        diagnosticTypeArray0[2] = diagnosticType1;
        DiagnosticGroup diagnosticGroup1 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.brokenClosureRequiresLevel);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32298() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32299() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32300() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32301() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32302() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32303() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32304() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32305() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32306() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32307() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32308() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33309() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33310() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33311() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33312() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33313() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33314() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33315() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33316() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33317() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33318() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33319() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34320() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34321() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34322() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34323() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34324() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34325() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34326() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34327() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34328() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34329() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34330() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test35331() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test35332() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test35333() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test35334() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test35335() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test35336() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test35337() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test35338() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test35339() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test35340() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test36341() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36342() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36343() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36344() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36345() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36346() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36347() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36348() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36349() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36350() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test36351() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test37352() throws Throwable {
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        boolean boolean0 = compilerOptions_TracerMode0.isOn();
    }
}
