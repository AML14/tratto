[
  {
    "signature": "com.google.javascript.jscomp.TypeInference(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.jscomp.Scope functionScope)",
    "name": "com.google.javascript.jscomp.TypeInference",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference",
      "name": "TypeInference",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.TypeInference",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.ControlFlowGraph",
          "name": "ControlFlowGraph",
          "isArray": false
        },
        "name": "cfg"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.ReverseAbstractInterpreter",
          "name": "ReverseAbstractInterpreter",
          "isArray": false
        },
        "name": "reverseInterpreter"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.Scope",
          "name": "Scope",
          "isArray": false
        },
        "name": "functionScope"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "com.google.javascript.jscomp.TypeInference(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.jscomp.Scope functionScope, java.util.Collection<com.google.javascript.jscomp.Scope$Var> unflowableVars)",
    "name": "com.google.javascript.jscomp.TypeInference",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference",
      "name": "TypeInference",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.TypeInference",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.ControlFlowGraph",
          "name": "ControlFlowGraph",
          "isArray": false
        },
        "name": "cfg"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.ReverseAbstractInterpreter",
          "name": "ReverseAbstractInterpreter",
          "isArray": false
        },
        "name": "reverseInterpreter"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.Scope",
          "name": "Scope",
          "isArray": false
        },
        "name": "functionScope"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "unflowableVars"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "createInitialEstimateLattice()",
    "name": "createInitialEstimateLattice",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference",
      "name": "TypeInference",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.TypeInference",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.FlowScope",
      "name": "com.google.javascript.jscomp.FlowScope",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "createEntryLattice()",
    "name": "createEntryLattice",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference",
      "name": "TypeInference",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.TypeInference",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.FlowScope",
      "name": "com.google.javascript.jscomp.FlowScope",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getAssignedOuterLocalVars()",
    "name": "getAssignedOuterLocalVars",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference",
      "name": "TypeInference",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.TypeInference",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Multimap<com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.Scope$Var>",
      "name": "com.google.common.collect.Multimap<com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.Scope$Var>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "Local variables assigned in this scope, but which are declared in a scope outside of it. Hashed by the scope they're declared in.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "flowThrough(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.FlowScope input)",
    "name": "flowThrough",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference",
      "name": "TypeInference",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.TypeInference",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.FlowScope",
      "name": "com.google.javascript.jscomp.FlowScope",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.FlowScope",
          "name": "FlowScope",
          "isArray": false
        },
        "name": "input"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "branchedFlowThrough(com.google.javascript.rhino.Node source, com.google.javascript.jscomp.FlowScope input)",
    "name": "branchedFlowThrough",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference",
      "name": "TypeInference",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.TypeInference",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<com.google.javascript.jscomp.FlowScope>",
      "name": "java.util.List<com.google.javascript.jscomp.FlowScope>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.FlowScope",
          "name": "FlowScope",
          "isArray": false
        },
        "name": "input"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getBooleanOutcomePair(com.google.javascript.jscomp.TypeInference$BooleanOutcomePair left, com.google.javascript.jscomp.TypeInference$BooleanOutcomePair right, boolean condition)",
    "name": "getBooleanOutcomePair",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference",
      "name": "TypeInference",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.TypeInference",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair",
      "name": "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair",
          "name": "BooleanOutcomePair",
          "isArray": false
        },
        "name": "left"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair",
          "name": "BooleanOutcomePair",
          "isArray": false
        },
        "name": "right"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getBooleanOutcomes(com.google.javascript.rhino.jstype.BooleanLiteralSet left, com.google.javascript.rhino.jstype.BooleanLiteralSet right, boolean condition)",
    "name": "getBooleanOutcomes",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.TypeInference",
      "name": "TypeInference",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.TypeInference",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.jstype.BooleanLiteralSet",
      "name": "com.google.javascript.rhino.jstype.BooleanLiteralSet",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.jstype.BooleanLiteralSet",
          "name": "BooleanLiteralSet",
          "isArray": false
        },
        "name": "left"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.jstype.BooleanLiteralSet",
          "name": "BooleanLiteralSet",
          "isArray": false
        },
        "name": "right"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.jstype.BooleanLiteralSet",
            "name": "BooleanLiteralSet",
            "isArray": false
          },
          "name": "left"
        },
        "comment": "the set of possible ToBoolean predicate results for the expression on the left side of the operator.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.jstype.BooleanLiteralSet",
            "name": "BooleanLiteralSet",
            "isArray": false
          },
          "name": "right"
        },
        "comment": "the set of possible ToBoolean predicate results for the expression on the right side of the operator.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "condition"
        },
        "comment": "the left side ToBoolean predicate result that causes the right side to get evaluated (i.e. not short-circuited).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a set of possible ToBoolean predicate results for the entire expression.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]