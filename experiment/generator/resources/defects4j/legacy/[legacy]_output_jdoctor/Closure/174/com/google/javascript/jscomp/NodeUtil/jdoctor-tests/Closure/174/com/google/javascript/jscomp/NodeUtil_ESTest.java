/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 00:24:19 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.DataInputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.List;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0020() throws Throwable {
        Node node0 = Node.newString(1318, "[#K.lmr7[", 1318, 0);
        Node node1 = node0.cloneTree();
        NodeUtil.isStatementParent(node1);
        Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) null, "[#K.lmr7[", node0, "[#K.lmr7[");
        NodeUtil.getFunctionBody(node1);
        String string0 = null;
        SourceMap.DetailLevel.valueOf(string0);
        NodeUtil.isStatement(node2);
    }

    @Test(timeout = 4000)
    public void test0041() throws Throwable {
        Node node0 = null;
        NodeUtil.functionCallHasSideEffects((Node) null);
    }

    @Test(timeout = 4000)
    public void test0102() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeSyntheticCode(compiler0, "6^2aU(8*wN9L|W@", "6^2aU(8*wN9L|W@");
        NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test0113() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
        Node node0 = new Node(32);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        NodeUtil.isPrototypeProperty(node1);
        peepholeFoldConstants0.mayHaveSideEffects(node1);
        MockPrintStream mockPrintStream0 = new MockPrintStream((File) null);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        node0.checkTreeEquals(node1);
        VerboseMessageFormatter verboseMessageFormatter0 = null;
        verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
    }

    @Test(timeout = 4000)
    public void test0164() throws Throwable {
        Node node0 = null;
        NodeUtil.getSourceName((Node) null);
        NodeUtil.mayBeString((Node) null, false);
        JqueryCodingConvention jqueryCodingConvention0 = null;
        jqueryCodingConvention0 = new JqueryCodingConvention();
    }

    @Test(timeout = 4000)
    public void test0185() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node0 = null;
        NodeUtil.isRelationalOperation((Node) null);
    }

    @Test(timeout = 4000)
    public void test0206() throws Throwable {
        Node node0 = new Node(17);
        boolean boolean0 = NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.opToStrNoFail(4);
        StatementFusion statementFusion0 = null;
        statementFusion0 = new StatementFusion(boolean0);
    }

    @Test(timeout = 4000)
    public void test0247() throws Throwable {
        int int0 = 12;
        NodeUtil.precedence(12);
        Node node0 = Node.newNumber(0.0, (-9), 40);
        node0.getDouble();
        Node node1 = NodeUtil.numberNode(0.0, node0);
        Node node2 = ControlFlowAnalysis.getExceptionHandler(node1);
        int int1 = 190;
        Node node3 = new Node(int0, node2, node1, node0, node1, int1, node2.FLAG_ARGUMENTS_UNMODIFIED);
        node3.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test0258() throws Throwable {
        double double0 = (-1197.0);
        Node node0 = null;
        Node node1 = NodeUtil.numberNode((-1197.0), (Node) null);
        node1.addChildrenToBack((Node) null);
    }

    @Test(timeout = 4000)
    public void test0289() throws Throwable {
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        Node node0 = Node.newNumber(0.7, 12, 0);
        Node node1 = NodeUtil.newName((CodingConvention) null, "", node0, "_}OLcxW09Vw<b:K~`|");
        Node node2 = NodeUtil.getArgumentForFunction(node0, node0.LENGTH);
        Node node3 = StatementFusion.fuseExpressionIntoExpression(node1, node2);
        Node node4 = NodeUtil.getLoopCodeBlock(node3);
        Node node5 = NodeUtil.getBestLValueOwner(node4);
        int int0 = 2256;
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = null;
        nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(node5.SYNTHETIC_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test03010() throws Throwable {
        Node node0 = Node.newString((-2753), "", (-2753), (-2753));
        NodeUtil.getStringValue(node0);
        node0.setChangeTime(18);
        node0.removeProp((-2753));
        Node node1 = NodeUtil.getRValueOfLValue(node0);
        node1.copyInformationFromForTree(node0);
        node0.getString();
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test03111() throws Throwable {
        Node node0 = Node.newString(113, "");
        NodeUtil.newExpr(node0);
        Node node1 = null;
        NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test03212() throws Throwable {
        Node node0 = Node.newNumber((-2540.3154012789), 5, 5);
        Node node1 = new Node(107, node0, node0, 107, 1116);
        node1.isVarArgs();
        node0.addChildToBack(node1);
        NodeUtil.isExprCall(node1);
        NodeUtil.allArgsUnescapedLocal(node0);
        NodeUtil.getArrayElementStringValue(node1);
        NodeUtil.isObjectCallMethod(node1, " vj2m]0\"#[1w");
        NodeUtil.Visitor nodeUtil_Visitor0 = null;
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.valueOf(" vj2m]0\"#[1w");
        Object object0 = new Object();
        sourceMap_DetailLevel0.equals(object0);
        NodeUtil.visitPreOrder(node0, nodeUtil_Visitor0, sourceMap_DetailLevel0);
        NodeUtil.isObjectLitKey(node1);
        NodeUtil.isSimpleOperatorType(node0.SIDE_EFFECT_FLAGS);
    }

    @Test(timeout = 4000)
    public void test03513() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isForIn(node0);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        NodeUtil.isForIn(node0);
        NodeUtil.getSourceFile(node0);
        NodeUtil.isExprCall(node0);
        NodeUtil.getNumberValue(node0);
        Node node1 = new Node(107);
        Node node2 = NodeUtil.getBestLValue(node1);
        String string0 = " Calls: ";
        node2.toStringTree();
    }

    @Test(timeout = 4000)
    public void test03614() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getSourceName(node0);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        nodeUtil_NumbericResultPredicate0.apply(node0);
        NodeUtil.isCommutative(29);
        byte[] byteArray0 = new byte[0];
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        NodeUtil.isLatin((String) null);
        NodeUtil.isEmptyBlock(node0);
        NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test03715() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getSourceName(node0);
        Node node1 = NodeUtil.numberNode(0.0, node0);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        NodeUtil.isGetOrSetKey(node1);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
        nodeUtil_NumbericResultPredicate0.equals(exploitAssigns0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate1 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
        Node node3 = peepholeMinimizeConditions0.skipFinallyNodes(node2);
        nodeUtil_NumbericResultPredicate1.apply(node3);
        nodeUtil_NumbericResultPredicate0.apply(node1);
    }

    @Test(timeout = 4000)
    public void test04216() throws Throwable {
        Node node0 = Node.newString(313, "");
        NodeUtil.getLoopCodeBlock(node0);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        NodeUtil.isGetOrSetKey(node0);
        NodeUtil.containsType(node1, node1.IS_DISPATCHER);
    }

    @Test(timeout = 4000)
    public void test04317() throws Throwable {
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        NodeUtil.getStringNumberValue("6^2aU(8*wN9L|W@");
        Compiler compiler0 = new Compiler();
        Scope.Var scope_Var0 = null;
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        Node node0 = null;
        String string0 = "y9&eGH/n:";
        Node node1 = Node.newString(1091, "y9&eGH/n:", 1091, 1630);
        referenceCollectingCallback0.hotSwapScript((Node) null, node1);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = referenceCollectingCallback0.getReferences(scope_Var0);
        ImmutableMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> immutableMap0 = ImmutableMap.of(scope_Var0, referenceCollectingCallback_ReferenceCollection0);
        compiler0.updateGlobalVarReferences(immutableMap0, node1);
        compiler0.getPropertyMap();
    }

    @Test(timeout = 4000)
    public void test04518() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        NodeUtil.getBestLValueName(node0);
        NodeUtil.getPrototypeClassName(node0);
        NodeUtil.constructorCallHasSideEffects(node0);
        ClosureCodingConvention closureCodingConvention0 = null;
        closureCodingConvention0 = new ClosureCodingConvention();
    }

    @Test(timeout = 4000)
    public void test04619() throws Throwable {
        Node node0 = new Node(17);
        NodeUtil.isHoistedFunctionDeclaration(node0);
        NodeUtil.opToStrNoFail(4);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = null;
        nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    }

    @Test(timeout = 4000)
    public void test05020() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node0 = null;
        NodeUtil.isImmutableResult((Node) null);
    }

    @Test(timeout = 4000)
    public void test05121() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = Node.newNumber(1257.8548, 2, 12);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.isEmptyBlock(node1);
        NodeUtil.isForIn(node1);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.getLoopCodeBlock(node0);
        peepholeRemoveDeadCode0.tryFoldWhile((Node) null);
        PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
        peepholeCollectPropertyAssignments0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test05322() throws Throwable {
        Node node0 = Node.newString(10, "_fZ+9+%");
        PeepholeFoldConstants.evaluateComparison((-1044), node0, node0);
        String string0 = "?@{%;&56t6i";
        MockPrintStream mockPrintStream0 = new MockPrintStream("?@{%;&56t6i", "?@{%;&56t6i");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Normalize.parseAndNormalizeTestCode(compiler0, string0);
        ControlFlowAnalysis.getCatchHandlerForBlock(node0);
    }

    @Test(timeout = 4000)
    public void test05623() throws Throwable {
        NodeUtil.opToStrNoFail(21);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node.newString(5731, "+");
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("+");
        int int0 = (-521);
        node0.setType(int0);
    }

    @Test(timeout = 4000)
    public void test05924() throws Throwable {
        String string0 = "3I{%;&56t6i";
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        NodeUtil.newQualifiedNameNode((CodingConvention) jqueryCodingConvention0, "DEGENERATE", node0, "3I{%;&56t6i");
        NodeUtil.getFunctionBody(node0);
        SourceMap.DetailLevel.valueOf(string0);
        NodeUtil.isStatement(node0);
    }

    @Test(timeout = 4000)
    public void test06125() throws Throwable {
        Node node0 = Node.newString(313, "");
        Compiler compiler0 = new Compiler();
        Node node1 = compiler0.parseTestCode("");
        int int0 = (-1003);
        node0.setType(int0);
        node0.replaceChildAfter(node1, node1);
        Node node2 = NodeUtil.getLoopCodeBlock(node0);
        NodeUtil.getBestJSDocInfo(node2);
    }

    @Test(timeout = 4000)
    public void test06226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        node0.wasEmptyNode();
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test06327() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = NodeUtil.getConditionExpression(node0);
        NodeUtil.isPrototypeProperty(node1);
    }

    @Test(timeout = 4000)
    public void test07428() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Node node0 = Node.newString("G@H!&{`(r6rw", 1799, 119);
        NodeUtil.mayHaveSideEffects(node0);
        PeepholeFoldConstants.evaluateComparison(536870912, node0, node0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("$a", "$a");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        String string0 = "com.google.javascript.jscomp.DefaultPassConfig$31";
        Normalize.parseAndNormalizeTestCode(compiler0, string0);
        ControlFlowAnalysis.getCatchHandlerForBlock(node0);
        NodeUtil.isExprCall(node0);
    }

    @Test(timeout = 4000)
    public void test08029() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        double double0 = (-473.0);
        NodeUtil.getStringValue((-473.0));
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        exploitAssigns0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test08230() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(43, node0, node0, node0, node0);
        NodeUtil.isPrototypeProperty(node0);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        node1.setLineno(35);
        NodeUtil.getNumberValue(node1);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
        NodeUtil.getBestLValue((Node) null);
        String string0 = " Calls: ";
        String string1 = node1.toStringTree();
        SourceMap.DetailLevel.valueOf(string1);
    }

    @Test(timeout = 4000)
    public void test08331() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.isPrototypeProperty(node0);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        node0.setLineno(35);
        NodeUtil.getNumberValue(node0);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
        NodeUtil.getBestLValue((Node) null);
        String string0 = " Calls: ";
        String string1 = node0.toStringTree();
        SourceMap.DetailLevel.valueOf(string1);
    }

    @Test(timeout = 4000)
    public void test09332() throws Throwable {
        Node node0 = null;
        Node node1 = NodeUtil.getArgumentForFunction((Node) null, (-1609));
        NodeUtil.getCatchBlock(node1);
    }

    @Test(timeout = 4000)
    public void test09433() throws Throwable {
        NodeUtil.isValidQualifiedName("'PFYaOwYg3'qp~Rj");
        String string0 = "-infinity";
        SyntheticAst syntheticAst0 = new SyntheticAst("-infinity");
        Compiler compiler0 = new Compiler();
        compiler0.getSourceFileByName("-infinity");
        Charset.defaultCharset();
    }

    @Test(timeout = 4000)
    public void test10634() throws Throwable {
        PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
        int int0 = (-522);
        Node[] nodeArray0 = new Node[1];
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        tightenTypes0.getTopScope();
        TightenTypes.ConcreteScope tightenTypes_ConcreteScope0 = tightenTypes0.new ConcreteScope((TightenTypes.ConcreteScope) null);
        tightenTypes_ConcreteScope0.getRootNode();
        com.google.javascript.rhino.Node node0;
        node0 = NodeUtil.getFunctionParameters((Node) null);
        assertTrue(true ? node0.equals((Node) null) : true);
        NodeUtil.getPrototypeClassName(node0);
    }
}
