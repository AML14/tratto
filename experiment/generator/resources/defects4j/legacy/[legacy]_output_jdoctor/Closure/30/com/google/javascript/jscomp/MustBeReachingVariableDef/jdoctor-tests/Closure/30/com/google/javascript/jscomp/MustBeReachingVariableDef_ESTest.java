/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 21:56:06 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.MustBeReachingVariableDef;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MustBeReachingVariableDef_ESTest extends MustBeReachingVariableDef_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("arguments");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = new Scope(node0, compiler0);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        SyntheticAst syntheticAst0 = new SyntheticAst("arguments");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        scope0.declare("arguments", node0, (JSType) null, compilerInput0);
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = mustBeReachingVariableDef0.createEntryLattice();
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef1 = mustBeReachingVariableDef0.join(mustBeReachingVariableDef_MustDef0, mustBeReachingVariableDef_MustDef0);
        mustBeReachingVariableDef_MustDef1.equals((Object) mustBeReachingVariableDef_MustDef0);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = new MustBeReachingVariableDef.MustDef();
        Object object0 = new Object();
        boolean boolean0 = mustBeReachingVariableDef_MustDef0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("ar:=guments");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = new Scope(node0, compiler0);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        SyntheticAst syntheticAst0 = new SyntheticAst("ar:=guments");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        scope0.declare("ar:=guments", node0, (JSType) null, compilerInput0);
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = mustBeReachingVariableDef0.createEntryLattice();
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef1 = mustBeReachingVariableDef0.createInitialEstimateLattice();
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef2 = mustBeReachingVariableDef0.join(mustBeReachingVariableDef_MustDef0, mustBeReachingVariableDef_MustDef1);
        mustBeReachingVariableDef_MustDef2.equals((Object) mustBeReachingVariableDef_MustDef0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("ar:=guments");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = new Scope(node0, compiler0);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        SyntheticAst syntheticAst0 = new SyntheticAst("ar:=guments");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        scope0.declare("ar:=guments", node0, (JSType) null, compilerInput0);
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = mustBeReachingVariableDef0.createEntryLattice();
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef1 = mustBeReachingVariableDef0.createInitialEstimateLattice();
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef2 = mustBeReachingVariableDef0.join(mustBeReachingVariableDef_MustDef0, mustBeReachingVariableDef_MustDef1);
        mustBeReachingVariableDef_MustDef2.equals((Object) mustBeReachingVariableDef_MustDef1);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascriptjscomp.DefaultPassConfig$31");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = new Scope(node0, compiler0);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascriptjscomp.DefaultPassConfig$31");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        scope0.declare("com.google.javascriptjscomp.DefaultPassConfig$31", node0, (JSType) null, compilerInput0);
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = mustBeReachingVariableDef0.createEntryLattice();
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef1 = mustBeReachingVariableDef0.createInitialEstimateLattice();
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef2 = mustBeReachingVariableDef0.join(mustBeReachingVariableDef_MustDef1, mustBeReachingVariableDef_MustDef0);
        mustBeReachingVariableDef_MustDef1.equals((Object) mustBeReachingVariableDef_MustDef0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascriptjscomp.DefaultPassConfig$31");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = new Scope(node0, compiler0);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascriptjscomp.DefaultPassConfig$31");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        scope0.declare("com.google.javascriptjscomp.DefaultPassConfig$31", node0, (JSType) null, compilerInput0);
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = mustBeReachingVariableDef0.createEntryLattice();
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef1 = mustBeReachingVariableDef0.createInitialEstimateLattice();
        MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef2 = mustBeReachingVariableDef0.join(mustBeReachingVariableDef_MustDef1, mustBeReachingVariableDef_MustDef0);
        mustBeReachingVariableDef_MustDef2.equals((Object) mustBeReachingVariableDef_MustDef0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("1?xQ.Wk>C:W", "1?xQ.Wk>C:W");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = new Scope(node0, compiler0);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        mustBeReachingVariableDef0.analyze();
        Node node1 = mustBeReachingVariableDef0.getDef("1?xQ.Wk>C:W", node0);
    }

    @Test(timeout = 4000)
    public void test177() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("arguments", "arguments");
        Node node0 = Node.newString(113, "arguments");
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        Scope scope0 = new Scope(node0, compiler0);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        mustBeReachingVariableDef0.analyze();
    }

    @Test(timeout = 4000)
    public void test188() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("missing pop2: ");
        Node node1 = new Node(115, node0, node0, node0, node0);
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
        Scope scope0 = new Scope(node0, compiler0);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        mustBeReachingVariableDef0.analyze();
    }

    @Test(timeout = 4000)
    public void test219() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("arHOguments");
        Node node1 = new Node(118, node0, node0, node0);
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, false);
        Scope scope0 = new Scope(node1, compiler0);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        mustBeReachingVariableDef0.analyze();
    }

    @Test(timeout = 4000)
    public void test3010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("1?xQ.Wk>C:W", "1?xQ.Wk>C:W");
        Scope scope0 = new Scope(node0, compiler0);
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        SyntheticAst syntheticAst0 = new SyntheticAst("1?xQ.Wk>C:W");
        InputId inputId0 = node0.getInputId();
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, inputId0, true);
        scope0.declare("1?xQ.Wk>C:W", node0, (JSType) null, compilerInput0);
        mustBeReachingVariableDef0.analyze();
        Node node1 = mustBeReachingVariableDef0.getDef("1?xQ.Wk>C:W", node0);
        node1.isLabelName();
    }

    @Test(timeout = 4000)
    public void test3111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("1?xQ.Wk>C:W", "1?xQ.Wk>C:W");
        Scope scope0 = new Scope(node0, compiler0);
        ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
        MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
        SyntheticAst syntheticAst0 = new SyntheticAst("1?xQ.Wk>C:W");
        InputId inputId0 = node0.getInputId();
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, inputId0, true);
        scope0.declare("1?xQ.Wk>C:W", node0, (JSType) null, compilerInput0);
        mustBeReachingVariableDef0.analyze();
        boolean boolean0 = mustBeReachingVariableDef0.dependsOnOuterScopeVars("1?xQ.Wk>C:W", node0);
    }
}
