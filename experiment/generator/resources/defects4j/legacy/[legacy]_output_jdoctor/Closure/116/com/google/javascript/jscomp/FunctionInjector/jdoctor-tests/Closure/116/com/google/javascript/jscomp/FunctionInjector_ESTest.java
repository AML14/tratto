/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 05:38:32 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.LinkedListMultimap;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.rhino.Node;
import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionInjector_ESTest extends FunctionInjector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        compiler0.parseSyntheticCode("eM6;%l)8fT", "$VALUES");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        functionInjector0.maybePrepareCall((Node) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        compiler0.parseSyntheticCode("$VALUES", "$VALUES");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        compiler0.parseSyntheticCode("lastIndexOf", "lastIndexOf");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        compiler0.parseSyntheticCode("eM6;%l)8fT", "$VALUES");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        JSModule jSModule0 = new JSModule("");
        Node node0 = Node.newString("");
        HashSet<FunctionInjector.Reference> hashSet0 = new HashSet<FunctionInjector.Reference>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
        hashSet0.addAll(immutableList0);
        boolean boolean0 = functionInjector0.inliningLowersCost(jSModule0, node0, hashSet0, compilerOptions0.aliasableStrings, true, false);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        ArrayDeque<FunctionInjector.Reference> arrayDeque0 = new ArrayDeque<FunctionInjector.Reference>();
        boolean boolean0 = functionInjector0.inliningLowersCost((JSModule) null, (Node) null, arrayDeque0, (Set<String>) null, true, true);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, false);
        LinkedListMultimap<String, Object> linkedListMultimap0 = LinkedListMultimap.create();
        Set<String> set0 = linkedListMultimap0.keySet();
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, set0, false, false);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        Set<String> set0 = gatherRawExports0.getExportedVariableNames();
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, set0, true, true);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        JSModule jSModule0 = new JSModule("");
        Node node0 = Node.newString("");
        HashSet<FunctionInjector.Reference> hashSet0 = new HashSet<FunctionInjector.Reference>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
        hashSet0.addAll(immutableList0);
        functionInjector0.inliningLowersCost(jSModule0, node0, hashSet0, compilerOptions0.aliasableStrings, true, false);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        JSModule jSModule0 = new JSModule("3h`");
        Node node0 = Node.newString("3h`");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
        functionInjector0.inliningLowersCost(jSModule0, node0, immutableList0, compilerOptions0.stripNameSuffixes, true, false);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        JSModule jSModule0 = new JSModule("");
        Node node0 = Node.newString("");
        HashSet<FunctionInjector.Reference> hashSet0 = new HashSet<FunctionInjector.Reference>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        JSModule jSModule1 = new JSModule("");
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule1, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
        hashSet0.addAll(immutableList0);
        functionInjector0.inliningLowersCost(jSModule0, node0, hashSet0, compilerOptions0.aliasableStrings, true, false);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        HashSet<String> hashSet0 = new HashSet<String>();
        functionInjector0.setKnownConstants(hashSet0);
        hashSet0.add("?x5F");
        functionInjector0.setKnownConstants(hashSet0);
    }
}
