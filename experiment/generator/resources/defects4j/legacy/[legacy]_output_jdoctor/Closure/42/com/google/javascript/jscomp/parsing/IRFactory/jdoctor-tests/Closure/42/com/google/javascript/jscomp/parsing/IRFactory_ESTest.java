/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 02:09:07 GMT 2023
 */
package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.ArrayComprehensionLoop;
import com.google.javascript.rhino.head.ast.ArrayLiteral;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.Block;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ConditionalExpression;
import com.google.javascript.rhino.head.ast.ContinueStatement;
import com.google.javascript.rhino.head.ast.DoLoop;
import com.google.javascript.rhino.head.ast.ElementGet;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.ExpressionStatement;
import com.google.javascript.rhino.head.ast.ForLoop;
import com.google.javascript.rhino.head.ast.FunctionCall;
import com.google.javascript.rhino.head.ast.FunctionNode;
import com.google.javascript.rhino.head.ast.Label;
import com.google.javascript.rhino.head.ast.LabeledStatement;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NewExpression;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.ObjectLiteral;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.ast.ParenthesizedExpression;
import com.google.javascript.rhino.head.ast.PropertyGet;
import com.google.javascript.rhino.head.ast.RegExpLiteral;
import com.google.javascript.rhino.head.ast.ReturnStatement;
import com.google.javascript.rhino.head.ast.Scope;
import com.google.javascript.rhino.head.ast.StringLiteral;
import com.google.javascript.rhino.head.ast.SwitchCase;
import com.google.javascript.rhino.head.ast.ThrowStatement;
import com.google.javascript.rhino.head.ast.UnaryExpression;
import com.google.javascript.rhino.head.ast.VariableDeclaration;
import com.google.javascript.rhino.head.ast.WhileLoop;
import com.google.javascript.rhino.head.ast.WithStatement;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class IRFactory_ESTest extends IRFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ConditionalExpression conditionalExpression0 = new ConditionalExpression(5);
        astRoot0.addChild(conditionalExpression0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "error reporter", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("-iUJ", true);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression();
        astRoot0.addChildrenToBack(parenthesizedExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, true);
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "K-&", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        DoLoop doLoop0 = new DoLoop(2);
        astRoot0.addChildrenToBack(doLoop0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, (String) null, config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        EmptyExpression emptyExpression0 = new EmptyExpression(242, (-849));
        astRoot0.addChild(emptyExpression0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "i{vwlid assignmePt 'aret", config0, (ErrorReporter) null);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        EmptyExpression emptyExpression0 = new EmptyExpression(242, (-849));
        astRoot0.addChild(emptyExpression0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "i{vwlid assignmePt 'aret", config0, (ErrorReporter) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(21, 10);
        astRoot0.addChildrenToBack(arrayComprehensionLoop0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, true);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, (String) null, config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ElementGet elementGet0 = new ElementGet();
        astRoot0.addChildrenToBack(elementGet0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "sp^%6,!5z ", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ObjectProperty objectProperty0 = new ObjectProperty(1970);
        astRoot0.addChildrenToBack(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, ".K>+v?gaX", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        WithStatement withStatement0 = new WithStatement();
        astRoot0.addChild(withStatement0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, treeSet0, false, config_LanguageMode0, false);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "identifier is a reserved word", config0, toolErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        ForLoop forLoop0 = new ForLoop(24);
        astRoot0.addChild(forLoop0);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "n", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        ObjectProperty objectProperty0 = new ObjectProperty(21);
        objectProperty0.setIsSetter();
        objectLiteral0.addElement(objectProperty0);
        astRoot0.addChildrenToBack(objectLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "[zw3U#1oc43\"Rk", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LabeledStatement labeledStatement0 = new LabeledStatement(15);
        astRoot0.addChild(labeledStatement0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Label label0 = new Label((-1845), 20);
        labeledStatement0.addLabel(label0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "error reporter", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("-iUJ", true);
        NewExpression newExpression0 = new NewExpression(22, 0);
        astRoot0.addChild(newExpression0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "-iUJ", config0, toolErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        AstRoot astRoot0 = new AstRoot(1900);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NumberLiteral numberLiteral0 = new NumberLiteral((double) 54);
        astRoot0.addChildrenToBack(numberLiteral0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "fs3><Jkx .IDUFs", config0, errorCollector0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        AstRoot astRoot0 = new AstRoot(1900);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NumberLiteral numberLiteral0 = new NumberLiteral((double) 54);
        astRoot0.addChildrenToBack(numberLiteral0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "fs3><Jkx .IDUFs", config0, errorCollector0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        AstRoot astRoot0 = new AstRoot(1900);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NumberLiteral numberLiteral0 = new NumberLiteral((double) 54);
        astRoot0.addChildrenToBack(numberLiteral0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "fs3><Jkx .IDUFs", config0, errorCollector0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        AstRoot astRoot0 = new AstRoot(1900);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NumberLiteral numberLiteral0 = new NumberLiteral((double) 54);
        astRoot0.addChildrenToBack(numberLiteral0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "fs3><Jkx .IDUFs", config0, errorCollector0);
        node0.isScript();
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ExpressionStatement expressionStatement0 = new ExpressionStatement(astRoot0, true);
        astRoot0.addChild(expressionStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "XU_/q`&E[n1^#", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        WhileLoop whileLoop0 = new WhileLoop(20);
        astRoot0.addChild(whileLoop0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "v(p,^W~`a", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block(8);
        astRoot0.addChildrenToBack(block0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "", config0, (ErrorReporter) null);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block(8);
        astRoot0.addChildrenToBack(block0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "", config0, (ErrorReporter) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block(8);
        astRoot0.addChildrenToBack(block0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "", config0, (ErrorReporter) null);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("F?6K=", true);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        UnaryExpression unaryExpression0 = new UnaryExpression(0, 16, astRoot0);
        astRoot0.addChildrenToBack(unaryExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "F?6K=", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ThrowStatement throwStatement0 = new ThrowStatement(14, astRoot0);
        astRoot0.addChildrenToBack(throwStatement0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("invalid increment target", true);
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "v(p,^W~`a", config0, toolErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        FunctionNode functionNode0 = new FunctionNode(1);
        astRoot0.addChildrenToBack(functionNode0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "-iUJ", config0, toolErrorReporter0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        FunctionNode functionNode0 = new FunctionNode(1);
        astRoot0.addChildrenToBack(functionNode0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "-iUJ", config0, toolErrorReporter0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        FunctionNode functionNode0 = new FunctionNode(1);
        astRoot0.addChildrenToBack(functionNode0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "-iUJ", config0, toolErrorReporter0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(1, 2, token_CommentType0, "Unsupported syntax: ");
        astRoot0.addComment(comment0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, treeSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Unsupported syntax: ", config0, toolErrorReporter0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(1, 2, token_CommentType0, "Unsupported syntax: ");
        astRoot0.addComment(comment0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, treeSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Unsupported syntax: ", config0, toolErrorReporter0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Token.CommentType token_CommentType0 = Token.CommentType.LINE;
        Comment comment0 = new Comment(14, 6, token_CommentType0, "E");
        astRoot0.addComment(comment0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("E", true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "E", config0, errorCollector0);
        node0.isFromExterns();
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Token.CommentType token_CommentType0 = Token.CommentType.LINE;
        Comment comment0 = new Comment(14, 6, token_CommentType0, "E");
        astRoot0.addComment(comment0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("E", true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "E", config0, errorCollector0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Token.CommentType token_CommentType0 = Token.CommentType.LINE;
        Comment comment0 = new Comment(14, 6, token_CommentType0, "E");
        astRoot0.addComment(comment0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("E", true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "E", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
        Comment comment0 = new Comment(14, 6, token_CommentType0, "E");
        astRoot0.addComment(comment0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("E", true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "E", config0, errorCollector0);
        node0.isFromExterns();
    }

    @Test(timeout = 4000)
    public void test2133() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
        Comment comment0 = new Comment(14, 6, token_CommentType0, "E");
        astRoot0.addComment(comment0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("E", true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "E", config0, errorCollector0);
        node0.isScript();
    }

    @Test(timeout = 4000)
    public void test2134() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
        Comment comment0 = new Comment(14, 6, token_CommentType0, "E");
        astRoot0.addComment(comment0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("E", true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "E", config0, errorCollector0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test2235() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral(10);
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(9, 44, token_CommentType0, "CONTINUE");
        objectLiteral0.setJsDocNode(comment0);
        astRoot0.addChildrenToBack(objectLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "CONTINUE", config0, toolErrorReporter0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test2236() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral(10);
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(9, 44, token_CommentType0, "CONTINUE");
        objectLiteral0.setJsDocNode(comment0);
        astRoot0.addChildrenToBack(objectLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "CONTINUE", config0, toolErrorReporter0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2237() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral(10);
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(9, 44, token_CommentType0, "CONTINUE");
        objectLiteral0.setJsDocNode(comment0);
        astRoot0.addChildrenToBack(objectLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "CONTINUE", config0, toolErrorReporter0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test2338() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Name name0 = new Name(35, 3, "JO");
        name0.setLineno(1488);
        PropertyGet propertyGet0 = new PropertyGet(name0, name0, 8);
        astRoot0.addChildrenToBack(propertyGet0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "JO", config0, errorCollector0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test2339() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Name name0 = new Name(35, 3, "JO");
        name0.setLineno(1488);
        PropertyGet propertyGet0 = new PropertyGet(name0, name0, 8);
        astRoot0.addChildrenToBack(propertyGet0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "JO", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2440() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        AstRoot astRoot0 = new AstRoot(2294);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "\n * @", config0, (ErrorReporter) null);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test2441() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        AstRoot astRoot0 = new AstRoot(2294);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "\n * @", config0, (ErrorReporter) null);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test2442() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        AstRoot astRoot0 = new AstRoot(2294);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "\n * @", config0, (ErrorReporter) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2543() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("-iUJ", true);
        Scope scope0 = new Scope(9, 16);
        scope0.addChildToFront(astRoot0);
        astRoot0.addChild(scope0);
        Locale locale0 = Locale.CANADA_FRENCH;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "-iUJ", config0, toolErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test2644() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        ObjectProperty objectProperty0 = new ObjectProperty(22, 22);
        objectLiteral0.addElement(objectProperty0);
        astRoot0.addChildrenToBack(objectLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, (String) null, config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test2745() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayLiteral arrayLiteral0 = new ArrayLiteral(2);
        SwitchCase switchCase0 = new SwitchCase(1);
        switchCase0.addStatement(arrayLiteral0);
        astRoot0.addChildrenToBack(switchCase0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "destructuring assignment forbidden", config0, toolErrorReporter0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test2846() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayLiteral arrayLiteral0 = new ArrayLiteral(2);
        arrayLiteral0.addElement(astRoot0);
        astRoot0.addChildrenToBack(arrayLiteral0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("M3Yq{q_", true);
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "M3Yq{q_", config0, toolErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test2947() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        BreakStatement breakStatement0 = new BreakStatement(0);
        astRoot0.addChild(breakStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "9u4*PA}=+2o55vgrtv)", config0, errorCollector0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test3048() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ContinueStatement continueStatement0 = new ContinueStatement(1, 15);
        astRoot0.addChild(continueStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "", config0, errorCollector0);
        node0.isFromExterns();
    }

    @Test(timeout = 4000)
    public void test3049() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ContinueStatement continueStatement0 = new ContinueStatement(1, 15);
        astRoot0.addChild(continueStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "", config0, errorCollector0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test3150() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Name name0 = new Name((-652));
        ContinueStatement continueStatement0 = new ContinueStatement(name0);
        astRoot0.addChild(continueStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "3BARk ", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test3251() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Name name0 = new Name(51, 54);
        name0.setIdentifier("vp,^W~`a");
        FunctionNode functionNode0 = new FunctionNode(14, name0);
        functionNode0.addParam(name0);
        astRoot0.addChildrenToBack(functionNode0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "vp,^W~`a", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3352() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LabeledStatement labeledStatement0 = new LabeledStatement(15);
        astRoot0.addChild(labeledStatement0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "error reporter", config0, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test3453() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Name name0 = new Name(51, 54);
        name0.setIdentifier("extends");
        FunctionNode functionNode0 = new FunctionNode(20, name0);
        astRoot0.addChildrenToBack(functionNode0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "extends", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3554() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        ObjectProperty objectProperty0 = new ObjectProperty((-633));
        objectLiteral0.addElement(objectProperty0);
        astRoot0.addChildrenToBack(objectLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("|:P-Xb!DDXgcB<-m%s", false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "|:P-Xb!DDXgcB<-m%s", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3655() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral(15);
        regExpLiteral0.setValue("^xUb$V!");
        astRoot0.addChildrenToBack(regExpLiteral0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "^xUb$V!", config0, errorCollector0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test3756() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ReturnStatement returnStatement0 = new ReturnStatement();
        astRoot0.addChildrenToBack(returnStatement0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "x.n6yg\t", config0, toolErrorReporter0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test3857() throws Throwable {
        ReturnStatement returnStatement0 = new ReturnStatement();
        AstRoot astRoot0 = new AstRoot(23);
        astRoot0.addChildrenToBack(returnStatement0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        returnStatement0.setReturnValue(astRoot0);
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, (String) null, config0, toolErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test3958() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        StringLiteral stringLiteral0 = new StringLiteral(2);
        stringLiteral0.setValue("v");
        astRoot0.addChildrenToBack(stringLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "v", config0, toolErrorReporter0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test4059() throws Throwable {
        AstRoot astRoot0 = new AstRoot(1875);
        SwitchCase switchCase0 = new SwitchCase(2, 4095);
        switchCase0.setExpression(astRoot0);
        astRoot0.addChildrenToBack(switchCase0);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Set<String> set0 = jSDocInfo0.getSuppressions();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "c5", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4160() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SwitchCase switchCase0 = new SwitchCase();
        astRoot0.addChildrenToBack(switchCase0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Unsupported syntax: ", config0, errorCollector0);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test4261() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration();
        astRoot0.addChild(variableDeclaration0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Z.+[wt<8^]GI_2~~", config0, (ErrorReporter) null);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test4362() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration();
        astRoot0.addChild(variableDeclaration0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "}M3Yq{Pq_", config0, (ErrorReporter) null);
        node0.getLength();
    }

    @Test(timeout = 4000)
    public void test4463() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("-iUJ", false);
        Locale locale0 = Locale.CANADA_FRENCH;
        FunctionCall functionCall0 = new FunctionCall(8, 14);
        astRoot0.addChild(functionCall0);
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "-iUJ", config0, toolErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test4564() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
        ExpressionStatement expressionStatement0 = new ExpressionStatement(26, 4);
        astRoot0.addChild(expressionStatement0);
        Locale locale0 = Locale.CANADA_FRENCH;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "", config0, toolErrorReporter0);
    }
}
