/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:14:48 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        Logger logger0 = Logger.getGlobal();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        Node node0 = compiler0.parseSyntheticCode("bn\"z3-tI50O^M", "bn\"z3-tI50O^M");
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXV", (-1), (-1));
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXV", (-1), (-1));
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXV", (-1), (-1));
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        Node node0 = new Node((-1701), (-1701), (-1701));
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "m+DEB*@?n");
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Node node0 = new Node(108);
        NodeUtil.getArgumentForCallOrNew(node0, (-1784));
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Node node0 = Node.newNumber(1241.5603038030308);
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        Node node0 = new Node(107);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        Node node0 = new Node(11);
        NodeUtil.getPrototypePropertyName(node0);
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        Node node0 = new Node(104, 104, 104);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Node node0 = new Node(104, 104, 104);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Node node0 = Node.newNumber(Double.NaN);
        NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Node node0 = Node.newString(2746, "[Tq+(}`&.m1wg,5[y");
        boolean boolean0 = NodeUtil.containsCall(node0);
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "Invalid attempt to remove node: ", (Node) null, "Invalid attempt to remove node: ");
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        NodeUtil.getArgumentForFunction(node0, 4);
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        NodeUtil.isVarArgsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        Node node0 = Node.newString(30, "arguments");
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        Node node1 = NodeUtil.getFunctionBody(node0);
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        Node node0 = Node.newNumber(1732.47788);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        Node node0 = Node.newNumber(1732.47788);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        Node node0 = new Node(26, 26, (-6));
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        Node node0 = new Node(100);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        Node node0 = new Node(101);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        NodeUtil.getExpressionBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        NodeUtil.getExpressionBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test02428() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        NodeUtil.getExpressionBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03329() throws Throwable {
        Node node0 = new Node(89);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getBooleanValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test03630() throws Throwable {
        Node node0 = Node.newString(67, "%=");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "NaN", node0);
        NodeUtil.getExpressionBooleanValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test03631() throws Throwable {
        Node node0 = Node.newString(67, "%=");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "NaN", node0);
        NodeUtil.getExpressionBooleanValue(node1);
    }

    @Test(timeout = 4000)
    public void test03732() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 8, (-2187));
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03733() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 8, (-2187));
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03734() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 8, (-2187));
        String string0 = NodeUtil.getStringValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03835() throws Throwable {
        Node node0 = Node.newString("1l");
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03936() throws Throwable {
        Node node0 = Node.newNumber(1241.5603038030308);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04037() throws Throwable {
        Node node0 = Node.newString(41, "k");
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04138() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04239() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04240() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test04341() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04442() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "iD_gCF", 106, 106);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04443() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "iD_gCF", 106, 106);
        String string0 = NodeUtil.getStringValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "iD_gCF", 106, 106);
        String string0 = NodeUtil.getStringValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04445() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "iD_gCF", 106, 106);
        String string0 = NodeUtil.getStringValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test04546() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 94, 94);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04547() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 94, 94);
        String string0 = NodeUtil.getStringValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04548() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 94, 94);
        String string0 = NodeUtil.getStringValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test04549() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 94, 94);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04650() throws Throwable {
        Node node0 = Node.newNumber((double) 17);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04751() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "PRIVATE", 3292, 3292);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test04752() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "PRIVATE", 3292, 3292);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04753() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "PRIVATE", 3292, 3292);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04754() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "PRIVATE", 3292, 3292);
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04855() throws Throwable {
        Node node0 = Node.newString(114, "rI");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04956() throws Throwable {
        Node node0 = Node.newNumber((double) 57, 57, (-48));
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05057() throws Throwable {
        Node node0 = new Node(41);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05158() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05259() throws Throwable {
        Node node0 = Node.newString(44, "^=");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05360() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test05361() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05362() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05463() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 16, (-3788));
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05464() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 16, (-3788));
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05465() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 16, (-3788));
        Double double0 = NodeUtil.getNumberValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test05566() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "try ", (-46), 117);
        node0.addChildrenToBack(node0);
        String string0 = NodeUtil.getFunctionName(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test05567() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "try ", (-46), 117);
        node0.addChildrenToBack(node0);
        String string0 = NodeUtil.getFunctionName(node0);
    }

    @Test(timeout = 4000)
    public void test05668() throws Throwable {
        Node node0 = Node.newString(77, "<,R3,Np^", 39, 39);
        Node node1 = new Node(105, node0, node0, node0, node0, (-2094), (-3));
        Node node2 = new Node((-37), node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
    }

    @Test(timeout = 4000)
    public void test05669() throws Throwable {
        Node node0 = Node.newString(77, "<,R3,Np^", 39, 39);
        Node node1 = new Node(105, node0, node0, node0, node0, (-2094), (-3));
        Node node2 = new Node((-37), node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
    }

    @Test(timeout = 4000)
    public void test05770() throws Throwable {
        Node node0 = Node.newNumber(1241.5603038030308);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test05871() throws Throwable {
        Node node0 = Node.newString("1l");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test05972() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test06073() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test06174() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test06275() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test06376() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = NodeUtil.newName(closureCodingConvention0, "p('e]9@Gp7Gpu", node0, "");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test06377() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = NodeUtil.newName(closureCodingConvention0, "p('e]9@Gp7Gpu", node0, "");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test06378() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = NodeUtil.newName(closureCodingConvention0, "p('e]9@Gp7Gpu", node0, "");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test06479() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 94, 94);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test06480() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 94, 94);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test06481() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 94, 94);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test06482() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 94, 94);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test06583() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test06684() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test06785() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test06886() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test06987() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(85, node0, node0, node0, node0, 48, 8);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test07088() throws Throwable {
        Node node0 = Node.newString(11, "Uw*{eDIZ&");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test07189() throws Throwable {
        Node node0 = new Node(12, 12, 12);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test07290() throws Throwable {
        Node node0 = new Node(14, 14, 14);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test07391() throws Throwable {
        Node node0 = new Node(17, (-1953), 37);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test07492() throws Throwable {
        Node node0 = new Node(18, 153, 18);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test07593() throws Throwable {
        Node node0 = new Node(25);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test07694() throws Throwable {
        Node node0 = Node.newString(19, "c!7klT78fg");
        Vector<String> vector0 = new Vector<String>();
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.withExplicitOrder((List<String>) vector0);
        Node node1 = new Node(27, node0, node0, node0, 32, 32);
        NodeUtil.isValidDefineValue(node1, immutableSortedSet0);
    }

    @Test(timeout = 4000)
    public void test07795() throws Throwable {
        Node node0 = new Node(28, 2, 42);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test07896() throws Throwable {
        Node node0 = new Node(2770);
        Node node1 = new Node(29, node0, node0, node0, node0, 1856, 2);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    }

    @Test(timeout = 4000)
    public void test07997() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test08098() throws Throwable {
        Node node0 = new Node(31);
        Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(iterator0).hasNext();
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterator<? extends String>) iterator0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSortedSet0);
    }

    @Test(timeout = 4000)
    public void test08199() throws Throwable {
        Node node0 = Node.newString(32, "OR ryX] \n");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test082100() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$10", 76, 76);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test082101() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$10", 76, 76);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test082102() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$10", 76, 76);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test082103() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$10", 76, 76);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test082104() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$10", 76, 76);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test083105() throws Throwable {
        Node node0 = Node.newString(35, "Uw*{eDIZ&");
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("GETELEM Uw*{eDIZ&\n", "AK{", ">>");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test084106() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXV", (-1), (-1));
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test084107() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXV", (-1), (-1));
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        node0.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test084108() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXV", (-1), (-1));
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test085109() throws Throwable {
        Node node0 = Node.newNumber((double) 14);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test086110() throws Throwable {
        Node node0 = Node.newString("");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test087111() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test088112() throws Throwable {
        Node node0 = new Node(100);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Node node1 = new Node(42, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    }

    @Test(timeout = 4000)
    public void test089113() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test090114() throws Throwable {
        Node node0 = Node.newString(44, "toStr[jig");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test091115() throws Throwable {
        Node node0 = new Node(45, 45, (-6));
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test092116() throws Throwable {
        Node node0 = new Node(46);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test093117() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "rNyecV2~b", 49, (-9));
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("IXV", "rNyecV2~b", "IXV");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test093118() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "rNyecV2~b", 49, (-9));
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("IXV", "rNyecV2~b", "IXV");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test094119() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "zXGQ6R[X!B *I&lY*Mh", "H(qb585z`v+&gM9|+");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test095120() throws Throwable {
        Node node0 = new Node(61);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test096121() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "zXGQ6R[X!B *I&lY*Mh", "H(qb585z`v+&gM9|+");
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test097122() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
    }

    @Test(timeout = 4000)
    public void test098123() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
    }

    @Test(timeout = 4000)
    public void test099124() throws Throwable {
        Node node0 = new Node(11);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test100125() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
    }

    @Test(timeout = 4000)
    public void test101126() throws Throwable {
        Node node0 = Node.newString(13, "Inciniey");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test102127() throws Throwable {
        Node node0 = new Node(14);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test103128() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
    }

    @Test(timeout = 4000)
    public void test104129() throws Throwable {
        Node node0 = new Node(16);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test105130() throws Throwable {
        Node node0 = Node.newString(126, "");
        Node node1 = new Node(17, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test106131() throws Throwable {
        Node node0 = new Node(18, 18, 18);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test107132() throws Throwable {
        Node node0 = Node.newString(19, "FNHS[WTZWSDlN|");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test108133() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
    }

    @Test(timeout = 4000)
    public void test109134() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
    }

    @Test(timeout = 4000)
    public void test110135() throws Throwable {
        Node node0 = new Node(23, 23, 23);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test111136() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
    }

    @Test(timeout = 4000)
    public void test112137() throws Throwable {
        Node node0 = new Node(25);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test113138() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
    }

    @Test(timeout = 4000)
    public void test114139() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    }

    @Test(timeout = 4000)
    public void test115140() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
    }

    @Test(timeout = 4000)
    public void test116141() throws Throwable {
        Node node0 = new Node(2770);
        Node node1 = new Node(29, node0, node0, node0, node0, 1856, 2);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test117142() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    }

    @Test(timeout = 4000)
    public void test118143() throws Throwable {
        Node node0 = new Node(31);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test119144() throws Throwable {
        Node node0 = new Node(32, 51, (-3100));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test120145() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test120146() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test120147() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test120148() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test121149() throws Throwable {
        Node node0 = Node.newString(104, ")");
        Node node1 = new Node(34, node0, node0, node0, (-2010), 29);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node1, predicate0);
    }

    @Test(timeout = 4000)
    public void test122150() throws Throwable {
        Node node0 = new Node(81);
        Node node1 = new Node(36, node0, node0, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test123151() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    }

    @Test(timeout = 4000)
    public void test124152() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
    }

    @Test(timeout = 4000)
    public void test125153() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    }

    @Test(timeout = 4000)
    public void test126154() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test127155() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    }

    @Test(timeout = 4000)
    public void test128156() throws Throwable {
        Node node0 = Node.newString(48, "y7cX^k9JL\u0003-MT[V/");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test129157() throws Throwable {
        Node node0 = new Node(112);
        Node node1 = new Node(49, node0, node0, node0, node0, 256, 28);
        NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test130158() throws Throwable {
        Node node0 = Node.newString(50, "catch(");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test131159() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    }

    @Test(timeout = 4000)
    public void test132160() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(53);
    }

    @Test(timeout = 4000)
    public void test133161() throws Throwable {
        Node node0 = new Node(54, 54, 54);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test134162() throws Throwable {
        Node node0 = new Node(55);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test135163() throws Throwable {
        Node node0 = Node.newString(56, "+=XL");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test136164() throws Throwable {
        Node node0 = Node.newString(57, "exe");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test137165() throws Throwable {
        Node node0 = new Node(58, 43, 43);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test138166() throws Throwable {
        Node node0 = new Node(59);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test139167() throws Throwable {
        Node node0 = Node.newString(60, "NodeUtil$VarCollector");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test140168() throws Throwable {
        Node node0 = new Node(61, (-61), 61);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test141169() throws Throwable {
        Node node0 = new Node(62, 62, 62);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test142170() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    }

    @Test(timeout = 4000)
    public void test143171() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    }

    @Test(timeout = 4000)
    public void test144172() throws Throwable {
        Node node0 = Node.newString(65, "FNHS[WTZWSDlNj");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test145173() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test146174() throws Throwable {
        Node node0 = new Node(67);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test147175() throws Throwable {
        Node node0 = Node.newString(68, "nL");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test148176() throws Throwable {
        Node node0 = Node.newString(69, "EXTn8RS");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test149177() throws Throwable {
        Node node0 = Node.newString(71, "NodeUtil$VarCollector");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test150178() throws Throwable {
        Node node0 = new Node(72, 72, 72);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test151179() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test152180() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test153181() throws Throwable {
        Node node0 = new Node(75, 75, (-1763));
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test154182() throws Throwable {
        Node node0 = Node.newString(76, "FNHS[WTZWSDlN|");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test155183() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test156184() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test157185() throws Throwable {
        Node node0 = Node.newString(79, "e6exoHo?]7$mVo9rE", 79, 51);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test158186() throws Throwable {
        Node node0 = new Node(80);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test159187() throws Throwable {
        Node node0 = new Node(81);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test160188() throws Throwable {
        Node node0 = new Node(41);
        Node node1 = new Node(82, node0, node0, node0, node0, (-1), 1946);
        NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test161189() throws Throwable {
        Node node0 = new Node(83, 83, 83);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test162190() throws Throwable {
        Node node0 = new Node(84, 84, 84);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test163191() throws Throwable {
        Node node0 = new Node(85);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test164192() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test165193() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test166194() throws Throwable {
        Node node0 = Node.newString(88, ")");
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test167195() throws Throwable {
        Node node0 = new Node(89);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test168196() throws Throwable {
        Node node0 = new Node(91, 91, 91);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test169197() throws Throwable {
        Node node0 = Node.newString(92, "S`h+{H}S");
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test170198() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test171199() throws Throwable {
        Node node0 = Node.newString(95, "try ");
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test172200() throws Throwable {
        Node node0 = Node.newString(96, "Ndp3@$E1kCNI}GBT");
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test173201() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    }

    @Test(timeout = 4000)
    public void test174202() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test175203() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    }

    @Test(timeout = 4000)
    public void test176204() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    }

    @Test(timeout = 4000)
    public void test177205() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test178206() throws Throwable {
        Node node0 = Node.newString(103, "F`oD0{gLd/|t'[b/D", 1887, 1887);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test179207() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    }

    @Test(timeout = 4000)
    public void test180208() throws Throwable {
        Node node0 = new Node(106, 106, 65136);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test181209() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    }

    @Test(timeout = 4000)
    public void test182210() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test183211() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
    }

    @Test(timeout = 4000)
    public void test184212() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test185213() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test186214() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test187215() throws Throwable {
        Node node0 = Node.newString(114, "rI");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test188216() throws Throwable {
        Node node0 = Node.newString("$R~");
        Node node1 = new Node(116, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test189217() throws Throwable {
        Node node0 = Node.newString(117, "com.google.common.collect.ExplicitOrdering");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test190218() throws Throwable {
        Node node0 = Node.newString(68, "nL");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        Node node1 = NodeUtil.newVarNode("0h4ahDRK)", node0);
        NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test191219() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test192220() throws Throwable {
        Node node0 = Node.newString(120, "Dae");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test193221() throws Throwable {
        Node node0 = Node.newString(121, "Dae");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test194222() throws Throwable {
        Node node0 = new Node(664);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test195223() throws Throwable {
        Node node0 = Node.newString(31, ")");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test196224() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test197225() throws Throwable {
        Node node0 = Node.newString(34, "s+gw,~GRk9t#ac}Gd");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test198226() throws Throwable {
        Node node0 = Node.newString(35, "UI*{eDOJ&");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test199227() throws Throwable {
        Node node0 = Node.newString(37, ")");
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test200228() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test201229() throws Throwable {
        Node node0 = Node.newString(42, "iE\"nD?]I&5s^c[Pt#NZ");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test202230() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test203231() throws Throwable {
        Node node0 = Node.newString(44, "1nfinity");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test204232() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test205233() throws Throwable {
        Node node0 = Node.newString(46, "Dv*;f;1\"");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test206234() throws Throwable {
        Node node0 = Node.newString(49, "=DYN1");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test207235() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test208236() throws Throwable {
        Node node0 = Node.newString(54, "FNHS[WTZWSDlNj");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test209237() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test210238() throws Throwable {
        Node node0 = Node.newString(59, "D{");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test211239() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test212240() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test213241() throws Throwable {
        Node node0 = Node.newString(67, "catch(");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test214242() throws Throwable {
        Node node0 = Node.newString(70, "Mvj`FMfK3y`6J jQ5");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test215243() throws Throwable {
        Node node0 = Node.newString(72, "FNHS[WTZWSDlN|");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test216244() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test217245() throws Throwable {
        Node node0 = new Node(74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test218246() throws Throwable {
        Node node0 = new Node(75, 75, 65136);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test219247() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test220248() throws Throwable {
        Node node0 = Node.newString(80, "+ 6S%O.PGCiL}Y");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test221249() throws Throwable {
        Node node0 = new Node(81);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test222250() throws Throwable {
        Node node0 = Node.newString(83, "FNS[WTWSDlN|");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test223251() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test224252() throws Throwable {
        Node node0 = Node.newString(99, "N'ZK`[Na!DfssM", 99, 64336);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test225253() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test226254() throws Throwable {
        Node node0 = Node.newString(101, "exec");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test227255() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test228256() throws Throwable {
        Node node0 = Node.newString(110, "FNHS[WTZWSDlNj");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test229257() throws Throwable {
        Node node0 = Node.newString(115, "~e");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test230258() throws Throwable {
        Node node0 = Node.newString("ENUM_INIT_ARRAY");
        Node node1 = new Node(118, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test231259() throws Throwable {
        Node node0 = Node.newString(123, "\"h'B5gAgku7$FP*/`@", 123, 123);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test232260() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test233261() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test234262() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test235263() throws Throwable {
        Node node0 = new Node(128);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test236264() throws Throwable {
        Node node0 = new Node(129);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test237265() throws Throwable {
        Node node0 = Node.newString(64, "=XnL");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test238266() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test239267() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test240268() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        Node node1 = new Node(22, node0, node0, node0, node0, 48, 8);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test241269() throws Throwable {
        Node node0 = Node.newString(30, "catch(");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test242270() throws Throwable {
        Node node0 = Node.newString(97, "catch(", 97, 97);
        Node node1 = new Node(97, node0, 46, (-2));
        NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test243271() throws Throwable {
        Node node0 = Node.newString(93, "9 F9s%|Z1!'i");
        Node node1 = new Node(38, node0, node0, node0, node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test244272() throws Throwable {
        Node node0 = new Node(100);
        NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test245273() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        NodeUtil.callHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test246274() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test247275() throws Throwable {
        Node node0 = new Node(89);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test248276() throws Throwable {
        Node node0 = new Node(30, 30, 3719);
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test249277() throws Throwable {
        Node node0 = Node.newString(31, ")");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test250278() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test250279() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test250280() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test250281() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test251282() throws Throwable {
        Node node0 = Node.newString(49, "=DYN1");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test252283() throws Throwable {
        Node node0 = Node.newString(113, "p-%", (-1386), 92);
        Node node1 = new Node(102, node0);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
    }

    @Test(timeout = 4000)
    public void test253284() throws Throwable {
        Node node0 = Node.newString(103, "nL", 165, 1042);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test254285() throws Throwable {
        Node node0 = new Node(37, 37, (-751));
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test255286() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test255287() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test255288() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test255289() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "::oQ67/=*", 91, 77);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test256290() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+GsUyeJhn!.+Aq4", (-3), 118);
        Node node1 = NodeUtil.newExpr(node0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test256291() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+GsUyeJhn!.+Aq4", (-3), 118);
        Node node1 = NodeUtil.newExpr(node0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
    }

    @Test(timeout = 4000)
    public void test256292() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+GsUyeJhn!.+Aq4", (-3), 118);
        Node node1 = NodeUtil.newExpr(node0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test256293() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+GsUyeJhn!.+Aq4", (-3), 118);
        Node node1 = NodeUtil.newExpr(node0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test256294() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+GsUyeJhn!.+Aq4", (-3), 118);
        Node node1 = NodeUtil.newExpr(node0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test257295() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(85, node0, node0, node0, node0, 48, 8);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    }

    @Test(timeout = 4000)
    public void test258296() throws Throwable {
        int int0 = NodeUtil.precedence(4);
    }

    @Test(timeout = 4000)
    public void test259297() throws Throwable {
        int int0 = NodeUtil.precedence(39);
    }

    @Test(timeout = 4000)
    public void test260298() throws Throwable {
        NodeUtil.precedence(5);
    }

    @Test(timeout = 4000)
    public void test261299() throws Throwable {
        NodeUtil.precedence(6);
    }

    @Test(timeout = 4000)
    public void test262300() throws Throwable {
        NodeUtil.precedence(7);
    }

    @Test(timeout = 4000)
    public void test263301() throws Throwable {
        NodeUtil.precedence(8);
    }

    @Test(timeout = 4000)
    public void test264302() throws Throwable {
        int int0 = NodeUtil.precedence(9);
    }

    @Test(timeout = 4000)
    public void test265303() throws Throwable {
        int int0 = NodeUtil.precedence(10);
    }

    @Test(timeout = 4000)
    public void test266304() throws Throwable {
        int int0 = NodeUtil.precedence(11);
    }

    @Test(timeout = 4000)
    public void test267305() throws Throwable {
        int int0 = NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test268306() throws Throwable {
        int int0 = NodeUtil.precedence(13);
    }

    @Test(timeout = 4000)
    public void test269307() throws Throwable {
        int int0 = NodeUtil.precedence(14);
    }

    @Test(timeout = 4000)
    public void test270308() throws Throwable {
        int int0 = NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test271309() throws Throwable {
        int int0 = NodeUtil.precedence(16);
    }

    @Test(timeout = 4000)
    public void test272310() throws Throwable {
        int int0 = NodeUtil.precedence(17);
    }

    @Test(timeout = 4000)
    public void test273311() throws Throwable {
        int int0 = NodeUtil.precedence(18);
    }

    @Test(timeout = 4000)
    public void test274312() throws Throwable {
        int int0 = NodeUtil.precedence(19);
    }

    @Test(timeout = 4000)
    public void test275313() throws Throwable {
        int int0 = NodeUtil.precedence(20);
    }

    @Test(timeout = 4000)
    public void test276314() throws Throwable {
        int int0 = NodeUtil.precedence(21);
    }

    @Test(timeout = 4000)
    public void test277315() throws Throwable {
        int int0 = NodeUtil.precedence(22);
    }

    @Test(timeout = 4000)
    public void test278316() throws Throwable {
        int int0 = NodeUtil.precedence(23);
    }

    @Test(timeout = 4000)
    public void test279317() throws Throwable {
        int int0 = NodeUtil.precedence(24);
    }

    @Test(timeout = 4000)
    public void test280318() throws Throwable {
        int int0 = NodeUtil.precedence(25);
    }

    @Test(timeout = 4000)
    public void test281319() throws Throwable {
        int int0 = NodeUtil.precedence(26);
    }

    @Test(timeout = 4000)
    public void test282320() throws Throwable {
        int int0 = NodeUtil.precedence(27);
    }

    @Test(timeout = 4000)
    public void test283321() throws Throwable {
        int int0 = NodeUtil.precedence(28);
    }

    @Test(timeout = 4000)
    public void test284322() throws Throwable {
        int int0 = NodeUtil.precedence(29);
    }

    @Test(timeout = 4000)
    public void test285323() throws Throwable {
        int int0 = NodeUtil.precedence(30);
    }

    @Test(timeout = 4000)
    public void test286324() throws Throwable {
        int int0 = NodeUtil.precedence(31);
    }

    @Test(timeout = 4000)
    public void test287325() throws Throwable {
        int int0 = NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test288326() throws Throwable {
        int int0 = NodeUtil.precedence(33);
    }

    @Test(timeout = 4000)
    public void test289327() throws Throwable {
        NodeUtil.precedence(34);
    }

    @Test(timeout = 4000)
    public void test290328() throws Throwable {
        int int0 = NodeUtil.precedence(35);
    }

    @Test(timeout = 4000)
    public void test291329() throws Throwable {
        NodeUtil.precedence(36);
    }

    @Test(timeout = 4000)
    public void test292330() throws Throwable {
        int int0 = NodeUtil.precedence(37);
    }

    @Test(timeout = 4000)
    public void test293331() throws Throwable {
        int int0 = NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test294332() throws Throwable {
        int int0 = NodeUtil.precedence(40);
    }

    @Test(timeout = 4000)
    public void test295333() throws Throwable {
        int int0 = NodeUtil.precedence(41);
    }

    @Test(timeout = 4000)
    public void test296334() throws Throwable {
        int int0 = NodeUtil.precedence(42);
    }

    @Test(timeout = 4000)
    public void test297335() throws Throwable {
        int int0 = NodeUtil.precedence(43);
    }

    @Test(timeout = 4000)
    public void test298336() throws Throwable {
        int int0 = NodeUtil.precedence(44);
    }

    @Test(timeout = 4000)
    public void test299337() throws Throwable {
        int int0 = NodeUtil.precedence(45);
    }

    @Test(timeout = 4000)
    public void test300338() throws Throwable {
        int int0 = NodeUtil.precedence(46);
    }

    @Test(timeout = 4000)
    public void test301339() throws Throwable {
        int int0 = NodeUtil.precedence(47);
    }

    @Test(timeout = 4000)
    public void test302340() throws Throwable {
        NodeUtil.precedence(48);
    }

    @Test(timeout = 4000)
    public void test303341() throws Throwable {
        NodeUtil.precedence(49);
    }

    @Test(timeout = 4000)
    public void test304342() throws Throwable {
        NodeUtil.precedence(50);
    }

    @Test(timeout = 4000)
    public void test305343() throws Throwable {
        int int0 = NodeUtil.precedence(51);
    }

    @Test(timeout = 4000)
    public void test306344() throws Throwable {
        int int0 = NodeUtil.precedence(52);
    }

    @Test(timeout = 4000)
    public void test307345() throws Throwable {
        NodeUtil.precedence(53);
    }

    @Test(timeout = 4000)
    public void test308346() throws Throwable {
        NodeUtil.precedence(54);
    }

    @Test(timeout = 4000)
    public void test309347() throws Throwable {
        NodeUtil.precedence(55);
    }

    @Test(timeout = 4000)
    public void test310348() throws Throwable {
        NodeUtil.precedence(56);
    }

    @Test(timeout = 4000)
    public void test311349() throws Throwable {
        NodeUtil.precedence(57);
    }

    @Test(timeout = 4000)
    public void test312350() throws Throwable {
        NodeUtil.precedence(58);
    }

    @Test(timeout = 4000)
    public void test313351() throws Throwable {
        NodeUtil.precedence(59);
    }

    @Test(timeout = 4000)
    public void test314352() throws Throwable {
        NodeUtil.precedence(60);
    }

    @Test(timeout = 4000)
    public void test315353() throws Throwable {
        NodeUtil.precedence(61);
    }

    @Test(timeout = 4000)
    public void test316354() throws Throwable {
        int int0 = NodeUtil.precedence(63);
    }

    @Test(timeout = 4000)
    public void test317355() throws Throwable {
        int int0 = NodeUtil.precedence(64);
    }

    @Test(timeout = 4000)
    public void test318356() throws Throwable {
        int int0 = NodeUtil.precedence(65);
    }

    @Test(timeout = 4000)
    public void test319357() throws Throwable {
        NodeUtil.precedence(66);
    }

    @Test(timeout = 4000)
    public void test320358() throws Throwable {
        NodeUtil.precedence(67);
    }

    @Test(timeout = 4000)
    public void test321359() throws Throwable {
        NodeUtil.precedence(68);
    }

    @Test(timeout = 4000)
    public void test322360() throws Throwable {
        NodeUtil.precedence(69);
    }

    @Test(timeout = 4000)
    public void test323361() throws Throwable {
        NodeUtil.precedence(70);
    }

    @Test(timeout = 4000)
    public void test324362() throws Throwable {
        NodeUtil.precedence(71);
    }

    @Test(timeout = 4000)
    public void test325363() throws Throwable {
        NodeUtil.precedence(72);
    }

    @Test(timeout = 4000)
    public void test326364() throws Throwable {
        NodeUtil.precedence(73);
    }

    @Test(timeout = 4000)
    public void test327365() throws Throwable {
        NodeUtil.precedence(74);
    }

    @Test(timeout = 4000)
    public void test328366() throws Throwable {
        NodeUtil.precedence(75);
    }

    @Test(timeout = 4000)
    public void test329367() throws Throwable {
        NodeUtil.precedence(76);
    }

    @Test(timeout = 4000)
    public void test330368() throws Throwable {
        NodeUtil.precedence(77);
    }

    @Test(timeout = 4000)
    public void test331369() throws Throwable {
        NodeUtil.precedence(78);
    }

    @Test(timeout = 4000)
    public void test332370() throws Throwable {
        NodeUtil.precedence(79);
    }

    @Test(timeout = 4000)
    public void test333371() throws Throwable {
        NodeUtil.precedence(80);
    }

    @Test(timeout = 4000)
    public void test334372() throws Throwable {
        NodeUtil.precedence(81);
    }

    @Test(timeout = 4000)
    public void test335373() throws Throwable {
        NodeUtil.precedence(82);
    }

    @Test(timeout = 4000)
    public void test336374() throws Throwable {
        int int0 = NodeUtil.precedence(83);
    }

    @Test(timeout = 4000)
    public void test337375() throws Throwable {
        NodeUtil.precedence(84);
    }

    @Test(timeout = 4000)
    public void test338376() throws Throwable {
        int int0 = NodeUtil.precedence(85);
    }

    @Test(timeout = 4000)
    public void test339377() throws Throwable {
        int int0 = NodeUtil.precedence(86);
    }

    @Test(timeout = 4000)
    public void test340378() throws Throwable {
        int int0 = NodeUtil.precedence(87);
    }

    @Test(timeout = 4000)
    public void test341379() throws Throwable {
        int int0 = NodeUtil.precedence(88);
    }

    @Test(timeout = 4000)
    public void test342380() throws Throwable {
        int int0 = NodeUtil.precedence(89);
    }

    @Test(timeout = 4000)
    public void test343381() throws Throwable {
        int int0 = NodeUtil.precedence(90);
    }

    @Test(timeout = 4000)
    public void test344382() throws Throwable {
        int int0 = NodeUtil.precedence(91);
    }

    @Test(timeout = 4000)
    public void test345383() throws Throwable {
        int int0 = NodeUtil.precedence(92);
    }

    @Test(timeout = 4000)
    public void test346384() throws Throwable {
        int int0 = NodeUtil.precedence(93);
    }

    @Test(timeout = 4000)
    public void test347385() throws Throwable {
        int int0 = NodeUtil.precedence(94);
    }

    @Test(timeout = 4000)
    public void test348386() throws Throwable {
        int int0 = NodeUtil.precedence(95);
    }

    @Test(timeout = 4000)
    public void test349387() throws Throwable {
        int int0 = NodeUtil.precedence(96);
    }

    @Test(timeout = 4000)
    public void test350388() throws Throwable {
        int int0 = NodeUtil.precedence(97);
    }

    @Test(timeout = 4000)
    public void test351389() throws Throwable {
        int int0 = NodeUtil.precedence(98);
    }

    @Test(timeout = 4000)
    public void test352390() throws Throwable {
        NodeUtil.precedence(99);
    }

    @Test(timeout = 4000)
    public void test353391() throws Throwable {
        int int0 = NodeUtil.precedence(100);
    }

    @Test(timeout = 4000)
    public void test354392() throws Throwable {
        int int0 = NodeUtil.precedence(101);
    }

    @Test(timeout = 4000)
    public void test355393() throws Throwable {
        int int0 = NodeUtil.precedence(102);
    }

    @Test(timeout = 4000)
    public void test356394() throws Throwable {
        int int0 = NodeUtil.precedence(103);
    }

    @Test(timeout = 4000)
    public void test357395() throws Throwable {
        NodeUtil.precedence(104);
    }

    @Test(timeout = 4000)
    public void test358396() throws Throwable {
        int int0 = NodeUtil.precedence(105);
    }

    @Test(timeout = 4000)
    public void test359397() throws Throwable {
        NodeUtil.precedence(106);
    }

    @Test(timeout = 4000)
    public void test360398() throws Throwable {
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test361399() throws Throwable {
        int int0 = NodeUtil.precedence(108);
    }

    @Test(timeout = 4000)
    public void test362400() throws Throwable {
        NodeUtil.precedence(109);
    }

    @Test(timeout = 4000)
    public void test363401() throws Throwable {
        NodeUtil.precedence(110);
    }

    @Test(timeout = 4000)
    public void test364402() throws Throwable {
        NodeUtil.precedence(111);
    }

    @Test(timeout = 4000)
    public void test365403() throws Throwable {
        NodeUtil.precedence(112);
    }

    @Test(timeout = 4000)
    public void test366404() throws Throwable {
        NodeUtil.precedence(113);
    }

    @Test(timeout = 4000)
    public void test367405() throws Throwable {
        NodeUtil.precedence(114);
    }

    @Test(timeout = 4000)
    public void test368406() throws Throwable {
        NodeUtil.precedence(115);
    }

    @Test(timeout = 4000)
    public void test369407() throws Throwable {
        NodeUtil.precedence(116);
    }

    @Test(timeout = 4000)
    public void test370408() throws Throwable {
        NodeUtil.precedence(117);
    }

    @Test(timeout = 4000)
    public void test371409() throws Throwable {
        NodeUtil.precedence(118);
    }

    @Test(timeout = 4000)
    public void test372410() throws Throwable {
        NodeUtil.precedence(119);
    }

    @Test(timeout = 4000)
    public void test373411() throws Throwable {
        NodeUtil.precedence(120);
    }

    @Test(timeout = 4000)
    public void test374412() throws Throwable {
        NodeUtil.precedence(121);
    }

    @Test(timeout = 4000)
    public void test375413() throws Throwable {
        int int0 = NodeUtil.precedence(122);
    }

    @Test(timeout = 4000)
    public void test376414() throws Throwable {
        NodeUtil.precedence(123);
    }

    @Test(timeout = 4000)
    public void test377415() throws Throwable {
        int int0 = NodeUtil.precedence(124);
    }

    @Test(timeout = 4000)
    public void test378416() throws Throwable {
        NodeUtil.precedence(2);
    }

    @Test(timeout = 4000)
    public void test379417() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
    }

    @Test(timeout = 4000)
    public void test380418() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(39);
    }

    @Test(timeout = 4000)
    public void test381419() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
    }

    @Test(timeout = 4000)
    public void test382420() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
    }

    @Test(timeout = 4000)
    public void test383421() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
    }

    @Test(timeout = 4000)
    public void test384422() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
    }

    @Test(timeout = 4000)
    public void test385423() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(9);
    }

    @Test(timeout = 4000)
    public void test386424() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(11);
    }

    @Test(timeout = 4000)
    public void test387425() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(23);
    }

    @Test(timeout = 4000)
    public void test388426() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(118);
    }

    @Test(timeout = 4000)
    public void test389427() throws Throwable {
        Node node0 = new Node(90);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test390428() throws Throwable {
        Node node0 = new Node(89);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test391429() throws Throwable {
        Node node0 = Node.newString(97, "catch(", 97, 97);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test392430() throws Throwable {
        Node node0 = Node.newString(93, "com.google.javascript.jscomp.DefaultPassConfig$10");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test393431() throws Throwable {
        Node node0 = Node.newString(95, "Zy ");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test394432() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test395433() throws Throwable {
        Node node0 = new Node(127, 127, 64);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
    }

    @Test(timeout = 4000)
    public void test396434() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test396435() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test396436() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
    }

    @Test(timeout = 4000)
    public void test396437() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test397438() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.common.collect.StandardRowSortedTable", 110, 110);
        boolean boolean0 = NodeUtil.isGet(node0);
    }

    @Test(timeout = 4000)
    public void test397439() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.common.collect.StandardRowSortedTable", 110, 110);
        boolean boolean0 = NodeUtil.isGet(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test397440() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.common.collect.StandardRowSortedTable", 110, 110);
        boolean boolean0 = NodeUtil.isGet(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test397441() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.common.collect.StandardRowSortedTable", 110, 110);
        boolean boolean0 = NodeUtil.isGet(node0);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test398442() throws Throwable {
        Node node0 = Node.newString(35, "a5!;a N2(7Lywh%", 84, 89);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test399443() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Dv*;f;1\"", (-46), 88);
        Node node1 = new Node(8, node0, node0, node0, node0, 5, 2264);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 7, compilerOptions0.sourceMapDetailLevel);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test399444() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Dv*;f;1\"", (-46), 88);
        Node node1 = new Node(8, node0, node0, node0, node0, 5, 2264);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 7, compilerOptions0.sourceMapDetailLevel);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test399445() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Dv*;f;1\"", (-46), 88);
        Node node1 = new Node(8, node0, node0, node0, node0, 5, 2264);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 7, compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test400446() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google*javascript.jscomp._odeUtil$VarCollector", 88, 2894);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test400447() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google*javascript.jscomp._odeUtil$VarCollector", 88, 2894);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test400448() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google*javascript.jscomp._odeUtil$VarCollector", 88, 2894);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test400449() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google*javascript.jscomp._odeUtil$VarCollector", 88, 2894);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
    }

    @Test(timeout = 4000)
    public void test400450() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google*javascript.jscomp._odeUtil$VarCollector", 88, 2894);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test401451() throws Throwable {
        Node node0 = Node.newString(940, ")");
        boolean boolean0 = NodeUtil.isVar(node0);
    }

    @Test(timeout = 4000)
    public void test402452() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        boolean boolean0 = NodeUtil.isVar(node0);
    }

    @Test(timeout = 4000)
    public void test403453() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "rk", (String) null);
        node0.isLocalResultCall();
    }

    @Test(timeout = 4000)
    public void test404454() throws Throwable {
        Node node0 = Node.newString("rI");
        boolean boolean0 = NodeUtil.isString(node0);
    }

    @Test(timeout = 4000)
    public void test405455() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test406456() throws Throwable {
        Node node0 = new Node(80, 80, 80);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test406457() throws Throwable {
        Node node0 = new Node(80, 80, 80);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
    }

    @Test(timeout = 4000)
    public void test407458() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.isAssign(node0);
    }

    @Test(timeout = 4000)
    public void test408459() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isAssign(node0);
    }

    @Test(timeout = 4000)
    public void test409460() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        boolean boolean0 = NodeUtil.isExprCall(node0);
    }

    @Test(timeout = 4000)
    public void test410461() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test410462() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
    }

    @Test(timeout = 4000)
    public void test411463() throws Throwable {
        Node node0 = Node.newString(77, "<,R3,Np^", 39, 39);
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test412464() throws Throwable {
        Node node0 = new Node(115);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test413465() throws Throwable {
        Node node0 = Node.newString(114, "rI");
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test414466() throws Throwable {
        Node node0 = Node.newString(115, ")");
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test415467() throws Throwable {
        Node node0 = Node.newString(113, "RegExP");
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test416468() throws Throwable {
        Node node0 = Node.newString(115, ")");
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test417469() throws Throwable {
        Node node0 = Node.newString(114, "RegExP");
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test418470() throws Throwable {
        Node node0 = new Node((-4096));
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test419471() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(85, node0, node0, node0, node0, 48, 8);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test420472() throws Throwable {
        Node node0 = new Node(105);
        node0.addChildAfter(node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test421473() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test422474() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test423475() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test424476() throws Throwable {
        Node node0 = Node.newString(112, " Sw<=jv=s|arM^Vq", 112, 112);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test425477() throws Throwable {
        Node node0 = Node.newString(113, "RegExp");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test426478() throws Throwable {
        Node node0 = Node.newString(114, "XTV85#7JMtIu_<{S[CE");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test427479() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test428480() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test429481() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test430482() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test431483() throws Throwable {
        Node node0 = Node.newString(112, "ux.Lj2");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test432484() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test433485() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test434486() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test435487() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test436488() throws Throwable {
        Node node0 = new Node((-4096));
        NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test437489() throws Throwable {
        Node node0 = Node.newString(97, "catch(", 97, 97);
        Node node1 = new Node(115, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    }

    @Test(timeout = 4000)
    public void test438490() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test439491() throws Throwable {
        Node node0 = new Node(112, (-2326), 112);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test440492() throws Throwable {
        Node node0 = Node.newString(113, "RegExp");
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test441493() throws Throwable {
        Node node0 = new Node(74);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test442494() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "zXGQ6R[X!B *I&lY*Mh", "H(qb585z`v+&gM9|+");
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
    }

    @Test(timeout = 4000)
    public void test443495() throws Throwable {
        Node node0 = Node.newString(111, "~e");
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test444496() throws Throwable {
        Node node0 = new Node(112);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test445497() throws Throwable {
        Node node0 = new Node(81);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test446498() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", (-473), 35);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test446499() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", (-473), 35);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test447500() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "hkN^+v", 483, 23);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test447501() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "hkN^+v", 483, 23);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test447502() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "hkN^+v", 483, 23);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test448503() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
    }

    @Test(timeout = 4000)
    public void test449504() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = NodeUtil.isLabelName(node0);
    }

    @Test(timeout = 4000)
    public void test450505() throws Throwable {
        Node node0 = Node.newString(153, "XTV85#7JMtIu_<{S[CE");
        boolean boolean0 = NodeUtil.isLabelName(node0);
    }

    @Test(timeout = 4000)
    public void test451506() throws Throwable {
        Node node0 = new Node(100);
        Node node1 = new Node(77, (-68), 4095);
        NodeUtil.removeChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test452507() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "XJQ6R[X!B **&lY&Mh", "XJQ6R[X!B **&lY&Mh");
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test453508() throws Throwable {
        Node node0 = new Node(118);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test454509() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "XJQ6R[X!B **&lY&Mh", "Infinity");
        Node node1 = new Node(16, node0, node0);
        NodeUtil.removeChild(node1, node0);
        node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test454510() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "XJQ6R[X!B **&lY&Mh", "Infinity");
        Node node1 = new Node(16, node0, node0);
        NodeUtil.removeChild(node1, node0);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test455511() throws Throwable {
        Node node0 = Node.newString(115, "~e");
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test456512() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test457513() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "XJQ6R[X!B **&lY&Mh", "Infinity");
        Node node1 = new Node(41, node0, node0);
        boolean boolean0 = NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test458514() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "zXGQ6R[X!B *I&lY*Mh", "H(qb585z`v+&gM9|+");
        node0.addChildToFront(node0);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test459515() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
    }

    @Test(timeout = 4000)
    public void test460516() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
    }

    @Test(timeout = 4000)
    public void test461517() throws Throwable {
        Node node0 = new Node(45, 45, (-6));
        boolean boolean0 = NodeUtil.isThis(node0);
    }

    @Test(timeout = 4000)
    public void test462518() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        Node node1 = new Node(22, node0, node0, node0, node0, 48, 8);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node1);
    }

    @Test(timeout = 4000)
    public void test463519() throws Throwable {
        Node node0 = Node.newString(65, "FNHS[WTZWSDlNj");
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test464520() throws Throwable {
        Node node0 = Node.newString(37, "5+[=8'\"tERm(<T%X");
        NodeUtil.isSimpleFunctionObjectCall(node0);
    }

    @Test(timeout = 4000)
    public void test465521() throws Throwable {
        Node node0 = Node.newNumber(1241.5603038030308);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    }

    @Test(timeout = 4000)
    public void test466522() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test467523() throws Throwable {
        Node node0 = Node.newNumber(1241.560303803);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    }

    @Test(timeout = 4000)
    public void test468524() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.asserts.assertInstanceof", "var xx=;");
        NodeUtil.getFnParameters(node0);
    }

    @Test(timeout = 4000)
    public void test469525() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test470526() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
    }

    @Test(timeout = 4000)
    public void test470527() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
    }

    @Test(timeout = 4000)
    public void test471528() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
    }

    @Test(timeout = 4000)
    public void test471529() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
    }

    @Test(timeout = 4000)
    public void test472530() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
    }

    @Test(timeout = 4000)
    public void test472531() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
    }

    @Test(timeout = 4000)
    public void test473532() throws Throwable {
        String string0 = NodeUtil.opToStr(11);
    }

    @Test(timeout = 4000)
    public void test473533() throws Throwable {
        String string0 = NodeUtil.opToStr(11);
    }

    @Test(timeout = 4000)
    public void test474534() throws Throwable {
        String string0 = NodeUtil.opToStr(13);
    }

    @Test(timeout = 4000)
    public void test474535() throws Throwable {
        String string0 = NodeUtil.opToStr(13);
    }

    @Test(timeout = 4000)
    public void test475536() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
    }

    @Test(timeout = 4000)
    public void test475537() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
    }

    @Test(timeout = 4000)
    public void test476538() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
    }

    @Test(timeout = 4000)
    public void test476539() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
    }

    @Test(timeout = 4000)
    public void test477540() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(16);
    }

    @Test(timeout = 4000)
    public void test478541() throws Throwable {
        String string0 = NodeUtil.opToStr(17);
    }

    @Test(timeout = 4000)
    public void test479542() throws Throwable {
        String string0 = NodeUtil.opToStr(18);
    }

    @Test(timeout = 4000)
    public void test480543() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
    }

    @Test(timeout = 4000)
    public void test481544() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
    }

    @Test(timeout = 4000)
    public void test482545() throws Throwable {
        String string0 = NodeUtil.opToStr(21);
    }

    @Test(timeout = 4000)
    public void test483546() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
    }

    @Test(timeout = 4000)
    public void test484547() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(23);
    }

    @Test(timeout = 4000)
    public void test485548() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
    }

    @Test(timeout = 4000)
    public void test486549() throws Throwable {
        String string0 = NodeUtil.opToStr(25);
    }

    @Test(timeout = 4000)
    public void test487550() throws Throwable {
        String string0 = NodeUtil.opToStr(26);
    }

    @Test(timeout = 4000)
    public void test488551() throws Throwable {
        String string0 = NodeUtil.opToStr(27);
    }

    @Test(timeout = 4000)
    public void test489552() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
    }

    @Test(timeout = 4000)
    public void test490553() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
    }

    @Test(timeout = 4000)
    public void test490554() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
    }

    @Test(timeout = 4000)
    public void test491555() throws Throwable {
        String string0 = NodeUtil.opToStr(30);
    }

    @Test(timeout = 4000)
    public void test492556() throws Throwable {
        NodeUtil.opToStrNoFail(31);
    }

    @Test(timeout = 4000)
    public void test493557() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(32);
    }

    @Test(timeout = 4000)
    public void test494558() throws Throwable {
        String string0 = NodeUtil.opToStr(33);
    }

    @Test(timeout = 4000)
    public void test495559() throws Throwable {
        NodeUtil.opToStrNoFail(34);
    }

    @Test(timeout = 4000)
    public void test496560() throws Throwable {
        NodeUtil.opToStrNoFail(35);
    }

    @Test(timeout = 4000)
    public void test497561() throws Throwable {
        String string0 = NodeUtil.opToStr(36);
    }

    @Test(timeout = 4000)
    public void test498562() throws Throwable {
        String string0 = NodeUtil.opToStr(37);
    }

    @Test(timeout = 4000)
    public void test499563() throws Throwable {
        String string0 = NodeUtil.opToStr(38);
    }

    @Test(timeout = 4000)
    public void test500564() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
    }

    @Test(timeout = 4000)
    public void test501565() throws Throwable {
        String string0 = NodeUtil.opToStr(40);
    }

    @Test(timeout = 4000)
    public void test502566() throws Throwable {
        String string0 = NodeUtil.opToStr(41);
    }

    @Test(timeout = 4000)
    public void test503567() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
    }

    @Test(timeout = 4000)
    public void test504568() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
    }

    @Test(timeout = 4000)
    public void test505569() throws Throwable {
        NodeUtil.opToStrNoFail(44);
    }

    @Test(timeout = 4000)
    public void test506570() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
    }

    @Test(timeout = 4000)
    public void test507571() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
    }

    @Test(timeout = 4000)
    public void test508572() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
    }

    @Test(timeout = 4000)
    public void test509573() throws Throwable {
        String string0 = NodeUtil.opToStr(48);
    }

    @Test(timeout = 4000)
    public void test510574() throws Throwable {
        String string0 = NodeUtil.opToStr(49);
    }

    @Test(timeout = 4000)
    public void test511575() throws Throwable {
        String string0 = NodeUtil.opToStr(50);
    }

    @Test(timeout = 4000)
    public void test512576() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(51);
    }

    @Test(timeout = 4000)
    public void test513577() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(52);
    }

    @Test(timeout = 4000)
    public void test514578() throws Throwable {
        NodeUtil.opToStrNoFail(53);
    }

    @Test(timeout = 4000)
    public void test515579() throws Throwable {
        String string0 = NodeUtil.opToStr(54);
    }

    @Test(timeout = 4000)
    public void test516580() throws Throwable {
        NodeUtil.opToStrNoFail(55);
    }

    @Test(timeout = 4000)
    public void test517581() throws Throwable {
        NodeUtil.opToStrNoFail(56);
    }

    @Test(timeout = 4000)
    public void test518582() throws Throwable {
        NodeUtil.opToStrNoFail(57);
    }

    @Test(timeout = 4000)
    public void test519583() throws Throwable {
        NodeUtil.opToStrNoFail(58);
    }

    @Test(timeout = 4000)
    public void test520584() throws Throwable {
        NodeUtil.opToStrNoFail(59);
    }

    @Test(timeout = 4000)
    public void test521585() throws Throwable {
        String string0 = NodeUtil.opToStr(60);
    }

    @Test(timeout = 4000)
    public void test522586() throws Throwable {
        String string0 = NodeUtil.opToStr(61);
    }

    @Test(timeout = 4000)
    public void test523587() throws Throwable {
        NodeUtil.opToStrNoFail(62);
    }

    @Test(timeout = 4000)
    public void test524588() throws Throwable {
        String string0 = NodeUtil.opToStr(63);
    }

    @Test(timeout = 4000)
    public void test525589() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
    }

    @Test(timeout = 4000)
    public void test526590() throws Throwable {
        String string0 = NodeUtil.opToStr(65);
    }

    @Test(timeout = 4000)
    public void test527591() throws Throwable {
        NodeUtil.opToStrNoFail(66);
    }

    @Test(timeout = 4000)
    public void test528592() throws Throwable {
        String string0 = NodeUtil.opToStr(67);
    }

    @Test(timeout = 4000)
    public void test529593() throws Throwable {
        NodeUtil.opToStrNoFail(68);
    }

    @Test(timeout = 4000)
    public void test530594() throws Throwable {
        String string0 = NodeUtil.opToStr(69);
    }

    @Test(timeout = 4000)
    public void test531595() throws Throwable {
        String string0 = NodeUtil.opToStr(71);
    }

    @Test(timeout = 4000)
    public void test532596() throws Throwable {
        NodeUtil.opToStrNoFail(72);
    }

    @Test(timeout = 4000)
    public void test533597() throws Throwable {
        String string0 = NodeUtil.opToStr(73);
    }

    @Test(timeout = 4000)
    public void test534598() throws Throwable {
        String string0 = NodeUtil.opToStr(75);
    }

    @Test(timeout = 4000)
    public void test535599() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
    }

    @Test(timeout = 4000)
    public void test536600() throws Throwable {
        NodeUtil.opToStrNoFail(77);
    }

    @Test(timeout = 4000)
    public void test537601() throws Throwable {
        NodeUtil.opToStrNoFail(78);
    }

    @Test(timeout = 4000)
    public void test538602() throws Throwable {
        NodeUtil.opToStrNoFail(79);
    }

    @Test(timeout = 4000)
    public void test539603() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
    }

    @Test(timeout = 4000)
    public void test540604() throws Throwable {
        NodeUtil.opToStrNoFail(81);
    }

    @Test(timeout = 4000)
    public void test541605() throws Throwable {
        String string0 = NodeUtil.opToStr(82);
    }

    @Test(timeout = 4000)
    public void test542606() throws Throwable {
        NodeUtil.opToStrNoFail(83);
    }

    @Test(timeout = 4000)
    public void test543607() throws Throwable {
        String string0 = NodeUtil.opToStr(84);
    }

    @Test(timeout = 4000)
    public void test544608() throws Throwable {
        String string0 = NodeUtil.opToStr(85);
    }

    @Test(timeout = 4000)
    public void test545609() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
    }

    @Test(timeout = 4000)
    public void test546610() throws Throwable {
        String string0 = NodeUtil.opToStr(87);
    }

    @Test(timeout = 4000)
    public void test547611() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(88);
    }

    @Test(timeout = 4000)
    public void test548612() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
    }

    @Test(timeout = 4000)
    public void test549613() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
    }

    @Test(timeout = 4000)
    public void test550614() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
    }

    @Test(timeout = 4000)
    public void test551615() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(92);
    }

    @Test(timeout = 4000)
    public void test552616() throws Throwable {
        String string0 = NodeUtil.opToStr(93);
    }

    @Test(timeout = 4000)
    public void test553617() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(94);
    }

    @Test(timeout = 4000)
    public void test554618() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
    }

    @Test(timeout = 4000)
    public void test555619() throws Throwable {
        String string0 = NodeUtil.opToStr(96);
    }

    @Test(timeout = 4000)
    public void test556620() throws Throwable {
        String string0 = NodeUtil.opToStr(97);
    }

    @Test(timeout = 4000)
    public void test557621() throws Throwable {
        NodeUtil.opToStrNoFail(98);
    }

    @Test(timeout = 4000)
    public void test558622() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
    }

    @Test(timeout = 4000)
    public void test559623() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
    }

    @Test(timeout = 4000)
    public void test560624() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
    }

    @Test(timeout = 4000)
    public void test561625() throws Throwable {
        String string0 = NodeUtil.opToStr(102);
    }

    @Test(timeout = 4000)
    public void test562626() throws Throwable {
        NodeUtil.opToStrNoFail(103);
    }

    @Test(timeout = 4000)
    public void test563627() throws Throwable {
        NodeUtil.opToStrNoFail(104);
    }

    @Test(timeout = 4000)
    public void test564628() throws Throwable {
        NodeUtil.opToStrNoFail(105);
    }

    @Test(timeout = 4000)
    public void test565629() throws Throwable {
        NodeUtil.opToStrNoFail(106);
    }

    @Test(timeout = 4000)
    public void test566630() throws Throwable {
        NodeUtil.opToStrNoFail(107);
    }

    @Test(timeout = 4000)
    public void test567631() throws Throwable {
        NodeUtil.opToStrNoFail(108);
    }

    @Test(timeout = 4000)
    public void test568632() throws Throwable {
        NodeUtil.opToStrNoFail(109);
    }

    @Test(timeout = 4000)
    public void test569633() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
    }

    @Test(timeout = 4000)
    public void test570634() throws Throwable {
        String string0 = NodeUtil.opToStr(111);
    }

    @Test(timeout = 4000)
    public void test571635() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
    }

    @Test(timeout = 4000)
    public void test572636() throws Throwable {
        String string0 = NodeUtil.opToStr(113);
    }

    @Test(timeout = 4000)
    public void test573637() throws Throwable {
        NodeUtil.opToStrNoFail(114);
    }

    @Test(timeout = 4000)
    public void test574638() throws Throwable {
        String string0 = NodeUtil.opToStr(115);
    }

    @Test(timeout = 4000)
    public void test575639() throws Throwable {
        NodeUtil.opToStrNoFail(116);
    }

    @Test(timeout = 4000)
    public void test576640() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
    }

    @Test(timeout = 4000)
    public void test577641() throws Throwable {
        NodeUtil.opToStrNoFail(118);
    }

    @Test(timeout = 4000)
    public void test578642() throws Throwable {
        String string0 = NodeUtil.opToStr(119);
    }

    @Test(timeout = 4000)
    public void test579643() throws Throwable {
        String string0 = NodeUtil.opToStr(120);
    }

    @Test(timeout = 4000)
    public void test580644() throws Throwable {
        String string0 = NodeUtil.opToStr(121);
    }

    @Test(timeout = 4000)
    public void test581645() throws Throwable {
        String string0 = NodeUtil.opToStr(122);
    }

    @Test(timeout = 4000)
    public void test582646() throws Throwable {
        String string0 = NodeUtil.opToStr((-2367));
    }

    @Test(timeout = 4000)
    public void test583647() throws Throwable {
        Node node0 = Node.newString("Fz9");
        Node node1 = NodeUtil.newVarNode("Fz9", node0);
        NodeUtil.redeclareVarsInsideBranch(node1);
    }

    @Test(timeout = 4000)
    public void test584648() throws Throwable {
        Node node0 = new Node(100);
        NodeUtil.copyNameAnnotations(node0, node0);
        node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test585649() throws Throwable {
        Node node0 = new Node((-4063), 101, 101);
        Vector<Node> vector0 = new Vector<Node>();
        vector0.add(node0);
        NodeUtil.newFunctionNode("com.google.common.collect.NullsFirstOrdering", vector0, node0, 4, (-5057));
    }

    @Test(timeout = 4000)
    public void test586650() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, " 5__0m3'P&7_12(.B5<", 7, 0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test586651() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, " 5__0m3'P&7_12(.B5<", 7, 0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test586652() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, " 5__0m3'P&7_12(.B5<", 7, 0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test586653() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, " 5__0m3'P&7_12(.B5<", 7, 0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test587654() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "&T.=7oJ^^yY&>F3q", 3, 8);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test587655() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "&T.=7oJ^^yY&>F3q", 3, 8);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test587656() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "&T.=7oJ^^yY&>F3q", 3, 8);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test587657() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "&T.=7oJ^^yY&>F3q", 3, 8);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test587658() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "&T.=7oJ^^yY&>F3q", 3, 8);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test587659() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "&T.=7oJ^^yY&>F3q", 3, 8);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test588660() throws Throwable {
        Node node0 = new Node(113);
        NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test589661() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.newName(googleCodingConvention0, "IXV", (Node) null);
    }

    @Test(timeout = 4000)
    public void test590662() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("/=");
    }

    @Test(timeout = 4000)
    public void test591663() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("void");
    }

    @Test(timeout = 4000)
    public void test592664() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("NaN");
    }

    @Test(timeout = 4000)
    public void test593665() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.common.collect.StandardRowSortedTable", 110, 110);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test593666() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.common.collect.StandardRowSortedTable", 110, 110);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test593667() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.common.collect.StandardRowSortedTable", 110, 110);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test593668() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.common.collect.StandardRowSortedTable", 110, 110);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test594669() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "!", (-46), (-46));
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test595670() throws Throwable {
        Node node0 = Node.newString((-8), "7&)`r#!$G6q @n]");
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test596671() throws Throwable {
        Node node0 = NodeUtil.newVarNode("VsFoop", (Node) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test596672() throws Throwable {
        Node node0 = NodeUtil.newVarNode("VsFoop", (Node) null);
    }

    @Test(timeout = 4000)
    public void test597673() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "!", (-46), (-46));
        int int0 = NodeUtil.getNameReferenceCount(node0, "!");
    }

    @Test(timeout = 4000)
    public void test598674() throws Throwable {
        Node node0 = Node.newString("", 3, 16);
        Node node1 = NodeUtil.newVarNode("com.google.protobuf.DescriptorProtos$MethodOptions", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "JSR", nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test598675() throws Throwable {
        Node node0 = Node.newString("", 3, 16);
        Node node1 = NodeUtil.newVarNode("com.google.protobuf.DescriptorProtos$MethodOptions", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "JSR", nodeUtil_MatchDeclaration0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test598676() throws Throwable {
        Node node0 = Node.newString("", 3, 16);
        Node node1 = NodeUtil.newVarNode("com.google.protobuf.DescriptorProtos$MethodOptions", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "JSR", nodeUtil_MatchDeclaration0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test598677() throws Throwable {
        Node node0 = Node.newString("", 3, 16);
        Node node1 = NodeUtil.newVarNode("com.google.protobuf.DescriptorProtos$MethodOptions", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "JSR", nodeUtil_MatchDeclaration0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test599678() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.containsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test600679() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.referencesThis(node0);
    }

    @Test(timeout = 4000)
    public void test601680() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+GsUyeJhn!.+Aq4", (-3), 118);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test601681() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+GsUyeJhn!.+Aq4", (-3), 118);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test601682() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+GsUyeJhn!.+Aq4", (-3), 118);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test602683() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test603684() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        node0.addChildToBack(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test604685() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        Node node1 = new Node(77, (-68), 4095);
        node1.addChildToBack(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test605686() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "XJQ6R[X!B **&lY&Mh", "XJQ6R[X!B **&lY&Mh");
        Node node1 = new Node((-4063), node0, node0);
        int int0 = NodeUtil.getNameReferenceCount(node1, (String) null);
    }

    @Test(timeout = 4000)
    public void test606687() throws Throwable {
        Node node0 = new Node(94);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1198);
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test607688() throws Throwable {
        Node node0 = Node.newNumber(1571.204828491857);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test608689() throws Throwable {
        Node node0 = Node.newString("ENUM_INIT_ARRAY");
        NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test609690() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test610691() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test611692() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "XJQ6R[X!B **&lY&Mh", "XJQ6R[X!B **&lY&Mh");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test612693() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test613694() throws Throwable {
        Node node0 = Node.newString("ENUM_INIT_ARRAY");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test614695() throws Throwable {
        Node node0 = Node.newString("NaN");
        node0.addSuppression("NaN");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        jSDocInfo0.isNoCompile();
    }

    @Test(timeout = 4000)
    public void test615696() throws Throwable {
        Node node0 = Node.newString("ENUM_INIT_ARRAY");
        Node node1 = new Node(118, node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test616697() throws Throwable {
        Node node0 = Node.newString("ENUM_INIT_ARRAY");
        Node node1 = new Node((-1), node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test617698() throws Throwable {
        Node node0 = Node.newString("NaN");
        Node node1 = new Node(105, node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test618699() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        NodeUtil.getFunctionInfo(node0);
    }

    @Test(timeout = 4000)
    public void test619700() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.getFunctionInfo(node0);
    }

    @Test(timeout = 4000)
    public void test620701() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "XJQ6R[X!B **&lY&Mh", "XJQ6R[X!B **&lY&Mh");
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test620702() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "XJQ6R[X!B **&lY&Mh", "XJQ6R[X!B **&lY&Mh");
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test621703() throws Throwable {
        Node node0 = Node.newString(113, "RegExp");
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test622704() throws Throwable {
        Node node0 = Node.newString("Inciniey");
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test623705() throws Throwable {
        Node node0 = Node.newNumber((double) 1970);
        Node[] nodeArray0 = new Node[1];
        NodeUtil.newCallNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test624706() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test625707() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        NodeUtil.evaluatesToLocalValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test625708() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        NodeUtil.evaluatesToLocalValue(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test625709() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        NodeUtil.evaluatesToLocalValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test625710() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        NodeUtil.evaluatesToLocalValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test625711() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+ 6S%O.PGCiL}Y", 80, 80);
        NodeUtil.evaluatesToLocalValue(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test626712() throws Throwable {
        Node node0 = new Node(100);
        Node node1 = new Node(42, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test627713() throws Throwable {
        Node node0 = new Node(45, 45, (-6));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test628714() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test629715() throws Throwable {
        Node node0 = Node.newString(48, "");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test630716() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test631717() throws Throwable {
        Node node0 = new Node(57);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test632718() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test633719() throws Throwable {
        Node node0 = new Node(61);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test634720() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test635721() throws Throwable {
        Node node0 = new Node(64, (-1697), 64);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test636722() throws Throwable {
        Node node0 = new Node(65);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test637723() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test638724() throws Throwable {
        Node node0 = new Node(68);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test639725() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
    }

    @Test(timeout = 4000)
    public void test640726() throws Throwable {
        Node node0 = new Node(70);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test641727() throws Throwable {
        Node node0 = new Node(71, 118, 118);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test642728() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test643729() throws Throwable {
        Node node0 = Node.newString(78, "1nfinity", 78, 78);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test644730() throws Throwable {
        Node node0 = new Node(84, 84, 84);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test645731() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test646732() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test647733() throws Throwable {
        Node node0 = Node.newString(87, "com/google/javiscript/jscomp/mozilla/rhino/Scriptable", 87, 87);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test648734() throws Throwable {
        Node node0 = new Node(88);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test649735() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test650736() throws Throwable {
        Node node0 = new Node(91);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test651737() throws Throwable {
        Node node0 = Node.newString(92, "8I-n^C", 742, 91);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test652738() throws Throwable {
        Node node0 = new Node(93);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test653739() throws Throwable {
        Node node0 = new Node(94);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test654740() throws Throwable {
        Node node0 = Node.newString(95, "com/google/javascript/jscomp/mozilla/rhino/Scriptable", 95, 742);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test655741() throws Throwable {
        Node node0 = Node.newString(97, "catch(", 97, 97);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test656742() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test657743() throws Throwable {
        Node node0 = new Node(100);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test658744() throws Throwable {
        Node node0 = new Node(101, 101, 189);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test659745() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test660746() throws Throwable {
        Node node0 = Node.newString(103, "F`oD0{gLd/|t'[b/D", 1887, 1887);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test661747() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test662748() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "O3H`f/_", 440, 440);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test662749() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "O3H`f/_", 440, 440);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test662750() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "O3H`f/_", 440, 440);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test662751() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "O3H`f/_", 440, 440);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
        node0.getChildCount();
    }
}
