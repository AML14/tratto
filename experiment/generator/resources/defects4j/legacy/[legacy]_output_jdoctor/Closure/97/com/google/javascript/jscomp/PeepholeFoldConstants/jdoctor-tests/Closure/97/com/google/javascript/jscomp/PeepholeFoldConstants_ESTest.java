/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:43:06 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = new Node(32, node0, node0, node0, node0);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(34, 34, 34);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(57, 57, 57);
        Node node1 = new Node(36, node0, node0, node0, 12, 4095);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(57, 57, 57);
        Node node1 = new Node(36, node0, node0, node0, 12, 4095);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        Node node0 = Node.newString("whbW\u0005dDh");
        Node node1 = new Node(37, node0, node0, 1, 50);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Node node0 = Node.newString("whbW\u0005dDh");
        Node node1 = new Node(37, node0, node0, 1, 50);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.092275783475614);
        Node node1 = Node.newNumber(4728.84378);
        Node node2 = new Node(17, node1, node0, node0, node0, 1249, 8);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        Node node0 = new Node((-581), (-581), (-581));
        Node node1 = Node.newNumber(2.1474836674608464E9, 51, 49);
        Node node2 = new Node(9, node1, node1, node0, 0, 37);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(72);
        Node node1 = Node.newNumber((double) 0, 51, 2);
        Node node2 = new Node(10, node0, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.092275783475614);
        Node node1 = Node.newNumber((double) 21);
        Node node2 = new Node(11, node1, node1, node0, 51, 20);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-269.7923667379002));
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(12, node1, node0, node0, 32, 2129);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-973), (-973), (-973));
        Node node1 = Node.newNumber((-3033.75258430907));
        Node node2 = new Node(14, node0, node1, node1, 15, 0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(2.0);
        Node node1 = Node.newNumber((double) 4, 1, 10);
        Node node2 = new Node(15, node0, node0, node1, node1, 12, 49);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(11.0, (-1133), 126);
        Node node1 = Node.newNumber((-1811.095), 95, 1292);
        Node node2 = new Node(16, node0, node0, node1, 4, (-45));
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        Node node1 = Node.newNumber((double) 11, 44, 48);
        Node node2 = new Node(18, node0, node0, node1, 0, 37);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 64, 64, 64);
        Node node1 = Node.newNumber((-2322.0), (-20), 39);
        Node node2 = new Node(19, node0, node0, node1, 6, 51);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(55);
        Node node1 = Node.newNumber((double) 4, 24, 51);
        Node node2 = new Node(20, node1, node0, 1, 38);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 16, 18, (-2));
        Node node2 = new Node(21, node0, node0, node1, 29, 42);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-3552.723));
        Node node1 = Node.newNumber(32.0, 29, 18);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        Node node2 = peepholeFoldWithTypes0.optimizeSubtree(node1);
        Node node3 = new Node(22, node2, node1, node0, (-251), 35);
        peepholeFoldConstants0.optimizeSubtree(node3);
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(86);
        Node node1 = new Node(20, 15, 2);
        Node node2 = new Node(23, node0, node0, node1, (-2), 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0, 4366, 4366);
        Node node1 = Node.newNumber((double) 34, 33, 47);
        Node node2 = new Node(24, node1, node1, node0, 2, 24);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        Node node0 = Node.newString("~_w~Dbmhr[j5K");
        Node node1 = Node.newString(28, "~_w~Dbmhr[j5K");
        Node node2 = new Node(25, node1, node1, node0, 15, 23);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(57);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(28, node1, node0, node0, 40, 11);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        Node node0 = Node.newString("whbW\u0005dDh");
        Node node1 = Node.newString(8, "whbW\u0005dDh", 34, 2);
        Node node2 = new Node(30, node1, node0, 17, 41);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-3173), (-3173), (-3173));
        Node node1 = new Node(13);
        Node node2 = new Node(31, node0, node0, node1, 20, 18);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getLineno();
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("pg`hUm");
        Node node1 = Node.newString("pg`hUm");
        Node node2 = new Node(33, node1, node1, node0, 4, 1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(60);
        Node node1 = new Node(29, 28, 19);
        Node node2 = new Node(34, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        Node node0 = new Node(17);
        Node node1 = new Node(25);
        Node node2 = new Node(35, node1, node1, node0, 46, 36);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(57, 57, 57);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(36, node1, node0, node0, 12, 4095);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        Node node0 = Node.newString("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS");
        Node node1 = new Node(35, 2, 2);
        Node node2 = new Node(38, node1, node1, node0, 35, 3);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test02830() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(39);
        Node node1 = new Node(3);
        Node node2 = new Node(39, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test02931() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-3138), (-3138), (-3138));
        Node node1 = Node.newNumber((double) 44, 37, 50);
        Node node2 = new Node(40, node0, node1, node1, 43, 15);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test03032() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-3138), (-3138), (-3138));
        Node node1 = new Node(13);
        Node node2 = new Node(41, node1, node0, 38, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test03133() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(42);
        Node node1 = new Node(13);
        Node node2 = new Node(42, node0, node0, node1, 30, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test03234() throws Throwable {
        Node node0 = Node.newString("l,tth");
        Node node1 = new Node(22, 0, (-1));
        Node node2 = new Node(43, node0, node1, node1, 23, 21);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test03335() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(68);
        Node node1 = new Node(37);
        Node node2 = new Node(44, node0, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test03436() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = Node.newNumber((double) 34, 33, 47);
        Node node2 = new Node(45, node1, node0, node1, node0, 28, 1);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test03537() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Operand out f range, bitwis operation willclose@inf`Dmatio5: {0}");
        Node node1 = new Node(44);
        Node node2 = new Node(46, node1, node1, node1, node0, 16, 1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test03638() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(100);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(47, node1, node0, node0, 10, 18);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test03739() throws Throwable {
        Node node0 = Node.newString("whbWR5d`h");
        Node node1 = Node.newString(3, "whbWR5d`h", 8, 35);
        Node node2 = new Node(48, node1, node0, 23, 17);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test03840() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(90);
        Node node1 = Node.newNumber((double) (-1), 4095, 5);
        Node node2 = new Node(49, node1, node0, node0, node0, 28, 50);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test03941() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(69);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(50, node1, node0, 17, 38);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test04042() throws Throwable {
        Node node0 = Node.newString("~_w0~D+b[hr[5K");
        Node node1 = Node.newString(28, "~_w0~D+b[hr[5K");
        Node node2 = new Node(51, node1, node0, 1, 19);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test04143() throws Throwable {
        Node node0 = Node.newString("length");
        Node node1 = new Node(4);
        Node node2 = new Node(52, node0, node1, node1, 38, 21);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test04244() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(53, 53, 53);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(53, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test04345() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(54, 54, 54);
        Node node1 = new Node(17, 0, 15);
        Node node2 = new Node(54, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test04446() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(55, 55, 55);
        Node node1 = new Node(29, 28, 19);
        Node node2 = new Node(55, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test04547() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(32, "1", 32, 32);
        Node node1 = Node.newNumber((double) 4095, 0, 32);
        Node node2 = new Node(56, node0, node0, node1, 49, 20);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test04648() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(57, 57, 57);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(57, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test04749() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(58, 58, 58);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(58, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test04850() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(59, 59, 59);
        Node node1 = new Node(3);
        Node node2 = new Node(59, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test04951() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(60);
        Node node1 = new Node(3);
        Node node2 = new Node(60, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test05052() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(61);
        Node node1 = new Node(42);
        Node node2 = new Node(61, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test05153() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(23, "6", 23, 23);
        Node node1 = Node.newNumber((double) 4095, 0, 23);
        Node node2 = new Node(62, node0, node0, node1, 49, 20);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test05254() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = new Node(10);
        Node node2 = new Node(63, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test05355() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(64, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test05456() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(86);
        Node node1 = new Node(49);
        Node node2 = new Node(65, node0, node0, node1, 37, 0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test05557() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(66, 66, 66);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(66, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test05658() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(67, 67, 67);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(67, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getLineno();
    }

    @Test(timeout = 4000)
    public void test05759() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-1918));
        Node node1 = Node.newNumber((double) 6, 1, 29);
        Node node2 = new Node(68, node0, node1, node1, 3, 29);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getLineno();
    }

    @Test(timeout = 4000)
    public void test05860() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(69);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(69, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test05961() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(70);
        Node node1 = new Node(49);
        Node node2 = new Node(70, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test06062() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(71);
        Node node1 = new Node(49);
        Node node2 = new Node(71, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test06163() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(72, 72, 72);
        Node node1 = new Node(49);
        Node node2 = new Node(72, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test06264() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(73, 73, 73);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(73, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test06365() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(74, 74, 74);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(74, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test06466() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(75);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(75, node0, node0, node1, 30, 15);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test06567() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(76, 76, 76);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(76, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test06668() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(77, 77, 77);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(77, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test06769() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78, 78, 78);
        Node node1 = Node.newNumber((double) 28, 31, 1);
        Node node2 = new Node(78, node0, node0, node1, 30, 15);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test06870() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(79, 79, 79);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(79, node0, node0, node1, 30, 15);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test06971() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(100);
        Node node1 = new Node(41, 24, 2);
        Node node2 = new Node(80, node0, node1, node1, 42, 41);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test07072() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(81, 81, 81);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(81, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test07173() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-2419));
        Node node1 = Node.newNumber((double) (-1), 4095, 5);
        Node node2 = new Node(82, node0, node1, node1, 42, 36);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test07274() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(83, 83, 83);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(83, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test07375() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(55);
        Node node1 = Node.newNumber((double) 4, 24, 51);
        Node node2 = new Node(84, node1, node0, node0, 3, 8);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test07476() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(85, 85, 85);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(85, node0, node0, node1, 30, 15);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test07577() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(86);
        Node node1 = new Node(49);
        Node node2 = new Node(86, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test07678() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(87, 87, 87);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(87, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test07779() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(88, 88, 88);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(88, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getLineno();
    }

    @Test(timeout = 4000)
    public void test07880() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(89, 89, 89);
        Node node1 = new Node(29, 28, 19);
        Node node2 = new Node(89, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test07981() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-1081));
        Node node1 = Node.newNumber((double) 25, 3, 44);
        Node node2 = new Node(90, node1, node0, node0, 94, 31);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test08082() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(91, 91, 91);
        Node node1 = new Node((-2));
        Node node2 = new Node(91, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test08183() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(92, 92, 92);
        Node node1 = new Node(3);
        Node node2 = new Node(92, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getLineno();
    }

    @Test(timeout = 4000)
    public void test08284() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(93, 93, 93);
        Node node1 = new Node(2, 28, 19);
        Node node2 = new Node(93, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test08385() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(94, 94, 94);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(94, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test08486() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(95, 95, 95);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(95, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test08587() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(96, 96, 96);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(96, node0, node0, node1, 30, 15);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test08688() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(80, 80, 80);
        Node node1 = Node.newNumber((double) 0, 51, 2);
        Node node2 = new Node(97, node1, node0, node0, 16, (-2));
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test08789() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(98, 98, 98);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(98, node0, node0, node1, 30, 15);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test08890() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(60);
        Node node1 = Node.newNumber((double) 11, 2, 22);
        Node node2 = new Node(99, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test08991() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("SHA-5", 80, 80);
        Node node1 = Node.newNumber((double) 51, 51, 49);
        Node node2 = new Node(101, node1, node0, node0, 16, (-2));
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test09092() throws Throwable {
        Node node0 = Node.newString("7{'|{Rm`h");
        Node node1 = Node.newNumber((double) 0, 2, 29);
        Node node2 = new Node(4, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test09193() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(32, 17, 2);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test09294() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78, 78, 78);
        Node node1 = new Node(32, node0, node0, node0, 32, 42);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        node2.getLineno();
    }

    @Test(timeout = 4000)
    public void test09395() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(90);
        Node node1 = Node.newNumber((double) (-1), 4095, 5);
        Node node2 = new Node(32, node1, node0, node1, 20, 42);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test09496() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("is(vf9X@XD?)DYD");
        Node node1 = new Node(32, node0, node0);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test09597() throws Throwable {
        Node node0 = new Node(41);
        Node node1 = new Node(32, node0, node0, 47, 34);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test09698() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("umbe");
        Node node1 = new Node(43, 4095, 23);
        Node node2 = new Node(32, node1, node0, node1, 4, (-3));
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test09799() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("com.google.common.collect.Multimaps$CustomMultimap");
        Node node1 = new Node(44);
        Node node2 = new Node(32, node1, node0, node1, 4, (-3));
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test098100() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64);
        Node node1 = new Node(32, node0, node0, node0, 32, 42);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test099101() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = new Node(47);
        Node node2 = new Node(32, node1, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test100102() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.092275783475614);
        Node node1 = new Node(26, node0, 1, 2);
        Node node2 = new Node(15, node1);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test101103() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(32, "");
        Node node1 = Node.newString(39, "");
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = new Node(26, node0, node0);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
        Node node4 = new Node(43, node1, node3, node3, 4095, 22);
        Node node5 = peepholeFoldConstants0.optimizeSubtree(node2);
        node5.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test102104() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("NaN");
        Node node1 = new Node(29, node0, 2, 51);
        Node node2 = new Node(11, node1);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test103105() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("=6ukZ");
        Node node1 = new Node(27, node0, node0, node0);
        Node node2 = new Node(4, node1, 33, 51);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test104106() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52, 52, 52);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(52, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test105107() throws Throwable {
        Node node0 = Node.newString("length");
        Node node1 = new Node(22, 0, (-1));
        Node node2 = new Node(52, node0, node1, node1, 38, 21);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test106108() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(100, (-777), (-777));
        Node node1 = Node.newNumber((double) 0, 29, 48);
        Node node2 = new Node(100, node1, node1, node0, 3279, 12);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test107109() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-2419));
        Node node1 = Node.newNumber((double) (-1), 4095, 5);
        Node node2 = new Node(100, node1, node1, node0, 4, 1);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test108110() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(80, 80, 80);
        Node node1 = Node.newNumber((double) 0, 51, 2);
        Node node2 = new Node(101, node1, node0, node0, 16, (-2));
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test109111() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(101, 101, 101);
        Node node1 = new Node(49);
        Node node2 = new Node(101, node0, node0, node1, 2, 22);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test110112() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(100, 100, 100);
        Node node1 = Node.newNumber((double) 28, 31, 1);
        Node node2 = new Node(100, node0, node0, node1, 30, 15);
        Node node3 = new Node((-1830), node2, node2, node2, 36, 46);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
        node4.hasChildren();
    }

    @Test(timeout = 4000)
    public void test111113() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("LXBs_g*Kf8T>X]Q)T(");
        Node node1 = new Node(8);
        Node node2 = new Node(21, node0, node0, node1, (-1), 32);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test112114() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(55);
        Node node1 = Node.newNumber((double) 4, 24, 51);
        Node node2 = new Node(21, node0, node0, node1, 14, 8);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test113115() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("LXBs_g*8T>kX]Q)T(");
        Node node1 = new Node(44);
        Node node2 = new Node(21, node0, node0, node1, (-1), 32);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test114116() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-3553.5442992));
        Node node1 = new Node(40);
        Node node2 = new Node(21, node0, node0, node1, (-385), 30);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test115117() throws Throwable {
        Node node0 = new Node(57, 57, 57);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(24, node1, node0, 10, 38);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test116118() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-269.7923667379002));
        Node node1 = Node.newNumber((double) 0);
        Node node2 = new Node(23, node0, node0, node1, 79, 15);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test117119() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 4439);
        Node node1 = Node.newNumber((double) 34, 33, 47);
        Node node2 = new Node(24, node1, node1, node0, 2, 24);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test118120() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-3122));
        Node node1 = new Node(13);
        Node node2 = new Node(9, node0, node0, node1, (-1), 1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test119121() throws Throwable {
        Node node0 = Node.newNumber(2.1474836674608464E9, 51, 49);
        Node node1 = Node.newNumber((double) 11, 44, 16);
        Node node2 = new Node(9, node0, node0, node1, 0, 37);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test120122() throws Throwable {
        Node node0 = Node.newNumber(2.147483645970395E9, 51, 49);
        Node node1 = Node.newNumber((double) 11, 44, 16);
        Node node2 = new Node(9, node0, node0, node1, 0, 37);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }

    @Test(timeout = 4000)
    public void test121123() throws Throwable {
        Node node0 = Node.newNumber((double) 49, 51, 49);
        Node node1 = Node.newNumber((double) 11, 44, 48);
        Node node2 = new Node(9, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test122124() throws Throwable {
        Node node0 = Node.newNumber(2.1474836470005574E9, 51, 49);
        Node node1 = Node.newNumber((double) 11, 44, 48);
        Node node2 = new Node(18, node0, node0, node1, 0, 37);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test123125() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.10323303917335, 4415, 4415);
        Node node1 = Node.newNumber((double) 34, 33, 47);
        Node node2 = new Node(19, node0, node1, node1);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test124126() throws Throwable {
        Node node0 = Node.newNumber((double) 31, 51, 49);
        Node node1 = Node.newNumber((double) 11, 44, 48);
        Node node2 = new Node(18, node0, node0, node1, 0, 37);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test125127() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-0.36337273152492067), 51, 49);
        Node node1 = Node.newNumber(2.0, 44, (-1187));
        Node node2 = new Node(18, node0, node0, node1, 114, 37);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test126128() throws Throwable {
        Node node0 = Node.newString("mBITY]O^k[d?T");
        Node node1 = Node.newString(1, "mBITY]O^k[d?T", 38, 2);
        Node node2 = new Node(16, node0, node0, node1, 27, 35);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test127129() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(57);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(12, node1, node0, 1, 20);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test128130() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Operand out f range, bitwis operation willclose@inf`Dmatio5: {0}");
        Node node1 = Node.newString("Operand out f range, bitwis operation willclose@inf`Dmatio5: {0}");
        Node node2 = new Node(46, node1, node1, node1, node0, 16, 1);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test129131() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Operand out of range, bitwise operation willclose inf`Dmatio5: {0}");
        Node node1 = Node.newString("Operand out of range, bitwise operation willclose inf`Dmatio5: {0}");
        Node node2 = new Node(12, node0, node0, node1, 44, 33);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test130132() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("OpXrand ~utf rane, bitws operationrwillcNoe@if`Dmatio5: 0N");
        Node node1 = Node.newString("OpXrand ~utf rane, bitws operationrwillcNoe@if`Dmatio5: 0N");
        Node node2 = new Node(13, node1, node0, node0, 1, 43);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test131133() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Operand out of range, bitwise operation willclose inf`Dmatio5: {0}");
        Node node1 = Node.newString("Operand out of range, bitwise operation willclose inf`Dmatio5: {0}");
        Node node2 = new Node(45, node1, node1, node0, 26, 37);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test132134() throws Throwable {
        Node node0 = Node.newString("length");
        Node node1 = Node.newString("length", 46, 39);
        Node node2 = new Node(15, node0, node0, node1, 1, 32);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test133135() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("OpXrand ~ut f range, bitwis operationrwillcNose@iff`Dmatio5: {0N");
        Node node1 = Node.newString("__");
        Node node2 = new Node(13, node1, node0, node0, 1, 43);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test134136() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64);
        Node node1 = Node.newNumber((double) 28, 31, 50);
        Node node2 = new Node(17, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test135137() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 4, 24, 51);
        Node node1 = Node.newNumber((-3033.75258430907));
        Node node2 = new Node(14, node0, node1, node1, 15, 0);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test136138() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-3553.5442992));
        Node node1 = Node.newNumber((double) 44, 43, 5);
        Node node2 = new Node(46, node0, node1, node0, node1);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test137139() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = Node.newNumber((double) 50, 1, 9);
        node1.setDouble(32.0);
        Node node2 = new Node(13, node1, node0, node0, node0, 20, 22);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test138140() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0, 4439, 4439);
        Node node1 = Node.newNumber((double) 34, 33, 47);
        Node node2 = new Node(15, node1, node0, node0, node0, 3, 5);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test139141() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 4, 24, 51);
        Node node1 = Node.newNumber(32.0);
        Node node2 = new Node(14, node0, node1, node1, 15, 0);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test140142() throws Throwable {
        Node node0 = Node.newNumber((double) 69, 69, 69);
        Node node1 = Node.newNumber((double) 31, 39, 1);
        Node node2 = new Node(17, node1, node1, node0, 44, 48);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test141143() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-268.4926510305725));
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(16, node0, node0, node1, 3, 39);
        peepholeFoldConstants0.optimizeSubtree(node2);
    }

    @Test(timeout = 4000)
    public void test142144() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(37);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test143145() throws Throwable {
        Node node0 = Node.newString("whbW\u0005dDh");
        Node node1 = Node.newString(34, "whbW\u0005dDh", 16, 46);
        Node node2 = new Node(37, node0, node1, 1, 50);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test144146() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-1091), (-1091), (-1091));
        Node node1 = new Node(26, 46, 13);
        Node node2 = new Node(33, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        node3.hasChildren();
    }
}
