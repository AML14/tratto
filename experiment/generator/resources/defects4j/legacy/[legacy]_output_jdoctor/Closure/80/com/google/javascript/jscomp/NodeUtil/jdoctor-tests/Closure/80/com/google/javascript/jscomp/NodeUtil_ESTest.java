/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:55:49 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.ByteArrayInputStream;
import java.io.PrintStream;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        boolean boolean0 = NodeUtil.referencesThis(node0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Node node0 = Node.newString(105, "L!C");
        NodeUtil.isVarArgsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Node node0 = new Node(53);
        NodeUtil.getArgumentForCallOrNew(node0, 22);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        NodeUtil.getPrototypePropertyName((Node) null);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "rD", "rD");
        NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        boolean boolean0 = NodeUtil.containsCall(node0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.getNodeTypeReferenceCount((Node) null, (-3101), compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        NodeUtil.getFunctionBody((Node) null);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        node0.setType(36);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        Node node0 = Node.newString(38, "com.google.javascript.jscomp.CodePrinter");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        Node node0 = Node.newString(47, "==");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01917() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02018() throws Throwable {
        Node node0 = Node.newString(86, "[J_Iq1.");
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02119() throws Throwable {
        Node node0 = Node.newString(98, "; ");
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02220() throws Throwable {
        Node node0 = new Node(100);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02321() throws Throwable {
        Node node0 = Node.newString(26, "J97");
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02422() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 22, 22);
        NodeUtil.getExpressionBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02423() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 22, 22);
        NodeUtil.getExpressionBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 22, 22);
        NodeUtil.getExpressionBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test02625() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = new Node(26, node0, node0, node0, 2, (-668));
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = new Node(26, node0, node0, node0, 2, (-668));
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test03327() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nqn)|/*");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getExpressionBooleanValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test03528() throws Throwable {
        Node node0 = Node.newString(77, "undefined");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "undefined", node0);
        Node node2 = node1.cloneTree();
        NodeUtil.getExpressionBooleanValue(node2);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test03529() throws Throwable {
        Node node0 = Node.newString(77, "undefined");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "undefined", node0);
        Node node2 = node1.cloneTree();
        NodeUtil.getExpressionBooleanValue(node2);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test03630() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0);
        NodeUtil.getExpressionBooleanValue(node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test03631() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0);
        NodeUtil.getExpressionBooleanValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test03732() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = new Node(26, node0, node0, node0, 2, 0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test03733() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = new Node(26, node0, node0, node0, 2, 0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test03834() throws Throwable {
        Node node0 = Node.newString("com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher");
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03935() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(" |b", " |b");
        Node node1 = NodeUtil.newVarNode(" |b", node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test03936() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(" |b", " |b");
        Node node1 = NodeUtil.newVarNode(" |b", node0);
        String string0 = NodeUtil.arrayToString(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test03937() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(" |b", " |b");
        Node node1 = NodeUtil.newVarNode(" |b", node0);
        String string0 = NodeUtil.arrayToString(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test03938() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(" |b", " |b");
        Node node1 = NodeUtil.newVarNode(" |b", node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test04039() throws Throwable {
        Node node0 = Node.newString((int) (byte) 89, " (type ");
        Node node1 = new Node(41, node0, node0);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04140() throws Throwable {
        Node node0 = Node.newString(43, "com.google.common.collect.SingletonImmutableMap$Values");
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04241() throws Throwable {
        Node node0 = Node.newString(44, "");
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04342() throws Throwable {
        Node node0 = Node.newString(63, "'ED76%W}=Ls-r[Z<A+");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04443() throws Throwable {
        Node node0 = new Node(64);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        Node node0 = new Node(64);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04546() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04647() throws Throwable {
        Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04748() throws Throwable {
        Node node0 = Node.newString(109, "Q8rk\"pQq9Nq)|/*");
        Node node1 = new Node(26, node0, node0, node0, 2, 1189);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test04849() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("undefined");
        Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("undefined", vector0, node0, 2, 12);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test04850() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("undefined");
        Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("undefined", vector0, node0, 2, 12);
        String string0 = NodeUtil.arrayToString(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test04851() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("undefined");
        Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("undefined", vector0, node0, 2, 12);
        String string0 = NodeUtil.arrayToString(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("undefined");
        Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("undefined", vector0, node0, 2, 12);
        String string0 = NodeUtil.arrayToString(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test04853() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("undefined");
        Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("undefined", vector0, node0, 2, 12);
        String string0 = NodeUtil.arrayToString(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test04954() throws Throwable {
        Node node0 = Node.newString(29, "-Infinity");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05055() throws Throwable {
        Node node0 = Node.newString("infinity");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "infinity", node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05056() throws Throwable {
        Node node0 = Node.newString("infinity");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "infinity", node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test05057() throws Throwable {
        Node node0 = Node.newString("infinity");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "infinity", node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05158() throws Throwable {
        Node node0 = Node.newNumber((double) 49, 1872, (-2));
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05259() throws Throwable {
        Node node0 = Node.newString("5i)`KT");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05260() throws Throwable {
        Node node0 = Node.newString("5i)`KT");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05361() throws Throwable {
        Node node0 = new Node(41);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05462() throws Throwable {
        Node node0 = Node.newString(43, "LMC8Da.X?#Er");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05563() throws Throwable {
        Node node0 = Node.newString((-1077), "com.googlg.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration");
        Node node1 = new Node(44, node0, 29, 14);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05664() throws Throwable {
        Node node0 = Node.newString("fx1~BNF_`lb");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05665() throws Throwable {
        Node node0 = Node.newString("fx1~BNF_`lb");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05666() throws Throwable {
        Node node0 = Node.newString("fx1~BNF_`lb");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test05767() throws Throwable {
        Node node0 = Node.newString(106, "");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05868() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("nQ8rk\"pQq9Nq)|/*");
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "undefined", node0, "nQ8rk\"pQq9Nq)|/*");
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05869() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("nQ8rk\"pQq9Nq)|/*");
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "undefined", node0, "nQ8rk\"pQq9Nq)|/*");
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05970() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05971() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05972() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06073() throws Throwable {
        Node node0 = new Node((byte) 100);
        Node node1 = new Node(29, node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06174() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        node0.setType(1893);
        Node node1 = new Node(26, node0, node0, node0, 2, 0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06275() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(86, nodeArray0);
        Node node1 = new Node(63, node0, node0, node0, 46, 43);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06376() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("b");
    }

    @Test(timeout = 4000)
    public void test06377() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("b");
    }

    @Test(timeout = 4000)
    public void test06478() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("0Y-uSymKzP?'/PI{");
    }

    @Test(timeout = 4000)
    public void test06479() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("0Y-uSymKzP?'/PI{");
    }

    @Test(timeout = 4000)
    public void test06580() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("+infinity");
    }

    @Test(timeout = 4000)
    public void test06681() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("infinity");
    }

    @Test(timeout = 4000)
    public void test06782() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("-infinity");
    }

    @Test(timeout = 4000)
    public void test06883() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("Invalid attempt to remove node: ");
    }

    @Test(timeout = 4000)
    public void test06884() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("Invalid attempt to remove node: ");
    }

    @Test(timeout = 4000)
    public void test06985() throws Throwable {
        String string0 = NodeUtil.trimJsWhiteSpace("\n parent:");
    }

    @Test(timeout = 4000)
    public void test07086() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(9);
    }

    @Test(timeout = 4000)
    public void test07187() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(11);
    }

    @Test(timeout = 4000)
    public void test07288() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(12);
    }

    @Test(timeout = 4000)
    public void test07389() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(13);
    }

    @Test(timeout = 4000)
    public void test07490() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(8232);
    }

    @Test(timeout = 4000)
    public void test07591() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(8233);
    }

    @Test(timeout = 4000)
    public void test07692() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(65279);
    }

    @Test(timeout = 4000)
    public void test07793() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(8202);
    }

    @Test(timeout = 4000)
    public void test07894() throws Throwable {
        Node node0 = new Node(2870);
        Node node1 = NodeUtil.newVarNode("", node0);
        Node node2 = new Node(37, node1, node1, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test07895() throws Throwable {
        Node node0 = new Node(2870);
        Node node1 = NodeUtil.newVarNode("", node0);
        Node node2 = new Node(37, node1, node1, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test07896() throws Throwable {
        Node node0 = new Node(2870);
        Node node1 = NodeUtil.newVarNode("", node0);
        Node node2 = new Node(37, node1, node1, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
    }

    @Test(timeout = 4000)
    public void test07997() throws Throwable {
        Node node0 = Node.newString("neg");
        Node node1 = new Node(115, node0, node0, node0);
        Node node2 = new Node(14, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
    }

    @Test(timeout = 4000)
    public void test07998() throws Throwable {
        Node node0 = Node.newString("neg");
        Node node1 = new Node(115, node0, node0, node0);
        Node node2 = new Node(14, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
    }

    @Test(timeout = 4000)
    public void test08099() throws Throwable {
        Node node0 = new Node(62, 62, 38);
        Node node1 = new Node(26, node0, node0, node0, node0, 29, 36);
        Node node2 = node1.copyInformationFrom(node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node2, false);
    }

    @Test(timeout = 4000)
    public void test081100() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("", "");
        Node node1 = new Node(29, node0, 2, (-12));
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
    }

    @Test(timeout = 4000)
    public void test082101() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "5VK:{ZLviGH;", 48, 48);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test082102() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "5VK:{ZLviGH;", 48, 48);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test082103() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "5VK:{ZLviGH;", 48, 48);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test082104() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "5VK:{ZLviGH;", 48, 48);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test083105() throws Throwable {
        Node node0 = Node.newString("~J{rE4pxN,");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test084106() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test085107() throws Throwable {
        Node node0 = Node.newString(43, "com.google.common.collect.SingletonImmutableMap$Values");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test086108() throws Throwable {
        Node node0 = Node.newString(44, "");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test087109() throws Throwable {
        Node node0 = Node.newString(122, "S>;e(&+$D^FTP");
        NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test088110() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
    }

    @Test(timeout = 4000)
    public void test088111() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
    }

    @Test(timeout = 4000)
    public void test089112() throws Throwable {
        Node node0 = Node.newString(47, "!!");
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test090113() throws Throwable {
        Node node0 = Node.newString(63, "'ED76%W}=Ls-r[Z<A+");
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test091114() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test092115() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test093116() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test094117() throws Throwable {
        Node node0 = Node.newString(9, "\"2>$+-m)hJaKMK-");
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test095118() throws Throwable {
        Node node0 = Node.newString(10, "-=");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
    }

    @Test(timeout = 4000)
    public void test096119() throws Throwable {
        Node node0 = new Node(11);
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test097120() throws Throwable {
        Node node0 = new Node(12);
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test098121() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", (byte) 32, (byte) 32);
        Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test098122() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", (byte) 32, (byte) 32);
        Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test098123() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", (byte) 32, (byte) 32);
        Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test098124() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", (byte) 32, (byte) 32);
        Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test098125() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".prototype", (byte) 32, (byte) 32);
        Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test099126() throws Throwable {
        Node node0 = Node.newString(3552, "K9^J#WWnmOk");
        Node node1 = new Node(16, node0, node0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("nQ8rk\"pQq9Nq)|/*");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test100127() throws Throwable {
        Node node0 = Node.newString(17, "NdvmeUtil");
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ImmutableSetMultimap<ByteArrayInputStream, String> immutableSetMultimap0 = ImmutableSetMultimap.of(byteArrayInputStream0, "NdvmeUtil");
        ImmutableSet<String> immutableSet0 = immutableSetMultimap0.get(byteArrayInputStream0);
        NodeUtil.isValidDefineValue(node0, immutableSet0);
    }

    @Test(timeout = 4000)
    public void test101128() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.CodePrinter");
        Node node1 = new Node(18, node0, 29, 1);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test102129() throws Throwable {
        Node node0 = Node.newString("If this if/for/while really shouldn't have a body, use {}");
        Node node1 = new Node((byte) 19, node0, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test103130() throws Throwable {
        Node node0 = new Node(119);
        Node node1 = new Node(21, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test104131() throws Throwable {
        Node node0 = Node.newString("+infinity");
        Node node1 = new Node(22, node0, node0, 34, 14);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test105132() throws Throwable {
        Node node0 = Node.newString("+infinity");
        Node node1 = new Node(23, node0, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test106133() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "If this if/for/while really shouldn't have a body, use {}", (byte) 24, (byte) 24);
        Node node1 = new Node((byte) 24, node0, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test106134() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "If this if/for/while really shouldn't have a body, use {}", (byte) 24, (byte) 24);
        Node node1 = new Node((byte) 24, node0, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test106135() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "If this if/for/while really shouldn't have a body, use {}", (byte) 24, (byte) 24);
        Node node1 = new Node((byte) 24, node0, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test106136() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "If this if/for/while really shouldn't have a body, use {}", (byte) 24, (byte) 24);
        Node node1 = new Node((byte) 24, node0, node0, node0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test107137() throws Throwable {
        Node node0 = Node.newString(25, ";g");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test108138() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = new Node(26, node0, node0, node0, 2, 0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test109139() throws Throwable {
        Node node0 = Node.newString("+infinity");
        Node node1 = new Node(27, node0, node0, node0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("+infinity");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test110140() throws Throwable {
        Node node0 = Node.newString(28, "XMLHttpRequest");
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test111141() throws Throwable {
        Node node0 = Node.newString(29, "\"2>$+-m)hJaKMK-");
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test112142() throws Throwable {
        Node node0 = new Node(30);
        Locale locale0 = Locale.ITALIAN;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test113143() throws Throwable {
        Node node0 = Node.newString(31, "fQo\t&S~z~fUOMYJpR");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test114144() throws Throwable {
        Node node0 = Node.newString(32, "%=");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test115145() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ}isk\"pQq9Nq)|/*");
        Node node1 = new Node(35, node0, 7, 2);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test116146() throws Throwable {
        Node node0 = Node.newString("If this if/for/while really shouldn't have a body, use {}");
        Node node1 = new Node(36, node0, node0, node0, 30, 1);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test117147() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("U-Mk86p6");
        Node node1 = new Node(37, node0, 32, 37);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test118148() throws Throwable {
        Node node0 = Node.newString(39, "<tK&-y");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test119149() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        Node node1 = new Node(41, node0, node0, node0, node0, 1, 1);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test120150() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        Node node1 = new Node(42, node0, 9, 7);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    }

    @Test(timeout = 4000)
    public void test121151() throws Throwable {
        Node node0 = new Node(43);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test122152() throws Throwable {
        Node node0 = Node.newString(44, "");
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test123153() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test124154() throws Throwable {
        Node node0 = Node.newString("2Z^+?AP#2>i^^1");
        Node node1 = Node.newString(33, "+infinity");
        node1.addChildrenToFront(node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test125155() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "If this if/for/while really shouldn't have a body, use {}", (-1290), (-1290));
        HashSet<String> hashSet0 = new HashSet<String>();
        hashSet0.add("If this if/for/while really shouldn't have a body, use {}");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test126156() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ8rk\"pQq9Nqn)|/*");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test127157() throws Throwable {
        Node node0 = Node.newString(63, "Number", 63, 43);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test128158() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ8rk\"pQq9Nqn)|/*");
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test129159() throws Throwable {
        Node node0 = new Node(9, 9, 9);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test130160() throws Throwable {
        Node node0 = new Node(10);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test131161() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
    }

    @Test(timeout = 4000)
    public void test132162() throws Throwable {
        Node node0 = new Node(12);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test133163() throws Throwable {
        Node node0 = new Node(13);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test134164() throws Throwable {
        Node node0 = new Node(14, 8, 31);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test135165() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        Node node1 = new Node(15, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test136166() throws Throwable {
        Node node0 = new Node(16);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test137167() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
    }

    @Test(timeout = 4000)
    public void test138168() throws Throwable {
        Node node0 = new Node(18, 18, 18);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test139169() throws Throwable {
        Node node0 = new Node(19);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test140170() throws Throwable {
        Node node0 = new Node(20);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test141171() throws Throwable {
        Node node0 = new Node(21);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test142172() throws Throwable {
        Node node0 = new Node(22);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test143173() throws Throwable {
        Node node0 = new Node(23, 0, (-2473));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test144174() throws Throwable {
        Node node0 = new Node(24);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test145175() throws Throwable {
        Node node0 = new Node(25);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test146176() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = new Node(26, node0, node0, node0, 2, 0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test147177() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    }

    @Test(timeout = 4000)
    public void test148178() throws Throwable {
        Node node0 = new Node(28, 28, 28);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test149179() throws Throwable {
        Node node0 = new Node(29, 29, (byte) 112);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test150180() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    }

    @Test(timeout = 4000)
    public void test151181() throws Throwable {
        Node node0 = new Node(31);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test152182() throws Throwable {
        Node node0 = new Node((byte) 32);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test153183() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test154184() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test155185() throws Throwable {
        Node node0 = new Node(35);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test156186() throws Throwable {
        Node node0 = new Node(367);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isSimpleOperator(node1);
    }

    @Test(timeout = 4000)
    public void test156187() throws Throwable {
        Node node0 = new Node(367);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isSimpleOperator(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test157188() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 22, 22);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test157189() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 22, 22);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    }

    @Test(timeout = 4000)
    public void test157190() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 22, 22);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test158191() throws Throwable {
        Node node0 = new Node(39);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test159192() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    }

    @Test(timeout = 4000)
    public void test160193() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test161194() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test162195() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    }

    @Test(timeout = 4000)
    public void test163196() throws Throwable {
        Node node0 = new Node(48);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test164197() throws Throwable {
        Node node0 = new Node(49);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test165198() throws Throwable {
        Node node0 = new Node(50);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test166199() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType((byte) 51);
    }

    @Test(timeout = 4000)
    public void test167200() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "false", 90, 90);
        Node node1 = new Node(52, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test167201() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "false", 90, 90);
        Node node1 = new Node(52, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test167202() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "false", 90, 90);
        Node node1 = new Node(52, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test167203() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "false", 90, 90);
        Node node1 = new Node(52, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test168204() throws Throwable {
        Node node0 = new Node(53);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test169205() throws Throwable {
        Node node0 = new Node(54, 54, 54);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test170206() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(55);
    }

    @Test(timeout = 4000)
    public void test171207() throws Throwable {
        Node node0 = new Node(56, 56, 56);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test172208() throws Throwable {
        Node node0 = new Node(57);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test173209() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test174210() throws Throwable {
        Node node0 = new Node(59);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test175211() throws Throwable {
        Node node0 = Node.newString(61, "ko2yGsy'J0]qgF;w");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test176212() throws Throwable {
        Node node0 = new Node(62, 62, 62);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test177213() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    }

    @Test(timeout = 4000)
    public void test178214() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    }

    @Test(timeout = 4000)
    public void test179215() throws Throwable {
        Node node0 = new Node(65);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test180216() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test181217() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test182218() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test183219() throws Throwable {
        Node node0 = new Node(69);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test184220() throws Throwable {
        Node node0 = new Node(70);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test185221() throws Throwable {
        Node node0 = new Node(71, 71, 71);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test186222() throws Throwable {
        Node node0 = new Node(72);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test187223() throws Throwable {
        Node node0 = new Node(73);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test188224() throws Throwable {
        Node node0 = new Node(74, (-185), 74);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test189225() throws Throwable {
        Node node0 = new Node(75);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test190226() throws Throwable {
        Node node0 = new Node(76);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test191227() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test192228() throws Throwable {
        Node node0 = new Node(78);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test193229() throws Throwable {
        Node node0 = new Node(79);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test194230() throws Throwable {
        Node node0 = new Node(80, 621, 4);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test195231() throws Throwable {
        Node node0 = new Node(81);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test196232() throws Throwable {
        Node node0 = new Node(82);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test197233() throws Throwable {
        Node node0 = new Node(83);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test198234() throws Throwable {
        Node node0 = new Node(84);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test199235() throws Throwable {
        Node node0 = new Node(85);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test200236() throws Throwable {
        Node node0 = new Node(86, 104, 86);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test201237() throws Throwable {
        Node node0 = new Node(87);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test202238() throws Throwable {
        Node node0 = new Node(88);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test203239() throws Throwable {
        Node node0 = new Node(89, 89, 113);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test204240() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("", "");
        Node node1 = new Node(91, node0, node0, node0, 2599, 37);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test205241() throws Throwable {
        Node node0 = new Node(92);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test206242() throws Throwable {
        Node node0 = new Node(93, 93, 2518);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test207243() throws Throwable {
        Node node0 = new Node(95, 95, 95);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test208244() throws Throwable {
        Node node0 = new Node(96, 96, 96);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test209245() throws Throwable {
        Node node0 = new Node(97);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test210246() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    }

    @Test(timeout = 4000)
    public void test211247() throws Throwable {
        Node node0 = new Node(99);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test212248() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    }

    @Test(timeout = 4000)
    public void test213249() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    }

    @Test(timeout = 4000)
    public void test214250() throws Throwable {
        Node node0 = Node.newString(102, "-=");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test215251() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test216252() throws Throwable {
        Node node0 = new Node(104, 104, 104);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test217253() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    }

    @Test(timeout = 4000)
    public void test218254() throws Throwable {
        Node node0 = Node.newString(106, "");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test219255() throws Throwable {
        Node node0 = new Node(107, 107, 107);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test220256() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    }

    @Test(timeout = 4000)
    public void test221257() throws Throwable {
        Node node0 = new Node(110);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test222258() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test223259() throws Throwable {
        Node node0 = new Node((byte) 112);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test224260() throws Throwable {
        Node node0 = Node.newString(113, "Cm(");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test225261() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test226262() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test227263() throws Throwable {
        Node node0 = new Node(116, 116, 116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test228264() throws Throwable {
        Node node0 = new Node(117);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test229265() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
    }

    @Test(timeout = 4000)
    public void test230266() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test231267() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test232268() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test233269() throws Throwable {
        Node node0 = Node.newString("fx1~BNF_`lb");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test233270() throws Throwable {
        Node node0 = Node.newString("fx1~BNF_`lb");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test234271() throws Throwable {
        Node node0 = Node.newString(36, "T:[8>a)Kx*");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test235272() throws Throwable {
        Node node0 = new Node(30);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test235273() throws Throwable {
        Node node0 = new Node(30);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test236274() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test237275() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test238276() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test239277() throws Throwable {
        Node node0 = new Node(44, 44, 2139);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test240278() throws Throwable {
        Node node0 = new Node(46, 8, 37);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test241279() throws Throwable {
        Node node0 = Node.newString(47, "==");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test242280() throws Throwable {
        Node node0 = Node.newString("qo<]q}I-eDw_nm[`M^");
        Node node1 = new Node(50, node0, node0);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
    }

    @Test(timeout = 4000)
    public void test243281() throws Throwable {
        Node node0 = new Node((byte) 51);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test244282() throws Throwable {
        Node node0 = new Node(53, 53, 53);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test245283() throws Throwable {
        Node node0 = new Node(54);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test246284() throws Throwable {
        Node node0 = Node.newString(56, "ko2yGsy'J0]qgF;w");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test247285() throws Throwable {
        Node node0 = Node.newString(57, "; ");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test248286() throws Throwable {
        Node node0 = new Node(59);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test249287() throws Throwable {
        Node node0 = new Node((byte) 63, (-1401), (-1401));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test250288() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test251289() throws Throwable {
        Node node0 = new Node(66);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test252290() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test253291() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test254292() throws Throwable {
        Node node0 = new Node(72);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test255293() throws Throwable {
        Node node0 = new Node(74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test256294() throws Throwable {
        Node node0 = new Node(75);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test257295() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test258296() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test259297() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test260298() throws Throwable {
        Node node0 = new Node(81);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test261299() throws Throwable {
        Node node0 = new Node(82);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test262300() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Vector<JSType> vector0 = new Vector<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test263301() throws Throwable {
        Node node0 = new Node(84, 84, 84);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test264302() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test265303() throws Throwable {
        Node node0 = new Node(99);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test266304() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test267305() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test268306() throws Throwable {
        Node node0 = new Node(104, 104, 104);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test269307() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test270308() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test271309() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test272310() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test273311() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test274312() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test275313() throws Throwable {
        Node node0 = new Node((byte) 123);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test276314() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test277315() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test278316() throws Throwable {
        Node node0 = new Node(127);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test279317() throws Throwable {
        Node node0 = NodeUtil.newVarNode("e>{;uw", (Node) null);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test279318() throws Throwable {
        Node node0 = NodeUtil.newVarNode("e>{;uw", (Node) null);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test280319() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test281320() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "<=jy4T", 3486, (-1231));
        Node node1 = new Node(94, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test281321() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "<=jy4T", 3486, (-1231));
        Node node1 = new Node(94, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test281322() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "<=jy4T", 3486, (-1231));
        Node node1 = new Node(94, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test282323() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("|=", "|=");
        Node node1 = new Node(91, node0, node0, node0, 43, 37);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test283324() throws Throwable {
        Node node0 = Node.newString("replace");
        Node node1 = new Node(90, node0);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
    }

    @Test(timeout = 4000)
    public void test284325() throws Throwable {
        Node node0 = Node.newString(30, "Too many elements to create power set: %s > 30");
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test285326() throws Throwable {
        Node node0 = new Node(38);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test286327() throws Throwable {
        Node node0 = new Node(103);
        NodeUtil.callHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test287328() throws Throwable {
        Node node0 = new Node(30);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test287329() throws Throwable {
        Node node0 = new Node(30);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test288330() throws Throwable {
        Node node0 = new Node(114);
        NodeUtil.newHasLocalResult(node0);
    }

    @Test(timeout = 4000)
    public void test289331() throws Throwable {
        Node node0 = new Node(30);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test290332() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "<=jy4T", 3486, (-1231));
        Node node1 = new Node(94, node0, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test290333() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "<=jy4T", 3486, (-1231));
        Node node1 = new Node(94, node0, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test290334() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "<=jy4T", 3486, (-1231));
        Node node1 = new Node(94, node0, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test291335() throws Throwable {
        Node node0 = new Node(31);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test292336() throws Throwable {
        Node node0 = new Node(37);
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test293337() throws Throwable {
        Node node0 = Node.newString("infinity");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "infinity", node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test293338() throws Throwable {
        Node node0 = Node.newString("infinity");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "infinity", node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test294339() throws Throwable {
        Node node0 = Node.newString(49, "'ED76%W}=Ls-r[Z<A+", 49, 49);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test295340() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test296341() throws Throwable {
        Node node0 = Node.newString(30, "\"2>$+-m)hJaKMK-");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test297342() throws Throwable {
        Node node0 = new Node(367, 367, 367);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    }

    @Test(timeout = 4000)
    public void test298343() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test299344() throws Throwable {
        Node node0 = new Node(64);
        Node node1 = new Node(103, node0, node0, 36, 2439);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    }

    @Test(timeout = 4000)
    public void test300345() throws Throwable {
        Node node0 = Node.newString("2Z^+?AP#2>i^^1");
        Node node1 = Node.newString(33, "2Z^+?AP#2>i^^1");
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test301346() throws Throwable {
        int int0 = NodeUtil.precedence(4);
    }

    @Test(timeout = 4000)
    public void test302347() throws Throwable {
        int int0 = NodeUtil.precedence(103);
    }

    @Test(timeout = 4000)
    public void test303348() throws Throwable {
        NodeUtil.precedence(5);
    }

    @Test(timeout = 4000)
    public void test304349() throws Throwable {
        NodeUtil.precedence(6);
    }

    @Test(timeout = 4000)
    public void test305350() throws Throwable {
        NodeUtil.precedence(7);
    }

    @Test(timeout = 4000)
    public void test306351() throws Throwable {
        NodeUtil.precedence(8);
    }

    @Test(timeout = 4000)
    public void test307352() throws Throwable {
        int int0 = NodeUtil.precedence(9);
    }

    @Test(timeout = 4000)
    public void test308353() throws Throwable {
        int int0 = NodeUtil.precedence(10);
    }

    @Test(timeout = 4000)
    public void test309354() throws Throwable {
        int int0 = NodeUtil.precedence(11);
    }

    @Test(timeout = 4000)
    public void test310355() throws Throwable {
        int int0 = NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test311356() throws Throwable {
        int int0 = NodeUtil.precedence(13);
    }

    @Test(timeout = 4000)
    public void test312357() throws Throwable {
        int int0 = NodeUtil.precedence(14);
    }

    @Test(timeout = 4000)
    public void test313358() throws Throwable {
        int int0 = NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test314359() throws Throwable {
        int int0 = NodeUtil.precedence(16);
    }

    @Test(timeout = 4000)
    public void test315360() throws Throwable {
        int int0 = NodeUtil.precedence(17);
    }

    @Test(timeout = 4000)
    public void test316361() throws Throwable {
        int int0 = NodeUtil.precedence(18);
    }

    @Test(timeout = 4000)
    public void test317362() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 19);
    }

    @Test(timeout = 4000)
    public void test318363() throws Throwable {
        int int0 = NodeUtil.precedence(20);
    }

    @Test(timeout = 4000)
    public void test319364() throws Throwable {
        int int0 = NodeUtil.precedence(21);
    }

    @Test(timeout = 4000)
    public void test320365() throws Throwable {
        int int0 = NodeUtil.precedence(22);
    }

    @Test(timeout = 4000)
    public void test321366() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 23);
    }

    @Test(timeout = 4000)
    public void test322367() throws Throwable {
        int int0 = NodeUtil.precedence(24);
    }

    @Test(timeout = 4000)
    public void test323368() throws Throwable {
        int int0 = NodeUtil.precedence(25);
    }

    @Test(timeout = 4000)
    public void test324369() throws Throwable {
        int int0 = NodeUtil.precedence(26);
    }

    @Test(timeout = 4000)
    public void test325370() throws Throwable {
        int int0 = NodeUtil.precedence(27);
    }

    @Test(timeout = 4000)
    public void test326371() throws Throwable {
        int int0 = NodeUtil.precedence(28);
    }

    @Test(timeout = 4000)
    public void test327372() throws Throwable {
        int int0 = NodeUtil.precedence(29);
    }

    @Test(timeout = 4000)
    public void test328373() throws Throwable {
        int int0 = NodeUtil.precedence(30);
    }

    @Test(timeout = 4000)
    public void test329374() throws Throwable {
        int int0 = NodeUtil.precedence(31);
    }

    @Test(timeout = 4000)
    public void test330375() throws Throwable {
        int int0 = NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test331376() throws Throwable {
        int int0 = NodeUtil.precedence(33);
    }

    @Test(timeout = 4000)
    public void test332377() throws Throwable {
        NodeUtil.precedence(34);
    }

    @Test(timeout = 4000)
    public void test333378() throws Throwable {
        int int0 = NodeUtil.precedence(35);
    }

    @Test(timeout = 4000)
    public void test334379() throws Throwable {
        NodeUtil.precedence(36);
    }

    @Test(timeout = 4000)
    public void test335380() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 37);
    }

    @Test(timeout = 4000)
    public void test336381() throws Throwable {
        int int0 = NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test337382() throws Throwable {
        int int0 = NodeUtil.precedence(39);
    }

    @Test(timeout = 4000)
    public void test338383() throws Throwable {
        int int0 = NodeUtil.precedence(40);
    }

    @Test(timeout = 4000)
    public void test339384() throws Throwable {
        int int0 = NodeUtil.precedence(41);
    }

    @Test(timeout = 4000)
    public void test340385() throws Throwable {
        int int0 = NodeUtil.precedence(42);
    }

    @Test(timeout = 4000)
    public void test341386() throws Throwable {
        int int0 = NodeUtil.precedence(43);
    }

    @Test(timeout = 4000)
    public void test342387() throws Throwable {
        int int0 = NodeUtil.precedence(44);
    }

    @Test(timeout = 4000)
    public void test343388() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 45);
    }

    @Test(timeout = 4000)
    public void test344389() throws Throwable {
        int int0 = NodeUtil.precedence(46);
    }

    @Test(timeout = 4000)
    public void test345390() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 47);
    }

    @Test(timeout = 4000)
    public void test346391() throws Throwable {
        NodeUtil.precedence(48);
    }

    @Test(timeout = 4000)
    public void test347392() throws Throwable {
        NodeUtil.precedence(49);
    }

    @Test(timeout = 4000)
    public void test348393() throws Throwable {
        NodeUtil.precedence(50);
    }

    @Test(timeout = 4000)
    public void test349394() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 51);
    }

    @Test(timeout = 4000)
    public void test350395() throws Throwable {
        int int0 = NodeUtil.precedence(52);
    }

    @Test(timeout = 4000)
    public void test351396() throws Throwable {
        NodeUtil.precedence(53);
    }

    @Test(timeout = 4000)
    public void test352397() throws Throwable {
        NodeUtil.precedence(54);
    }

    @Test(timeout = 4000)
    public void test353398() throws Throwable {
        NodeUtil.precedence(55);
    }

    @Test(timeout = 4000)
    public void test354399() throws Throwable {
        NodeUtil.precedence(56);
    }

    @Test(timeout = 4000)
    public void test355400() throws Throwable {
        NodeUtil.precedence(57);
    }

    @Test(timeout = 4000)
    public void test356401() throws Throwable {
        NodeUtil.precedence(58);
    }

    @Test(timeout = 4000)
    public void test357402() throws Throwable {
        NodeUtil.precedence(59);
    }

    @Test(timeout = 4000)
    public void test358403() throws Throwable {
        NodeUtil.precedence(60);
    }

    @Test(timeout = 4000)
    public void test359404() throws Throwable {
        NodeUtil.precedence((byte) 61);
    }

    @Test(timeout = 4000)
    public void test360405() throws Throwable {
        NodeUtil.precedence(62);
    }

    @Test(timeout = 4000)
    public void test361406() throws Throwable {
        int int0 = NodeUtil.precedence(63);
    }

    @Test(timeout = 4000)
    public void test362407() throws Throwable {
        int int0 = NodeUtil.precedence(64);
    }

    @Test(timeout = 4000)
    public void test363408() throws Throwable {
        int int0 = NodeUtil.precedence(65);
    }

    @Test(timeout = 4000)
    public void test364409() throws Throwable {
        NodeUtil.precedence(67);
    }

    @Test(timeout = 4000)
    public void test365410() throws Throwable {
        NodeUtil.precedence(68);
    }

    @Test(timeout = 4000)
    public void test366411() throws Throwable {
        NodeUtil.precedence(69);
    }

    @Test(timeout = 4000)
    public void test367412() throws Throwable {
        NodeUtil.precedence(70);
    }

    @Test(timeout = 4000)
    public void test368413() throws Throwable {
        NodeUtil.precedence((byte) 71);
    }

    @Test(timeout = 4000)
    public void test369414() throws Throwable {
        NodeUtil.precedence(72);
    }

    @Test(timeout = 4000)
    public void test370415() throws Throwable {
        NodeUtil.precedence(74);
    }

    @Test(timeout = 4000)
    public void test371416() throws Throwable {
        NodeUtil.precedence((byte) 75);
    }

    @Test(timeout = 4000)
    public void test372417() throws Throwable {
        NodeUtil.precedence((byte) 76);
    }

    @Test(timeout = 4000)
    public void test373418() throws Throwable {
        NodeUtil.precedence(77);
    }

    @Test(timeout = 4000)
    public void test374419() throws Throwable {
        NodeUtil.precedence(78);
    }

    @Test(timeout = 4000)
    public void test375420() throws Throwable {
        NodeUtil.precedence(79);
    }

    @Test(timeout = 4000)
    public void test376421() throws Throwable {
        NodeUtil.precedence((byte) 80);
    }

    @Test(timeout = 4000)
    public void test377422() throws Throwable {
        NodeUtil.precedence(81);
    }

    @Test(timeout = 4000)
    public void test378423() throws Throwable {
        NodeUtil.precedence(82);
    }

    @Test(timeout = 4000)
    public void test379424() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 83);
    }

    @Test(timeout = 4000)
    public void test380425() throws Throwable {
        NodeUtil.precedence(84);
    }

    @Test(timeout = 4000)
    public void test381426() throws Throwable {
        int int0 = NodeUtil.precedence(85);
    }

    @Test(timeout = 4000)
    public void test382427() throws Throwable {
        int int0 = NodeUtil.precedence(86);
    }

    @Test(timeout = 4000)
    public void test383428() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 87);
    }

    @Test(timeout = 4000)
    public void test384429() throws Throwable {
        int int0 = NodeUtil.precedence(88);
    }

    @Test(timeout = 4000)
    public void test385430() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 89);
    }

    @Test(timeout = 4000)
    public void test386431() throws Throwable {
        int int0 = NodeUtil.precedence(90);
    }

    @Test(timeout = 4000)
    public void test387432() throws Throwable {
        int int0 = NodeUtil.precedence(91);
    }

    @Test(timeout = 4000)
    public void test388433() throws Throwable {
        int int0 = NodeUtil.precedence(92);
    }

    @Test(timeout = 4000)
    public void test389434() throws Throwable {
        int int0 = NodeUtil.precedence(93);
    }

    @Test(timeout = 4000)
    public void test390435() throws Throwable {
        int int0 = NodeUtil.precedence(94);
    }

    @Test(timeout = 4000)
    public void test391436() throws Throwable {
        int int0 = NodeUtil.precedence(95);
    }

    @Test(timeout = 4000)
    public void test392437() throws Throwable {
        int int0 = NodeUtil.precedence(96);
    }

    @Test(timeout = 4000)
    public void test393438() throws Throwable {
        int int0 = NodeUtil.precedence(97);
    }

    @Test(timeout = 4000)
    public void test394439() throws Throwable {
        int int0 = NodeUtil.precedence(98);
    }

    @Test(timeout = 4000)
    public void test395440() throws Throwable {
        NodeUtil.precedence(99);
    }

    @Test(timeout = 4000)
    public void test396441() throws Throwable {
        int int0 = NodeUtil.precedence((byte) 100);
    }

    @Test(timeout = 4000)
    public void test397442() throws Throwable {
        int int0 = NodeUtil.precedence(101);
    }

    @Test(timeout = 4000)
    public void test398443() throws Throwable {
        int int0 = NodeUtil.precedence(102);
    }

    @Test(timeout = 4000)
    public void test399444() throws Throwable {
        NodeUtil.precedence(104);
    }

    @Test(timeout = 4000)
    public void test400445() throws Throwable {
        int int0 = NodeUtil.precedence(105);
    }

    @Test(timeout = 4000)
    public void test401446() throws Throwable {
        NodeUtil.precedence(106);
    }

    @Test(timeout = 4000)
    public void test402447() throws Throwable {
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test403448() throws Throwable {
        int int0 = NodeUtil.precedence(108);
    }

    @Test(timeout = 4000)
    public void test404449() throws Throwable {
        NodeUtil.precedence(109);
    }

    @Test(timeout = 4000)
    public void test405450() throws Throwable {
        NodeUtil.precedence(110);
    }

    @Test(timeout = 4000)
    public void test406451() throws Throwable {
        NodeUtil.precedence(111);
    }

    @Test(timeout = 4000)
    public void test407452() throws Throwable {
        NodeUtil.precedence((byte) 112);
    }

    @Test(timeout = 4000)
    public void test408453() throws Throwable {
        NodeUtil.precedence(113);
    }

    @Test(timeout = 4000)
    public void test409454() throws Throwable {
        NodeUtil.precedence((byte) 114);
    }

    @Test(timeout = 4000)
    public void test410455() throws Throwable {
        NodeUtil.precedence(115);
    }

    @Test(timeout = 4000)
    public void test411456() throws Throwable {
        NodeUtil.precedence(116);
    }

    @Test(timeout = 4000)
    public void test412457() throws Throwable {
        NodeUtil.precedence(117);
    }

    @Test(timeout = 4000)
    public void test413458() throws Throwable {
        NodeUtil.precedence((byte) 118);
    }

    @Test(timeout = 4000)
    public void test414459() throws Throwable {
        NodeUtil.precedence(119);
    }

    @Test(timeout = 4000)
    public void test415460() throws Throwable {
        NodeUtil.precedence(120);
    }

    @Test(timeout = 4000)
    public void test416461() throws Throwable {
        NodeUtil.precedence(121);
    }

    @Test(timeout = 4000)
    public void test417462() throws Throwable {
        int int0 = NodeUtil.precedence(122);
    }

    @Test(timeout = 4000)
    public void test418463() throws Throwable {
        NodeUtil.precedence(123);
    }

    @Test(timeout = 4000)
    public void test419464() throws Throwable {
        int int0 = NodeUtil.precedence(124);
    }

    @Test(timeout = 4000)
    public void test420465() throws Throwable {
        NodeUtil.precedence(65279);
    }

    @Test(timeout = 4000)
    public void test421466() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test422467() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test423468() throws Throwable {
        Node node0 = Node.newString(98, "replace");
        NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test424469() throws Throwable {
        Node node0 = new Node((byte) 100);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "Zju5S", node0);
        node0.addChildToFront(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test424470() throws Throwable {
        Node node0 = new Node((byte) 100);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "Zju5S", node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test425471() throws Throwable {
        Node node0 = new Node(9, (byte) 51, (byte) 51);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test426472() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        Node node1 = new Node(10, node0, node0, 0, (-22));
        boolean boolean0 = NodeUtil.mayBeString(node1);
    }

    @Test(timeout = 4000)
    public void test427473() throws Throwable {
        Node node0 = new Node(11);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test428474() throws Throwable {
        Node node0 = new Node(18);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test429475() throws Throwable {
        Node node0 = Node.newString(19, " hiL2X%a**y");
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test430476() throws Throwable {
        Node node0 = new Node(20, 20, 99);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test431477() throws Throwable {
        Node node0 = new Node(119);
        Node node1 = new Node(21, node0);
        Node node2 = node1.copyInformationFrom(node0);
        boolean boolean0 = NodeUtil.mayBeString(node2);
    }

    @Test(timeout = 4000)
    public void test432478() throws Throwable {
        Node node0 = Node.newString("+infinity");
        Node node1 = new Node(22, node0, node0, 34, 14);
        boolean boolean0 = NodeUtil.mayBeString(node1);
    }

    @Test(timeout = 4000)
    public void test433479() throws Throwable {
        Node node0 = new Node(24);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test434480() throws Throwable {
        Node node0 = Node.newString(25, "false");
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test435481() throws Throwable {
        Node node0 = new Node(62, 62, 38);
        Node node1 = new Node(27, node0);
        Node node2 = node1.copyInformationFrom(node0);
        boolean boolean0 = NodeUtil.mayBeString(node2);
    }

    @Test(timeout = 4000)
    public void test436482() throws Throwable {
        Node node0 = new Node(28);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test437483() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test438484() throws Throwable {
        Node node0 = new Node(39);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test439485() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test440486() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test441487() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", (byte) 118, 1);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test441488() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", (byte) 118, 1);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test441489() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", (byte) 118, 1);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test442490() throws Throwable {
        Node node0 = new Node(12);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test443491() throws Throwable {
        Node node0 = new Node(14, 23, 15);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test444492() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "If this if/for/while really shouldn't have a body, use {}", (byte) 32, (byte) 32);
        Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test444493() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "If this if/for/while really shouldn't have a body, use {}", (byte) 32, (byte) 32);
        Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test444494() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "If this if/for/while really shouldn't have a body, use {}", (byte) 32, (byte) 32);
        Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test444495() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "If this if/for/while really shouldn't have a body, use {}", (byte) 32, (byte) 32);
        Node node1 = new Node(15, node0, node0, node0, node0, 0, 0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
    }

    @Test(timeout = 4000)
    public void test445496() throws Throwable {
        Node node0 = new Node(16);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test446497() throws Throwable {
        Node node0 = new Node(17);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test447498() throws Throwable {
        Node node0 = new Node(368);
        Node node1 = new Node(18, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test448499() throws Throwable {
        Node node0 = new Node(19);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test449500() throws Throwable {
        Node node0 = new Node(20, (-3214), (-1370));
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test450501() throws Throwable {
        Node node0 = new Node(23, 0, (-2473));
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test451502() throws Throwable {
        Node node0 = Node.newString(93, "9Pq0`>7yQN");
        Node node1 = new Node(25, node0, node0, node0, 29, (-419));
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test452503() throws Throwable {
        Node node0 = new Node(26);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test453504() throws Throwable {
        Node node0 = Node.newString("+infinity");
        Node node1 = new Node(27, node0, node0, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test454505() throws Throwable {
        Node node0 = Node.newString(63, "Number", 63, 43);
        Node node1 = new Node(28, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test455506() throws Throwable {
        Node node0 = new Node((byte) 100);
        Node node1 = new Node(29, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test456507() throws Throwable {
        Node node0 = new Node(31);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test457508() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test458509() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test459510() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test460511() throws Throwable {
        Node node0 = new Node(35);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test461512() throws Throwable {
        Node node0 = new Node(39, 39, 39);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test462513() throws Throwable {
        Node node0 = Node.newString(41, "LMC8Da.X?#Er");
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test463514() throws Throwable {
        Node node0 = new Node(42, 92, 20);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test464515() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test465516() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = new Node(44, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test466517() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test467518() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test468519() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test469520() throws Throwable {
        Node node0 = new Node(48);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test470521() throws Throwable {
        Node node0 = Node.newString("infinity");
        Node node1 = new Node(49, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test471522() throws Throwable {
        Node node0 = new Node(50);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test472523() throws Throwable {
        Node node0 = new Node((byte) 51);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test473524() throws Throwable {
        Node node0 = Node.newString("+infinity");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.isUndefined(node1);
    }

    @Test(timeout = 4000)
    public void test474525() throws Throwable {
        Node node0 = new Node(41);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test475526() throws Throwable {
        Node node0 = Node.newString("+infinity");
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
    }

    @Test(timeout = 4000)
    public void test476527() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test476528() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test477529() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
    }

    @Test(timeout = 4000)
    public void test478530() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(38);
    }

    @Test(timeout = 4000)
    public void test479531() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(10);
    }

    @Test(timeout = 4000)
    public void test480532() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
    }

    @Test(timeout = 4000)
    public void test481533() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
    }

    @Test(timeout = 4000)
    public void test482534() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
    }

    @Test(timeout = 4000)
    public void test483535() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
    }

    @Test(timeout = 4000)
    public void test484536() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(9);
    }

    @Test(timeout = 4000)
    public void test485537() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(48);
    }

    @Test(timeout = 4000)
    public void test486538() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(11);
    }

    @Test(timeout = 4000)
    public void test487539() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(23);
    }

    @Test(timeout = 4000)
    public void test488540() throws Throwable {
        Node node0 = new Node(87);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test489541() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test490542() throws Throwable {
        Node node0 = Node.newString(68, "+xO'J,S3~");
        Node node1 = new Node(88, node0, node0, 2871, 29);
        int int0 = NodeUtil.getOpFromAssignmentOp(node1);
    }

    @Test(timeout = 4000)
    public void test491543() throws Throwable {
        Node node0 = Node.newString(89, "KKefsF_]", 89, 89);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test492544() throws Throwable {
        Node node0 = Node.newString(93, "prototype");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test493545() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test494546() throws Throwable {
        Node node0 = Node.newString(96, "DEC");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test495547() throws Throwable {
        Node node0 = Node.newString("0Y-uSymKzP?'/PI{");
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
    }

    @Test(timeout = 4000)
    public void test496548() throws Throwable {
        Node node0 = Node.newString(130, "+infinity");
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
    }

    @Test(timeout = 4000)
    public void test497549() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        boolean boolean0 = NodeUtil.isGet(node0);
    }

    @Test(timeout = 4000)
    public void test498550() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil", 1273, 1273);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test498551() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil", 1273, 1273);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test498552() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil", 1273, 1273);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
    }

    @Test(timeout = 4000)
    public void test498553() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil", 1273, 1273);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test498554() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil", 1273, 1273);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test499555() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
    }

    @Test(timeout = 4000)
    public void test500556() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "5VK:{ZLviGH;", 48, 48);
        node0.addChildAfter(node0, node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test500557() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "5VK:{ZLviGH;", 48, 48);
        node0.addChildAfter(node0, node0);
        NodeUtil.getAssignedValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test500558() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "5VK:{ZLviGH;", 48, 48);
        node0.addChildAfter(node0, node0);
        NodeUtil.getAssignedValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test501559() throws Throwable {
        Node node0 = Node.newString("infinity");
        Node node1 = NodeUtil.newVarNode("infinity", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
    }

    @Test(timeout = 4000)
    public void test501560() throws Throwable {
        Node node0 = Node.newString("infinity");
        Node node1 = NodeUtil.newVarNode("infinity", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test502561() throws Throwable {
        Node node0 = new Node((-257));
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.has(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test503562() throws Throwable {
        Node node0 = Node.newString("~J{rE4pxN,");
        boolean boolean0 = NodeUtil.isString(node0);
    }

    @Test(timeout = 4000)
    public void test504563() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
    }

    @Test(timeout = 4000)
    public void test504564() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test505565() throws Throwable {
        Node node0 = Node.newString("'ED6W}=Ls-r[Zs<A+");
        Node node1 = new Node(86, node0);
        boolean boolean0 = NodeUtil.isAssign(node1);
    }

    @Test(timeout = 4000)
    public void test506566() throws Throwable {
        Node node0 = Node.newString(111, "nQ8rk\"pQq9Nq)|/*");
        boolean boolean0 = NodeUtil.isExprCall(node0);
    }

    @Test(timeout = 4000)
    public void test507567() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test507568() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
    }

    @Test(timeout = 4000)
    public void test508569() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
    }

    @Test(timeout = 4000)
    public void test509570() throws Throwable {
        Node node0 = new Node(19);
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test510571() throws Throwable {
        Node node0 = Node.newString("fQo\t&S~z~fUOMYJpR");
        Node node1 = new Node(115, node0, node0, node0);
        Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
        node2.hasChildren();
    }

    @Test(timeout = 4000)
    public void test511572() throws Throwable {
        Node node0 = Node.newString("nVeg");
        Node node1 = new Node(15, node0, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test512573() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test513574() throws Throwable {
        Node node0 = Node.newString("neg");
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test514575() throws Throwable {
        Node node0 = Node.newString("neg");
        Node node1 = new Node(115, node0, node0, node0);
        Node node2 = NodeUtil.getLoopCodeBlock(node1);
    }

    @Test(timeout = 4000)
    public void test515576() throws Throwable {
        Node node0 = Node.newString("neg");
        Node node1 = new Node(115, node0, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test516577() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = new Node(105, node0, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test517578() throws Throwable {
        Node node0 = Node.newString(26, "J97");
        Node node1 = new Node(77, node0, node0, 0, 1324);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
    }

    @Test(timeout = 4000)
    public void test518579() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test519580() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test520581() throws Throwable {
        Node node0 = Node.newString(110, "javascript");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test521582() throws Throwable {
        Node node0 = Node.newString(111, "x:;z;xB3bAG3=e");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test522583() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test523584() throws Throwable {
        Node node0 = Node.newString(113, "4$4pETVH/");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test524585() throws Throwable {
        Node node0 = Node.newString("neg");
        Node node1 = new Node(115, node0, node0, node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test525586() throws Throwable {
        Node node0 = Node.newString((int) (byte) 119, "koDgqJh=vG*kE");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test526587() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test527588() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test528589() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test529590() throws Throwable {
        Node node0 = Node.newString(110, "javascript");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test530591() throws Throwable {
        Node node0 = Node.newString(111, "nQ8rk\"pQq9Nq)|/*");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test531592() throws Throwable {
        Node node0 = Node.newString((int) (byte) 112, "javascript");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test532593() throws Throwable {
        Node node0 = Node.newString("fQo\t&S~z~fUOMYJpR");
        Node node1 = new Node(115, node0, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node1);
    }

    @Test(timeout = 4000)
    public void test533594() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = new Node(120, node0, node0, node0, 38, 0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    }

    @Test(timeout = 4000)
    public void test534595() throws Throwable {
        Node node0 = Node.newString("~J{rE4pxN,");
        NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test535596() throws Throwable {
        Node node0 = Node.newString("fQo\t&S~z~fUOMYJpR");
        Node node1 = new Node(115, node0, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    }

    @Test(timeout = 4000)
    public void test536597() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test537598() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test538599() throws Throwable {
        Node node0 = Node.newString(108, "google");
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test539600() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test540601() throws Throwable {
        Node node0 = Node.newString(110, "javascript");
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test541602() throws Throwable {
        Node node0 = Node.newString(111, "nQ8rk\"pQq9Nq)|/*");
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test542603() throws Throwable {
        Node node0 = Node.newString((int) (byte) 112, "javascript");
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test543604() throws Throwable {
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.MaybeReachingVariableUse", 113, 113);
        Node node1 = new Node(113, node0, 22, 23);
        peepholeRemoveDeadCode0.tryFoldWhile(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test543605() throws Throwable {
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.MaybeReachingVariableUse", 113, 113);
        Node node1 = new Node(113, node0, 22, 23);
        peepholeRemoveDeadCode0.tryFoldWhile(node1);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test543606() throws Throwable {
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.MaybeReachingVariableUse", 113, 113);
        Node node1 = new Node(113, node0, 22, 23);
        peepholeRemoveDeadCode0.tryFoldWhile(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test543607() throws Throwable {
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.MaybeReachingVariableUse", 113, 113);
        Node node1 = new Node(113, node0, 22, 23);
        peepholeRemoveDeadCode0.tryFoldWhile(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test544608() throws Throwable {
        Node node0 = Node.newString("fQo\t&S~z~fUOMYJpR");
        Node node1 = new Node(115, node0, node0, node0);
        NodeUtil.getConditionExpression(node1);
    }

    @Test(timeout = 4000)
    public void test545609() throws Throwable {
        Node node0 = Node.newString((-1077), "com.googlg.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration");
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test546610() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ8rk\"pQq9Nqn)|/*");
        node0.addChildrenToBack(node0);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test547611() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = NodeUtil.newExpr(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test547612() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
    }

    @Test(timeout = 4000)
    public void test548613() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ8rk\"pQq9Nqn)|/*");
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
    }

    @Test(timeout = 4000)
    public void test549614() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("nQ8rk\"pQq9Nq)|/*");
        Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
    }

    @Test(timeout = 4000)
    public void test550615() throws Throwable {
        Node node0 = Node.newString(111, "f");
        boolean boolean0 = NodeUtil.isSwitchCase(node0);
    }

    @Test(timeout = 4000)
    public void test551616() throws Throwable {
        Node node0 = Node.newString((int) (byte) 112, "koDgqJh=vG*kE");
        boolean boolean0 = NodeUtil.isSwitchCase(node0);
    }

    @Test(timeout = 4000)
    public void test552617() throws Throwable {
        Node node0 = new Node(85);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test553618() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "1", 22, 22);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test553619() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "1", 22, 22);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test553620() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "1", 22, 22);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test554621() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
    }

    @Test(timeout = 4000)
    public void test555622() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("S989<");
        Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
        boolean boolean0 = NodeUtil.isLabelName(node0);
    }

    @Test(timeout = 4000)
    public void test556623() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test557624() throws Throwable {
        MockFile mockFile0 = new MockFile("match", "match");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.parseSyntheticCode("match", "match");
        Node node1 = new Node(115, node0, node0, node0);
        NodeUtil.removeChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test558625() throws Throwable {
        Node node0 = Node.newString(120, "72tlHa+R5>_v");
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test559626() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ8rk\"pQq9Nqn)|/*");
        node0.addChildrenToBack(node0);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test560627() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("nQ8rk\"pQq9Nq)|/*");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        NodeUtil.newExpr(node0);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test561628() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        Node node1 = new Node(105, node0, node0, node0);
        NodeUtil.removeChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test562629() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        NodeUtil.maybeAddFinally(node0);
    }

    @Test(timeout = 4000)
    public void test563630() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.maybeAddFinally(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test563631() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.maybeAddFinally(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test564632() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test565633() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("|=", "|=");
        Node node1 = NodeUtil.newVarNode("|=", node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test565634() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("|=", "|=");
        Node node1 = NodeUtil.newVarNode("|=", node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test565635() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("|=", "|=");
        Node node1 = NodeUtil.newVarNode("|=", node0);
        boolean boolean0 = NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test566636() throws Throwable {
        Node node0 = new Node(37, 1575, (-57));
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
    }

    @Test(timeout = 4000)
    public void test567637() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        boolean boolean0 = NodeUtil.isThis(node0);
    }

    @Test(timeout = 4000)
    public void test568638() throws Throwable {
        Node node0 = new Node((byte) 100);
        NodeUtil.isSparseArray(node0);
    }

    @Test(timeout = 4000)
    public void test569639() throws Throwable {
        Node node0 = Node.newString(63, "Number", 63, 63);
        boolean boolean0 = NodeUtil.isSparseArray(node0);
    }

    @Test(timeout = 4000)
    public void test570640() throws Throwable {
        Node node0 = new Node(73);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test571641() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test572642() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isObjectCallMethod(node1, "NdeUtl");
    }

    @Test(timeout = 4000)
    public void test572643() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.isObjectCallMethod(node1, "NdeUtl");
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test573644() throws Throwable {
        Node node0 = new Node((-257));
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
    }

    @Test(timeout = 4000)
    public void test574645() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    }

    @Test(timeout = 4000)
    public void test575646() throws Throwable {
        Node node0 = NodeUtil.newVarNode("e>{;uw", (Node) null);
        boolean boolean0 = NodeUtil.isLhs((Node) null, node0);
    }

    @Test(timeout = 4000)
    public void test576647() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test577648() throws Throwable {
        Node node0 = new Node(86);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test578649() throws Throwable {
        Node node0 = Node.newNumber((double) 53, 160, 160);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    }

    @Test(timeout = 4000)
    public void test579650() throws Throwable {
        Node node0 = Node.newString(148, ".prototype.");
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    }

    @Test(timeout = 4000)
    public void test580651() throws Throwable {
        Node node0 = Node.newNumber(0.0, (-638), (-638));
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test581652() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test582653() throws Throwable {
        Node node0 = Node.newString("nQ8rk\"pQq9Nq)|/*");
        String string0 = NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test583654() throws Throwable {
        Node node0 = new Node(102);
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test584655() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ}isk\"pQq9Nq)|/*");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test585656() throws Throwable {
        Node node0 = Node.newString(147, ".prototype.");
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test586657() throws Throwable {
        Node node0 = new Node((-257));
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test587658() throws Throwable {
        Node node0 = Node.newString(148, "+infinity");
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test588659() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
    }

    @Test(timeout = 4000)
    public void test588660() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
    }

    @Test(timeout = 4000)
    public void test589661() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
    }

    @Test(timeout = 4000)
    public void test589662() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
    }

    @Test(timeout = 4000)
    public void test590663() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(11);
    }

    @Test(timeout = 4000)
    public void test591664() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
    }

    @Test(timeout = 4000)
    public void test592665() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(13);
    }

    @Test(timeout = 4000)
    public void test593666() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
    }

    @Test(timeout = 4000)
    public void test594667() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
    }

    @Test(timeout = 4000)
    public void test595668() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(16);
    }

    @Test(timeout = 4000)
    public void test596669() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(17);
    }

    @Test(timeout = 4000)
    public void test597670() throws Throwable {
        String string0 = NodeUtil.opToStr(18);
    }

    @Test(timeout = 4000)
    public void test598671() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail((byte) 19);
    }

    @Test(timeout = 4000)
    public void test599672() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(20);
    }

    @Test(timeout = 4000)
    public void test600673() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(21);
    }

    @Test(timeout = 4000)
    public void test601674() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(22);
    }

    @Test(timeout = 4000)
    public void test602675() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(23);
    }

    @Test(timeout = 4000)
    public void test603676() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
    }

    @Test(timeout = 4000)
    public void test604677() throws Throwable {
        String string0 = NodeUtil.opToStr(25);
    }

    @Test(timeout = 4000)
    public void test605678() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
    }

    @Test(timeout = 4000)
    public void test606679() throws Throwable {
        String string0 = NodeUtil.opToStr(27);
    }

    @Test(timeout = 4000)
    public void test607680() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
    }

    @Test(timeout = 4000)
    public void test608681() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(29);
    }

    @Test(timeout = 4000)
    public void test609682() throws Throwable {
        String string0 = NodeUtil.opToStr(30);
    }

    @Test(timeout = 4000)
    public void test610683() throws Throwable {
        String string0 = NodeUtil.opToStr(31);
    }

    @Test(timeout = 4000)
    public void test611684() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(32);
    }

    @Test(timeout = 4000)
    public void test612685() throws Throwable {
        NodeUtil.opToStrNoFail(33);
    }

    @Test(timeout = 4000)
    public void test613686() throws Throwable {
        String string0 = NodeUtil.opToStr(34);
    }

    @Test(timeout = 4000)
    public void test614687() throws Throwable {
        String string0 = NodeUtil.opToStr(35);
    }

    @Test(timeout = 4000)
    public void test615688() throws Throwable {
        NodeUtil.opToStrNoFail(36);
    }

    @Test(timeout = 4000)
    public void test616689() throws Throwable {
        NodeUtil.opToStrNoFail(37);
    }

    @Test(timeout = 4000)
    public void test617690() throws Throwable {
        NodeUtil.opToStrNoFail(39);
    }

    @Test(timeout = 4000)
    public void test618691() throws Throwable {
        String string0 = NodeUtil.opToStr(40);
    }

    @Test(timeout = 4000)
    public void test619692() throws Throwable {
        NodeUtil.opToStrNoFail(41);
    }

    @Test(timeout = 4000)
    public void test620693() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
    }

    @Test(timeout = 4000)
    public void test621694() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
    }

    @Test(timeout = 4000)
    public void test622695() throws Throwable {
        String string0 = NodeUtil.opToStr(44);
    }

    @Test(timeout = 4000)
    public void test623696() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(45);
    }

    @Test(timeout = 4000)
    public void test624697() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(46);
    }

    @Test(timeout = 4000)
    public void test625698() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
    }

    @Test(timeout = 4000)
    public void test626699() throws Throwable {
        NodeUtil.opToStrNoFail(48);
    }

    @Test(timeout = 4000)
    public void test627700() throws Throwable {
        String string0 = NodeUtil.opToStr(49);
    }

    @Test(timeout = 4000)
    public void test628701() throws Throwable {
        NodeUtil.opToStrNoFail(50);
    }

    @Test(timeout = 4000)
    public void test629702() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail((byte) 51);
    }

    @Test(timeout = 4000)
    public void test630703() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(52);
    }

    @Test(timeout = 4000)
    public void test631704() throws Throwable {
        String string0 = NodeUtil.opToStr(53);
    }

    @Test(timeout = 4000)
    public void test632705() throws Throwable {
        String string0 = NodeUtil.opToStr(54);
    }

    @Test(timeout = 4000)
    public void test633706() throws Throwable {
        NodeUtil.opToStrNoFail(55);
    }

    @Test(timeout = 4000)
    public void test634707() throws Throwable {
        String string0 = NodeUtil.opToStr(56);
    }

    @Test(timeout = 4000)
    public void test635708() throws Throwable {
        NodeUtil.opToStrNoFail(57);
    }

    @Test(timeout = 4000)
    public void test636709() throws Throwable {
        NodeUtil.opToStrNoFail(58);
    }

    @Test(timeout = 4000)
    public void test637710() throws Throwable {
        String string0 = NodeUtil.opToStr(59);
    }

    @Test(timeout = 4000)
    public void test638711() throws Throwable {
        NodeUtil.opToStrNoFail(60);
    }

    @Test(timeout = 4000)
    public void test639712() throws Throwable {
        NodeUtil.opToStrNoFail(62);
    }

    @Test(timeout = 4000)
    public void test640713() throws Throwable {
        NodeUtil.opToStrNoFail(63);
    }

    @Test(timeout = 4000)
    public void test641714() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
    }

    @Test(timeout = 4000)
    public void test642715() throws Throwable {
        NodeUtil.opToStrNoFail(65);
    }

    @Test(timeout = 4000)
    public void test643716() throws Throwable {
        NodeUtil.opToStrNoFail(66);
    }

    @Test(timeout = 4000)
    public void test644717() throws Throwable {
        NodeUtil.opToStrNoFail(67);
    }

    @Test(timeout = 4000)
    public void test645718() throws Throwable {
        NodeUtil.opToStrNoFail(68);
    }

    @Test(timeout = 4000)
    public void test646719() throws Throwable {
        NodeUtil.opToStrNoFail(69);
    }

    @Test(timeout = 4000)
    public void test647720() throws Throwable {
        String string0 = NodeUtil.opToStr(70);
    }

    @Test(timeout = 4000)
    public void test648721() throws Throwable {
        String string0 = NodeUtil.opToStr(71);
    }

    @Test(timeout = 4000)
    public void test649722() throws Throwable {
        String string0 = NodeUtil.opToStr(72);
    }

    @Test(timeout = 4000)
    public void test650723() throws Throwable {
        String string0 = NodeUtil.opToStr(73);
    }

    @Test(timeout = 4000)
    public void test651724() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
    }

    @Test(timeout = 4000)
    public void test652725() throws Throwable {
        NodeUtil.opToStrNoFail((byte) 75);
    }

    @Test(timeout = 4000)
    public void test653726() throws Throwable {
        NodeUtil.opToStrNoFail((byte) 76);
    }

    @Test(timeout = 4000)
    public void test654727() throws Throwable {
        String string0 = NodeUtil.opToStr(77);
    }

    @Test(timeout = 4000)
    public void test655728() throws Throwable {
        String string0 = NodeUtil.opToStr(78);
    }

    @Test(timeout = 4000)
    public void test656729() throws Throwable {
        NodeUtil.opToStrNoFail(79);
    }

    @Test(timeout = 4000)
    public void test657730() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
    }

    @Test(timeout = 4000)
    public void test658731() throws Throwable {
        NodeUtil.opToStrNoFail(81);
    }

    @Test(timeout = 4000)
    public void test659732() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
    }

    @Test(timeout = 4000)
    public void test660733() throws Throwable {
        String string0 = NodeUtil.opToStr(84);
    }

    @Test(timeout = 4000)
    public void test661734() throws Throwable {
        NodeUtil.opToStrNoFail(85);
    }

    @Test(timeout = 4000)
    public void test662735() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
    }

    @Test(timeout = 4000)
    public void test663736() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(87);
    }

    @Test(timeout = 4000)
    public void test664737() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(88);
    }

    @Test(timeout = 4000)
    public void test665738() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(89);
    }

    @Test(timeout = 4000)
    public void test666739() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
    }

    @Test(timeout = 4000)
    public void test667740() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
    }

    @Test(timeout = 4000)
    public void test668741() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(92);
    }

    @Test(timeout = 4000)
    public void test669742() throws Throwable {
        String string0 = NodeUtil.opToStr(93);
    }

    @Test(timeout = 4000)
    public void test670743() throws Throwable {
        String string0 = NodeUtil.opToStr(94);
    }

    @Test(timeout = 4000)
    public void test671744() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
    }

    @Test(timeout = 4000)
    public void test672745() throws Throwable {
        String string0 = NodeUtil.opToStr(96);
    }

    @Test(timeout = 4000)
    public void test673746() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(97);
    }

    @Test(timeout = 4000)
    public void test674747() throws Throwable {
        String string0 = NodeUtil.opToStr(98);
    }

    @Test(timeout = 4000)
    public void test675748() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
    }

    @Test(timeout = 4000)
    public void test676749() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(100);
    }

    @Test(timeout = 4000)
    public void test677750() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(101);
    }

    @Test(timeout = 4000)
    public void test678751() throws Throwable {
        String string0 = NodeUtil.opToStr(102);
    }

    @Test(timeout = 4000)
    public void test679752() throws Throwable {
        NodeUtil.opToStrNoFail(103);
    }

    @Test(timeout = 4000)
    public void test680753() throws Throwable {
        NodeUtil.opToStrNoFail(104);
    }

    @Test(timeout = 4000)
    public void test681754() throws Throwable {
        String string0 = NodeUtil.opToStr(105);
    }

    @Test(timeout = 4000)
    public void test682755() throws Throwable {
        String string0 = NodeUtil.opToStr(106);
    }

    @Test(timeout = 4000)
    public void test683756() throws Throwable {
        NodeUtil.opToStrNoFail(107);
    }

    @Test(timeout = 4000)
    public void test684757() throws Throwable {
        String string0 = NodeUtil.opToStr(108);
    }

    @Test(timeout = 4000)
    public void test685758() throws Throwable {
        NodeUtil.opToStrNoFail(109);
    }

    @Test(timeout = 4000)
    public void test686759() throws Throwable {
        NodeUtil.opToStrNoFail(110);
    }

    @Test(timeout = 4000)
    public void test687760() throws Throwable {
        NodeUtil.opToStrNoFail(111);
    }

    @Test(timeout = 4000)
    public void test688761() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
    }

    @Test(timeout = 4000)
    public void test689762() throws Throwable {
        NodeUtil.opToStrNoFail(113);
    }

    @Test(timeout = 4000)
    public void test690763() throws Throwable {
        NodeUtil.opToStrNoFail(114);
    }

    @Test(timeout = 4000)
    public void test691764() throws Throwable {
        String string0 = NodeUtil.opToStr(115);
    }

    @Test(timeout = 4000)
    public void test692765() throws Throwable {
        String string0 = NodeUtil.opToStr(116);
    }

    @Test(timeout = 4000)
    public void test693766() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
    }

    @Test(timeout = 4000)
    public void test694767() throws Throwable {
        String string0 = NodeUtil.opToStr(118);
    }

    @Test(timeout = 4000)
    public void test695768() throws Throwable {
        String string0 = NodeUtil.opToStr(119);
    }

    @Test(timeout = 4000)
    public void test696769() throws Throwable {
        NodeUtil.opToStrNoFail(120);
    }

    @Test(timeout = 4000)
    public void test697770() throws Throwable {
        String string0 = NodeUtil.opToStr(121);
    }

    @Test(timeout = 4000)
    public void test698771() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(122);
    }

    @Test(timeout = 4000)
    public void test699772() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        NodeUtil.redeclareVarsInsideBranch(node1);
    }

    @Test(timeout = 4000)
    public void test700773() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "rD", "rD");
        NodeUtil.redeclareVarsInsideBranch(node0);
    }

    @Test(timeout = 4000)
    public void test701774() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        NodeUtil.copyNameAnnotations(node0, node0);
    }

    @Test(timeout = 4000)
    public void test702775() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "I#>Z%n!.M`M,5", (-2395), (-2395));
        NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test703776() throws Throwable {
        Node node0 = new Node(38);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test704777() throws Throwable {
        Node node0 = Node.newString("2Z^+?AP#2>i^^1");
        NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test705778() throws Throwable {
        Node node0 = Node.newString(33, "+i~fzniWy");
        NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test706779() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Y{ZQP9", (-11), (-11));
        node0.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test707780() throws Throwable {
        Node node0 = new Node(85);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "A3J?V", node0);
        node1.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test707781() throws Throwable {
        Node node0 = new Node(85);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "A3J?V", node0);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test708782() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("Error");
        String string0 = compiler0.toSource(node0);
    }

    @Test(timeout = 4000)
    public void test709783() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("Hq2l|Ex");
    }

    @Test(timeout = 4000)
    public void test710784() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("static");
    }

    @Test(timeout = 4000)
    public void test711785() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("prototype");
    }

    @Test(timeout = 4000)
    public void test712786() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(91, 91, 91);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0, "");
        NodeUtil.getVarsDeclaredInBranch(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test712787() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(91, 91, 91);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0, "");
        NodeUtil.getVarsDeclaredInBranch(node1);
        node1.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test712788() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(91, 91, 91);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0, "");
        NodeUtil.getVarsDeclaredInBranch(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test713789() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test714790() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 22, 22);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test714791() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 22, 22);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test714792() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 22, 22);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test715793() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test716794() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".prototype.", 94, 64);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test716795() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".prototype.", 94, 64);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
    }

    @Test(timeout = 4000)
    public void test716796() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".prototype.", 94, 64);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test716797() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".prototype.", 94, 64);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test716798() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".prototype.", 94, 64);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test716799() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ".prototype.", 94, 64);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test717800() throws Throwable {
        Node node0 = new Node((-2118));
        node0.addChildAfter(node0, node0);
        NodeUtil.newVarNode("-ininity", node0);
    }

    @Test(timeout = 4000)
    public void test718801() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        Node node1 = NodeUtil.newVarNode("com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty");
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test718802() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        Node node1 = NodeUtil.newVarNode("com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty");
    }

    @Test(timeout = 4000)
    public void test718803() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        Node node1 = NodeUtil.newVarNode("com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty");
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test719804() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = Node.newString(159, "I?Zi1H1]oloU");
        Node node1 = NodeUtil.newName(defaultCodingConvention0, "+infinity", node0);
        int int0 = NodeUtil.getNameReferenceCount(node1, "I?Zi1H1]oloU");
    }

    @Test(timeout = 4000)
    public void test719805() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = Node.newString(159, "I?Zi1H1]oloU");
        Node node1 = NodeUtil.newName(defaultCodingConvention0, "+infinity", node0);
        int int0 = NodeUtil.getNameReferenceCount(node1, "I?Zi1H1]oloU");
        node1.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test720806() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.containsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test721807() throws Throwable {
        Node node0 = Node.newString(148, ".prototype.");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test722808() throws Throwable {
        Node node0 = Node.newString(148, ".prototype.");
        Node node1 = NodeUtil.newVarNode("++SEy", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
    }

    @Test(timeout = 4000)
    public void test723809() throws Throwable {
        Node node0 = Node.newString(105, "nQ8rk\"pQu9Nq)|/*");
        Collection<Node> collection0 = NodeUtil.getVarsDeclaredInBranch(node0);
        collection0.contains(node0);
    }

    @Test(timeout = 4000)
    public void test724810() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("R^.{MBT5$&OS[Ht8", "R^.{MBT5$&OS[Ht8");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test725811() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test726812() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test727813() throws Throwable {
        Node node0 = Node.newString(130, "+infinity");
        Node node1 = NodeUtil.newVarNode("+OzEy", node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test727814() throws Throwable {
        Node node0 = Node.newString(130, "+infinity");
        Node node1 = NodeUtil.newVarNode("+OzEy", node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test728815() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "rD", "rD");
        boolean boolean0 = NodeUtil.containsType(node0, 1);
    }

    @Test(timeout = 4000)
    public void test729816() throws Throwable {
        Node node0 = new Node(0, 0, (-449));
        Node node1 = new Node(23, node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        int int0 = NodeUtil.getCount(node1, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test730817() throws Throwable {
        Node node0 = new Node(13, 13, 104);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test731818() throws Throwable {
        Node node0 = new Node(893, 103, (-120));
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        Node node1 = new Node(13, node0, node0, node0);
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test732819() throws Throwable {
        Node node0 = Node.newString(98, "; ");
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test733820() throws Throwable {
        Node node0 = Node.newString(77, "JSCompiler_renameProperty");
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test734821() throws Throwable {
        Node node0 = Node.newString(63, "'ED76%W}=Ls-r[Z<A+");
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test735822() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ8rk\"pQq9Nqn)|/*");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test736823() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("nQ8rk\"pQq9Nqn)|/*");
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test737824() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        NodeUtil.getFnParameters(node0);
    }

    @Test(timeout = 4000)
    public void test738825() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        NodeUtil.getFnParameters(node0);
    }

    @Test(timeout = 4000)
    public void test739826() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.RuntimeTypeCheck", "com.google.javascript.jscomp.RuntimeTypeCheck");
    }

    @Test(timeout = 4000)
    public void test740827() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test741828() throws Throwable {
        Node node0 = Node.newString(63, "'ED76%W}=Ls-r[Z<A+");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test742829() throws Throwable {
        Node node0 = Node.newString(63, "'ED76%W}=Ls-r[Z<A+");
        node0.addSuppression("'ED76%W}=Ls-r[Z<A+");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        jSDocInfo0.isNoTypeCheck();
    }

    @Test(timeout = 4000)
    public void test743830() throws Throwable {
        Node node0 = Node.newString(111, "nQ8rk\"pQq9Nq)|/*");
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
        List<Node> list0 = astParallelizer0.split();
        Node node1 = NodeUtil.newFunctionNode("nQ8rk\"pQq9Nq)|/*", list0, node0, 38, 4);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test743831() throws Throwable {
        Node node0 = Node.newString(111, "nQ8rk\"pQq9Nq)|/*");
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
        List<Node> list0 = astParallelizer0.split();
        Node node1 = NodeUtil.newFunctionNode("nQ8rk\"pQq9Nq)|/*", list0, node0, 38, 4);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test743832() throws Throwable {
        Node node0 = Node.newString(111, "nQ8rk\"pQq9Nq)|/*");
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
        List<Node> list0 = astParallelizer0.split();
        Node node1 = NodeUtil.newFunctionNode("nQ8rk\"pQq9Nq)|/*", list0, node0, 38, 4);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test743833() throws Throwable {
        Node node0 = Node.newString(111, "nQ8rk\"pQq9Nq)|/*");
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
        List<Node> list0 = astParallelizer0.split();
        Node node1 = NodeUtil.newFunctionNode("nQ8rk\"pQq9Nq)|/*", list0, node0, 38, 4);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test743834() throws Throwable {
        Node node0 = Node.newString(111, "nQ8rk\"pQq9Nq)|/*");
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
        List<Node> list0 = astParallelizer0.split();
        Node node1 = NodeUtil.newFunctionNode("nQ8rk\"pQq9Nq)|/*", list0, node0, 38, 4);
        NodeUtil.getInfoForNameNode(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test744835() throws Throwable {
        Node node0 = Node.newString("neg");
        Node node1 = new Node(24, node0, node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test745836() throws Throwable {
        Node node0 = new Node(47);
        NodeUtil.getFunctionInfo(node0);
    }

    @Test(timeout = 4000)
    public void test746837() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        NodeUtil.getFunctionInfo(node0);
    }

    @Test(timeout = 4000)
    public void test747838() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("nQ8rk\"pQq9Nq)|/*", "nQ8rk\"pQq9Nq)|/*");
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test747839() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("nQ8rk\"pQq9Nq)|/*", "nQ8rk\"pQq9Nq)|/*");
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test748840() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test749841() throws Throwable {
        Node node0 = new Node(38);
        Node[] nodeArray0 = new Node[6];
        NodeUtil.newCallNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test750842() throws Throwable {
        Node node0 = Node.newString(31, "");
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test751843() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test752844() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test753845() throws Throwable {
        Node node0 = new Node(34, (-3198), 10);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test754846() throws Throwable {
        Node node0 = new Node((byte) 35);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test755847() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test756848() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test757849() throws Throwable {
        Node node0 = Node.newString(47, "==");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test758850() throws Throwable {
        Node node0 = new Node(48);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test759851() throws Throwable {
        Node node0 = new Node((byte) 51);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test760852() throws Throwable {
        Node node0 = Node.newString(58, "nQ8@k\"pQq9N7)|/*");
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test761853() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test762854() throws Throwable {
        Node node0 = new Node(62);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test763855() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test764856() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test765857() throws Throwable {
        Node node0 = new Node(65);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test766858() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test767859() throws Throwable {
        Node node0 = Node.newString(73, ";X*s]]]]#S|%Im");
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test768860() throws Throwable {
        Node node0 = new Node(78);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test769861() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test770862() throws Throwable {
        Node node0 = new Node(86, 104, 86);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test771863() throws Throwable {
        Node node0 = new Node(87);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test772864() throws Throwable {
        Node node0 = new Node(88);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test773865() throws Throwable {
        Node node0 = new Node(89);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test774866() throws Throwable {
        Node node0 = Node.newString(90, "KKefsF_]");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test775867() throws Throwable {
        Node node0 = new Node(91);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test776868() throws Throwable {
        Node node0 = new Node(92);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test777869() throws Throwable {
        Node node0 = new Node(93);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test778870() throws Throwable {
        Node node0 = new Node(94);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test779871() throws Throwable {
        Node node0 = Node.newString(95, "nQ8rk\"pQq9Nq)|/*");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test780872() throws Throwable {
        Node node0 = new Node(96);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test781873() throws Throwable {
        Node node0 = Node.newString(97, ",1BqCc;i/|tAv)");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test782874() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test783875() throws Throwable {
        Node node0 = new Node((byte) 101);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test784876() throws Throwable {
        Node node0 = new Node(102, 48, 102);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test785877() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test786878() throws Throwable {
        Node node0 = new Node((byte) 100);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "Zju5S", node0);
        node0.addChildToFront(node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test786879() throws Throwable {
        Node node0 = new Node((byte) 100);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "Zju5S", node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test787880() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("nQ8rk\"pQq9Nq)|/*");
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "undefined", node0, "nQ8rk\"pQq9Nq)|/*");
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test787881() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("nQ8rk\"pQq9Nq)|/*");
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "undefined", node0, "nQ8rk\"pQq9Nq)|/*");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test788882() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "x+,#@Hz=0e(X(p>", (-3783), 2101);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test788883() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "x+,#@Hz=0e(X(p>", (-3783), 2101);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
    }

    @Test(timeout = 4000)
    public void test788884() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "x+,#@Hz=0e(X(p>", (-3783), 2101);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test789885() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test790886() throws Throwable {
        Node node0 = Node.newNumber(562.242, 103, 3364);
        Vector<Node> vector0 = new Vector<Node>();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "9Cs", node0);
        vector0.add(node1);
        Node node2 = NodeUtil.newFunctionNode(" xWV[", vector0, node0, 37, 12);
        NodeUtil.getArgumentForFunction(node2, (-2));
        vector0.toString();
    }

    @Test(timeout = 4000)
    public void test790887() throws Throwable {
        Node node0 = Node.newNumber(562.242, 103, 3364);
        Vector<Node> vector0 = new Vector<Node>();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "9Cs", node0);
        vector0.add(node1);
        Node node2 = NodeUtil.newFunctionNode(" xWV[", vector0, node0, 37, 12);
        NodeUtil.getArgumentForFunction(node2, (-2));
        node2.getLineno();
    }
}
