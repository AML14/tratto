/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 05:32:57 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("REGULAR", "REGULAR");
        nameAnalyzer0.process(node0, node0);
        String string0 = nameAnalyzer0.getHtmlReport();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        String string0 = nameAnalyzer0.getHtmlReport();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("RcU=b", "RcU=b");
        nameAnalyzer0.process(node0, node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("RcU=b", "RcU=b");
        nameAnalyzer0.process(node0, node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("RG5ULAR", "RG5ULAR");
        Node node1 = new Node(37, node0, node0, node0, 15, 36);
        nameAnalyzer0.process(node1, node1);
        node1.isAdd();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("om", "om");
        Node node1 = new Node(4, node0, node0, node0, (-4096), 2);
        nameAnalyzer0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("REGULAR", "REGULAR");
        Node node1 = new Node(118, node0, node0, node0, 43, 54);
        nameAnalyzer0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        Node node0 = Node.newString("BEFORE_OPTIMIZATION_LOOP");
        Node node1 = new Node(118, node0, node0, node0, 15, 36);
        nameAnalyzer0.process(node1, node1);
        node1.isDelProp();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        Node node0 = Node.newString("RG5ULAR");
        Node node1 = new Node(108, node0, node0, node0, 15, 36);
        nameAnalyzer0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("Em", "Em");
        Node node1 = new Node(113, node0, node0, node0, 47, (-1892));
        nameAnalyzer0.process(node0, node1);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("RG5ULAR", "RG5ULAR");
        Node node1 = new Node(110, node0, node0, node0, 15, 36);
        nameAnalyzer0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer", "com.google.javascript.jscomp.NameAnalyzer");
        nameAnalyzer0.process(node0, node0);
        node0.isInstanceOf();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("window", "window");
        nameAnalyzer0.process(node0, node0);
        node0.isTry();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Compiler compiler0 = new Compiler();
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("REGULAR", "REGULAR");
        nameAnalyzer0.process(node0, node0);
        nameAnalyzer0.process(node0, node0);
    }
}
