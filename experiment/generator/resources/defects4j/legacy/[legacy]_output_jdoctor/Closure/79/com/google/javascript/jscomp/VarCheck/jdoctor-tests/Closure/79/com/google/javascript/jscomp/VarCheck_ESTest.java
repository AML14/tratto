/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 22:13:32 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class VarCheck_ESTest extends VarCheck_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", "function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}");
        node0.setType(14);
        Node node1 = new Node(41, node0, node0, node0, node0);
        VarCheck varCheck0 = new VarCheck(compiler0);
        varCheck0.process(node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", "function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}");
        Node node1 = new Node(14, node0);
        VarCheck varCheck0 = new VarCheck(compiler0);
        varCheck0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "W", "W");
        Node node1 = new Node(2, node0);
        VarCheck varCheck0 = new VarCheck(compiler0, true);
        varCheck0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", "function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}");
        Node node1 = new Node(125, node0);
        VarCheck varCheck0 = new VarCheck(compiler0);
        varCheck0.process(node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", "function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}");
        Node node1 = new Node(125, node0);
        VarCheck varCheck0 = new VarCheck(compiler0);
        varCheck0.process(node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.AstChangeProxy", "com.google.javascript.jscomp.AstChangeProxy");
        VarCheck varCheck0 = new VarCheck(compiler0);
        varCheck0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_INVALID_FUNCTION_DECL", "JSC_INVALID_FUNCTION_DECL");
        VarCheck varCheck0 = new VarCheck(compiler0);
        varCheck0.process(node0, node0);
    }
}
