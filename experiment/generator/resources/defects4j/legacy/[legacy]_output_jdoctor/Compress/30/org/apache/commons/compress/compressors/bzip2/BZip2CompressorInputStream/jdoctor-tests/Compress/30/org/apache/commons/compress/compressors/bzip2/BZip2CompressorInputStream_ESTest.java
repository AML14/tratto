/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 11:35:29 GMT 2023
 */
package org.apache.commons.compress.compressors.bzip2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BZip2CompressorInputStream_ESTest extends BZip2CompressorInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        byte[] byteArray0 = new byte[0];
        int int0 = 0;
        BZip2CompressorInputStream.matches(byteArray0, 0);
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream("");
        BZip2CompressorInputStream bZip2CompressorInputStream0 = null;
        bZip2CompressorInputStream0 = new BZip2CompressorInputStream(mockFileInputStream0);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        BZip2CompressorInputStream.matches((byte[]) null, (-65));
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        mockFileInputStream0.release();
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, (-1737));
        boolean boolean0 = true;
        BZip2CompressorInputStream bZip2CompressorInputStream0 = new BZip2CompressorInputStream(bufferedInputStream0, boolean0);
        bZip2CompressorInputStream0.read();
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) 0;
        byteArray0[1] = (byte) 16;
        byteArray0[2] = (byte) 15;
        sequenceInputStream0.read(byteArray0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        BZip2CompressorInputStream bZip2CompressorInputStream0 = new BZip2CompressorInputStream(dataInputStream0, true);
        byte[] byteArray1 = new byte[1];
        byte byte0 = (byte) 33;
        byteArray1[0] = byte0;
        bZip2CompressorInputStream0.read(byteArray1);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        int int0 = (-1914);
        PipedInputStream pipedInputStream0 = null;
        pipedInputStream0 = new PipedInputStream((-1914));
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byte byte0 = (byte) (-96);
        byteArray0[0] = (byte) (-96);
        byte byte1 = (byte) 0;
        byteArray0[1] = (byte) 0;
        int int0 = 0;
        BZip2CompressorInputStream.matches(byteArray0, 0);
        BZip2CompressorInputStream bZip2CompressorInputStream0 = new BZip2CompressorInputStream((InputStream) null, true);
        bZip2CompressorInputStream0.reset();
        bZip2CompressorInputStream0.reset();
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        byte[] byteArray0 = null;
        int int0 = (-1434);
        int int1 = 715;
        ByteArrayInputStream byteArrayInputStream0 = null;
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-1434), 715);
    }
}
