[
  {
    "signature": "org.apache.commons.compress.utils.BitInputStream(java.io.InputStream in, java.nio.ByteOrder byteOrder)",
    "name": "org.apache.commons.compress.utils.BitInputStream",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.utils.BitInputStream",
      "name": "BitInputStream",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.utils.BitInputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "java.nio.ByteOrder",
          "name": "ByteOrder",
          "isArray": false
        },
        "name": "byteOrder"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "the InputStream.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.nio.ByteOrder",
            "name": "ByteOrder",
            "isArray": false
          },
          "name": "byteOrder"
        },
        "comment": "the bit arrangement across byte boundaries either BIG_ENDIAN (aaaaabbb bb000000) or LITTLE_ENDIAN (bbbaaaaa 000000bb).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.utils.BitInputStream",
      "name": "BitInputStream",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.utils.BitInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "clearBitCache()",
    "name": "clearBitCache",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.utils.BitInputStream",
      "name": "BitInputStream",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.utils.BitInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readBits(int count)",
    "name": "readBits",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.utils.BitInputStream",
      "name": "BitInputStream",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.utils.BitInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "count"
        },
        "comment": "the number of bits to read. count is a positive number not bigger than 63.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the bits concatenated as a long using the stream's byte order. -1 if the end of the underlying stream has been reached before reading the requested number of bits.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "on error.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]