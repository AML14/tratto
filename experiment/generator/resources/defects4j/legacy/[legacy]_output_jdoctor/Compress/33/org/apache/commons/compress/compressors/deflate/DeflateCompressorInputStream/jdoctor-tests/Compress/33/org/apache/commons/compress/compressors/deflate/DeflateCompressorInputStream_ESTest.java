/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 11:55:46 GMT 2023
 */
package org.apache.commons.compress.compressors.deflate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DeflateCompressorInputStream_ESTest extends DeflateCompressorInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        File file0 = MockFile.createTempFile("\"Bbb]/YzOf96#", "");
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        DeflateParameters deflateParameters0 = new DeflateParameters();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(mockFileInputStream0, deflateParameters0);
        long long0 = deflateCompressorInputStream0.skip(0L);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(byteArrayInputStream0);
        deflateCompressorInputStream0.skip(2558L);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 9);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(bufferedInputStream0);
        deflateCompressorInputStream0.skip(9);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3845);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 3845);
        pipedOutputStream0.close();
        DeflateParameters deflateParameters0 = new DeflateParameters();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pushbackInputStream0, deflateParameters0);
        deflateCompressorInputStream0.skip(1);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(9);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(bufferedInputStream0);
        deflateCompressorInputStream0.read((byte[]) null, 0, 9);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(sequenceInputStream0);
        byte[] byteArray0 = new byte[5];
        deflateCompressorInputStream0.read(byteArray0, (-2247), (int) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DeflateParameters deflateParameters0 = new DeflateParameters();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0, deflateParameters0);
        deflateCompressorInputStream0.close();
        byte[] byteArray0 = new byte[4];
        deflateCompressorInputStream0.read(byteArray0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(byteArrayInputStream0);
        deflateCompressorInputStream0.read();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-261), 1);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(bufferedInputStream0);
        deflateCompressorInputStream0.read();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(bufferedInputStream0);
        deflateCompressorInputStream0.read();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        File file0 = MockFile.createTempFile("\"Bbb]/YzOf96#", "");
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        DeflateParameters deflateParameters0 = new DeflateParameters();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(mockFileInputStream0, deflateParameters0);
        deflateCompressorInputStream0.read();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DeflateParameters deflateParameters0 = new DeflateParameters();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(byteArrayInputStream0, deflateParameters0);
        deflateCompressorInputStream0.close();
        deflateCompressorInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        DeflateCompressorInputStream deflateCompressorInputStream0 = null;
        deflateCompressorInputStream0 = new DeflateCompressorInputStream((InputStream) null, (DeflateParameters) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        DeflateCompressorInputStream deflateCompressorInputStream0 = null;
        deflateCompressorInputStream0 = new DeflateCompressorInputStream((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DeflateParameters deflateParameters0 = new DeflateParameters();
        deflateParameters0.setWithZlibHeader(false);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0, deflateParameters0);
        deflateCompressorInputStream0.getBytesRead();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2212);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
        DeflateParameters deflateParameters0 = new DeflateParameters();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(sequenceInputStream0, deflateParameters0);
        int int0 = deflateCompressorInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DeflateParameters deflateParameters0 = new DeflateParameters();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0, deflateParameters0);
        byte[] byteArray0 = new byte[4];
        int int0 = deflateCompressorInputStream0.read(byteArray0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(sequenceInputStream0);
        deflateCompressorInputStream0.skip((-997L));
    }
}
