/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 05 00:16:05 GMT 2023
 */
package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.setCodec((ObjectCodec) null);
        treeTraversingParser0.getCurrentToken();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0, objectMapper0);
        Version version0 = treeTraversingParser0.version();
        version0.getMajorVersion();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        float float0 = treeTraversingParser0.getFloatValue();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getNumberValue();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        boolean boolean0 = treeTraversingParser0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
        int int0 = treeTraversingParser0.getTextOffset();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        boolean boolean0 = treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.getBigIntegerValue();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        Object object0 = treeTraversingParser0.getCurrentValue();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0._handleEOF();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        Vector<JsonNode> vector0 = new Vector<JsonNode>();
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
        NumericNode numericNode0 = arrayNode0.numberNode((byte) (-122));
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
        JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.getIntValue();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.getTextCharacters();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getLongValue();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        LongNode longNode0 = new LongNode(16L);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
        double double0 = treeTraversingParser0.getDoubleValue();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.skipChildren();
        treeTraversingParser0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.close();
        treeTraversingParser0.close();
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        POJONode pOJONode0 = new POJONode("XoVy^n9{w=L\"&ym&");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.getText();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        POJONode pOJONode0 = new POJONode("XoVy^n9{w=L\"&ym&");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        treeTraversingParser0._nextToken = jsonToken0;
        treeTraversingParser0.nextTextValue();
        String string0 = treeTraversingParser0.getText();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0._startContainer = true;
        treeTraversingParser0.nextTextValue();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        treeTraversingParser0._nextToken = jsonToken0;
        treeTraversingParser0._startContainer = true;
        treeTraversingParser0.nextTextValue();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.nextBooleanValue();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
        arrayNode0.addObject();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        treeTraversingParser0.nextValue();
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.isExpectedStartObjectToken();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
        jsonParser0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.skipChildren();
        treeTraversingParser0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        String string0 = treeTraversingParser0.currentName();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.close();
        treeTraversingParser0.getCurrentName();
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.nextBooleanValue();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.nextBooleanValue();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.overrideCurrentName("3");
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        POJONode pOJONode0 = new POJONode("XoMy^nF9{=L\"FGym&");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        treeTraversingParser0.overrideCurrentName("XoMy^nF9{=L\"FGym&");
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.close();
        String string0 = treeTraversingParser0.getText();
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.getText();
        treeTraversingParser0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        LongNode longNode0 = new LongNode(0L);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.getText();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.getText();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.nextTextValue();
        treeTraversingParser0.getText();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        MissingNode missingNode0 = MissingNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0._closed = true;
        Object object0 = treeTraversingParser0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.getEmbeddedObject();
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        FloatNode floatNode0 = new FloatNode((-380.0695F));
        POJONode pOJONode0 = new POJONode(floatNode0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        FloatNode floatNode1 = (FloatNode) treeTraversingParser0.getEmbeddedObject();
        floatNode1.isNaN();
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.close();
        boolean boolean0 = treeTraversingParser0.isNaN();
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        LongNode longNode0 = new LongNode(1L);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
        boolean boolean0 = treeTraversingParser0.isNaN();
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        boolean boolean0 = treeTraversingParser0.isNaN();
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.nextBooleanValue();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        MissingNode missingNode0 = new MissingNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
        treeTraversingParser0.nextBooleanValue();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        int int0 = treeTraversingParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        int int0 = treeTraversingParser0.readBinaryValue((OutputStream) byteArrayOutputStream0);
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        POJONode pOJONode0 = new POJONode("XoMy^n9{L=L\"Fym&");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        byte[] byteArray0 = treeTraversingParser0.getBinaryValue();
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        treeTraversingParser0.getNumberType();
    }
}
