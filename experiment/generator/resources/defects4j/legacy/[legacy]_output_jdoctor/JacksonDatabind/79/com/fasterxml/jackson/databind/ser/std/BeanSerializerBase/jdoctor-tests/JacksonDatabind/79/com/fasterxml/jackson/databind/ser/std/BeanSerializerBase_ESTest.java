/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 04:12:47 GMT 2023
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyWriter;
import com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.StringArraySerializer;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.ser.std.EnumSetSerializer;
import com.fasterxml.jackson.databind.ser.std.IterableSerializer;
import com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanSerializerBase_ESTest extends BeanSerializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        Iterator<PropertyWriter> iterator0 = beanSerializer0.properties();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectArraySerializer> class0 = ObjectArraySerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) simpleType0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y{H", true);
        MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        objectMapper0.configure(mapperFeature0, false);
        objectMapper0.writeValue((OutputStream) mockFileOutputStream0, (Object) mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[7];
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeatureArray0[0];
        mapperFeatureArray0[2] = mapperFeature0;
        mapperFeatureArray0[3] = mapperFeatureArray0[0];
        mapperFeatureArray0[4] = mapperFeatureArray0[1];
        mapperFeatureArray0[5] = mapperFeatureArray0[2];
        MapperFeature mapperFeature1 = MapperFeature.USE_STATIC_TYPING;
        mapperFeatureArray0[6] = mapperFeature1;
        objectMapper0.enable(mapperFeatureArray0);
        objectMapper0.writeValueAsBytes(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JavaType> class0 = JavaType.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapEntrySerializer> class0 = MapEntrySerializer.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);
        boolean boolean0 = beanSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StringArraySerializer stringArraySerializer0 = StringArraySerializer.instance;
        JavaType javaType0 = stringArraySerializer0.getContentType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        PropertyName propertyName0 = PropertyName.construct("not a valid representatio: ");
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, (ObjectIdGenerator<?>) null, false);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        boolean boolean0 = beanSerializerBase0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapEntrySerializer> class0 = MapEntrySerializer.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stdArraySerializers_IntArraySerializer0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml._ackson.databind.ser.std.BeanSerializerBase", true);
        byte[] byteArray0 = new byte[9];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) 3, true);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
        AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "com.fasterxml._ackson.databind.ser.std.BeanSerializerBase");
        StdArraySerializers.BooleanArraySerializer stdArraySerializers_BooleanArraySerializer0 = new StdArraySerializers.BooleanArraySerializer();
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(stdArraySerializers_BooleanArraySerializer0);
        IterableSerializer iterableSerializer0 = new IterableSerializer(collectionLikeType0, true, asExistingPropertyTypeSerializer0);
        beanSerializerBase0.serializeWithType(iterableSerializer0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0, asExistingPropertyTypeSerializer0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapEntrySerializer> class0 = MapEntrySerializer.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stdArraySerializers_IntArraySerializer0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml._ackson.databind.ser.std.BeanSerializerBase", true);
        byte[] byteArray0 = new byte[9];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) 3, true);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        EnumSetSerializer enumSetSerializer0 = new EnumSetSerializer(collectionLikeType0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
        AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "com.fasterxml._ackson.databind.ser.std.BeanSerializerBase");
        beanSerializer0.serializeWithType(enumSetSerializer0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0, asExistingPropertyTypeSerializer0);
        enumSetSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectArraySerializer> class0 = ObjectArraySerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) simpleType0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) 119);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) 119, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectIdGenerator<AsExternalTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsExternalTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerator0);
        ((BeanSerializerBase) beanSerializer0)._serializeObjectId((Object) null, uTF8JsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null, writableObjectId0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writeValueAsBytes(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<ObjectArraySerializer> class0 = ObjectArraySerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(referenceType0);
        JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) null, (Type) simpleType0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<ObjectArraySerializer> class0 = ObjectArraySerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(referenceType0);
        Object object0 = new Object();
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(object0);
        beanSerializerBase0.getSchema((SerializerProvider) null, (Type) simpleType0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, javaType0);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, javaType0);
        javaType0.isCollectionLikeType();
    }
}
