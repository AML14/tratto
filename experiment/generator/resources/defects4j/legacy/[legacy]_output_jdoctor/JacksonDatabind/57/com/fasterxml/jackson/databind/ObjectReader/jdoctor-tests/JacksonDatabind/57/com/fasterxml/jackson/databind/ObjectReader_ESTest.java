/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 19:51:44 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.sql.SQLRecoverableException;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ArrayType> class0 = ArrayType.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.WRAP_EXCEPTIONS;
        deserializationFeatureArray0[1] = deserializationFeature1;
        DeserializationFeature deserializationFeature2 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
        deserializationFeatureArray0[2] = deserializationFeature2;
        DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
        deserializationFeatureArray0[3] = deserializationFeature3;
        DeserializationFeature deserializationFeature4 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        deserializationFeatureArray0[4] = deserializationFeature4;
        DeserializationFeature deserializationFeature5 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        deserializationFeatureArray0[5] = deserializationFeature5;
        DeserializationFeature deserializationFeature6 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
        deserializationFeatureArray0[6] = deserializationFeature6;
        DeserializationFeature deserializationFeature7 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        deserializationFeatureArray0[7] = deserializationFeature7;
        DeserializationFeature deserializationFeature8 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
        deserializationFeatureArray0[8] = deserializationFeature8;
        objectReader0.withoutFeatures(deserializationFeatureArray0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        Deserializers.Base deserializers_Base0 = new Deserializers.Base();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
        objectReader0._findTreeDeserializer(defaultDeserializationContext0);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ArrayType> class0 = ArrayType.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        ArrayNode arrayNode0 = objectNode0.withArray("`b9)X");
        BooleanNode booleanNode0 = arrayNode0.booleanNode(true);
        Class<Object> class1 = Object.class;
        objectReader0.treeToValue((TreeNode) booleanNode0, class1);
        ObjectReader objectReader1 = objectMapper0.reader();
        objectReader1.readValue((JsonNode) booleanNode0);
        String string0 = null;
        JsonPointer.valueOf(string0);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("mh]\"m");
        InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
        JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
        jsonFactory0.enable(jsonFactory_Feature0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        Class<ArrayType> class0 = ArrayType.class;
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        jsonFactory2.enable(jsonParser_Feature0);
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        objectReader0.withType((JavaType) simpleType0);
        POJONode pOJONode0 = new POJONode(jsonFactory2);
        pOJONode0.fields();
        objectReader0.readValue((JsonNode) pOJONode0);
        objectReader0.getAttributes();
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        jsonFactory0.configure(jsonGenerator_Feature0, true);
        JsonFactory jsonFactory1 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("b)9]Q.Kd*", "d1^VL/08 ,+!;2s`");
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        atomicReference0.lazySet(sQLRecoverableException0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
        Class<String> class0 = String.class;
        defaultSerializerProvider_Impl1.hasSerializerFor(class0, atomicReference0);
        MockFile mockFile0 = new MockFile("", "d1^VL/08 ,+!;2s`");
        objectReader0.readValues((File) mockFile0);
        URL uRL0 = null;
        MockURL.openStream(uRL0);
        InputStream inputStream0 = MockURL.openStream(uRL0);
        objectReader0.readValues(inputStream0);
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DecimalNode> class0 = DecimalNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        URL uRL0 = MockURL.getFileExample();
        objectReader0.readValues(uRL0);
    }

    @Test(timeout = 4000)
    public void test175() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        Class<LongNode> class0 = LongNode.class;
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[4];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        objectReader0.withFeatures(formatFeatureArray0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, simpleMixInResolver0);
        RootNameLookup rootNameLookup0 = null;
        rootNameLookup0 = new RootNameLookup();
    }

    @Test(timeout = 4000)
    public void test196() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonPointer.valueOf("Kfg");
        PropertyName propertyName0 = null;
        objectReader0.withRootName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test287() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withRootName((PropertyName) null);
        Class<BinaryNode> class0 = BinaryNode.class;
        objectReader1.withType(class0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        FloatNode floatNode0 = FloatNode.valueOf(3);
        boolean boolean0 = true;
        IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectReader1, charsToNameCanonicalizer0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
        objectReader0._considerFilter(jsonParser0, true);
        Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, contextAttributes0);
        DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(deserializationConfig0);
        JavaType javaType0 = TypeFactory.unknownType();
        DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withType(javaType0);
        dataFormatReaders2.withMaxInputLookahead(charsToNameCanonicalizer0.HASH_MULT);
        PipedOutputStream pipedOutputStream0 = null;
        pipedOutputStream0 = new PipedOutputStream();
    }

    @Test(timeout = 4000)
    public void test348() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte byte0 = (byte) 0;
        byteArray0[0] = (byte) 0;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        String string0 = "+_h*wlA|84)kUd";
        objectReader0.at("+_h*wlA|84)kUd");
        objectReader0.withoutAttribute(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test399() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        ObjectReader objectReader0 = objectMapper1.reader((ContextAttributes) null);
        PipedReader pipedReader0 = new PipedReader(2583);
        objectReader0.readValue((Reader) pipedReader0);
        HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = null;
        dataFormatReaders0 = new DataFormatReaders(hashSet0);
    }
}
