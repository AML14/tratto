/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 05 00:05:03 GMT 2023
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.sql.ClientInfoStatus;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Properties;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, (JavaType[]) null);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, (JavaType[]) null);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, (JavaType[]) null);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TreeSet> class0 = TreeSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        collectionType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, classArray0);
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<AnnotationIntrospector.ReferenceProperty.Type> atomicReference0 = new AtomicReference<AnnotationIntrospector.ReferenceProperty.Type>();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        mapLikeType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ReferenceType> class0 = ReferenceType.class;
        Class<DeserializationFeature> class1 = DeserializationFeature.class;
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class1, (JavaType[]) null);
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, javaType0);
        javaType1.isFinal();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapperFeature> class0 = MapperFeature.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        Class<PlaceholderForType> class1 = PlaceholderForType.class;
        JavaType javaType0 = typeFactory0.constructReferenceType(class1, collectionLikeType0);
        typeFactory0.moreSpecificType(javaType0, collectionLikeType0);
        collectionLikeType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapperFeature> class0 = MapperFeature.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        Class<PlaceholderForType> class1 = PlaceholderForType.class;
        JavaType javaType0 = typeFactory0.constructReferenceType(class1, collectionLikeType0);
        typeFactory0.moreSpecificType(javaType0, collectionLikeType0);
        collectionLikeType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        collectionLikeType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<NullNode> class0 = NullNode.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructRawMapType(class0);
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver");
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        JavaType javaType0 = typeFactory0.constructType((Type) mapLikeType0, (Class<?>) class0);
        javaType0.hasContentType();
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, (TypeBindings) null);
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructFromCanonical("tIvmxcJLAIvHb>$");
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructArrayType((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        TypeFactory.rawClass((Type) null);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        Class<?> class1 = TypeFactory.rawClass(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("float");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        typeFactory1.constructFromCanonical("tIvmxcJLAIvHb>$");
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("int");
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("long");
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("double");
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("boolean");
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("byte");
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("char");
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("short");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("void");
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isConcrete();
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        ClassStack classStack0 = new ClassStack(class0);
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class0, typeBindings0);
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        ClassStack classStack0 = new ClassStack(class0);
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class0, typeBindings0);
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isAbstract();
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        ClassStack classStack0 = new ClassStack(class0);
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class0, typeBindings0);
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        ClassStack classStack0 = new ClassStack(class0);
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class0, typeBindings0);
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        Class<Properties> class0 = Properties.class;
        ClassStack classStack0 = new ClassStack(class0);
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class0, typeBindings0);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
        typeFactory0.constructSpecializedType(collectionLikeType0, class0);
        collectionLikeType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test4146() throws Throwable {
        Class<Properties> class0 = Properties.class;
        ClassStack classStack0 = new ClassStack(class0);
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class0, typeBindings0);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
        typeFactory0.constructSpecializedType(collectionLikeType0, class0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test4247() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        CollectionType collectionType0 = new CollectionType(mapLikeType0, mapLikeType0);
        Class<Object> class1 = Object.class;
        typeFactory0.constructGeneralizedType(collectionType0, class1);
        collectionType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test4248() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        CollectionType collectionType0 = new CollectionType(mapLikeType0, mapLikeType0);
        Class<Object> class1 = Object.class;
        typeFactory0.constructGeneralizedType(collectionType0, class1);
        mapLikeType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test4349() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<NullNode> class0 = NullNode.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        JavaType javaType1 = typeFactory0.constructGeneralizedType(javaType0, class0);
    }

    @Test(timeout = 4000)
    public void test4450() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
        SimpleType simpleType0 = new SimpleType(class0);
        Class<Object> class1 = Object.class;
        typeFactory0.constructGeneralizedType(simpleType0, class1);
    }

    @Test(timeout = 4000)
    public void test4551() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<NullNode> class0 = NullNode.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        typeFactory0.constructGeneralizedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test4652() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        Class<ReferenceType> class1 = ReferenceType.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class1, class0);
    }

    @Test(timeout = 4000)
    public void test4753() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, (JavaType) null);
        javaType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test4854() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test4955() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        Class<DeserializationFeature> class1 = DeserializationFeature.class;
        JavaType javaType0 = typeFactory0.constructReferenceType(class1, collectionLikeType0);
        ReferenceType referenceType0 = (ReferenceType) typeFactory0.moreSpecificType(collectionLikeType0, javaType0);
        referenceType0.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test5056() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) null);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test5157() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        JavaType javaType0 = typeFactory0.constructType((Type) simpleType0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test5258() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructMapType((Class<? extends Map>) null, class0, (Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test5359() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructMapType(class0, class0, class0);
    }

    @Test(timeout = 4000)
    public void test5460() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ReferenceType> class0 = ReferenceType.class;
        Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test5561() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        Class<ArrayType> class1 = ArrayType.class;
        Class<ObjectMapper.DefaultTyping> class2 = ObjectMapper.DefaultTyping.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
        MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionType0);
        TypeBindings typeBindings1 = TypeBindings.create((Class<?>) class0, (JavaType) mapType0);
        JavaType javaType0 = typeFactory0._constructSimple(class1, typeBindings1, mapType0, javaTypeArray0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test5562() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        Class<ArrayType> class1 = ArrayType.class;
        Class<ObjectMapper.DefaultTyping> class2 = ObjectMapper.DefaultTyping.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
        MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionType0);
        TypeBindings typeBindings1 = TypeBindings.create((Class<?>) class0, (JavaType) mapType0);
        JavaType javaType0 = typeFactory0._constructSimple(class1, typeBindings1, mapType0, javaTypeArray0);
        collectionType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test5663() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test5764() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writeValueAsBytes(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test5865() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(4019, 4019);
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = new TypeFactory(lRUMap0, typeParser0, typeModifierArray0, classLoader0);
        JavaType javaType0 = typeFactory1.constructType((Type) class0, (Class<?>) class0);
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test5966() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn(simpleType0, (JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<NullNode> class0 = NullNode.class;
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test6067() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<NullNode> class0 = NullNode.class;
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test6168() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<AnnotationIntrospector.ReferenceProperty.Type> atomicReference0 = new AtomicReference<AnnotationIntrospector.ReferenceProperty.Type>();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        objectMapper0.readerForUpdating(simpleType0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    }

    @Test(timeout = 4000)
    public void test6269() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        Class<LinkedList> class1 = LinkedList.class;
        Class<Object> class2 = Object.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
        CollectionLikeType collectionLikeType0 = collectionType0.withContentTypeHandler(class1);
        CollectionType collectionType1 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionLikeType0);
        collectionType1.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test6370() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
        doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
        doReturn((Type) null).when(parameterizedType0).getRawType();
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        typeFactory0._fromParamType((ClassStack) null, parameterizedType0, typeBindings0);
    }
}
