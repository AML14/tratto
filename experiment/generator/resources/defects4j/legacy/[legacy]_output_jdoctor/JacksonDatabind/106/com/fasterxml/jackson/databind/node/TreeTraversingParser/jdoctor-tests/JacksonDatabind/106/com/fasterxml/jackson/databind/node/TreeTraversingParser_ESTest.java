/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 05 00:32:12 GMT 2023
 */
package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.setCodec((ObjectCodec) null);
        treeTraversingParser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        Version version0 = treeTraversingParser0.version();
        version0.isUnknownVersion();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getFloatValue();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getNumberValue();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.readValueAsTree();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        boolean boolean0 = treeTraversingParser0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        int int0 = treeTraversingParser0.getTextOffset();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        boolean boolean0 = treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getBigIntegerValue();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        Object object0 = treeTraversingParser0.getCurrentValue();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0._handleEOF();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ValueNode valueNode0 = jsonNodeFactory0.rawValueNode((RawValue) null);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
        JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getShortValue();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.getTextCharacters();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.getLongValue();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.getDoubleValue();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, linkedList0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, (ObjectCodec) null);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.skipChildren();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0, objectMapper0);
        treeTraversingParser0.close();
        treeTraversingParser0.close();
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(277.23F);
        Iterator<Map.Entry<String, JsonNode>> iterator0 = (Iterator<Map.Entry<String, JsonNode>>) floatNode0.fields();
        POJONode pOJONode0 = new POJONode(iterator0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.getText();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(277.23F);
        TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser) floatNode0.traverse((ObjectCodec) null);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        treeTraversingParser0._nextToken = jsonToken0;
        treeTraversingParser0.nextToken();
        treeTraversingParser0._startContainer = true;
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.currentToken();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(277.23F);
        TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser) floatNode0.traverse((ObjectCodec) null);
        treeTraversingParser0._startContainer = true;
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        boolean boolean0 = treeTraversingParser0.isNaN();
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.nextToken();
        boolean boolean0 = treeTraversingParser0.isNaN();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.putObject("com.fasterxml.jackson.databind.ser.std.EnumSerializer");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.nextValue();
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("y?++~\"_`");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.nextValue();
        treeTraversingParser0.isExpectedStartArrayToken();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(277.23F);
        Iterator<Map.Entry<String, JsonNode>> iterator0 = (Iterator<Map.Entry<String, JsonNode>>) floatNode0.fields();
        POJONode pOJONode0 = new POJONode(iterator0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
        jsonParser0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.skipChildren();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        String string0 = treeTraversingParser0.getCurrentName();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.nextValue();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.nextValue();
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.currentName();
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.overrideCurrentName((String) null);
        treeTraversingParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(277.23F);
        Iterator<Map.Entry<String, JsonNode>> iterator0 = (Iterator<Map.Entry<String, JsonNode>>) floatNode0.fields();
        POJONode pOJONode0 = new POJONode(iterator0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        treeTraversingParser0.overrideCurrentName("G:b");
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.close();
        String string0 = treeTraversingParser0.getText();
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        treeTraversingParser0._nextToken = jsonToken0;
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.getText();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.getText();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.nextTextValue();
        treeTraversingParser0.getValueAsString();
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(277.23F);
        TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser) floatNode0.traverse((ObjectCodec) null);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        treeTraversingParser0._nextToken = jsonToken0;
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        FloatNode floatNode0 = new FloatNode(277.23F);
        Iterator<Map.Entry<String, JsonNode>> iterator0 = (Iterator<Map.Entry<String, JsonNode>>) floatNode0.fields();
        POJONode pOJONode0 = new POJONode(iterator0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        treeTraversingParser0.nextFieldName();
        NodeCursor.RootCursor nodeCursor_RootCursor0 = (NodeCursor.RootCursor) treeTraversingParser0._nodeCursor;
        NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(pOJONode0, nodeCursor_RootCursor0);
        treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_ArrayCursor0;
        treeTraversingParser0.getText();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.nextTextValue();
        treeTraversingParser0.getText();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        DoubleNode doubleNode0 = DoubleNode.valueOf(4.9E-324);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0, (ObjectCodec) null);
        JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        NullNode nullNode0 = new NullNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.close();
        Object object0 = treeTraversingParser0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ValueNode valueNode0 = jsonNodeFactory0.rawValueNode((RawValue) null);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        boolean boolean0 = treeTraversingParser0.isNaN();
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        boolean boolean0 = treeTraversingParser0.isNaN();
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ObjectNode objectNode0 = arrayNode0.addObject();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        byte[] byteArray0 = treeTraversingParser0.getBinaryValue();
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
        byte[] byteArray0 = treeTraversingParser0.getBinaryValue();
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        NullNode nullNode0 = NullNode.instance;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        int int0 = treeTraversingParser0.readBinaryValue((OutputStream) pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test5154() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        int int0 = treeTraversingParser0.readBinaryValue((OutputStream) byteArrayOutputStream0);
    }

    @Test(timeout = 4000)
    public void test5255() throws Throwable {
        IntNode intNode0 = new IntNode(96);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
        treeTraversingParser0.close();
        treeTraversingParser0.getNumberType();
    }

    @Test(timeout = 4000)
    public void test5356() throws Throwable {
        NullNode nullNode0 = NullNode.getInstance();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
        treeTraversingParser0.nextFieldName();
        treeTraversingParser0.nextValue();
        treeTraversingParser0.getNumberType();
    }
}
