/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 23:08:29 GMT 2023
 */
package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonAppend;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.lang.reflect.Field;
import java.time.chrono.ChronoLocalDate;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JacksonAnnotationIntrospector_ESTest extends JacksonAnnotationIntrospector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationType(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
        stdTypeResolverBuilder0.getTypeProperty();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
        Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationContentType(annotatedField0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapperFeature> class0 = MapperFeature.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AnnotatedParameter> class0 = AnnotatedParameter.class;
        JavaType javaType0 = TypeFactory.unknownType();
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
        TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
        Class<MapperFeature> class1 = MapperFeature.class;
        Class<AnnotatedClass> class2 = AnnotatedClass.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, (String) null, javaType0);
        Class<?> class3 = jacksonAnnotationIntrospector0.findDeserializationType(virtualAnnotatedMember0, mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AnnotatedParameter> class0 = AnnotatedParameter.class;
        JavaType javaType0 = TypeFactory.unknownType();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, (String) null, javaType0);
        Class<?> class1 = jacksonAnnotationIntrospector0.findSerializationKeyType(virtualAnnotatedMember0, javaType0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        jacksonAnnotationIntrospector0.hasAnySetterAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<Integer> class0 = Integer.TYPE;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
        JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
        Class<?> class1 = jacksonAnnotationIntrospector0.findDeserializationKeyType((Annotated) null, javaType0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Version version0 = jacksonAnnotationIntrospector0.version();
        version0.getArtifactId();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        jacksonAnnotationIntrospector0.hasAnyGetterAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationContentType(annotatedClass0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Object object0 = jacksonAnnotationIntrospector0.readResolve();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        jacksonAnnotationIntrospector0._annotationsInside = null;
        Object object0 = jacksonAnnotationIntrospector0.readResolve();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.setAnnotationIntrospectors(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = AnnotationIntrospector.ReferenceProperty.Type.BACK_REFERENCE;
        String string0 = jacksonAnnotationIntrospector0.findEnumValue(annotationIntrospector_ReferenceProperty_Type0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        String string0 = jacksonAnnotationIntrospector0.findClassDescription(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
        Object object0 = jacksonAnnotationIntrospector0.findInjectableValueId(annotatedField0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        Class<AnnotationIntrospector> class0 = AnnotationIntrospector.class;
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        AnnotationMap annotationMap0 = (AnnotationMap) basicBeanDescription0.getClassAnnotations();
        Class<Object> class1 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<DeserializationFeature> class2 = DeserializationFeature.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerFor(class1);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        AnnotatedClass annotatedClass0 = new AnnotatedClass(resolvedRecursiveType0, class0, linkedList0, class2, annotationMap0, typeBindings0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, resolvedRecursiveType0, annotatedClass0, annotationMap0, 27);
        jacksonAnnotationIntrospector0.findPropertyContentTypeResolver((MapperConfig<?>) null, annotatedParameter0, resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedClass0, (ObjectIdInfo) null);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) mapType0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        AnnotatedClass annotatedClass0 = new AnnotatedClass(resolvedRecursiveType0, class0, linkedList0, class0, (Annotations) null, typeBindings0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
        JsonAppend.Attr jsonAppend_Attr0 = mock(JsonAppend.Attr.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonAppend_Attr0).propName();
        doReturn((String) null).when(jsonAppend_Attr0).propNamespace();
        doReturn(false).when(jsonAppend_Attr0).required();
        doReturn((String) null).when(jsonAppend_Attr0).value();
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Attr0, (MapperConfig<?>) null, annotatedClass0, resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        AnnotatedClass annotatedClass0 = new AnnotatedClass(resolvedRecursiveType0, class0, linkedList0, class0, (Annotations) null, typeBindings0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
        JsonAppend.Attr jsonAppend_Attr0 = mock(JsonAppend.Attr.class, new ViolatedAssumptionAnswer());
        doReturn((JsonInclude.Include) null).when(jsonAppend_Attr0).include();
        doReturn("").when(jsonAppend_Attr0).propName();
        doReturn("JSON").when(jsonAppend_Attr0).propNamespace();
        doReturn(true).when(jsonAppend_Attr0).required();
        doReturn("e.").when(jsonAppend_Attr0).value();
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Attr0, (MapperConfig<?>) null, annotatedClass0, resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        AnnotatedClass annotatedClass0 = new AnnotatedClass(resolvedRecursiveType0, class0, linkedList0, class0, (Annotations) null, typeBindings0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
        JsonAppend.Attr jsonAppend_Attr0 = mock(JsonAppend.Attr.class, new ViolatedAssumptionAnswer());
        doReturn((JsonInclude.Include) null).when(jsonAppend_Attr0).include();
        doReturn("JSON").when(jsonAppend_Attr0).propName();
        doReturn("JSON").when(jsonAppend_Attr0).propNamespace();
        doReturn(true).when(jsonAppend_Attr0).required();
        doReturn("JSON").when(jsonAppend_Attr0).value();
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Attr0, (MapperConfig<?>) null, annotatedClass0, resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonAppend_Prop0).name();
        doReturn((String) null).when(jsonAppend_Prop0).namespace();
        doReturn(false).when(jsonAppend_Prop0).required();
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
        doReturn("").when(jsonAppend_Prop0).name();
        doReturn("").when(jsonAppend_Prop0).namespace();
        doReturn(true).when(jsonAppend_Prop0).required();
        doReturn((Class) null).when(jsonAppend_Prop0).type();
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<AnnotatedClass> class0 = AnnotatedClass.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        boolean boolean0 = jacksonAnnotationIntrospector0.hasCreatorAnnotation(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector1 = jacksonAnnotationIntrospector0.setConstructorPropertiesImpliesCreator(false);
        boolean boolean0 = jacksonAnnotationIntrospector1.hasCreatorAnnotation(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test3534() throws Throwable {
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector1 = jacksonAnnotationIntrospector0.setConstructorPropertiesImpliesCreator(false);
        objectMapper0.setAnnotationIntrospectors(jacksonAnnotationIntrospector1, jacksonAnnotationIntrospector0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test3635() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        MapperFeature mapperFeature0 = MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES;
        objectMapper0.configure(mapperFeature0, false);
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test3736() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<?> class0 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, (Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test3837() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<NullNode> class0 = NullNode.class;
        Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
    }

    @Test(timeout = 4000)
    public void test3938() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<NullNode> class0 = NullNode.class;
        Class<PropertyName> class1 = PropertyName.class;
        Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
        class2.toString();
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<NullNode> class0 = NullNode.class;
        Class<PropertyName> class1 = PropertyName.class;
        Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("Can not refine serialization type %s into %s; types not related", (String) null);
        propertyName0.getSimpleName();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("j64c/Vq<;3-Flx0nI(", "");
        propertyName0.hasNamespace();
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("j64c/Vq<;3-Flx0nI(", "");
        propertyName0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 81);
        String string0 = jacksonAnnotationIntrospector0.findImplicitPropertyName(annotatedParameter0);
    }
}
