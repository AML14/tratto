/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 18:06:07 GMT 2023
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializer;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.PipedOutputStream;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberSerializer_ESTest extends NumberSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<Byte> class0 = Byte.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        Short short0 = new Short((short) 64);
        numberSerializer0.serialize((Number) short0, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<BigInteger> class0 = BigInteger.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Byte> class0 = Byte.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        numberSerializer0.serialize((Number) bigDecimal0, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        LongNode longNode0 = LongNode.valueOf(0L);
        BigInteger bigInteger0 = longNode0.bigIntegerValue();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializer0.serialize((Number) bigInteger0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-224), objectMapper0, pipedOutputStream0);
        numberSerializer0.serialize((Number) 56320, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) null);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        BigInteger bigInteger0 = BigInteger.ZERO;
        IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 974, objectMapper0, pipedOutputStream0);
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        Long long0 = new Long(0L);
        numberSerializer0.serialize((Number) long0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) null);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<Byte> class0 = Byte.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Double double0 = new Double((-4791.8576749531485));
        numberSerializer0.serialize((Number) double0, (JsonGenerator) filteringGeneratorDelegate0, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<Byte> class0 = Byte.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        Float float0 = new Float(1855.257);
        numberSerializer0.serialize((Number) float0, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Byte> class0 = Byte.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        Byte byte0 = new Byte((byte) 1);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializer0.serialize((Number) byte0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<Byte> class0 = Byte.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        numberSerializer0.serialize((Number) null, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Long> class0 = Long.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) null, (Type) class0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Byte> class0 = Byte.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
        resolvedRecursiveType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<BigInteger> class0 = BigInteger.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<Long> class1 = Long.class;
        TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
        resolvedRecursiveType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<Byte> class0 = Byte.class;
        TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<BigDecimal> class1 = BigDecimal.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class1);
        numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
        resolvedRecursiveType0.containedTypeCount();
    }
}
