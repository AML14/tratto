/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 29 02:31:07 GMT 2023
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.ContainerSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.Date;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BasicSerializerFactory_ESTest extends BasicSerializerFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        Class<SqlDateSerializer> class0 = SqlDateSerializer.class;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector1, (ClassIntrospector.MixInResolver) null);
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, (JavaType) null, annotatedClass0);
        beanSerializerFactory0.buildIteratorSerializer((SerializationConfig) null, (JavaType) null, basicBeanDescription0, true, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<SqlDateSerializer> class0 = SqlDateSerializer.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        beanSerializerFactory0.buildMapEntrySerializer((SerializationConfig) null, mapLikeType0, basicBeanDescription0, false, mapLikeType0, mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        beanSerializerFactory0.withAdditionalSerializers((Serializers) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "juglE^W{~M");
        ContainerSerializer<?> containerSerializer0 = beanSerializerFactory0.buildIndexedListSerializer(simpleType0, false, asExternalTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        containerSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
        Class<TimeZone> class0 = TimeZone.class;
        Class<Date> class1 = Date.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
        CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) simpleType0, (Object) simpleType0);
        beanSerializerFactory0.buildIterableSerializer((SerializationConfig) null, referenceType0, (BeanDescription) null, true, referenceType0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
        boolean boolean0 = beanSerializerFactory0.isIndexedList(class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SerializerFactoryConfig serializerFactoryConfig0 = beanSerializerFactory0.getFactoryConfig();
        serializerFactoryConfig0.hasKeySerializers();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ContainerSerializer<?> containerSerializer0 = beanSerializerFactory0.buildCollectionSerializer(arrayType0, false, (TypeSerializer) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        containerSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SimpleSerializers simpleSerializers0 = new SimpleSerializers();
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(simpleSerializers0);
        serializerFactory0.equals((Object) beanSerializerFactory0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.buildEnumSetSerializer((JavaType) null);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, ": can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)");
        HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        objectMapper0.convertValue((Object) hashMap0, class0);
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<BigIntegerNode> atomicReference0 = new AtomicReference<BigIntegerNode>();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        BeanPropertyDefinition beanPropertyDefinition0 = objectMapper0.convertValue((Object) atomicReference0, class0);
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        Class<SQLWarning> class0 = SQLWarning.class;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) serializerFactoryConfig0, (Object) null);
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
        JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByLookup(referenceType0, (SerializationConfig) null, basicBeanDescription0, true);
    }

    @Test(timeout = 4000)
    public void test1514() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        objectMapper0.convertValue((Object) objectMapper0, class0);
    }

    @Test(timeout = 4000)
    public void test1615() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MissingNode missingNode0 = MissingNode.getInstance();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        BeanPropertyDefinition beanPropertyDefinition0 = objectMapper0.convertValue((Object) missingNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1716() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1281), 1, (-1281));
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        objectMapper0.convertValue((Object) mockGregorianCalendar0, class0);
    }

    @Test(timeout = 4000)
    public void test1817() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        MockDate mockDate0 = new MockDate(1, 1, 0, 1728, 0);
        objectMapper0.convertValue((Object) mockDate0, class0);
    }

    @Test(timeout = 4000)
    public void test1918() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        byte[] byteArray0 = new byte[2];
        ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
        objectMapper0.convertValue((Object) byteBuffer0, class0);
    }

    @Test(timeout = 4000)
    public void test2019() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        objectMapper0.convertValue((Object) inetAddress0, class0);
    }

    @Test(timeout = 4000)
    public void test2120() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2);
        String string0 = objectMapper0.writeValueAsString(mockInetSocketAddress0);
    }

    @Test(timeout = 4000)
    public void test2221() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TimeZone timeZone0 = TimeZone.getDefault();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        objectMapper0.convertValue((Object) timeZone0, class0);
    }

    @Test(timeout = 4000)
    public void test2322() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<Charset> class0 = Charset.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByPrimaryType(defaultSerializerProvider_Impl0, simpleType0, basicBeanDescription0, true);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test2423() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        objectMapper0.convertValue((Object) objectMapper_DefaultTyping0, class0);
    }

    @Test(timeout = 4000)
    public void test2524() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.USE_STATIC_TYPING;
        mapperFeatureArray0[1] = mapperFeature1;
        ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        SQLWarning sQLWarning0 = new SQLWarning("ti;C", "ti;C", 15711167, sQLSyntaxErrorException0);
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        objectMapper1.convertValue((Object) sQLWarning0, class0);
    }

    @Test(timeout = 4000)
    public void test2625() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ArrayType arrayType1 = arrayType0.withStaticTyping();
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, arrayType1, basicBeanDescription0, false);
    }

    @Test(timeout = 4000)
    public void test2726() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        Class<Character> class0 = Character.TYPE;
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        MapType mapType0 = MapType.construct(class0, collectionType0, javaType0);
        MapType mapType1 = mapType0.withStaticTyping();
        beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, mapType1, basicBeanDescription0, false);
    }

    @Test(timeout = 4000)
    public void test2827() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifyMapSerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.type.MapType.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));
        doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
        SerializerFactoryConfig serializerFactoryConfig1 = serializerFactoryConfig0.withSerializerModifier(beanSerializerModifier0);
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig1);
        objectMapper0.setSerializerFactory(beanSerializerFactory0);
        HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        objectMapper0.convertValue((Object) hashMap0, class0);
    }

    @Test(timeout = 4000)
    public void test2928() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
        BatchUpdateException batchUpdateException0 = new BatchUpdateException();
        sQLNonTransientConnectionException0.setNextException(batchUpdateException0);
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        objectMapper0.convertValue((Object) sQLNonTransientConnectionException0, class0);
    }

    @Test(timeout = 4000)
    public void test3029() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifyEnumSerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.JavaType.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));
        doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
        SerializerFactoryConfig serializerFactoryConfig1 = serializerFactoryConfig0.withSerializerModifier(beanSerializerModifier0);
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig1);
        objectMapper0.setSerializerFactory(beanSerializerFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        objectMapper0.convertValue((Object) objectMapper_DefaultTyping0, class0);
    }

    @Test(timeout = 4000)
    public void test3130() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        Class<Boolean> class0 = Boolean.class;
        Class<?> class1 = beanSerializerFactory0._verifyAsClass((Object) null, "LocX'eqN(^<}mzl@2", class0);
    }

    @Test(timeout = 4000)
    public void test3231() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        Class<CharBuffer> class0 = CharBuffer.class;
        beanSerializerFactory0._verifyAsClass("4swheD@jq{(h$l", "4swheD@jq{(h$l", class0);
    }

    @Test(timeout = 4000)
    public void test3332() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        Class<Timestamp> class0 = Timestamp.class;
        Class<?> class1 = beanSerializerFactory0._verifyAsClass(class0, "4swheD@jq{(h$l", class0);
    }
}
