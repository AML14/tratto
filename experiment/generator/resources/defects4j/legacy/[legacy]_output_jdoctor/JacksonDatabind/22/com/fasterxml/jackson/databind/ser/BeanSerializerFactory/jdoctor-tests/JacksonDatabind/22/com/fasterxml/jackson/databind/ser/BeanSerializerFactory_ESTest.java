/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 29 02:34:05 GMT 2023
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Array;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanSerializerFactory_ESTest extends BeanSerializerFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        Class<Serializers.Base>[] classArray0 = (Class<Serializers.Base>[]) Array.newInstance(Class.class, 0);
        beanSerializerFactory0.instance.constructFilteredBeanWriter((BeanPropertyWriter) null, classArray0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<MapType> class0 = MapType.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ArrayType arrayType0 = ArrayType.construct(simpleType0, (Object) null, simpleType0);
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) arrayType0, (JavaType) arrayType0);
        CollectionType collectionType0 = CollectionType.construct(class0, mapLikeType0);
        JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, collectionType0, (BeanDescription) null, true);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        Class<AnnotatedField> class0 = AnnotatedField.class;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
        JavaType javaType0 = TypeFactory.unknownType();
        MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
        beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, mapType0, basicBeanDescription0, true);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
        Serializers.Base serializers_Base0 = new Serializers.Base();
        BeanSerializerFactory beanSerializerFactory1 = (BeanSerializerFactory) beanSerializerFactory0.instance.withAdditionalSerializers(serializers_Base0);
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        beanSerializerFactory1._createSerializer2(defaultSerializerProvider_Impl0, simpleType0, basicBeanDescription0, true);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<Object> jsonSerializer0 = beanSerializerFactory0.instance.findBeanSerializer(defaultSerializerProvider_Impl0, arrayType0, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Object object0 = new Object();
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        objectMapper0.convertValue(object0, class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.convertValue((Object) pOJOPropertiesCollector0, class0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
        stack0.add((BeanPropertyDefinition) pOJOPropertyBuilder0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        beanSerializerFactory0.removeSetterlessGetters((SerializationConfig) null, (BeanDescription) null, stack0);
        stack0.toString();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
        stack0.add((BeanPropertyDefinition) pOJOPropertyBuilder0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        beanSerializerFactory0.removeSetterlessGetters((SerializationConfig) null, (BeanDescription) null, stack0);
        stack0.empty();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
        Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
        stack0.addElement(pOJOPropertyBuilder0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        beanSerializerFactory0.removeSetterlessGetters((SerializationConfig) null, (BeanDescription) null, stack0);
        stack0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
        Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
        stack0.addElement(pOJOPropertyBuilder0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        beanSerializerFactory0.removeSetterlessGetters((SerializationConfig) null, (BeanDescription) null, stack0);
        stack0.empty();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        Class<AnnotatedField> class0 = AnnotatedField.class;
        objectMapper1.convertValue((Object) objectMapper0, class0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
        mapperFeatureArray0[3] = mapperFeature1;
        mapperFeatureArray0[4] = mapperFeatureArray0[2];
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        Class<Integer> class0 = Integer.class;
        PropertyBasedObjectIdGenerator propertyBasedObjectIdGenerator0 = new PropertyBasedObjectIdGenerator(class0);
        Class<TypeIdResolver> class1 = TypeIdResolver.class;
        objectMapper1.convertValue((Object) propertyBasedObjectIdGenerator0, class1);
    }
}
