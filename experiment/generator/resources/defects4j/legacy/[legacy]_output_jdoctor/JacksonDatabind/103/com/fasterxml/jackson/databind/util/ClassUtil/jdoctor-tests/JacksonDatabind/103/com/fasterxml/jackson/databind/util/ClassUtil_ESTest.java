/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 05:02:49 GMT 2023
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLTimeoutException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
        EnumMap<ClientInfoStatus, String> enumMap0 = new EnumMap<ClientInfoStatus, String>(class0);
        Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        ClassUtil.checkAndFixAccess((Member) null);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Class<Void> class0 = Void.class;
        ClassUtil.findConstructor(class0, false);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Class<TextNode> class0 = TextNode.class;
        Class<MapType> class1 = MapType.class;
        List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
        objectMapper0.writeValue((DataOutput) dataOutputStream0, (Object) dataOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0076() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonAutoDetect_Visibility0);
    }

    @Test(timeout = 4000)
    public void test0087() throws Throwable {
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
    }

    @Test(timeout = 4000)
    public void test0098() throws Throwable {
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
    }

    @Test(timeout = 4000)
    public void test0109() throws Throwable {
        ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
        classUtil_Ctor0.getDeclaringClass();
    }

    @Test(timeout = 4000)
    public void test01110() throws Throwable {
        Class<IOException> class0 = IOException.class;
        List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test01211() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<InputStream> class0 = InputStream.class;
        Class<MapLikeType> class1 = MapLikeType.class;
        Class<Short> class2 = Short.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
        List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, true);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test01312() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Object object0 = new Object();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(object0);
    }

    @Test(timeout = 4000)
    public void test01413() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test01514() throws Throwable {
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test01615() throws Throwable {
        Class<Double> class0 = Double.class;
        Class<AccessibleObject> class1 = AccessibleObject.class;
        List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test01716() throws Throwable {
        Class<Object> class0 = Object.class;
        Class<AccessibleObject> class1 = AccessibleObject.class;
        List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test01817() throws Throwable {
        List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test01918() throws Throwable {
        Class<MapLikeType> class0 = MapLikeType.class;
        Class<Object> class1 = Object.class;
        List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test02019() throws Throwable {
        Class<Character> class0 = Character.class;
        List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test02120() throws Throwable {
        Class<Float> class0 = Float.class;
        Class<Short> class1 = Short.class;
        List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test02221() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);
        Class<Object> class1 = Object.class;
        List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, true);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test02322() throws Throwable {
        Class<Double> class0 = Double.class;
        List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test02423() throws Throwable {
        Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
        String string0 = ClassUtil.canBeABeanType(class0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
        String string0 = ClassUtil.canBeABeanType(class0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        String string0 = ClassUtil.canBeABeanType(class0);
    }

    @Test(timeout = 4000)
    public void test02526() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        String string0 = ClassUtil.canBeABeanType(class0);
    }

    @Test(timeout = 4000)
    public void test02627() throws Throwable {
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) jsonInclude_Include0);
        String string0 = ClassUtil.isLocalType(class0, false);
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) jsonInclude_Include0);
        String string0 = ClassUtil.isLocalType(class0, false);
        class0.getModifiers();
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) jsonInclude_Include0);
        String string0 = ClassUtil.isLocalType(class0, false);
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        String string0 = ClassUtil.isLocalType(class0, true);
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        Class<RuntimeException> class0 = RuntimeException.class;
        String string0 = ClassUtil.isLocalType(class0, false);
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        Class<?> class1 = ClassUtil.getOuterClass(class0);
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
    }

    @Test(timeout = 4000)
    public void test03034() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
        boolean boolean0 = ClassUtil.isConcrete(class1);
    }

    @Test(timeout = 4000)
    public void test03135() throws Throwable {
        Class<Object> class0 = Object.class;
        boolean boolean0 = ClassUtil.isConcrete(class0);
    }

    @Test(timeout = 4000)
    public void test03236() throws Throwable {
        Class<IOException> class0 = IOException.class;
        Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
    }

    @Test(timeout = 4000)
    public void test03237() throws Throwable {
        Class<IOException> class0 = IOException.class;
        Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
        boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
    }

    @Test(timeout = 4000)
    public void test03238() throws Throwable {
        Class<IOException> class0 = IOException.class;
        Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
        boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
        constructor0.isAccessible();
    }

    @Test(timeout = 4000)
    public void test03339() throws Throwable {
        Class<AccessPattern> class0 = AccessPattern.class;
        boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
    }

    @Test(timeout = 4000)
    public void test03440() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
    }

    @Test(timeout = 4000)
    public void test03541() throws Throwable {
        Class<Void> class0 = Void.class;
        boolean boolean0 = ClassUtil.isBogusClass(class0);
    }

    @Test(timeout = 4000)
    public void test03642() throws Throwable {
        Class<Void> class0 = Void.TYPE;
        boolean boolean0 = ClassUtil.isBogusClass(class0);
    }

    @Test(timeout = 4000)
    public void test03743() throws Throwable {
        Class<NoClass> class0 = NoClass.class;
        boolean boolean0 = ClassUtil.isBogusClass(class0);
    }

    @Test(timeout = 4000)
    public void test03844() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        boolean boolean0 = ClassUtil.isBogusClass(class0);
    }

    @Test(timeout = 4000)
    public void test03945() throws Throwable {
        Class<String> class0 = String.class;
        boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
    }

    @Test(timeout = 4000)
    public void test04046() throws Throwable {
        Class<Short> class0 = Short.class;
        Class<MapLikeType> class1 = MapLikeType.class;
        boolean boolean0 = ClassUtil.hasClass(class0, class1);
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        Class<Object> class0 = Object.class;
        Class<?> class1 = ClassUtil.classOf(class0);
        boolean boolean0 = ClassUtil.hasClass(class1, class1);
    }

    @Test(timeout = 4000)
    public void test04248() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        objectMapper1.equals((Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test04349() throws Throwable {
        Class<Object> class0 = Object.class;
        MockIOException mockIOException0 = new MockIOException();
        ClassUtil.verifyMustOverride(class0, mockIOException0, "keyType");
    }

    @Test(timeout = 4000)
    public void test04450() throws Throwable {
        MockError mockError0 = new MockError();
        ClassUtil.throwIfError(mockError0);
    }

    @Test(timeout = 4000)
    public void test04551() throws Throwable {
        SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("B", "B", 1407);
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTimeoutException0);
    }

    @Test(timeout = 4000)
    public void test04652() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructFromCanonical("J$-s'iyt3y?p");
    }

    @Test(timeout = 4000)
    public void test04753() throws Throwable {
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
    }

    @Test(timeout = 4000)
    public void test04854() throws Throwable {
        Class<Void> class0 = Void.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test04955() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        SQLWarning sQLWarning0 = new SQLWarning("u[LXOC", "&tRXpzuea");
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLWarning0);
    }

    @Test(timeout = 4000)
    public void test05056() throws Throwable {
        Class<InputStream> class0 = InputStream.class;
        ClassUtil.createInstance(class0, false);
    }

    @Test(timeout = 4000)
    public void test05157() throws Throwable {
        Class<Double> class0 = Double.class;
        ClassUtil.createInstance(class0, false);
    }

    @Test(timeout = 4000)
    public void test05258() throws Throwable {
        Class<?> class0 = ClassUtil.classOf((Object) null);
    }

    @Test(timeout = 4000)
    public void test05359() throws Throwable {
        PlaceholderForType placeholderForType0 = new PlaceholderForType(1276);
        Class<?> class0 = ClassUtil.rawClass(placeholderForType0);
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test05460() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException) defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "_rrao", "_rrao");
        invalidTypeIdException0.getTypeId();
    }

    @Test(timeout = 4000)
    public void test05561() throws Throwable {
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        Class<ResolvedRecursiveType> class1 = ClassUtil.nonNull(class0, class0);
        class1.isEnum();
    }

    @Test(timeout = 4000)
    public void test05662() throws Throwable {
        MapType mapType0 = ClassUtil.nonNull((MapType) null, (MapType) null);
    }

    @Test(timeout = 4000)
    public void test05763() throws Throwable {
        Class<Error> class0 = Error.class;
        String string0 = ClassUtil.nullOrToString(class0);
    }

    @Test(timeout = 4000)
    public void test05864() throws Throwable {
        String string0 = ClassUtil.nullOrToString((Object) null);
    }

    @Test(timeout = 4000)
    public void test05965() throws Throwable {
        PropertyName propertyName0 = new PropertyName((String) null, (String) null);
        propertyName0.getNamespace();
    }

    @Test(timeout = 4000)
    public void test06066() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        String string0 = ClassUtil.quotedOr(class0, "?'4h'hU");
    }

    @Test(timeout = 4000)
    public void test06167() throws Throwable {
        String string0 = ClassUtil.quotedOr((Object) null, "IT!:4qU]n[");
    }

    @Test(timeout = 4000)
    public void test06268() throws Throwable {
        Class<Object> class0 = Object.class;
        String string0 = ClassUtil.getClassDescription(class0);
    }

    @Test(timeout = 4000)
    public void test06369() throws Throwable {
        String string0 = ClassUtil.getClassDescription((Object) null);
    }

    @Test(timeout = 4000)
    public void test06470() throws Throwable {
        Short short0 = new Short((short) 3600);
        String string0 = ClassUtil.getClassDescription(short0);
    }

    @Test(timeout = 4000)
    public void test06571() throws Throwable {
        String string0 = ClassUtil.classNameOf((Object) null);
    }

    @Test(timeout = 4000)
    public void test06672() throws Throwable {
        String string0 = ClassUtil.nameOf((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test06773() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        String string0 = ClassUtil.nameOf(class0);
    }

    @Test(timeout = 4000)
    public void test06874() throws Throwable {
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        String string0 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
    }

    @Test(timeout = 4000)
    public void test06975() throws Throwable {
        String string0 = ClassUtil.nameOf((Named) null);
    }

    @Test(timeout = 4000)
    public void test07076() throws Throwable {
        String string0 = ClassUtil.backticked((String) null);
    }

    @Test(timeout = 4000)
    public void test07177() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        Object object0 = ClassUtil.defaultValue(class0);
    }

    @Test(timeout = 4000)
    public void test07278() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Object object0 = ClassUtil.defaultValue(class0);
    }

    @Test(timeout = 4000)
    public void test07379() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        Object object0 = ClassUtil.defaultValue(class0);
    }

    @Test(timeout = 4000)
    public void test07480() throws Throwable {
        Class<Boolean> class0 = Boolean.TYPE;
        Object object0 = ClassUtil.defaultValue(class0);
    }

    @Test(timeout = 4000)
    public void test07581() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        Object object0 = ClassUtil.defaultValue(class0);
    }

    @Test(timeout = 4000)
    public void test07682() throws Throwable {
        Class<Float> class0 = Float.TYPE;
        Object object0 = ClassUtil.defaultValue(class0);
    }

    @Test(timeout = 4000)
    public void test07783() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        Object object0 = ClassUtil.defaultValue(class0);
    }

    @Test(timeout = 4000)
    public void test07884() throws Throwable {
        Class<Short> class0 = Short.TYPE;
        Object object0 = ClassUtil.defaultValue(class0);
    }

    @Test(timeout = 4000)
    public void test07985() throws Throwable {
        Class<Double> class0 = Double.class;
        ClassUtil.defaultValue(class0);
    }

    @Test(timeout = 4000)
    public void test08086() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        Class<?> class1 = ClassUtil.wrapperType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test08187() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Class<?> class1 = ClassUtil.wrapperType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test08288() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        Class<?> class1 = ClassUtil.wrapperType(class0);
        class1.isEnum();
    }

    @Test(timeout = 4000)
    public void test08389() throws Throwable {
        Class<Boolean> class0 = Boolean.TYPE;
        Class<?> class1 = ClassUtil.wrapperType(class0);
        class1.isAnnotation();
    }

    @Test(timeout = 4000)
    public void test08490() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        Class<?> class1 = ClassUtil.wrapperType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test08591() throws Throwable {
        Class<Float> class0 = Float.TYPE;
        Class<?> class1 = ClassUtil.wrapperType(class0);
        class1.getModifiers();
    }

    @Test(timeout = 4000)
    public void test08692() throws Throwable {
        Class<Error> class0 = Error.class;
        ClassUtil.wrapperType(class0);
    }

    @Test(timeout = 4000)
    public void test08793() throws Throwable {
        Class<Short> class0 = Short.TYPE;
        Class<?> class1 = ClassUtil.wrapperType(class0);
        class1.isAnnotation();
    }

    @Test(timeout = 4000)
    public void test08894() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        Class<?> class1 = ClassUtil.wrapperType(class0);
        class1.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test08995() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        Class<?> class1 = ClassUtil.primitiveType(class0);
        class1.isAnnotation();
    }

    @Test(timeout = 4000)
    public void test09096() throws Throwable {
        Class<Byte> class0 = Byte.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test09097() throws Throwable {
        Class<Byte> class0 = Byte.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
    }

    @Test(timeout = 4000)
    public void test09198() throws Throwable {
        Class<Long> class0 = Long.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
    }

    @Test(timeout = 4000)
    public void test09199() throws Throwable {
        Class<Long> class0 = Long.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
        class1.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test092100() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
    }

    @Test(timeout = 4000)
    public void test092101() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test093102() throws Throwable {
        Class<Double> class0 = Double.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
    }

    @Test(timeout = 4000)
    public void test093103() throws Throwable {
        Class<Double> class0 = Double.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test094104() throws Throwable {
        Class<Float> class0 = Float.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test094105() throws Throwable {
        Class<Float> class0 = Float.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
    }

    @Test(timeout = 4000)
    public void test095106() throws Throwable {
        Class<Character> class0 = Character.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
    }

    @Test(timeout = 4000)
    public void test095107() throws Throwable {
        Class<Character> class0 = Character.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test096108() throws Throwable {
        Class<Short> class0 = Short.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
    }

    @Test(timeout = 4000)
    public void test096109() throws Throwable {
        Class<Short> class0 = Short.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test097110() throws Throwable {
        Class<MapLikeType> class0 = MapLikeType.class;
        Class<?> class1 = ClassUtil.primitiveType(class0);
    }

    @Test(timeout = 4000)
    public void test098111() throws Throwable {
        Class<Void> class0 = Void.class;
        Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
        ClassUtil.checkAndFixAccess((Member) constructor0, false);
        constructor0.isAccessible();
    }

    @Test(timeout = 4000)
    public void test099112() throws Throwable {
        Class<RuntimeException> class0 = RuntimeException.class;
        Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
        ClassUtil.checkAndFixAccess((Member) constructor0, false);
        constructor0.isAccessible();
    }

    @Test(timeout = 4000)
    public void test100113() throws Throwable {
        Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
        EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
        Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
        class1.isInterface();
    }

    @Test(timeout = 4000)
    public void test101114() throws Throwable {
        AccessPattern accessPattern0 = AccessPattern.CONSTANT;
        EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
        Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
        class0.getModifiers();
    }

    @Test(timeout = 4000)
    public void test102115() throws Throwable {
        Class<AccessPattern> class0 = AccessPattern.class;
        EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
        AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
        enumMap0.put(accessPattern0, (Object) accessPattern0);
        Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
        class1.getModifiers();
    }

    @Test(timeout = 4000)
    public void test103116() throws Throwable {
        Class<AccessPattern> class0 = AccessPattern.class;
        Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
        class1.isEnum();
    }

    @Test(timeout = 4000)
    public void test104117() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test105118() throws Throwable {
        boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
    }

    @Test(timeout = 4000)
    public void test106119() throws Throwable {
        Class<Byte> class0 = Byte.class;
        boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
    }

    @Test(timeout = 4000)
    public void test107120() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        String string0 = ClassUtil.getPackageName(class0);
    }

    @Test(timeout = 4000)
    public void test108121() throws Throwable {
        Class<Annotation> class0 = Annotation.class;
        ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
    }

    @Test(timeout = 4000)
    public void test109122() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
    }

    @Test(timeout = 4000)
    public void test110123() throws Throwable {
        Class<Double> class0 = Double.class;
        Class<?> class1 = ClassUtil.getDeclaringClass(class0);
    }

    @Test(timeout = 4000)
    public void test111124() throws Throwable {
        Class<Object> class0 = Object.class;
        Class<?> class1 = ClassUtil.getDeclaringClass(class0);
    }

    @Test(timeout = 4000)
    public void test112125() throws Throwable {
        Class<Object> class0 = Object.class;
        Class<?> class1 = ClassUtil.getOuterClass(class0);
    }

    @Test(timeout = 4000)
    public void test113126() throws Throwable {
        Class<String> class0 = String.class;
        Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
        ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
        classUtil_Ctor0.getDeclaredAnnotations();
        Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
    }

    @Test(timeout = 4000)
    public void test113127() throws Throwable {
        Class<String> class0 = String.class;
        Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
        ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
        classUtil_Ctor0.getDeclaredAnnotations();
        Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
        constructor0.isAccessible();
    }

    @Test(timeout = 4000)
    public void test114128() throws Throwable {
        Class<IOException> class0 = IOException.class;
        Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
        ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
        classUtil_Ctor0.getParameterAnnotations();
        classUtil_Ctor0.getParameterAnnotations();
        constructor0.isAccessible();
    }
}
