/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 04:52:03 GMT 2023
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdValueInstantiator_ESTest extends StdValueInstantiator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
        stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<MockFileInputStream> class0 = MockFileInputStream.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.configureIncompleteParameter((AnnotatedParameter) null);
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, class0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<MatchStrength> class0 = MatchStrength.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getDelegateCreator();
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<MatchStrength> class0 = MatchStrength.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getArrayDelegateCreator();
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<Module> class0 = Module.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTransientConnectionException0);
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, invocationTargetException0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = null;
        stdValueInstantiator0 = new StdValueInstantiator((StdValueInstantiator) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Integer> class0 = Integer.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<MatchStrength> class0 = MatchStrength.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getDefaultCreator();
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getWithArgsCreator();
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
        stdValueInstantiator0.canInstantiate();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<DecimalNode> class0 = DecimalNode.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Class<DecimalNode> class0 = DecimalNode.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Class<PropertyName> class0 = PropertyName.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        Class<MatchStrength> class1 = MatchStrength.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        stdValueInstantiator0._delegateType = (JavaType) referenceType0;
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
        stdValueInstantiator0.canCreateUsingDelegate();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Class<PropertyName> class0 = PropertyName.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        Class<MatchStrength> class1 = MatchStrength.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        stdValueInstantiator0._delegateType = (JavaType) referenceType0;
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Class<MatchStrength> class0 = MatchStrength.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-820));
        stdValueInstantiator0._arrayDelegateType = (JavaType) placeholderForType0;
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
        stdValueInstantiator0.canCreateUsingArrayDelegate();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        Class<MatchStrength> class0 = MatchStrength.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-820));
        stdValueInstantiator0._arrayDelegateType = (JavaType) placeholderForType0;
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        Class<DecimalNode> class0 = DecimalNode.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) null, (Object[]) null);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Class<String> class0 = String.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Class<JavaType> class0 = JavaType.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.createFromString((DeserializationContext) null, "Instantiation of ");
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.createFromInt((DeserializationContext) null, 1);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        Class<String> class0 = String.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.createFromLong((DeserializationContext) null, 24L);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        Class<DecimalNode> class0 = DecimalNode.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.createFromDouble((DeserializationContext) null, 1.0);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        Class<Object> class0 = Object.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.createFromBoolean((DeserializationContext) null, false);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        Class<String> class0 = String.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLDataException sQLDataException0 = new SQLDataException();
        stdValueInstantiator0.wrapException(sQLDataException0);
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        Class<Integer> class0 = Integer.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLTransientException sQLTransientException0 = new SQLTransientException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) null, "");
        JsonMappingException jsonMappingException1 = stdValueInstantiator0.wrapException(jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        Class<Integer> class0 = Integer.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLTransientException sQLTransientException0 = new SQLTransientException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) null, "");
        JsonMappingException jsonMappingException1 = stdValueInstantiator0.wrapException(jsonMappingException0);
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        Class<Locale> class0 = Locale.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
        stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, sQLInvalidAuthorizationSpecException0);
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        Class<InvocationTargetException> class0 = InvocationTargetException.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
        stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, jsonMappingException0);
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        Class<NamedType> class0 = NamedType.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "'");
        stdValueInstantiator0.wrapAsJsonMappingException((DeserializationContext) null, jsonMappingException0);
        stdValueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        Class<Object> class0 = Object.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, exceptionInInitializerError0);
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, (Throwable) null);
    }
}
