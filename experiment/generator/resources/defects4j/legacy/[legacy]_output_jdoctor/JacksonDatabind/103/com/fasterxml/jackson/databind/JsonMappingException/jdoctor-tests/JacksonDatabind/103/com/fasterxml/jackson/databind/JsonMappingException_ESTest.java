/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 06:34:28 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLSyntaxErrorException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        jsonMappingException_Reference0.setIndex((-1267));
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("");
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
        JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference) jsonMappingException_Reference0.writeReplace();
        jsonMappingException_Reference1.getIndex();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        jsonMappingException_Reference0.getFrom();
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("");
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
        jsonMappingException_Reference0.setFieldName("");
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLSyntaxErrorException0);
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("is", "is");
        jsonMappingException_Reference0.setDescription("is");
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("");
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
        String string0 = jsonMappingException_Reference0.getFieldName();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("");
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
        String string0 = jsonMappingException_Reference0.getFieldName();
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        int int0 = jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException(")6tKoR ");
        String string0 = jsonMappingException0.getPathReference();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, 54);
        jsonMappingException0.prependPath((Object) sQLSyntaxErrorException0, 54);
        sQLSyntaxErrorException0.getErrorCode();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "com.fasterxml.jackson.databind.SerializationFeature");
        String string0 = jsonMappingException0._buildMessage();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "xc)7)F1UEw)DV[lb", (Throwable) sQLSyntaxErrorException0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JsonMappingException.from((DeserializationContext) null, "XXd5$pP[HM<r?moQD");
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("[Source: UNKNOWN; line: -1, column: -1]");
        Object object0 = jsonMappingException0.getProcessor();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "|OZr]oYRv&]|", (Throwable) sQLSyntaxErrorException0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "XT-~;Rc8", (Throwable) sQLSyntaxErrorException0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, 63);
        String string0 = jsonMappingException0.toString();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, (-2960));
        jsonMappingException0.prependPath((Object) sQLSyntaxErrorException0, "");
        sQLSyntaxErrorException0.getSQLState();
    }

    @Test(timeout = 4000)
    public void test2221() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("");
        JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", "com.fasterxml.jackson.databind.JsonMappingException[\"\"]");
    }

    @Test(timeout = 4000)
    public void test2522() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, 1257);
        jsonMappingException0.getLocalizedMessage();
        String string0 = jsonMappingException0._buildMessage();
    }

    @Test(timeout = 4000)
    public void test2623() throws Throwable {
        JsonMappingException.fromUnexpectedIOE((IOException) null);
    }

    @Test(timeout = 4000)
    public void test2724() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = null;
        jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test2825() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "Cannot define Creator parameter %d as `@JsonUnwrapped`: combination not yet supported");
        InvalidFormatException invalidFormatException0 = (InvalidFormatException) JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) class0, 35);
        String string0 = ((JsonMappingException) invalidFormatException0)._buildMessage();
    }

    @Test(timeout = 4000)
    public void test2926() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        File file0 = MockFile.createTempFile("JSON", "JSON", (File) mockFile0);
        JsonParser jsonParser0 = jsonFactory0.createParser(file0);
        JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
    }

    @Test(timeout = 4000)
    public void test3027() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ZIE&; 4FJ6THyto", "ZIE&; 4FJ6THyto");
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
    }

    @Test(timeout = 4000)
    public void test3128() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test3229() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, 36);
        List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3330() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException(")6tKoR ");
        List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3431() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
        JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
        String string0 = jsonMappingException1._buildMessage();
    }

    @Test(timeout = 4000)
    public void test3432() throws Throwable {
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
        JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
        String string0 = jsonMappingException1._buildMessage();
        jsonMappingException_Reference0.getIndex();
    }
}
