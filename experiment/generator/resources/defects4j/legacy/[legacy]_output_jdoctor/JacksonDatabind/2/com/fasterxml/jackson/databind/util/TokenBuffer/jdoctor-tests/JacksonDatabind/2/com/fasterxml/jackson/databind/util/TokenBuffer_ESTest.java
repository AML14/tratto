/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 06:30:19 GMT 2023
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.text.DateFormat;
import java.util.Enumeration;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0._checkIsNumber();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        tokenBuffer0.firstToken();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        tokenBuffer0.firstToken();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        tokenBuffer0.firstToken();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
        tokenBuffer_Parser0.getLongValue();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        jsonGeneratorDelegate0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeString((String) null);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0037() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeString((String) null);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test0048() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0049() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeEndObject();
        JsonParser jsonParser1 = tokenBuffer0.asParser(jsonParser0);
        jsonParser1.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test00410() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeEndObject();
        JsonParser jsonParser1 = tokenBuffer0.asParser(jsonParser0);
        jsonParser1.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test00411() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeEndObject();
        JsonParser jsonParser1 = tokenBuffer0.asParser(jsonParser0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test00612() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        iOContext0.allocTokenBuffer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectMapper0, bytesToNameCanonicalizer0, (byte[]) null, 3, 16, true);
        TokenBuffer tokenBuffer0 = new TokenBuffer(uTF8StreamJsonParser0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer_Segment0.append((-888), jsonToken0, (Object) bytesToNameCanonicalizer0, (Object) bufferRecycler0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0._currentObject();
    }

    @Test(timeout = 4000)
    public void test00713() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(5725, jsonToken0, (Object) jsonToken0, (Object) tokenBuffer0, (Object) tokenBuffer0);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        BigInteger bigInteger0 = BigInteger.ONE;
        JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken1);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test00714() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(5725, jsonToken0, (Object) jsonToken0, (Object) tokenBuffer0, (Object) tokenBuffer0);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        BigInteger bigInteger0 = BigInteger.ONE;
        JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken1);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test00915() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeNumber((BigDecimal) null);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test00916() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeNumber((BigDecimal) null);
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test00917() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeNumber((BigDecimal) null);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test00918() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeNumber((BigDecimal) null);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test01019() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        tokenBuffer0.deserialize(tokenBuffer_Parser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test01120() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser1.close();
        tokenBuffer_Parser1.getIntValue();
    }

    @Test(timeout = 4000)
    public void test01221() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.setRootValueSeparator(")?");
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test01222() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.setRootValueSeparator(")?");
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test01223() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.setRootValueSeparator(")?");
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test01224() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.setRootValueSeparator(")?");
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        tokenBuffer_Segment0.findObjectId(287);
        tokenBuffer_Segment0.hasIds();
    }

    @Test(timeout = 4000)
    public void test01225() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.setRootValueSeparator(")?");
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        tokenBuffer_Segment0.findObjectId(287);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test01226() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.setRootValueSeparator(")?");
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        tokenBuffer_Segment0.findObjectId(287);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test01227() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.setRootValueSeparator(")?");
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        tokenBuffer_Segment0.findObjectId(287);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test01328() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        objectMapper0.writerWithDefaultPrettyPrinter();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.isClosed();
        tokenBuffer_Parser0.getNumberValue();
    }

    @Test(timeout = 4000)
    public void test01429() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(5725, jsonToken0, (Object) jsonToken0, (Object) tokenBuffer0, (Object) tokenBuffer0);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
        tokenBuffer0.writeRaw('_');
    }

    @Test(timeout = 4000)
    public void test01530() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        char[] charArray0 = new char[8];
        charArray0[0] = 'J';
        charArray0[1] = '\'';
        charArray0[2] = 'n';
        charArray0[3] = 'F';
        charArray0[4] = 'A';
        charArray0[5] = 'j';
        charArray0[6] = '-';
        charArray0[7] = 'k';
        tokenBuffer0.writeRaw(charArray0, 9, 9);
    }

    @Test(timeout = 4000)
    public void test01631() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        tokenBuffer0.writeTree((TreeNode) null);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test01632() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        tokenBuffer0.writeTree((TreeNode) null);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test01633() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        tokenBuffer0.writeTree((TreeNode) null);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test01734() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(4, 320, (Object) objectMapper1);
    }

    @Test(timeout = 4000)
    public void test01735() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(4, 320, (Object) objectMapper1);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
        tokenBuffer0.flush();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test01736() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(4, 320, (Object) objectMapper1);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
        tokenBuffer0.flush();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test01837() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        ShortNode shortNode0 = new ShortNode((short) 0);
        tokenBuffer0.writeObjectField("com.fasterxml.jackson.core.JsonGenerationException", shortNode0);
        tokenBuffer0.flush();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test01838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        ShortNode shortNode0 = new ShortNode((short) 0);
        tokenBuffer0.writeObjectField("com.fasterxml.jackson.core.JsonGenerationException", shortNode0);
        tokenBuffer0.flush();
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test01839() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        ShortNode shortNode0 = new ShortNode((short) 0);
        tokenBuffer0.writeObjectField("com.fasterxml.jackson.core.JsonGenerationException", shortNode0);
        tokenBuffer0.flush();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test01940() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
        tokenBuffer0.toString();
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        tokenBuffer1._append(jsonToken0, "Z&Lgpfz>`[OI");
        tokenBuffer_Parser0.getTokenLocation();
        tokenBuffer_Parser0.getBinaryValue();
    }

    @Test(timeout = 4000)
    public void test02041() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        tokenBuffer0.configure(jsonGenerator_Feature0, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        tokenBuffer_Segment0.append(34, jsonToken0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test02142() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(0, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test02143() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(0, jsonToken0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, false);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
        tokenBuffer_Parser0.setCodec(objectMapper3);
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test02144() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(0, jsonToken0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, false);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
        tokenBuffer_Parser0.setCodec(objectMapper3);
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test02245() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
        String string0 = tokenBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test02246() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
        String string0 = tokenBuffer0.toString();
        int int0 = tokenBuffer1.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test02247() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
        String string0 = tokenBuffer0.toString();
        int int0 = tokenBuffer1.getFeatureMask();
        tokenBuffer1.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test02248() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
        String string0 = tokenBuffer0.toString();
        int int0 = tokenBuffer1.getFeatureMask();
        tokenBuffer0.firstToken();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test02349() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        tokenBuffer_Segment0._tokenTypes = (-2793L);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        tokenBuffer0.deserialize(tokenBuffer_Parser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test02450() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        jsonGeneratorDelegate0.writeRaw("3Wy@tV");
    }

    @Test(timeout = 4000)
    public void test02551() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        tokenBuffer_Segment0.appendRaw(95, 95, (Object) jsonGeneratorDelegate0);
        tokenBuffer_Segment0._tokenTypes = (-2793L);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test02552() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        tokenBuffer_Segment0.appendRaw(95, 95, (Object) jsonGeneratorDelegate0);
        tokenBuffer_Segment0._tokenTypes = (-2793L);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test02553() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        tokenBuffer_Segment0.appendRaw(95, 95, (Object) jsonGeneratorDelegate0);
        tokenBuffer_Segment0._tokenTypes = (-2793L);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test02654() throws Throwable {
        ObjectCodec objectCodec0 = null;
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_STRING;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        Double double0 = new Double((-1808));
        tokenBuffer_Segment0.appendRaw((-1808), 16, (Object) serializedString0, (Object) jsonToken0, (Object) double0);
    }

    @Test(timeout = 4000)
    public void test02755() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.createParser("");
        objectMapper0.reader((Base64Variant) null);
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, false);
        tokenBuffer0.writeBoolean(false);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test02756() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.createParser("");
        objectMapper0.reader((Base64Variant) null);
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, false);
        tokenBuffer0.writeBoolean(false);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test02757() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.createParser("");
        objectMapper0.reader((Base64Variant) null);
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, false);
        tokenBuffer0.writeBoolean(false);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test02858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
    }

    @Test(timeout = 4000)
    public void test02959() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
        MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_GETTERS;
        mapperFeatureArray0[1] = mapperFeature1;
        MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[2] = mapperFeature2;
        MapperFeature mapperFeature3 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        mapperFeatureArray0[3] = mapperFeature3;
        MapperFeature mapperFeature4 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[4] = mapperFeature4;
        MapperFeature mapperFeature5 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[5] = mapperFeature5;
        MapperFeature mapperFeature6 = MapperFeature.INFER_PROPERTY_MUTATORS;
        mapperFeatureArray0[6] = mapperFeature6;
        MapperFeature mapperFeature7 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[7] = mapperFeature7;
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        deserializationFeatureArray0[4] = deserializationFeature1;
        deserializationFeatureArray0[5] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
        tokenBuffer_Parser0.getSchema();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test02960() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
        MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_GETTERS;
        mapperFeatureArray0[1] = mapperFeature1;
        MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[2] = mapperFeature2;
        MapperFeature mapperFeature3 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        mapperFeatureArray0[3] = mapperFeature3;
        MapperFeature mapperFeature4 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[4] = mapperFeature4;
        MapperFeature mapperFeature5 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[5] = mapperFeature5;
        MapperFeature mapperFeature6 = MapperFeature.INFER_PROPERTY_MUTATORS;
        mapperFeatureArray0[6] = mapperFeature6;
        MapperFeature mapperFeature7 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[7] = mapperFeature7;
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        deserializationFeatureArray0[4] = deserializationFeature1;
        deserializationFeatureArray0[5] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
        tokenBuffer_Parser0.getSchema();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test02961() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
        MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_GETTERS;
        mapperFeatureArray0[1] = mapperFeature1;
        MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[2] = mapperFeature2;
        MapperFeature mapperFeature3 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        mapperFeatureArray0[3] = mapperFeature3;
        MapperFeature mapperFeature4 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[4] = mapperFeature4;
        MapperFeature mapperFeature5 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[5] = mapperFeature5;
        MapperFeature mapperFeature6 = MapperFeature.INFER_PROPERTY_MUTATORS;
        mapperFeatureArray0[6] = mapperFeature6;
        MapperFeature mapperFeature7 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[7] = mapperFeature7;
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        deserializationFeatureArray0[4] = deserializationFeature1;
        deserializationFeatureArray0[5] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
        tokenBuffer_Parser0.getSchema();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1);
        tokenBuffer0.writeNumber("zs_uyjM%qlg");
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test02962() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
        MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_GETTERS;
        mapperFeatureArray0[1] = mapperFeature1;
        MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[2] = mapperFeature2;
        MapperFeature mapperFeature3 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        mapperFeatureArray0[3] = mapperFeature3;
        MapperFeature mapperFeature4 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[4] = mapperFeature4;
        MapperFeature mapperFeature5 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[5] = mapperFeature5;
        MapperFeature mapperFeature6 = MapperFeature.INFER_PROPERTY_MUTATORS;
        mapperFeatureArray0[6] = mapperFeature6;
        MapperFeature mapperFeature7 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[7] = mapperFeature7;
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        deserializationFeatureArray0[4] = deserializationFeature1;
        deserializationFeatureArray0[5] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
        tokenBuffer_Parser0.getSchema();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1);
        tokenBuffer0.writeNumber("zs_uyjM%qlg");
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test03063() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[6];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        tokenBuffer0.writeTypeId(objectMapper0);
        tokenBuffer0.disable(jsonGenerator_Feature0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        tokenBuffer0.firstToken();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test03164() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        tokenBuffer0.writeString((char[]) null, (-219), (-1497));
    }

    @Test(timeout = 4000)
    public void test03265() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[2];
        objectReaderArray0[0] = objectReader0;
        objectReaderArray0[1] = objectReader0;
        ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
        TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
        ObjectReader objectReader2 = objectReader1.with((InjectableValues) injectableValues_Std0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader2, false);
        tokenBuffer0.close();
        tokenBuffer0.isClosed();
    }

    @Test(timeout = 4000)
    public void test03366() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
        JsonGenerator jsonGenerator0 = tokenBuffer0.setFeatureMask(128);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
        tokenBuffer_Segment1.type(128);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test03467() throws Throwable {
        ObjectCodec objectCodec0 = null;
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        tokenBuffer0.firstToken();
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(34, jsonToken0);
        tokenBuffer_Segment1.append(16, (JsonToken) null, (Object) null, (Object) tokenBuffer_Segment0);
    }

    @Test(timeout = 4000)
    public void test03568() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        tokenBuffer_Segment0.appendRaw(718, 718, (Object) objectMapper0, (Object) objectMapper0, (Object) objectMapper0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        tokenBuffer0.copyCurrentEvent(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test03669() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        tokenBuffer0.writeObjectId(objectMapper0);
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        ObjectReader objectReader1 = objectMapper0.reader();
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        objectReader1.withFeatures(deserializationFeatureArray0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, true, false);
        tokenBuffer0.writeString("com.fasterxml.jackson.databind.util.TokenBuffer");
        tokenBuffer0.writeEndObject();
        tokenBuffer_Segment0.findTypeId((-4201));
        tokenBuffer_Segment0.hasIds();
    }

    @Test(timeout = 4000)
    public void test03770() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test03771() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
        tokenBuffer2.flush();
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test03772() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
        tokenBuffer2.flush();
        tokenBuffer1.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test03773() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
        tokenBuffer2.flush();
        tokenBuffer1.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test03774() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
        tokenBuffer2.flush();
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer2._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
        tokenBuffer_Parser0.getTextCharacters();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        tokenBuffer2.writeString((SerializableString) serializedString0);
        boolean boolean0 = tokenBuffer1.isClosed();
    }

    @Test(timeout = 4000)
    public void test03875() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
        byte[] byteArray0 = new byte[0];
        tokenBuffer0.writeBinary(byteArray0);
        ShortNode shortNode0 = new ShortNode((short) 0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer_Segment0.next();
        objectMapper1.getVisibilityChecker();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper2, true, false);
        tokenBuffer_Parser0.getIntValue();
    }

    @Test(timeout = 4000)
    public void test03976() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[6];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        tokenBuffer0.disable(jsonGenerator_Feature0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.firstToken();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test04077() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(5725, jsonToken0, (Object) jsonToken0, (Object) tokenBuffer0, (Object) tokenBuffer0);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken1);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test04078() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(5725, jsonToken0, (Object) jsonToken0, (Object) tokenBuffer0, (Object) tokenBuffer0);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken1);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test04079() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(5725, jsonToken0, (Object) jsonToken0, (Object) tokenBuffer0, (Object) tokenBuffer0);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken1);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test04180() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        tokenBuffer_Segment0._tokenTypes = (long) 16;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getIntValue();
    }

    @Test(timeout = 4000)
    public void test04281() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        DateFormat dateFormat0 = MockDateFormat.getInstance();
        objectMapper0.writer(dateFormat0);
        tokenBuffer_Parser0.getTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        tokenBuffer0.writeRawValue("{OqSep/l");
    }

    @Test(timeout = 4000)
    public void test04382() throws Throwable {
        EvoSuiteFile evoSuiteFile0 = null;
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z'XETJC>(;)qj'x'.-");
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
        objectMapper1.isEnabled(jsonFactory_Feature0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, false);
        AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        tokenBuffer0.writeRawValue("", (-2625), (-2625));
    }

    @Test(timeout = 4000)
    public void test04483() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        serializationFeatureArray0[2] = serializationFeature1;
        serializationFeatureArray0[3] = serializationFeature0;
        serializationFeatureArray0[4] = serializationFeature0;
        serializationFeatureArray0[5] = serializationFeature0;
        serializationFeatureArray0[6] = serializationFeature0;
        objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
        ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
        Class<Double> class0 = Double.class;
        ObjectReader objectReader0 = objectMapper2.readerWithView(class0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
        tokenBuffer0.writeNumber(521.92996346);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test04484() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        serializationFeatureArray0[2] = serializationFeature1;
        serializationFeatureArray0[3] = serializationFeature0;
        serializationFeatureArray0[4] = serializationFeature0;
        serializationFeatureArray0[5] = serializationFeature0;
        serializationFeatureArray0[6] = serializationFeature0;
        objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
        ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
        Class<Double> class0 = Double.class;
        ObjectReader objectReader0 = objectMapper2.readerWithView(class0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
        tokenBuffer0.writeNumber(521.92996346);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test04485() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        serializationFeatureArray0[2] = serializationFeature1;
        serializationFeatureArray0[3] = serializationFeature0;
        serializationFeatureArray0[4] = serializationFeature0;
        serializationFeatureArray0[5] = serializationFeature0;
        serializationFeatureArray0[6] = serializationFeature0;
        objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
        ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
        Class<Double> class0 = Double.class;
        ObjectReader objectReader0 = objectMapper2.readerWithView(class0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
        tokenBuffer0.writeNumber(521.92996346);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test04586() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        Long long0 = new Long(239L);
        jsonGeneratorDelegate0.writeTypeId(long0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        tokenBuffer_Segment0._tokenTypes = (-2793L);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test04587() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        Long long0 = new Long(239L);
        jsonGeneratorDelegate0.writeTypeId(long0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        tokenBuffer_Segment0._tokenTypes = (-2793L);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test04588() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        Long long0 = new Long(239L);
        jsonGeneratorDelegate0.writeTypeId(long0);
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        tokenBuffer_Segment0._tokenTypes = (-2793L);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test04789() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        boolean boolean0 = true;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getTypeId();
        tokenBuffer_Parser0._handleEOF();
    }

    @Test(timeout = 4000)
    public void test04890() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.nextToken();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test04891() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.nextToken();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test04892() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.nextToken();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test04893() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.nextToken();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test04894() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.nextToken();
        tokenBuffer_Parser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test04995() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(34, jsonToken0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test04996() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(34, jsonToken0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.peekNextToken();
    }

    @Test(timeout = 4000)
    public void test04997() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(34, jsonToken0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test04998() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(34, jsonToken0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        jsonGenerator0.writeEndObject();
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
        tokenBuffer1.writeEndArray();
        JsonToken jsonToken1 = tokenBuffer1.firstToken();
    }

    @Test(timeout = 4000)
    public void test04999() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(34, jsonToken0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        jsonGenerator0.writeEndObject();
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
        tokenBuffer1.writeEndArray();
        JsonToken jsonToken1 = tokenBuffer1.firstToken();
        boolean boolean0 = jsonGenerator0.isEnabled(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test049100() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(34, jsonToken0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        jsonGenerator0.writeEndObject();
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
        tokenBuffer1.writeEndArray();
        JsonToken jsonToken1 = tokenBuffer1.firstToken();
        boolean boolean0 = jsonGenerator0.isEnabled(jsonGenerator_Feature0);
        jsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test049101() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(34, jsonToken0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        jsonGenerator0.writeEndObject();
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
        tokenBuffer1.writeEndArray();
        JsonToken jsonToken1 = tokenBuffer1.firstToken();
        boolean boolean0 = jsonGenerator0.isEnabled(jsonGenerator_Feature0);
        jsonGenerator0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test050102() throws Throwable {
        ObjectCodec objectCodec0 = null;
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        SerializedString serializedString0 = new SerializedString("&v7_s_YE%ed2opl#9");
        serializedString0.asQuotedUTF8();
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test051103() throws Throwable {
        char[] charArray0 = new char[6];
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[objectId=");
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer0.writeNumber((short) (-256));
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test051104() throws Throwable {
        char[] charArray0 = new char[6];
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[objectId=");
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer0.writeNumber((short) (-256));
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test051105() throws Throwable {
        char[] charArray0 = new char[6];
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[objectId=");
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer0.writeNumber((short) (-256));
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test052106() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        boolean boolean0 = false;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getFloatValue();
    }

    @Test(timeout = 4000)
    public void test053107() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.reader((Base64Variant) null);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        objectMapper0.disableDefaultTyping();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
        tokenBuffer0.writeNumber((-4388L));
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test053108() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.reader((Base64Variant) null);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        objectMapper0.disableDefaultTyping();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
        tokenBuffer0.writeNumber((-4388L));
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test055109() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        Double double0 = new Double((-1808));
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
        tokenBuffer_Parser0.nextIntValue(0);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test055110() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        Double double0 = new Double((-1808));
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
        tokenBuffer_Parser0.nextIntValue(0);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test055111() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        Double double0 = new Double((-1808));
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
        tokenBuffer_Parser0.nextIntValue(0);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test055112() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        Double double0 = new Double((-1808));
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
        tokenBuffer_Parser0.nextIntValue(0);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test055113() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        Double double0 = new Double((-1808));
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
        tokenBuffer_Parser0.nextIntValue(0);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test056114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disableDefaultTyping();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test056115() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disableDefaultTyping();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test056116() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disableDefaultTyping();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test056117() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disableDefaultTyping();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test057118() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer2._first;
        tokenBuffer2.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer2.firstToken();
    }

    @Test(timeout = 4000)
    public void test057119() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer2._first;
        tokenBuffer2.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer2.firstToken();
        tokenBuffer2.serialize(tokenBuffer1);
        tokenBuffer2.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test057120() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer2._first;
        tokenBuffer2.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer2.firstToken();
        tokenBuffer2.serialize(tokenBuffer1);
        tokenBuffer2.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test059121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        tokenBuffer_Segment0.type(16);
        JsonGenerator jsonGenerator0 = tokenBuffer0.setCodec(objectMapper0);
        jsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test059122() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        tokenBuffer_Segment0.type(16);
        JsonGenerator jsonGenerator0 = tokenBuffer0.setCodec(objectMapper0);
        jsonGenerator0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test060123() throws Throwable {
        char[] charArray0 = new char[6];
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[objectId=");
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        tokenBuffer0.writeNumber((short) (-256));
        ObjectCodec objectCodec0 = tokenBuffer0.getCodec();
    }

    @Test(timeout = 4000)
    public void test060124() throws Throwable {
        char[] charArray0 = new char[6];
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[objectId=");
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        tokenBuffer0.writeNumber((short) (-256));
        ObjectCodec objectCodec0 = tokenBuffer0.getCodec();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test060125() throws Throwable {
        char[] charArray0 = new char[6];
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[objectId=");
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        tokenBuffer0.writeNumber((short) (-256));
        ObjectCodec objectCodec0 = tokenBuffer0.getCodec();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test060126() throws Throwable {
        char[] charArray0 = new char[6];
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[objectId=");
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        tokenBuffer0.writeNumber((short) (-256));
        ObjectCodec objectCodec0 = tokenBuffer0.getCodec();
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test061127() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        tokenBuffer0.writeObjectId("");
        tokenBuffer_Segment0._tokenTypes = (long) 16;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getIntValue();
    }

    @Test(timeout = 4000)
    public void test064128() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
    }

    @Test(timeout = 4000)
    public void test064129() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        int int0 = TokenBuffer.Segment.TOKENS_PER_SEGMENT;
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test064130() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        int int0 = TokenBuffer.Segment.TOKENS_PER_SEGMENT;
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        tokenBuffer_Parser0.peekNextToken();
    }

    @Test(timeout = 4000)
    public void test064131() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        int int0 = TokenBuffer.Segment.TOKENS_PER_SEGMENT;
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test064132() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        int int0 = TokenBuffer.Segment.TOKENS_PER_SEGMENT;
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken2 = tokenBuffer0.firstToken();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test064133() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        int int0 = TokenBuffer.Segment.TOKENS_PER_SEGMENT;
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken2 = tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test064134() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        int int0 = TokenBuffer.Segment.TOKENS_PER_SEGMENT;
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken2 = tokenBuffer0.firstToken();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test065135() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
        jsonFactory0.createParser("");
        Integer integer0 = new Integer(16);
        tokenBuffer0.firstToken();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test065136() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
        jsonFactory0.createParser("");
        Integer integer0 = new Integer(16);
        tokenBuffer0.firstToken();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test065137() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
        jsonFactory0.createParser("");
        Integer integer0 = new Integer(16);
        tokenBuffer0.firstToken();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test066138() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        tokenBuffer_Parser1.nextIntValue(100);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test066139() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        tokenBuffer_Parser1.nextIntValue(100);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        tokenBuffer_Parser0.peekNextToken();
    }

    @Test(timeout = 4000)
    public void test066140() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        tokenBuffer_Parser1.nextIntValue(100);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test066141() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        tokenBuffer_Parser1.nextIntValue(100);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken2 = tokenBuffer0.firstToken();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test066142() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        tokenBuffer_Parser1.nextIntValue(100);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken2 = tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test066143() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        tokenBuffer_Parser1.nextIntValue(100);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken2 = tokenBuffer0.firstToken();
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test066144() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonEncoding0, (Object) jsonEncoding0, (Object) jsonEncoding0);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Long long0 = new Long(1558L);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) long0);
        JsonToken jsonToken1 = JsonToken.START_OBJECT;
        tokenBuffer_Segment2.append((-2059), jsonToken1);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Integer integer0 = new Integer((-2116));
        tokenBuffer_Segment1.appendRaw(12, 16, (Object) long0, (Object) integer0, (Object) tokenBuffer_Segment0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        tokenBuffer_Parser1.nextIntValue(100);
        boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken2 = tokenBuffer0.firstToken();
        tokenBuffer_Parser1.getParsingContext();
        tokenBuffer_Parser1.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test067145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
        jsonFactory0.createParser("");
        Integer integer0 = new Integer(16);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
        tokenBuffer_Parser0.getText();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test067146() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
        jsonFactory0.createParser("");
        Integer integer0 = new Integer(16);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
        tokenBuffer_Parser0.getText();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test067147() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
        jsonFactory0.createParser("");
        Integer integer0 = new Integer(16);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
        tokenBuffer_Parser0.getText();
        tokenBuffer0.writeStartArray();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test067148() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
        jsonFactory0.createParser("");
        Integer integer0 = new Integer(16);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
        tokenBuffer_Parser0.getText();
        tokenBuffer0.writeStartArray();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test068149() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        boolean boolean0 = true;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        byte[] byteArray0 = new byte[0];
        tokenBuffer0.writeRawUTF8String(byteArray0, (-2613), 1033);
    }

    @Test(timeout = 4000)
    public void test069150() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer0.writeUTF8String((byte[]) null, 2, (-654));
    }

    @Test(timeout = 4000)
    public void test070151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
        tokenBuffer1.serialize(tokenBuffer0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test071152() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        boolean boolean0 = true;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectReader objectReader0 = objectMapper2.reader(jsonNodeFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
        SerializedString serializedString0 = new SerializedString("JSON");
        tokenBuffer0.writeFieldName((SerializableString) serializedString0);
        int int0 = 6;
        URL uRL0 = MockURL.getFileExample();
        jsonFactory0.createParser(uRL0);
    }

    @Test(timeout = 4000)
    public void test072153() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
        tokenBuffer1.serialize(jsonGeneratorDelegate0);
        tokenBuffer0.writeNumber((float) 16);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test073154() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 41;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.setFeatureMask((byte) 41);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer_Parser0._closed = false;
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test073155() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 41;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.setFeatureMask((byte) 41);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer_Parser0._closed = false;
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken0);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test073156() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 41;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.setFeatureMask((byte) 41);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer_Parser0._closed = false;
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken0);
        tokenBuffer_Parser0.getCurrentName();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test074157() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        ObjectReader objectReader0 = objectMapper1.reader((JavaType) collectionType0);
        ObjectReader objectReader1 = objectReader0.withType((Type) simpleType0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer_Segment0.type(0);
        tokenBuffer0.version();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test074158() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        ObjectReader objectReader0 = objectMapper1.reader((JavaType) collectionType0);
        ObjectReader objectReader1 = objectReader0.withType((Type) simpleType0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer_Segment0.type(0);
        tokenBuffer0.version();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test076159() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("&;P4_YJ4VN>KI");
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[2];
        charArray0[0] = 'l';
        charArray0[1] = 'V';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 11, 11);
        TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
        tokenBuffer1.writeEndObject();
        tokenBuffer1.writeRawValue(charArray0, 16, 2285);
    }

    @Test(timeout = 4000)
    public void test077160() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        Byte byte0 = new Byte((byte) 10);
        tokenBuffer_Segment0.append(5, jsonToken0, (Object) byte0, (Object) null, (Object) jsonFactory0);
        jsonFactory0.setRootValueSeparator("o|Lbl");
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
        PipedReader pipedReader0 = new PipedReader(614);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 320, (-3336), true);
        ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
        tokenBuffer_Parser0._byteBuilder = byteArrayBuilder0;
        JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
        jsonParser0.getNumberType();
    }

    @Test(timeout = 4000)
    public void test078161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getEmbeddedObject();
        BigInteger bigInteger0 = BigInteger.TEN;
        tokenBuffer_Parser0.getBigIntegerValue();
    }

    @Test(timeout = 4000)
    public void test079162() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disableDefaultTyping();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
        Double double0 = new Double(5725);
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        tokenBuffer0.writeEndObject();
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test079163() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disableDefaultTyping();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
        Double double0 = new Double(5725);
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        tokenBuffer0.writeEndObject();
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test079164() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disableDefaultTyping();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
        Double double0 = new Double(5725);
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        tokenBuffer0.writeEndObject();
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test080165() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeString("");
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test080166() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeString("");
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test080167() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeString("");
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test080168() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeString("");
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test081169() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getTypeId();
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser1.close();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        tokenBuffer0.writeString((SerializableString) serializedString0);
        tokenBuffer_Parser1.overrideCurrentName("I!&C>^'sI5ly");
        tokenBuffer_Parser1.isClosed();
    }

    @Test(timeout = 4000)
    public void test082170() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        ShortNode shortNode0 = new ShortNode((short) (-1));
        Long long0 = new Long((-9223372036854775808L));
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2562, jsonToken0, (Object) shortNode0, (Object) long0, (Object) dataInputStream0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.overrideCurrentName("");
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        tokenBuffer0.toString();
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer0.writeNumber((-2805.6257F));
        tokenBuffer0._append(jsonToken0);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test082171() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        ShortNode shortNode0 = new ShortNode((short) (-1));
        Long long0 = new Long((-9223372036854775808L));
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2562, jsonToken0, (Object) shortNode0, (Object) long0, (Object) dataInputStream0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.overrideCurrentName("");
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        tokenBuffer0.toString();
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer0.writeNumber((-2805.6257F));
        tokenBuffer0._append(jsonToken0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test082172() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        ShortNode shortNode0 = new ShortNode((short) (-1));
        Long long0 = new Long((-9223372036854775808L));
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2562, jsonToken0, (Object) shortNode0, (Object) long0, (Object) dataInputStream0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.overrideCurrentName("");
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        tokenBuffer0.toString();
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer0.writeNumber((-2805.6257F));
        tokenBuffer0._append(jsonToken0);
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test082173() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        ShortNode shortNode0 = new ShortNode((short) (-1));
        Long long0 = new Long((-9223372036854775808L));
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2562, jsonToken0, (Object) shortNode0, (Object) long0, (Object) dataInputStream0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.overrideCurrentName("");
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        tokenBuffer0.toString();
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer0.writeNumber((-2805.6257F));
        tokenBuffer0._append(jsonToken0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test083174() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionType.construct(class0, simpleType0);
        ObjectReader objectReader0 = objectMapper1.reader();
        ObjectReader objectReader1 = objectReader0.withType((Type) simpleType0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test083175() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionType.construct(class0, simpleType0);
        ObjectReader objectReader0 = objectMapper1.reader();
        ObjectReader objectReader1 = objectReader0.withType((Type) simpleType0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextOffset();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test083176() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionType.construct(class0, simpleType0);
        ObjectReader objectReader0 = objectMapper1.reader();
        ObjectReader objectReader1 = objectReader0.withType((Type) simpleType0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextOffset();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test083177() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionType.construct(class0, simpleType0);
        ObjectReader objectReader0 = objectMapper1.reader();
        ObjectReader objectReader1 = objectReader0.withType((Type) simpleType0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextOffset();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test084178() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", true);
        jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.writeRaw("oGdL6I", 8, 45);
    }

    @Test(timeout = 4000)
    public void test085179() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0._appendRaw((-585), jsonFactory0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test085180() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0._appendRaw((-585), jsonFactory0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test085181() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
        JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0._appendRaw((-585), jsonFactory0);
        tokenBuffer0.writeEndObject();
        tokenBuffer0.toString();
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 69;
        byteArray0[1] = (byte) 34;
        byteArray0[2] = (byte) (-94);
        byteArray0[3] = (byte) (-83);
        tokenBuffer0.writeRawUTF8String(byteArray0, 41, (-916));
    }

    @Test(timeout = 4000)
    public void test086182() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        ContextAttributes.Impl.getEmpty();
        objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        BigInteger bigInteger0 = BigInteger.ZERO;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = tokenBuffer_Parser0.peekNextToken();
    }

    @Test(timeout = 4000)
    public void test086183() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        ContextAttributes.Impl.getEmpty();
        objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        BigInteger bigInteger0 = BigInteger.ZERO;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = tokenBuffer_Parser0.peekNextToken();
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test086184() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        ContextAttributes.Impl.getEmpty();
        objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        BigInteger bigInteger0 = BigInteger.ZERO;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = tokenBuffer_Parser0.peekNextToken();
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test086185() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        ContextAttributes.Impl.getEmpty();
        objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        BigInteger bigInteger0 = BigInteger.ZERO;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = tokenBuffer_Parser0.peekNextToken();
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test086186() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        ContextAttributes.Impl.getEmpty();
        objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        BigInteger bigInteger0 = BigInteger.ZERO;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = tokenBuffer_Parser0.peekNextToken();
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test087187() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser) tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer0._append(jsonToken0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
        objectMapper1.enable(serializationFeature0);
        TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, false);
        JsonToken jsonToken1 = tokenBuffer_Parser1.peekNextToken();
    }

    @Test(timeout = 4000)
    public void test087188() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser) tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer0._append(jsonToken0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
        objectMapper1.enable(serializationFeature0);
        TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, false);
        JsonToken jsonToken1 = tokenBuffer_Parser1.peekNextToken();
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test087189() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser) tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer0._append(jsonToken0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
        objectMapper1.enable(serializationFeature0);
        TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, false);
        JsonToken jsonToken1 = tokenBuffer_Parser1.peekNextToken();
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test087190() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser) tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer0._append(jsonToken0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
        objectMapper1.enable(serializationFeature0);
        TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, false);
        JsonToken jsonToken1 = tokenBuffer_Parser1.peekNextToken();
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser2.peekNextToken();
        tokenBuffer_Parser2.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test087191() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser) tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer0._append(jsonToken0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
        objectMapper1.enable(serializationFeature0);
        TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, false);
        JsonToken jsonToken1 = tokenBuffer_Parser1.peekNextToken();
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser2.peekNextToken();
        tokenBuffer_Parser2.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test088192() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(5725, jsonToken0, (Object) jsonToken0, (Object) tokenBuffer0, (Object) tokenBuffer0);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser0);
        JsonLocation jsonLocation0 = jsonParserDelegate0.getCurrentLocation();
        tokenBuffer_Parser0.setLocation(jsonLocation0);
        tokenBuffer_Parser0.close();
        tokenBuffer_Parser0.getIntValue();
    }

    @Test(timeout = 4000)
    public void test089193() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
        tokenBuffer_Parser0.hasTextCharacters();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test089194() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
        tokenBuffer_Parser0.hasTextCharacters();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test089195() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
        tokenBuffer_Parser0.hasTextCharacters();
        tokenBuffer0.writeString((SerializableString) serializedString0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test089196() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
        tokenBuffer_Parser0.hasTextCharacters();
        tokenBuffer0.writeString((SerializableString) serializedString0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test090197() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        Class<Double> class1 = Double.class;
        CollectionType.construct(class1, simpleType0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        objectReader0.withType((Type) simpleType0);
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 103;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeString((SerializableString) null);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test090198() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        Class<Double> class1 = Double.class;
        CollectionType.construct(class1, simpleType0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        objectReader0.withType((Type) simpleType0);
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 103;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeString((SerializableString) null);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test090199() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        Class<Double> class1 = Double.class;
        CollectionType.construct(class1, simpleType0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        objectReader0.withType((Type) simpleType0);
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 103;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer0.writeString((SerializableString) null);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test091200() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        BigInteger bigInteger0 = BigInteger.ZERO;
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        tokenBuffer0.writeNumber(bigInteger0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        tokenBuffer0._append(jsonToken0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        objectMapper0.enable(serializationFeature0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.firstToken();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator((OutputDecorator) null);
        jsonFactory1.copy();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        jsonFactory2.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
        tokenBuffer0.serialize((JsonGenerator) null);
    }

    @Test(timeout = 4000)
    public void test093201() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase");
        jsonFactory0.createGenerator((Writer) null);
        ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        ObjectMapper objectMapper3 = objectMapper2.configure(mapperFeature0, false);
        ObjectMapper objectMapper4 = objectMapper3.findAndRegisterModules();
        Class<JsonEncoding> class0 = JsonEncoding.class;
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        jsonFactory0.isEnabled(jsonParser_Feature0);
        objectMapper1.configure(serializationFeature0, true);
        objectMapper3.addMixInAnnotations(class0, class0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper4, false);
        tokenBuffer0.toString();
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
        tokenBuffer_Parser0.getDoubleValue();
    }

    @Test(timeout = 4000)
    public void test094202() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        boolean boolean0 = true;
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
        tokenBuffer2.flush();
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer2._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
        tokenBuffer_Parser0.getTextCharacters();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        tokenBuffer2.writeString((SerializableString) serializedString0);
        Class<Object> class0 = Object.class;
        ObjectReader objectReader0 = objectMapper0.reader(class0);
        objectReader0.readTree((JsonParser) tokenBuffer_Parser0);
    }

    @Test(timeout = 4000)
    public void test095203() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        JsonToken jsonToken1 = JsonToken.START_ARRAY;
        JsonToken jsonToken2 = JsonToken.START_OBJECT;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken2);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, true);
        tokenBuffer_Parser0.getEmbeddedObject();
        tokenBuffer_Segment0.append(16, jsonToken1, (Object) null, (Object) jsonToken0, (Object) null);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0._next;
        tokenBuffer_Segment2._tokenTypes = 7406L;
        SerializedString serializedString0 = new SerializedString("W``Y6ACjEjd5R|eeb");
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, true, true);
        tokenBuffer_Parser0.nextToken();
        tokenBuffer_Parser0.overrideCurrentName("@ElBWgek[+aqC7D");
        tokenBuffer_Parser0.getIntValue();
    }

    @Test(timeout = 4000)
    public void test098204() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper1, false);
        tokenBuffer2.append(tokenBuffer1);
        tokenBuffer2.flush();
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) tokenBuffer0, (Object) jsonGeneratorDelegate0, (Object) jsonEncoding0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, true, false);
        tokenBuffer_Parser0.getTextCharacters();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        tokenBuffer2.writeString((SerializableString) serializedString0);
        Class<SimpleModule> class0 = SimpleModule.class;
        ObjectReader objectReader0 = objectMapper1.reader(class0);
        objectReader0.readTree((JsonParser) tokenBuffer_Parser0);
    }

    @Test(timeout = 4000)
    public void test099205() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
        ContextAttributes.Impl.getEmpty();
        objectMapper0.enableDefaultTyping();
        TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        BigInteger bigInteger0 = BigInteger.ZERO;
        tokenBuffer0.writeNumber(bigInteger0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        jsonFactory1.setOutputDecorator(outputDecorator0);
        SerializedString serializedString0 = new SerializedString("JSON");
        tokenBuffer0.writeString((SerializableString) serializedString0);
        Class<SimpleModule> class0 = SimpleModule.class;
        ObjectReader objectReader0 = objectMapper0.reader(class0);
        objectReader0.readTree((JsonParser) tokenBuffer_Parser0);
    }

    @Test(timeout = 4000)
    public void test102206() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        objectMapper0.writerWithDefaultPrettyPrinter();
        FileSystemHandling.shouldAllThrowIOExceptions();
        tokenBuffer0.writeNumberField("9)U9l+IA(RTI", (double) 16);
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        tokenBuffer0.writeNumber((double) 16);
        tokenBuffer0.writeNumber(bigDecimal0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        tokenBuffer0.writeString((SerializableString) serializedString0);
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper1.reader(class0);
        objectReader0.readTree((JsonParser) tokenBuffer_Parser0);
    }
}
