/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 05:13:32 GMT 2023
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.File;
import java.io.IOException;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectIdReferenceProperty_ESTest extends ObjectIdReferenceProperty_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        File file0 = MockFile.createTempFile("JSON", "JSON");
        JsonParser jsonParser0 = jsonFactory0.createParser(file0);
        Class<String> class0 = String.class;
        JsonLocation jsonLocation0 = jsonParser0.getTokenLocation();
        Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, jsonParser0);
        ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
        UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "JSON", jsonLocation0, readableObjectId0);
        ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring((ObjectIdReferenceProperty) null, unresolvedForwardReference0, objectIdGenerator_IdKey0.type, "JSON");
        objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference(jsonParser0, 500);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        Class<CollectionType> class0 = CollectionType.class;
        Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
        AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 1, class0, propertyMetadata0);
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
        AnnotatedMember annotatedMember0 = objectIdReferenceProperty0.getMember();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-14), annotationMap0, propertyMetadata0);
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
        objectIdReferenceProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 55, javaType0, propertyMetadata0);
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
        SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-45), propertyMetadata0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        int int0 = objectIdReferenceProperty0.getCreatorIndex();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-13), (Object) null, propertyMetadata0);
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
        NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
        SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider(nioPathDeserializer0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 3975, (Object) null, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        objectIdReferenceProperty0.set((Object) null, javaType0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, propertyMetadata0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        objectIdReferenceProperty0.setAndReturn(creatorProperty0, javaType0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 55, propertyMetadata0, propertyMetadata0);
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = objectIdReferenceProperty0.getAnnotation(class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 55, javaType0, propertyMetadata0);
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
        SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer((JsonDeserializer<?>) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1316), annotationMap0, propertyMetadata0);
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        ObjectIdReader objectIdReader0 = ObjectIdReader.construct(javaType0, (PropertyName) null, (ObjectIdGenerator<?>) null, jsonDeserializer0, creatorProperty0, simpleObjectIdResolver0);
        JsonDeserializer<Object> jsonDeserializer1 = objectIdReader0._deserializer;
        ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer1, jsonDeserializer1);
        SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty1.withValueDeserializer(jsonDeserializer1);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1316), annotationMap0, propertyMetadata0);
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
        objectIdReferenceProperty0.fixAccess((DeserializationConfig) null);
        objectIdReferenceProperty0.isIgnorable();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        File file0 = MockFile.createTempFile("JSON", "JSON");
        JsonParser jsonParser0 = jsonFactory0.createParser(file0);
        Class<String> class0 = String.class;
        JsonLocation jsonLocation0 = jsonParser0.getTokenLocation();
        Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, jsonParser0);
        ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
        UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "JSON", jsonLocation0, readableObjectId0);
        ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring((ObjectIdReferenceProperty) null, unresolvedForwardReference0, objectIdGenerator_IdKey0.scope, jsonLocation0.MAX_CONTENT_SNIPPET);
        objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference(jsonLocation0.MAX_CONTENT_SNIPPET, readableObjectId0);
    }
}
