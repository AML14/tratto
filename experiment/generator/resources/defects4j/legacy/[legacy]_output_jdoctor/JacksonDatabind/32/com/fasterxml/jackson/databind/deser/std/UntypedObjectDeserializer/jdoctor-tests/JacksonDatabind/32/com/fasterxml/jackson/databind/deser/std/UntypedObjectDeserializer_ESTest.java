/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 18:03:14 GMT 2023
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class UntypedObjectDeserializer_ESTest extends UntypedObjectDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        JsonDeserializer<Object> jsonDeserializer0 = untypedObjectDeserializer0._clearIfStdImpl((JsonDeserializer<Object>) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<UntypedObjectDeserializer> class0 = UntypedObjectDeserializer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        JsonDeserializer<?> jsonDeserializer0 = untypedObjectDeserializer0.instance._withResolved(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        jsonDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ArrayNode arrayNode1 = arrayNode0.add("");
        JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode1);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.TRUE;
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.valueOf(false);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.putNull((String) null);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ArrayNode arrayNode1 = arrayNode0.add("_IxgX+4j%4c");
        JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode1);
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, jsonDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer1.mapArrayToArray(jsonParser0, deserializationContext0);
        jsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ArrayNode arrayNode1 = arrayNode0.add("_IxgX+4j%4c");
        JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode1);
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, jsonDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer1.mapArrayToArray(jsonParser0, deserializationContext0);
        jsonParser0.getCurrentToken();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.put("eQ`3N;?N", (Integer) null);
        ObjectNode objectNode1 = objectNode0.put((String) null, (-215.4F));
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        untypedObjectDeserializer0.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ArrayNode arrayNode0 = objectNode0.withArray("");
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
        untypedObjectDeserializer0.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer0.mapObject(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        ObjectNode objectNode1 = objectNode0.put("", "");
        ObjectNode objectNode2 = objectNode1.put("nr\"'R5H^Z;(f!#X", 0.0F);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode2);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        RawValue rawValue0 = new RawValue(objectNode0);
        ObjectNode objectNode1 = objectNode0.putRawValue("", rawValue0);
        ObjectNode objectNode2 = objectNode1.put("LDf", false);
        Integer integer0 = new Integer((-1));
        objectNode2.put("AnnotationIntrospector returned deserializer definition of type ", integer0);
        objectNode0.put("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla", 0.0F);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, jsonDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer1.mapArrayToArray(jsonParser0, deserializationContext0);
        UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
        untypedObjectDeserializer_Vanilla0.deserialize(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("l[", (float) (-178));
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
        objectNode1.put("l[", false);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        untypedObjectDeserializer_Vanilla0.mapArrayToArray(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
        untypedObjectDeserializer_Vanilla0.deserializeWithType(jsonParser0, deserializationContext0, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Integer integer0 = new Integer(976);
        ObjectNode objectNode1 = objectNode0.put((String) null, (float) (-2831));
        objectNode1.put("NON_FINAL", integer0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Integer integer0 = new Integer(976);
        ObjectNode objectNode1 = objectNode0.put((String) null, (float) (-2831));
        ObjectNode objectNode2 = objectNode1.put("NON_FINAL", integer0);
        objectNode2.putNull("r#3KAsc82");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, deserializationContext0);
    }
}
