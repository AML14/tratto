/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 03:43:43 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.OutputStream;
import java.text.DateFormat;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SerializationConfig_ESTest extends SerializationConfig_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FilterProvider filterProvider0 = serializationConfig0.getFilterProvider();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((ClassIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        SerializationConfig serializationConfig1 = serializationConfig0.withSerializationInclusion(jsonInclude_Include0);
        JsonInclude.Include jsonInclude_Include1 = serializationConfig1.getSerializationInclusion();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        SerializationConfig serializationConfig1 = serializationConfig0.withSerializationInclusion(jsonInclude_Include0);
        JsonInclude.Include jsonInclude_Include1 = serializationConfig1.getSerializationInclusion();
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<String> class0 = String.class;
        JsonInclude.Value jsonInclude_Value0 = serializationConfig0.getDefaultPropertyInclusion(class0);
        jsonInclude_Value0.getValueInclusion();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, rootNameLookup0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, mockFileOutputStream0);
        uTF8JsonGenerator0.writeObject(iOContext0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
        SerializationConfig serializationConfig1 = serializationConfig0.with(propertyNamingStrategy0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
        SerializationConfig serializationConfig1 = serializationConfig0.with(propertyNamingStrategy0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<SerializationFeature> class0 = SerializationFeature.class;
        JsonFormat.Value jsonFormat_Value0 = serializationConfig0.getDefaultPropertyFormat(class0);
        jsonFormat_Value0.hasPattern();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((Base64Variant) null);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        serializationConfig0.with((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<Locale> class0 = Locale.class;
        serializationConfig0.introspectDirectClassAnnotations(class0);
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Locale locale0 = Locale.GERMANY;
        SerializationConfig serializationConfig1 = serializationConfig0.with(locale0);
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Locale locale0 = Locale.GERMANY;
        SerializationConfig serializationConfig1 = serializationConfig0.with(locale0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        String string0 = serializationConfig0.toString();
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        int int0 = serializationConfig0.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (SimpleMixInResolver) null, rootNameLookup0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (SimpleMixInResolver) null);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((HandlerInstantiator) null);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withAttributes((Map<?, ?>) null);
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withAttributes((Map<?, ?>) null);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        VisibilityChecker<?> visibilityChecker0 = serializationConfig0.getDefaultVisibilityChecker();
        SerializationConfig serializationConfig1 = serializationConfig0.with(visibilityChecker0);
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        SerializationConfig serializationConfig1 = serializationConfig0.withAppendedAnnotationIntrospector(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        SerializationConfig serializationConfig1 = serializationConfig0.withAppendedAnnotationIntrospector(annotationIntrospector0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withInsertedAnnotationIntrospector((AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        SerializationConfig serializationConfig1 = serializationConfig0.with(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        SerializationConfig serializationConfig1 = serializationConfig0.with(annotationIntrospector0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        SerializationConfig serializationConfig1 = serializationConfig0.with((TypeResolverBuilder<?>) stdTypeResolverBuilder0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        SerializationConfig serializationConfig1 = serializationConfig0.with((TypeResolverBuilder<?>) stdTypeResolverBuilder0);
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SerializationConfig serializationConfig1 = serializationConfig0.with(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
        SerializationConfig serializationConfig1 = serializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2433() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
        SerializationConfig serializationConfig1 = serializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    }

    @Test(timeout = 4000)
    public void test2534() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
        serializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test2535() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2536() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test2537() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2739() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
        mapperFeatureArray0[0] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
        mapperFeatureArray0[0] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2741() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
        mapperFeatureArray0[0] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
        serializationConfig1.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test2742() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
        mapperFeatureArray0[0] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test2843() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2944() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
    }

    @Test(timeout = 4000)
    public void test3045() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, true);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3046() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, true);
        serializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test3047() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, true);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test3148() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        SerializationConfig serializationConfig1 = serializationConfig0.with(dateFormat0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3149() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        SerializationConfig serializationConfig1 = serializationConfig0.with(dateFormat0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test3250() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((DateFormat) null);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3251() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((DateFormat) null);
    }

    @Test(timeout = 4000)
    public void test3352() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
        serializationConfig2.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3353() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3454() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName((PropertyName) null);
    }

    @Test(timeout = 4000)
    public void test3555() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        SerializationConfig serializationConfig2 = serializationConfig1.withRootName((PropertyName) null);
    }

    @Test(timeout = 4000)
    public void test3556() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        SerializationConfig serializationConfig2 = serializationConfig1.withRootName((PropertyName) null);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3657() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();
        SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) stdSubtypeResolver1);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3658() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();
        SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) stdSubtypeResolver1);
    }

    @Test(timeout = 4000)
    public void test3759() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
    }

    @Test(timeout = 4000)
    public void test3860() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<MinimalPrettyPrinter> class0 = MinimalPrettyPrinter.class;
        SerializationConfig serializationConfig1 = serializationConfig0.withView(class0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3861() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<MinimalPrettyPrinter> class0 = MinimalPrettyPrinter.class;
        SerializationConfig serializationConfig1 = serializationConfig0.withView(class0);
    }

    @Test(timeout = 4000)
    public void test3962() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withView((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test4063() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withoutAttribute(stdSubtypeResolver0);
    }

    @Test(timeout = 4000)
    public void test4164() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test4165() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4266() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4367() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
        serializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test4368() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4369() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test4470() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4571() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test4672() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test4673() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4674() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
        serializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test4775() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4876() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4977() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
        serializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test4978() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4979() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5080() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5181() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        serializationConfig1.initialize((JsonGenerator) null);
    }

    @Test(timeout = 4000)
    public void test5282() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
        serializationConfig2.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test5283() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
        serializationConfig2.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5284() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
        serializationConfig2.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5285() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test5386() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5487() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5488() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5489() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5590() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        serializationConfig2.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test5591() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test5592() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        serializationConfig2.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test5593() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        serializationConfig2.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5694() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test5695() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        serializationConfig2.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5696() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test5697() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        serializationConfig2.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5798() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5799() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test58100() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test58101() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
        serializationConfig2.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test58102() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
        serializationConfig2.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test59103() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test60104() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1248), (-1248)).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test60105() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1248), (-1248)).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test61106() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test62107() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 2722236).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        serializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test62108() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 2722236).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test62109() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 2722236).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test62110() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 2722236).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test63111() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(4, 4, 72, 1068991, 4).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test63112() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(4, 4, 72, 1068991, 4).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test63113() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(4, 4, 72, 1068991, 4).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
        serializationConfig2.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test63114() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(4, 4, 72, 1068991, 4).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
        serializationConfig2.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test63115() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(4, 4, 72, 1068991, 4).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
        serializationConfig2.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test64116() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[7];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        formatFeatureArray0[5] = formatFeature0;
        formatFeatureArray0[6] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test65117() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 1, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
        serializationConfig2.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test65118() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 1, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test65119() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 1, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
        serializationConfig2.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test65120() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 1, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
        serializationConfig2.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test65121() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 1, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test66122() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test67123() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(4, 4, 72, 1068991, 4).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test67124() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(4, 4, 72, 1068991, 4).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
        serializationConfig1.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test67125() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(4, 4, 72, 1068991, 4).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test68126() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test69127() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        SerializationConfig serializationConfig1 = serializationConfig0.withFilters(simpleFilterProvider0);
    }

    @Test(timeout = 4000)
    public void test69128() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        SerializationConfig serializationConfig1 = serializationConfig0.withFilters(simpleFilterProvider0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test70129() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withFilters((FilterProvider) null);
    }

    @Test(timeout = 4000)
    public void test71130() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonInclude.Value jsonInclude_Value0 = SerializationConfig.DEFAULT_INCLUSION;
        SerializationConfig serializationConfig1 = serializationConfig0.withPropertyInclusion(jsonInclude_Value0);
    }

    @Test(timeout = 4000)
    public void test72131() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withDefaultPrettyPrinter((PrettyPrinter) null);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test72132() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withDefaultPrettyPrinter((PrettyPrinter) null);
    }

    @Test(timeout = 4000)
    public void test73133() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) SerializationConfig.DEFAULT_PRETTY_PRINTER;
        SerializationConfig serializationConfig1 = serializationConfig0.withDefaultPrettyPrinter(defaultPrettyPrinter0);
    }

    @Test(timeout = 4000)
    public void test74134() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        JsonFactory jsonFactory0 = new JsonFactory();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stdSubtypeResolver0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 636, objectMapper0, (OutputStream) null);
        SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (PrettyPrinter) null);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        serializationFeatureArray0[2] = serializationFeature0;
        serializationFeatureArray0[3] = serializationFeature0;
        serializationFeatureArray0[4] = serializationFeature0;
        serializationFeatureArray0[5] = serializationFeature0;
        serializationFeatureArray0[6] = serializationFeature0;
        serializationFeatureArray0[7] = serializationFeature0;
        serializationFeatureArray0[8] = serializationFeature0;
        SerializationConfig serializationConfig2 = serializationConfig1.with(serializationFeature0, serializationFeatureArray0);
        serializationConfig2.initialize(uTF8JsonGenerator0);
        serializationConfig2.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test74135() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        JsonFactory jsonFactory0 = new JsonFactory();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stdSubtypeResolver0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 636, objectMapper0, (OutputStream) null);
        SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (PrettyPrinter) null);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        serializationFeatureArray0[2] = serializationFeature0;
        serializationFeatureArray0[3] = serializationFeature0;
        serializationFeatureArray0[4] = serializationFeature0;
        serializationFeatureArray0[5] = serializationFeature0;
        serializationFeatureArray0[6] = serializationFeature0;
        serializationFeatureArray0[7] = serializationFeature0;
        serializationFeatureArray0[8] = serializationFeature0;
        SerializationConfig serializationConfig2 = serializationConfig1.with(serializationFeature0, serializationFeatureArray0);
        serializationConfig2.initialize(uTF8JsonGenerator0);
        uTF8JsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test75136() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        JsonFactory jsonFactory0 = new JsonFactory();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
        serializationConfig1.initialize(jsonGenerator0);
        serializationConfig1.initialize(jsonGenerator0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test75137() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        JsonFactory jsonFactory0 = new JsonFactory();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
        serializationConfig1.initialize(jsonGenerator0);
        serializationConfig1.initialize(jsonGenerator0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test75138() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        JsonFactory jsonFactory0 = new JsonFactory();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
        serializationConfig1.initialize(jsonGenerator0);
        serializationConfig1.initialize(jsonGenerator0);
        jsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test76139() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        JsonFactory jsonFactory0 = new JsonFactory();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
        SerializationFeature serializationFeature1 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature1, serializationFeatureArray0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
        serializationConfig1.initialize(jsonGenerator0);
        jsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test77140() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, mockFileOutputStream0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(2, 57343).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
        serializationConfig1.initialize(uTF8JsonGenerator0);
    }

    @Test(timeout = 4000)
    public void test78141() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonInclude.Include jsonInclude_Include0 = serializationConfig0.getSerializationInclusion();
    }

    @Test(timeout = 4000)
    public void test79142() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        boolean boolean0 = serializationConfig0.useRootWrapping();
    }

    @Test(timeout = 4000)
    public void test80143() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = new PropertyName("Could not find DOM LS");
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test80144() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = new PropertyName("Could not find DOM LS");
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
    }

    @Test(timeout = 4000)
    public void test81145() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
    }

    @Test(timeout = 4000)
    public void test81146() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test81147() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
    }

    @Test(timeout = 4000)
    public void test82148() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        JsonFactory jsonFactory0 = new JsonFactory();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        boolean boolean0 = serializationConfig0.isEnabled(jsonGenerator_Feature0, jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test83149() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        JsonFactory jsonFactory0 = new JsonFactory();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test83150() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        JsonFactory jsonFactory0 = new JsonFactory();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test83151() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        JsonFactory jsonFactory0 = new JsonFactory();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        serializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test83152() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        JsonFactory jsonFactory0 = new JsonFactory();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test84153() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, (JsonFactory) null);
        serializationConfig1.getSerializationFeatures();
    }

    @Test(timeout = 4000)
    public void test84154() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, (JsonFactory) null);
        serializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test84155() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, (JsonFactory) null);
    }

    @Test(timeout = 4000)
    public void test85156() throws Throwable {
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        boolean boolean0 = serializationConfig0.hasSerializationFeatures((-29));
    }

    @Test(timeout = 4000)
    public void test86157() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        boolean boolean0 = serializationConfig0.hasSerializationFeatures(16);
    }
}
