/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 16:25:00 GMT 2023
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StringArrayDeserializer_ESTest extends StringArrayDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
        stringArrayDeserializer0.deserializeWithType((JsonParser) null, (DeserializationContext) null, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        arrayNode0.add("); no single-long-arg constructor/factory method");
        JsonParser jsonParser0 = arrayNode0.traverse();
        StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
        StringArrayDeserializer stringArrayDeserializer2 = new StringArrayDeserializer(stringArrayDeserializer1);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        stringArrayDeserializer2._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        ArrayNode arrayNode1 = arrayNode0.insert((-292), true);
        ArrayNode arrayNode2 = arrayNode1.insert((-292), true);
        ArrayNode arrayNode3 = arrayNode0.add("TFV3-$L:m :ee8qsv");
        Float float0 = new Float((double) (-292));
        arrayNode1.insert((-292), (double) (-292));
        arrayNode2.insert(3858, float0);
        ArrayNode arrayNode4 = arrayNode0.add(float0);
        arrayNode0.insert((-292), false);
        ArrayNode arrayNode5 = arrayNode1.add(0.0);
        Long long0 = new Long((-1184L));
        arrayNode5.addNull();
        arrayNode4.insert(3858, long0);
        arrayNode5.add("TFV3-$L:m :ee8qsv");
        arrayNode3.add(3836);
        arrayNode1.add("TFV3-$L:m :ee8qsv");
        JsonParser jsonParser0 = arrayNode3.traverse();
        StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        stringArrayDeserializer1._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        ArrayNode arrayNode1 = arrayNode0.add((String) null);
        JsonParser jsonParser0 = arrayNode1.traverse();
        StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
        StringArrayDeserializer stringArrayDeserializer2 = new StringArrayDeserializer(stringArrayDeserializer1);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        stringArrayDeserializer2._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JsonParser jsonParser0 = arrayNode0.traverse();
        StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
        stringArrayDeserializer0.deserialize(jsonParser0, deserializationContext0);
    }
}
