/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 04:00:19 GMT 2023
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdTypeResolverBuilder_ESTest extends StdTypeResolverBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        stdTypeResolverBuilder0.getDefaultImpl();
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        boolean boolean0 = stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        stdTypeResolverBuilder0.typeIdVisibility(true);
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        stdTypeResolverBuilder0.getTypeProperty();
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0.init((JsonTypeInfo.Id) null, classNameIdResolver0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, hashSet0);
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder1.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder1.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder1.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder1.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder1.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder1.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder1.buildTypeSerializer((SerializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder1.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, linkedHashSet0);
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
        stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, classNameIdResolver0);
        Class<NoClass> class0 = NoClass.class;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.defaultImpl(class0);
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, (Collection<NamedType>) null);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        Class<Void> class0 = Void.class;
        stdTypeResolverBuilder0.defaultImpl(class0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.defaultImpl(class0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder1.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder1.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder1.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) classNameIdResolver0;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        Stack<NamedType> stack0 = new Stack<NamedType>();
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, stack0);
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        stdTypeResolverBuilder0.inclusion((JsonTypeInfo.As) null);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        stdTypeResolverBuilder0.typeProperty((String) null);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.typeProperty("");
        stdTypeResolverBuilder1.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.typeProperty(" _.]syFz7%MT`DON");
        stdTypeResolverBuilder1.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
        stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;
        stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
        stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, (JavaType) null, hashSet0, false, false);
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
        stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, (JavaType) null, linkedHashSet0);
    }
}
