/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 23:05:46 GMT 2023
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import java.lang.reflect.Array;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdSubtypeResolver_ESTest extends StdSubtypeResolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        NamedType[] namedTypeArray0 = new NamedType[0];
        stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
        stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        NamedType[] namedTypeArray0 = new NamedType[1];
        stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        Class<JsonEncoding>[] classArray0 = (Class<JsonEncoding>[]) Array.newInstance(Class.class, 0);
        stdSubtypeResolver0.registerSubtypes(classArray0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        Class<JsonEncoding>[] classArray0 = (Class<JsonEncoding>[]) Array.newInstance(Class.class, 4);
        stdSubtypeResolver0.registerSubtypes(classArray0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        Class<String> class0 = String.class;
        NamedType namedType0 = new NamedType(class0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
        stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
        stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
        hashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        Class<String> class0 = String.class;
        NamedType namedType0 = new NamedType(class0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
        stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
        stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
        hashMap0.size();
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        Class<String> class0 = String.class;
        NamedType namedType0 = new NamedType(class0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
        stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
        NamedType namedType1 = new NamedType(class0, "AUTO_DETECT_SETTERS");
        stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType1, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
        hashMap0.size();
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
        Class<String> class0 = String.class;
        NamedType namedType0 = new NamedType(class0, "ws6QK)");
        hashMap0.put(namedType0, namedType0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
        namedType0.getName();
    }
}
