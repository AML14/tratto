/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 17:03:32 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URL;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
        boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
        DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
        deserializationConfig0.getRootName();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        NumericNode numericNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
        objectReader0.writeTree((JsonGenerator) null, numericNode0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        objectReader0.withoutFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        ObjectReader objectReader0 = objectMapper1.reader();
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader objectReader1 = objectReader0.withView(class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DoubleNode> class0 = DoubleNode.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        objectReader0._reportUndetectableSource(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile("JSON");
        objectReader0._inputStream(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        FloatNode floatNode0 = new FloatNode((-1.0F));
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) floatNode0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
        ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
        Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) bufferedInputStream0);
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        ObjectReader objectReader1 = objectReader0.withRootName("E68g,JVlDRY$bK\"z");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        Class<Object> class1 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, collectionType0, collectionType0);
        MapType mapType0 = MapType.construct(class0, collectionType0, mapLikeType0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) mapType0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, collectionType0, true);
        StringReader stringReader0 = new StringReader(";eI]{*%n");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-790), stringReader0, objectReader0, charsToNameCanonicalizer0);
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, (ResolvedType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readTree((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        JsonParser jsonParser0 = jsonFactory0.createParser("<bQ^aLo)Hh)");
        JavaType javaType0 = TypeFactory.unknownType();
        Iterator<Object> iterator0 = objectReader0.readValues(jsonParser0, (ResolvedType) javaType0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        Locale locale0 = Locale.FRANCE;
        ObjectReader objectReader1 = objectReader0.with(locale0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
        objectReader0.withoutFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[1];
        ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        char[] charArray0 = new char[8];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 1849, (-1398));
        Class<ShortNode> class0 = ShortNode.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        Iterator<ShortNode> iterator0 = objectReader0.readValues(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test2423() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNode jsonNode0 = objectReader0.createObjectNode();
        jsonNode0.isFloat();
    }

    @Test(timeout = 4000)
    public void test2524() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        ObjectReader objectReader1 = objectReader0.forType(class0);
    }

    @Test(timeout = 4000)
    public void test2625() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.with((DeserializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test2726() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BigIntegerNode> class0 = BigIntegerNode.class;
        Class<JsonToken> class1 = JsonToken.class;
        SimpleType simpleType0 = SimpleType.construct(class1);
        MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) mapType0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test2827() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) null);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
    }

    @Test(timeout = 4000)
    public void test2928() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test3029() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ObjectWriter objectWriter0 = objectMapper0.writer();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectWriter0, true);
        PipedReader pipedReader0 = new PipedReader();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0, (char[]) null, (-1), 2, true);
        TypeReference<CollectionLikeType> typeReference0 = (TypeReference<CollectionLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test3130() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        ObjectNode objectNode0 = arrayNode0.addObject();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) objectNode0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        objectReader0.forType((JavaType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test3231() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, (DefaultDeserializationContext) null);
        ObjectReader objectReader0 = objectMapper0.reader();
        TypeReference<NullNode> typeReference0 = (TypeReference<NullNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectReader0.readValues((JsonParser) null, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test3332() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile("JSON");
        URL uRL0 = mockFile0.toURL();
        objectReader0._inputStream(uRL0);
    }

    @Test(timeout = 4000)
    public void test3433() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<Integer> class0 = Integer.class;
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        char[] charArray0 = new char[8];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 0);
        objectReader0.readValue(jsonParser0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test3534() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.withFeatures((DeserializationFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test3635() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonFactory jsonFactory0 = objectReader0.getJsonFactory();
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test3736() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test3837() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonNode jsonNode0 = objectReader0.createArrayNode();
        jsonNode0.booleanValue();
    }

    @Test(timeout = 4000)
    public void test3938() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        Class<BigIntegerNode> class1 = BigIntegerNode.class;
        objectReader0.treeToValue((TreeNode) null, class1);
    }

    @Test(timeout = 4000)
    public void test4039() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
        ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test4140() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        FloatNode floatNode0 = FloatNode.valueOf(1.0F);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) floatNode0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ArrayNode arrayNode0 = objectNode0.putArray("");
        BooleanNode booleanNode0 = arrayNode0.booleanNode(false);
        ObjectReader objectReader1 = objectReader0.withAttribute(booleanNode0, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test4241() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader objectReader1 = objectReader0.withType((Type) class0);
    }

    @Test(timeout = 4000)
    public void test4342() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        URL uRL0 = MockURL.getFtpExample();
        objectReader0.readValues(uRL0);
    }

    @Test(timeout = 4000)
    public void test4443() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        BooleanNode booleanNode0 = BooleanNode.TRUE;
        ObjectReader objectReader1 = objectReader0.withoutAttribute(booleanNode0);
    }

    @Test(timeout = 4000)
    public void test4544() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.with((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test4645() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4746() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        Version version0 = objectReader0.version();
        version0.isSnapshot();
    }

    @Test(timeout = 4000)
    public void test4847() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) jsonFactory0);
        ContextAttributes contextAttributes0 = objectReader0.getAttributes();
    }

    @Test(timeout = 4000)
    public void test4948() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
        TypeReference<BigIntegerNode> typeReference0 = (TypeReference<BigIntegerNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectReader0.forType(typeReference0);
    }

    @Test(timeout = 4000)
    public void test5049() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        objectReader0.writeValue((JsonGenerator) null, injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test5150() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
        ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test5251() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test5352() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test5453() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<Integer> class0 = Integer.class;
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test5554() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, (DefaultDeserializationContext) null);
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withValueToUpdate((Object) null);
    }

    @Test(timeout = 4000)
    public void test5655() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) objectMapper0);
        objectReader0.withValueToUpdate((Object) null);
    }

    @Test(timeout = 4000)
    public void test5756() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        objectReader0.readValue((InputStream) pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test5857() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        StringReader stringReader0 = new StringReader("");
        objectReader0.readValue((Reader) stringReader0);
    }

    @Test(timeout = 4000)
    public void test5958() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        objectReader0.readValue("$l5|f3B88q4L~8$}e9");
    }

    @Test(timeout = 4000)
    public void test6059() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        objectReader0.readValue((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test6160() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        byte[] byteArray0 = new byte[1];
        objectReader0.readValue(byteArray0, (-1), (int) (-62));
    }

    @Test(timeout = 4000)
    public void test6261() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        File file0 = MockFile.createTempFile("JSON", "JSON");
        objectReader0.readValue(file0);
    }

    @Test(timeout = 4000)
    public void test6362() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        URL uRL0 = MockURL.getFileExample();
        objectReader0.readValue(uRL0);
    }

    @Test(timeout = 4000)
    public void test6463() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        PipedReader pipedReader0 = new PipedReader();
        objectReader0.readTree((Reader) pipedReader0);
    }

    @Test(timeout = 4000)
    public void test6564() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readTree("JSON");
    }

    @Test(timeout = 4000)
    public void test6665() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Object object0 = new Object();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(object0);
        MappingIterator<Integer> mappingIterator0 = objectReader0.readValues("");
    }

    @Test(timeout = 4000)
    public void test6766() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile(":,b~SK3");
        objectReader0.readValues((File) mockFile0);
    }

    @Test(timeout = 4000)
    public void test6867() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        ObjectReader objectReader1 = objectReader0.withValueToUpdate(contextAttributes0);
        ShortNode shortNode0 = new ShortNode((short) (-1));
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
        Class<POJONode> class0 = POJONode.class;
        objectReader1.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test6968() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<Module> class0 = Module.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ValueNode valueNode0 = jsonNodeFactory0.numberNode((Float) null);
        objectReader0.readValue((JsonNode) valueNode0);
    }

    @Test(timeout = 4000)
    public void test7069() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ArrayNode arrayNode0 = objectNode0.withArray("JSON");
        JsonParser jsonParser0 = arrayNode0.traverse();
        ObjectNode objectNode1 = (ObjectNode) objectReader0._bindAndClose(jsonParser0, objectNode0);
        objectNode1.isShort();
    }

    @Test(timeout = 4000)
    public void test7170() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ArrayNode arrayNode0 = objectNode0.putArray("$kHxyZLU4`N&m");
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        objectReader0._bindAsTree(jsonParser0);
        jsonParser0.getLastClearedToken();
    }

    @Test(timeout = 4000)
    public void test7271() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        ObjectReader objectReader1 = objectReader0.withValueToUpdate(jsonFactory0);
        objectReader1.readValues((Reader) null);
        MappingIterator<BinaryNode> mappingIterator0 = objectReader1.readValues((Reader) null);
    }

    @Test(timeout = 4000)
    public void test7372() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[7];
        objectReaderArray0[0] = objectReader0;
        objectReaderArray0[1] = objectReader0;
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        dataFormatReaders0.withType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test7473() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[6];
        objectReaderArray0[0] = objectReader0;
        objectReaderArray0[1] = objectReader0;
        objectReaderArray0[2] = objectReader0;
        objectReaderArray0[3] = objectReader0;
        objectReaderArray0[4] = objectReader0;
        objectReaderArray0[5] = objectReader0;
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        byte[] byteArray0 = new byte[6];
        byteArray0[0] = (byte) 51;
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
    }

    @Test(timeout = 4000)
    public void test7574() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        ArrayDeque<ObjectReader> arrayDeque0 = new ArrayDeque<ObjectReader>((-3475));
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayDeque0);
        PipedInputStream pipedInputStream0 = new PipedInputStream(4015);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) pipedInputStream0);
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
    }
}
