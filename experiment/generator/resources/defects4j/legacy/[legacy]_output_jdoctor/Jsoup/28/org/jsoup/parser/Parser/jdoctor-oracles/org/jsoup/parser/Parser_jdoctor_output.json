[
  {
    "signature": "org.jsoup.parser.Parser(org.jsoup.parser.TreeBuilder treeBuilder)",
    "name": "org.jsoup.parser.Parser",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.jsoup.parser.TreeBuilder",
          "name": "TreeBuilder",
          "isArray": false
        },
        "name": "treeBuilder"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.jsoup.parser.TreeBuilder",
            "name": "TreeBuilder",
            "isArray": false
          },
          "name": "treeBuilder"
        },
        "comment": "TreeBuilder to use to parse input into Documents.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "parseInput(java.lang.String html, java.lang.String baseUri)",
    "name": "parseInput",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.nodes.Document",
      "name": "org.jsoup.nodes.Document",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "html"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUri"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getTreeBuilder()",
    "name": "getTreeBuilder",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.parser.TreeBuilder",
      "name": "org.jsoup.parser.TreeBuilder",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "current TreeBuilder.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setTreeBuilder(org.jsoup.parser.TreeBuilder treeBuilder)",
    "name": "setTreeBuilder",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "org.jsoup.parser.Parser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.jsoup.parser.TreeBuilder",
          "name": "TreeBuilder",
          "isArray": false
        },
        "name": "treeBuilder"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.jsoup.parser.TreeBuilder",
            "name": "TreeBuilder",
            "isArray": false
          },
          "name": "treeBuilder"
        },
        "comment": "treeBuilder is current. current TreeBuilder.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "this, for chaining.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isTrackErrors()",
    "name": "isTrackErrors",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "current track error state.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setTrackErrors(int maxErrors)",
    "name": "setTrackErrors",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "org.jsoup.parser.Parser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxErrors"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxErrors"
        },
        "comment": "maxErrors is maximum. maximum number of errors to track. Set to 0 to disable.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "this, for chaining.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getErrors()",
    "name": "getErrors",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<org.jsoup.parser.ParseError>",
      "name": "java.util.List<org.jsoup.parser.ParseError>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "list of parse errors, up to the size of the maximum errors tracked.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "parse(java.lang.String html, java.lang.String baseUri)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.nodes.Document",
      "name": "org.jsoup.nodes.Document",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "html"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUri"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "html"
        },
        "comment": "HTML to parse.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "baseUri"
        },
        "comment": "base URI of document (i.e. original fetch location). baseUri is for resolving relative URLs.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "parsed Document.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "parseFragment(java.lang.String fragmentHtml, org.jsoup.nodes.Element context, java.lang.String baseUri)",
    "name": "parseFragment",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<org.jsoup.nodes.Node>",
      "name": "java.util.List<org.jsoup.nodes.Node>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "fragmentHtml"
      },
      {
        "type": {
          "qualifiedName": "org.jsoup.nodes.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "context"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUri"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "fragmentHtml"
        },
        "comment": "the fragment of HTML to parse.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.jsoup.nodes.Element",
            "name": "Element",
            "isArray": false
          },
          "name": "context"
        },
        "comment": "(optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This provides stack context (for implicit element creation).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "baseUri"
        },
        "comment": "base URI of document (i.e. original fetch location). baseUri is for resolving relative URLs.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "parseBodyFragment(java.lang.String bodyHtml, java.lang.String baseUri)",
    "name": "parseBodyFragment",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.nodes.Document",
      "name": "org.jsoup.nodes.Document",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "bodyHtml"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUri"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "bodyHtml"
        },
        "comment": "fragment of HTML.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "baseUri"
        },
        "comment": "base URI of document (i.e. original fetch location). baseUri is for resolving relative URLs.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Document, with empty head, and HTML parsed into body.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "parseBodyFragmentRelaxed(java.lang.String bodyHtml, java.lang.String baseUri)",
    "name": "parseBodyFragmentRelaxed",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.nodes.Document",
      "name": "org.jsoup.nodes.Document",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "bodyHtml"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUri"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "bodyHtml"
        },
        "comment": "HTML to parse.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "baseUri"
        },
        "comment": "baseUri base URI of document (i.e. original fetch location). baseUri is for resolving relative URLs.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "parsed Document.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "htmlParser()",
    "name": "htmlParser",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "org.jsoup.parser.Parser",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a new HTML parser.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "xmlParser()",
    "name": "xmlParser",
    "containingClass": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "Parser",
      "isArray": false
    },
    "targetClass": "org.jsoup.parser.Parser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.parser.Parser",
      "name": "org.jsoup.parser.Parser",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a new simple XML parser.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]