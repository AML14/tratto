/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:55:01 GMT 2023
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MockFile mockFile0 = new MockFile("A:=");
        File file0 = MockFile.createTempFile("--------------------------------", "--------------------------------", (File) mockFile0);
        ByteBuffer byteBuffer0 = DataUtil.readFileToByteBuffer(file0);
        byteBuffer0.hasRemaining();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
        Parser parser0 = Parser.xmlParser();
        Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "v*y(", parser0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
        Parser parser0 = Parser.xmlParser();
        Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "v*y(", parser0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}]Jv;K9z");
        FileSystemHandling.appendStringToFile(evoSuiteFile0, "u<AGuDMJ");
        MockFile mockFile0 = new MockFile((String) null, "}]Jv;K9z");
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
        DataUtil.readToByteBuffer(mockFileInputStream0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.load((InputStream) mockFileInputStream0, (String) null, "keygen", parser0);
        mockFileInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null, 65279);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(67);
        DataUtil.readToByteBuffer(pipedInputStream0, 0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(64);
        DataUtil.readToByteBuffer(pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        DataUtil.readFileToByteBuffer((File) null);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        MockFile mockFile0 = new MockFile((File) null, "");
        DataUtil.readFileToByteBuffer(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        MockFile mockFile0 = new MockFile("--------------------------------", "--------------------------------");
        DataUtil.readFileToByteBuffer(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        DataUtil.parseByteData((ByteBuffer) null, "U\"(.s>>e#=*>", "U\"(.s>>e#=*>", parser0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        DataUtil.parseByteData((ByteBuffer) null, (String) null, ";", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        DataUtil.parseByteData((ByteBuffer) null, "", "", parser0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 66, (byte) 66);
        Parser parser0 = Parser.xmlParser();
        DataUtil.load((InputStream) byteArrayInputStream0, "ps", "", parser0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.load((InputStream) sequenceInputStream0, "HA$xqe}&@", "+93d?}", parser0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.load((InputStream) mockFileInputStream0, "", "?6k", parser0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1327, (byte) 0);
        DataUtil.load((InputStream) byteArrayInputStream0, "O|uk", "track");
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        DataUtil.load((InputStream) null, ",ewW_Cekp\u0001;<T", ",ewW_Cekp\u0001;<T");
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataUtil.load((InputStream) byteArrayInputStream0, "", "--------------------------------");
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataUtil.load((InputStream) pipedInputStream0, "{H$gLRs'Ti^7lA'`1", "{H$gLRs'Ti^7lA'`1");
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        File file0 = MockFile.createTempFile("9al^:|}8b", "link", (File) null);
        DataUtil.load(file0, "link", "");
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        String string0 = "O\\uHYC<!SsdX>DIw+";
        File file0 = MockFile.createTempFile(string0, "");
        DataUtil.load(file0, string0, "");
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        File file0 = MockFile.createTempFile("xbw", "xbw");
        DataUtil.load(file0, "", "");
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        DataUtil.load((File) mockFile0, (String) null, ".|?W8Nmlf.>\"5Zl");
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        DataUtil.crossStreams((InputStream) null, (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-188), 32);
        MockFile mockFile0 = new MockFile("T59|}~l+$*9vp");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        DataUtil.crossStreams(byteArrayInputStream0, mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
        DataUtil.crossStreams(pushbackInputStream0, (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        String string0 = DataUtil.mimeBoundary();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("charset=");
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("}]Jv;K9z");
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        DataUtil.load((File) null, "", "org.jsoup.helper.DataUtil");
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}]Jv;K9z");
        FileSystemHandling.appendStringToFile(evoSuiteFile0, "u<AGuDMJ");
        MockFile mockFile0 = new MockFile((String) null, "}]Jv;K9z");
        Document document0 = DataUtil.load((File) mockFile0, (String) null, "keygen");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(sequenceInputStream0, (byte) 1);
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(sequenceInputStream0, (byte) 1);
        byteBuffer0.hasRemaining();
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(sequenceInputStream0, (byte) 34);
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseByteData(byteBuffer0, "K3b", "K3b", parser0);
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        DataUtil.readToByteBuffer(pipedInputStream0, (-3022));
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, "UTF-8", "UTF-8", parser0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "ll");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        DataUtil.crossStreams(byteArrayInputStream0, byteArrayOutputStream0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        DataUtil.crossStreams(byteArrayInputStream0, byteArrayOutputStream0);
        Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "ll");
        document0.location();
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        DataUtil.load((InputStream) null, "", "", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        DataUtil.load((File) mockFile0, "", "@3RgtH}IKUE3Bd");
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "", parser0);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "", parser0);
        byteBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataUtil.load((InputStream) sequenceInputStream0, "content", "--------------------------------");
    }
}
