/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 22:03:27 GMT 2023
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("8rVVhr[");
        tokenQueue0.consumeElementSelector();
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("xc?1>u8j]awS\"t\"PufP");
        tokenQueue0.consumeTagName();
        tokenQueue0.consume();
        char char0 = tokenQueue0.consume();
        tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("xc?1>u8j]awS\"t\"PufP");
        tokenQueue0.consumeTagName();
        tokenQueue0.consume();
        char char0 = tokenQueue0.consume();
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.chompToIgnoreCase("ZPENtVIS-1O4V");
        tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test174() throws Throwable {
        TokenQueue.unescape((String) null);
    }

    @Test(timeout = 4000)
    public void test185() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("C-c}Cvo");
        tokenQueue0.matchesCS((String) null);
    }

    @Test(timeout = 4000)
    public void test196() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("zV}gOohc<nl");
        tokenQueue0.matchesAny((char[]) null);
    }

    @Test(timeout = 4000)
    public void test207() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
        tokenQueue0.matches((String) null);
    }

    @Test(timeout = 4000)
    public void test218() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
        tokenQueue0.matchChomp((String) null);
    }

    @Test(timeout = 4000)
    public void test229() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        tokenQueue0.consumeToIgnoreCase("");
    }

    @Test(timeout = 4000)
    public void test2310() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("1^=$YvJ?!Czi]S{%s");
        tokenQueue0.consumeToIgnoreCase((String) null);
    }

    @Test(timeout = 4000)
    public void test2411() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("WPI");
        tokenQueue0.consumeToAny((String[]) null);
    }

    @Test(timeout = 4000)
    public void test2512() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        tokenQueue0.consumeTo((String) null);
    }

    @Test(timeout = 4000)
    public void test2613() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("7LS<jn2]+9v");
        tokenQueue0.consume((String) null);
    }

    @Test(timeout = 4000)
    public void test2714() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        tokenQueue0.consume();
    }

    @Test(timeout = 4000)
    public void test2815() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        tokenQueue0.chompToIgnoreCase("");
    }

    @Test(timeout = 4000)
    public void test2916() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("foma::+6g|fqwm}a");
        tokenQueue0.chompToIgnoreCase((String) null);
    }

    @Test(timeout = 4000)
    public void test3017() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("8rVVhr[");
        tokenQueue0.chompTo((String) null);
    }

    @Test(timeout = 4000)
    public void test3118() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        tokenQueue0.addFirst((Character) null);
    }

    @Test(timeout = 4000)
    public void test3219() throws Throwable {
        TokenQueue tokenQueue0 = null;
        tokenQueue0 = new TokenQueue((String) null);
    }

    @Test(timeout = 4000)
    public void test3320() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("_U\u0006");
        tokenQueue0.chompBalanced('_', 'c');
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test3421() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        tokenQueue0.addFirst("\"xiJ&`M[0Y_* x");
        tokenQueue0.consumeToIgnoreCase("*`l@X17Z[");
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test3522() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("$t/2XW");
        tokenQueue0.consumeToIgnoreCase("$t/2XW");
        tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test3623() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
        tokenQueue0.consumeWord();
        tokenQueue0.consumeTo("PsQsP");
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test3724() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("8rVVhr[");
        tokenQueue0.consumeTo("");
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test3825() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        boolean boolean0 = tokenQueue0.matchesWord();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test3826() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        boolean boolean0 = tokenQueue0.matchesWord();
    }

    @Test(timeout = 4000)
    public void test3927() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
        tokenQueue0.chompToIgnoreCase("(@#fgg0X");
        boolean boolean0 = tokenQueue0.matchesWord();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test3928() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
        tokenQueue0.chompToIgnoreCase("(@#fgg0X");
        boolean boolean0 = tokenQueue0.matchesWord();
    }

    @Test(timeout = 4000)
    public void test4029() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
        boolean boolean0 = tokenQueue0.matchesWord();
    }

    @Test(timeout = 4000)
    public void test4130() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
        tokenQueue0.consumeWord();
        boolean boolean0 = tokenQueue0.matchesWhitespace();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test4131() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
        tokenQueue0.consumeWord();
        boolean boolean0 = tokenQueue0.matchesWhitespace();
    }

    @Test(timeout = 4000)
    public void test4232() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
        boolean boolean0 = tokenQueue0.matchesWhitespace();
    }

    @Test(timeout = 4000)
    public void test4233() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
        boolean boolean0 = tokenQueue0.matchesWhitespace();
        tokenQueue0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test4334() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
        Character character0 = Character.valueOf('u');
        tokenQueue0.addFirst(character0);
        boolean boolean0 = tokenQueue0.matchChomp("PsQsP");
        tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test4335() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
        Character character0 = Character.valueOf('u');
        tokenQueue0.addFirst(character0);
        boolean boolean0 = tokenQueue0.matchChomp("PsQsP");
    }

    @Test(timeout = 4000)
    public void test4436() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        boolean boolean0 = tokenQueue0.matchChomp("");
        tokenQueue0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test4437() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        boolean boolean0 = tokenQueue0.matchChomp("");
    }

    @Test(timeout = 4000)
    public void test4538() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        Character character0 = new Character('!');
        tokenQueue0.addFirst(character0);
        char[] charArray0 = new char[6];
        charArray0[0] = '!';
        boolean boolean0 = tokenQueue0.matchesAny(charArray0);
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test4539() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        Character character0 = new Character('!');
        tokenQueue0.addFirst(character0);
        char[] charArray0 = new char[6];
        charArray0[0] = '!';
        boolean boolean0 = tokenQueue0.matchesAny(charArray0);
    }

    @Test(timeout = 4000)
    public void test4640() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        Character character0 = new Character('!');
        tokenQueue0.addFirst(character0);
        char[] charArray0 = new char[6];
        boolean boolean0 = tokenQueue0.matchesAny(charArray0);
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test4641() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        Character character0 = new Character('!');
        tokenQueue0.addFirst(character0);
        char[] charArray0 = new char[6];
        boolean boolean0 = tokenQueue0.matchesAny(charArray0);
    }

    @Test(timeout = 4000)
    public void test4742() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        String[] stringArray0 = new String[8];
        stringArray0[0] = "";
        boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
    }

    @Test(timeout = 4000)
    public void test4843() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("MKf2*BS>:okK]H<");
        String[] stringArray0 = new String[1];
        stringArray0[0] = "y9?Q{4";
        boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
    }

    @Test(timeout = 4000)
    public void test4944() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        String[] stringArray0 = new String[8];
        tokenQueue0.matchesAny(stringArray0);
    }

    @Test(timeout = 4000)
    public void test5045() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("s@zD6]");
        Character character0 = new Character('L');
        tokenQueue0.addFirst(character0);
        tokenQueue0.chompBalanced('L', 'L');
        boolean boolean0 = tokenQueue0.isEmpty();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test5046() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("s@zD6]");
        Character character0 = new Character('L');
        tokenQueue0.addFirst(character0);
        tokenQueue0.chompBalanced('L', 'L');
        boolean boolean0 = tokenQueue0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test5147() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
        boolean boolean0 = tokenQueue0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test5248() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("s@zD6]");
        String string0 = tokenQueue0.remainder();
    }

    @Test(timeout = 4000)
    public void test5349() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("s@zD6]");
        boolean boolean0 = tokenQueue0.matches("s@zD6]");
    }

    @Test(timeout = 4000)
    public void test5450() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.chompBalanced('/', '/');
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test5551() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        tokenQueue0.addFirst("0Z-T~R7~7 izo");
        tokenQueue0.consumeCssIdentifier();
        tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test5652() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
        tokenQueue0.consume();
        tokenQueue0.consumeToIgnoreCase("Queue did not match expected sequence");
        tokenQueue0.consumeCssIdentifier();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test5753() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
        tokenQueue0.consumeElementSelector();
        tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test5854() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.chompBalanced('/', '/');
        tokenQueue0.consumeElementSelector();
        tokenQueue0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test5955() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("I:xt}ChItIVC=~!{");
        tokenQueue0.consumeTagName();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test6056() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("xc?1>u8j]awS\"t\"PufP");
        tokenQueue0.consumeTagName();
        tokenQueue0.chompToIgnoreCase("X");
        tokenQueue0.consumeTagName();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test6157() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("_U\u0006");
        tokenQueue0.chompBalanced('c', '_');
        tokenQueue0.matchesWord();
    }

    @Test(timeout = 4000)
    public void test6258() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
        tokenQueue0.advance();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "String must not be empty";
        stringArray0[1] = "String must not be empty";
        stringArray0[2] = "]NF";
        stringArray0[3] = "String must not be empty";
        stringArray0[4] = "String must not be empty";
        stringArray0[5] = "String must not be empty";
        stringArray0[6] = "String must not be empty";
        tokenQueue0.consumeToAny(stringArray0);
        tokenQueue0.chompBalanced('\"', '\"');
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test6359() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue(".Rw %Y-cF[9:Oy");
        Character character0 = Character.valueOf('#');
        tokenQueue0.addFirst(character0);
        tokenQueue0.consume(".Rw %Y-cF[9:Oy");
    }

    @Test(timeout = 4000)
    public void test6460() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consume("");
        tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test6561() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
        tokenQueue0.consume();
        tokenQueue0.consumeToIgnoreCase("Queue did not match expected sequence");
        tokenQueue0.advance();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test6662() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
        tokenQueue0.consumeTagName();
        boolean boolean0 = tokenQueue0.consumeWhitespace();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test6663() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
        tokenQueue0.consumeTagName();
        boolean boolean0 = tokenQueue0.consumeWhitespace();
    }

    @Test(timeout = 4000)
    public void test6764() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        boolean boolean0 = tokenQueue0.consumeWhitespace();
    }

    @Test(timeout = 4000)
    public void test6765() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        boolean boolean0 = tokenQueue0.consumeWhitespace();
        tokenQueue0.matchesWord();
    }

    @Test(timeout = 4000)
    public void test6866() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.chompBalanced('/', '/');
        tokenQueue0.consumeWord();
        boolean boolean0 = tokenQueue0.matchesWhitespace();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test6867() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.chompBalanced('/', '/');
        tokenQueue0.consumeWord();
        boolean boolean0 = tokenQueue0.matchesWhitespace();
    }

    @Test(timeout = 4000)
    public void test6968() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.chompTo("");
        tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test7069() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("<]CY\"1}kOU&tb3>#)*");
        boolean boolean0 = tokenQueue0.matchesStartTag();
        tokenQueue0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("<]CY\"1}kOU&tb3>#)*");
        boolean boolean0 = tokenQueue0.matchesStartTag();
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("FL<x48V1,UNy`}6o");
        tokenQueue0.consumeTagName();
        boolean boolean0 = tokenQueue0.matchesStartTag();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test7172() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("FL<x48V1,UNy`}6o");
        tokenQueue0.consumeTagName();
        boolean boolean0 = tokenQueue0.matchesStartTag();
    }

    @Test(timeout = 4000)
    public void test7273() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.chompBalanced('/', '/');
        boolean boolean0 = tokenQueue0.matchesStartTag();
        tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test7274() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.chompBalanced('/', '/');
        boolean boolean0 = tokenQueue0.matchesStartTag();
    }

    @Test(timeout = 4000)
    public void test7375() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        String[] stringArray0 = new String[18];
        stringArray0[0] = "";
        tokenQueue0.consumeToAny(stringArray0);
        tokenQueue0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test7476() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
        tokenQueue0.advance();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "String must not be empty";
        stringArray0[1] = "String must not be empty";
        stringArray0[2] = "]NF";
        stringArray0[3] = "String must not be empty";
        stringArray0[4] = "String must not be empty";
        stringArray0[5] = "String must not be empty";
        stringArray0[6] = "String must not be empty";
        tokenQueue0.consumeToAny(stringArray0);
        char[] charArray0 = new char[3];
        boolean boolean0 = tokenQueue0.matchesAny(charArray0);
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test7477() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
        tokenQueue0.advance();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "String must not be empty";
        stringArray0[1] = "String must not be empty";
        stringArray0[2] = "]NF";
        stringArray0[3] = "String must not be empty";
        stringArray0[4] = "String must not be empty";
        stringArray0[5] = "String must not be empty";
        stringArray0[6] = "String must not be empty";
        tokenQueue0.consumeToAny(stringArray0);
        char[] charArray0 = new char[3];
        boolean boolean0 = tokenQueue0.matchesAny(charArray0);
    }

    @Test(timeout = 4000)
    public void test7578() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.chompBalanced('/', '/');
        tokenQueue0.consumeWord();
        char char0 = tokenQueue0.peek();
        tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test7579() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        tokenQueue0.consumeAttributeKey();
        tokenQueue0.chompBalanced('/', '/');
        tokenQueue0.consumeWord();
        char char0 = tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test7680() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        char char0 = tokenQueue0.peek();
    }

    @Test(timeout = 4000)
    public void test7781() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
        String string0 = tokenQueue0.toString();
    }

    @Test(timeout = 4000)
    public void test7882() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        boolean boolean0 = tokenQueue0.matchesCS("");
    }
}
