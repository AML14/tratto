[
  {
    "signature": "org.apache.commons.csv.Lexer(org.apache.commons.csv.CSVFormat format, org.apache.commons.csv.ExtendedBufferedReader in)",
    "name": "org.apache.commons.csv.Lexer",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.CSVFormat",
          "name": "CSVFormat",
          "isArray": false
        },
        "name": "format"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.ExtendedBufferedReader",
          "name": "ExtendedBufferedReader",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLineNumber()",
    "name": "getLineNumber",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readEscape()",
    "name": "readEscape",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the unescaped character (as an int) or END_OF_STREAM if char following the escape is invalid.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "there is a problem reading the stream or the end of stream is detected: the escape character is not allowed at end of strem.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "trimTrailingSpaces(java.lang.StringBuilder buffer)",
    "name": "trimTrailingSpaces",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.StringBuilder",
          "name": "StringBuilder",
          "isArray": false
        },
        "name": "buffer"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readEndOfLine(int c)",
    "name": "readEndOfLine",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the given or next character is a line-terminator.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nextToken(org.apache.commons.csv.Token reusableToken)",
    "name": "nextToken",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.Token",
      "name": "org.apache.commons.csv.Token",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.Token",
          "name": "Token",
          "isArray": false
        },
        "name": "reusableToken"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isWhitespace(int c)",
    "name": "isWhitespace",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the given char is a whitespace character.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isStartOfLine(int c)",
    "name": "isStartOfLine",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "c"
        },
        "comment": "the character to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the character is at the start of a line.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEndOfFile(int c)",
    "name": "isEndOfFile",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the given character indicates end of file.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isDelimiter(int c)",
    "name": "isDelimiter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isEscape(int c)",
    "name": "isEscape",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isQuoteChar(int c)",
    "name": "isQuoteChar",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isCommentStart(int c)",
    "name": "isCommentStart",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.Lexer",
      "name": "Lexer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.Lexer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  }
]