[
  {
    "signature": "org.apache.commons.csv.CSVParser(java.io.Reader reader, org.apache.commons.csv.CSVFormat format)",
    "name": "org.apache.commons.csv.CSVParser",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.CSVFormat",
          "name": "CSVFormat",
          "isArray": false
        },
        "name": "format"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Reader",
            "name": "Reader",
            "isArray": false
          },
          "name": "reader"
        },
        "comment": "a Reader containing CSV-formatted input. . reader is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.CSVFormat",
            "name": "CSVFormat",
            "isArray": false
          },
          "name": "format"
        },
        "comment": "the CSVFormat used for CSV parsing. . format is not null.",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters of the format are inconsistent or if either reader or format are null.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "there is a problem reading the header or skipping the first record.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "org.apache.commons.csv.CSVParser(java.io.Reader reader, org.apache.commons.csv.CSVFormat format, long characterOffset, long recordNumber)",
    "name": "org.apache.commons.csv.CSVParser",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.CSVFormat",
          "name": "CSVFormat",
          "isArray": false
        },
        "name": "format"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "characterOffset"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "recordNumber"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Reader",
            "name": "Reader",
            "isArray": false
          },
          "name": "reader"
        },
        "comment": "a Reader containing CSV-formatted input. . reader is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.CSVFormat",
            "name": "CSVFormat",
            "isArray": false
          },
          "name": "format"
        },
        "comment": "the CSVFormat used for CSV parsing. . format is not null.",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "characterOffset"
        },
        "comment": "Lexer offset when the parser does not start parsing at the beginning of the source.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "recordNumber"
        },
        "comment": "The next record number to assign.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters of the format are inconsistent or if either reader or format are null.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "there is a problem reading the header or skipping the first record.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parse(java.io.File file, java.nio.charset.Charset charset, org.apache.commons.csv.CSVFormat format)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "org.apache.commons.csv.CSVParser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.File",
          "name": "File",
          "isArray": false
        },
        "name": "file"
      },
      {
        "type": {
          "qualifiedName": "java.nio.charset.Charset",
          "name": "Charset",
          "isArray": false
        },
        "name": "charset"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.CSVFormat",
          "name": "CSVFormat",
          "isArray": false
        },
        "name": "format"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.File",
            "name": "File",
            "isArray": false
          },
          "name": "file"
        },
        "comment": "a CSV file. . file is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.nio.charset.Charset",
            "name": "Charset",
            "isArray": false
          },
          "name": "charset"
        },
        "comment": "A Charset.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.CSVFormat",
            "name": "CSVFormat",
            "isArray": false
          },
          "name": "format"
        },
        "comment": "the CSVFormat used for CSV parsing. . format is not null.",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new parser.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters of the format are inconsistent or if either file or format are null.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parse(java.io.InputStream inputStream, java.nio.charset.Charset charset, org.apache.commons.csv.CSVFormat format)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "org.apache.commons.csv.CSVParser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "inputStream"
      },
      {
        "type": {
          "qualifiedName": "java.nio.charset.Charset",
          "name": "Charset",
          "isArray": false
        },
        "name": "charset"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.CSVFormat",
          "name": "CSVFormat",
          "isArray": false
        },
        "name": "format"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "inputStream"
        },
        "comment": "an InputStream containing CSV-formatted input. . inputStream is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.nio.charset.Charset",
            "name": "Charset",
            "isArray": false
          },
          "name": "charset"
        },
        "comment": "a Charset.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.CSVFormat",
            "name": "CSVFormat",
            "isArray": false
          },
          "name": "format"
        },
        "comment": "the CSVFormat used for CSV parsing. . format is not null.",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new CSVParser configured with the given reader and format.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters of the format are inconsistent or if either reader or format are null.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "there is a problem reading the header or skipping the first record.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parse(java.nio.file.Path path, java.nio.charset.Charset charset, org.apache.commons.csv.CSVFormat format)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "org.apache.commons.csv.CSVParser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.nio.file.Path",
          "name": "Path",
          "isArray": false
        },
        "name": "path"
      },
      {
        "type": {
          "qualifiedName": "java.nio.charset.Charset",
          "name": "Charset",
          "isArray": false
        },
        "name": "charset"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.CSVFormat",
          "name": "CSVFormat",
          "isArray": false
        },
        "name": "format"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.nio.file.Path",
            "name": "Path",
            "isArray": false
          },
          "name": "path"
        },
        "comment": "a CSV file. . path is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.nio.charset.Charset",
            "name": "Charset",
            "isArray": false
          },
          "name": "charset"
        },
        "comment": "A Charset.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.CSVFormat",
            "name": "CSVFormat",
            "isArray": false
          },
          "name": "format"
        },
        "comment": "the CSVFormat used for CSV parsing. . format is not null.",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new parser.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters of the format are inconsistent or if either file or format are null.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parse(java.io.Reader reader, org.apache.commons.csv.CSVFormat format)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "org.apache.commons.csv.CSVParser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.CSVFormat",
          "name": "CSVFormat",
          "isArray": false
        },
        "name": "format"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Reader",
            "name": "Reader",
            "isArray": false
          },
          "name": "reader"
        },
        "comment": "a Reader containing CSV-formatted input. . reader is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.CSVFormat",
            "name": "CSVFormat",
            "isArray": false
          },
          "name": "format"
        },
        "comment": "the CSVFormat used for CSV parsing. . format is not null.",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new CSVParser configured with the given reader and format.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters of the format are inconsistent or if either reader or format are null.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "there is a problem reading the header or skipping the first record.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parse(java.lang.String string, org.apache.commons.csv.CSVFormat format)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "org.apache.commons.csv.CSVParser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.CSVFormat",
          "name": "CSVFormat",
          "isArray": false
        },
        "name": "format"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "a CSV string. . string is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.CSVFormat",
            "name": "CSVFormat",
            "isArray": false
          },
          "name": "format"
        },
        "comment": "the CSVFormat used for CSV parsing. . format is not null.",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new parser.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters of the format are inconsistent or if either string or format are null.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parse(java.net.URL url, java.nio.charset.Charset charset, org.apache.commons.csv.CSVFormat format)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "org.apache.commons.csv.CSVParser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.net.URL",
          "name": "URL",
          "isArray": false
        },
        "name": "url"
      },
      {
        "type": {
          "qualifiedName": "java.nio.charset.Charset",
          "name": "Charset",
          "isArray": false
        },
        "name": "charset"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.CSVFormat",
          "name": "CSVFormat",
          "isArray": false
        },
        "name": "format"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.net.URL",
            "name": "URL",
            "isArray": false
          },
          "name": "url"
        },
        "comment": "a URL. . url is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.nio.charset.Charset",
            "name": "Charset",
            "isArray": false
          },
          "name": "charset"
        },
        "comment": "the charset for the resource. . charset is not null.",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.CSVFormat",
            "name": "CSVFormat",
            "isArray": false
          },
          "name": "format"
        },
        "comment": "the CSVFormat used for CSV parsing. . format is not null.",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a new parser.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters of the format are inconsistent or if either url charset or format are null.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getCurrentLineNumber()",
    "name": "getCurrentLineNumber",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "current line number.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getFirstEndOfLine()",
    "name": "getFirstEndOfLine",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the first end-of-line string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getHeaderMap()",
    "name": "getHeaderMap",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<java.lang.String, java.lang.Integer>",
      "name": "java.util.Map<java.lang.String, java.lang.Integer>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a copy of the header map that iterates in column order.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRecordNumber()",
    "name": "getRecordNumber",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "current record number.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRecords()",
    "name": "getRecords",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<org.apache.commons.csv.CSVRecord>",
      "name": "java.util.List<org.apache.commons.csv.CSVRecord>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "list of CSVRecord CSVRecords, may be empty.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "on parse error or input read-failure.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "isClosed()",
    "name": "isClosed",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this parser is closed., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<org.apache.commons.csv.CSVRecord>",
      "name": "java.util.Iterator<org.apache.commons.csv.CSVRecord>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "nextRecord()",
    "name": "nextRecord",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "CSVParser",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVRecord",
      "name": "org.apache.commons.csv.CSVRecord",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the record as an array of values, or null if the end of the stream has been reached.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "on parse error or input read-failure.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]