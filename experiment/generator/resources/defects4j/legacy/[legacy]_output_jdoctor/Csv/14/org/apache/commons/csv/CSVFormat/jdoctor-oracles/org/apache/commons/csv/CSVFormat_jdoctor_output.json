[
  {
    "signature": "newFormat(char delimiter)",
    "name": "newFormat",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "delimiter"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "delimiter"
        },
        "comment": "the char used for value separation. delimiter is not a line break character.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new CSV format.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the delimiter is a line break character.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "valueOf(java.lang.String format)",
    "name": "valueOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "format"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "format"
        },
        "comment": "name.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "one of the predefined formats.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "format(java.lang.Object... values)",
    "name": "format",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the values to format.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the formatted values.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAllowMissingColumnNames()",
    "name": "getAllowMissingColumnNames",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if missing column names are allowed when parsing the header line, false to throw an IllegalArgumentException.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCommentMarker()",
    "name": "getCommentMarker",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Character",
      "name": "java.lang.Character",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the comment start marker, may be null.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==null"
    },
    "throwsTags": []
  },
  {
    "signature": "getDelimiter()",
    "name": "getDelimiter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char",
      "name": "char",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the delimiter character.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getEscapeCharacter()",
    "name": "getEscapeCharacter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Character",
      "name": "java.lang.Character",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the escape character, may be null.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==null"
    },
    "throwsTags": []
  },
  {
    "signature": "getHeader()",
    "name": "getHeader",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a copy of the header array; null if disabled, the empty array if to be read from the file.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getHeaderComments()",
    "name": "getHeaderComments",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a copy of the header comment array; null if disabled.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getIgnoreEmptyLines()",
    "name": "getIgnoreEmptyLines",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if empty lines between records are ignored, false if they are turned into empty records.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getIgnoreHeaderCase()",
    "name": "getIgnoreHeaderCase",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if header names cases are ignored, false if they are case sensitive.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getIgnoreSurroundingSpaces()",
    "name": "getIgnoreSurroundingSpaces",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if spaces around values are ignored, false if they are treated as part of the value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNullString()",
    "name": "getNullString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the String to convert to and from null. No substitution occurs if null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getQuoteCharacter()",
    "name": "getQuoteCharacter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Character",
      "name": "java.lang.Character",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the quoteChar character, may be null.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==null"
    },
    "throwsTags": []
  },
  {
    "signature": "getQuoteMode()",
    "name": "getQuoteMode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.QuoteMode",
      "name": "org.apache.commons.csv.QuoteMode",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the quote policy.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRecordSeparator()",
    "name": "getRecordSeparator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the record separator.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSkipHeaderRecord()",
    "name": "getSkipHeaderRecord",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if to skip the header record., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTrailingDelimiter()",
    "name": "getTrailingDelimiter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if to add a trailing delimiter., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTrim()",
    "name": "getTrim",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if to trim leading and trailing blanks., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isCommentMarkerSet()",
    "name": "isCommentMarkerSet",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true is comments are supported, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEscapeCharacterSet()",
    "name": "isEscapeCharacterSet",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if escapes are processed.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isNullStringSet()",
    "name": "isNullStringSet",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if a nullString is defined.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isQuoteCharacterSet()",
    "name": "isQuoteCharacterSet",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if a quoteChar is defined.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "parse(java.io.Reader in)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "org.apache.commons.csv.CSVParser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Reader",
            "name": "Reader",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "the input stream.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a parser over a stream of CSVRecords.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "print(java.lang.Appendable out)",
    "name": "print",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVPrinter",
      "name": "org.apache.commons.csv.CSVPrinter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Appendable",
          "name": "Appendable",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Appendable",
            "name": "Appendable",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the output.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a printer to an output.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the optional header cannot be printed.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "print(java.io.File out, java.nio.charset.Charset charset)",
    "name": "print",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVPrinter",
      "name": "org.apache.commons.csv.CSVPrinter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.File",
          "name": "File",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.nio.charset.Charset",
          "name": "Charset",
          "isArray": false
        },
        "name": "charset"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.File",
            "name": "File",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the output.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.nio.charset.Charset",
            "name": "Charset",
            "isArray": false
          },
          "name": "charset"
        },
        "comment": "A charset.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a printer to an output.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the optional header cannot be printed.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "print(java.nio.file.Path out, java.nio.charset.Charset charset)",
    "name": "print",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVPrinter",
      "name": "org.apache.commons.csv.CSVPrinter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.nio.file.Path",
          "name": "Path",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.nio.charset.Charset",
          "name": "Charset",
          "isArray": false
        },
        "name": "charset"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.nio.file.Path",
            "name": "Path",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the output.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.nio.charset.Charset",
            "name": "Charset",
            "isArray": false
          },
          "name": "charset"
        },
        "comment": "A charset.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a printer to an output.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the optional header cannot be printed.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "print(java.lang.Object value, java.lang.Appendable out, boolean newRecord)",
    "name": "print",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Appendable",
          "name": "Appendable",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newRecord"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "value to output.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Appendable",
            "name": "Appendable",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "where to print the value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "newRecord"
        },
        "comment": "if this a new record.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "println(java.lang.Appendable out)",
    "name": "println",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Appendable",
          "name": "Appendable",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Appendable",
            "name": "Appendable",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "where to write.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "printRecord(java.lang.Appendable out, java.lang.Object... values)",
    "name": "printRecord",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Appendable",
          "name": "Appendable",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Appendable",
            "name": "Appendable",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "where to write.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "values to output.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "withAllowMissingColumnNames()",
    "name": "withAllowMissingColumnNames",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified missing column names behavior.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withAllowMissingColumnNames(boolean allowMissingColumnNames)",
    "name": "withAllowMissingColumnNames",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "allowMissingColumnNames"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "allowMissingColumnNames"
        },
        "comment": "the missing column names behavior true to allow missing column names in the header line. allowMissingColumnNames is false to cause an IllegalArgumentException to be thrown.",
        "kind": "PARAM",
        "condition": "args[0]==false"
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified missing column names behavior.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withCommentMarker(char commentMarker)",
    "name": "withCommentMarker",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "commentMarker"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "commentMarker"
        },
        "comment": "the comment start marker.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this one but with the specified character as the comment start marker.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withCommentMarker(java.lang.Character commentMarker)",
    "name": "withCommentMarker",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Character",
          "name": "Character",
          "isArray": false
        },
        "name": "commentMarker"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Character",
            "name": "Character",
            "isArray": false
          },
          "name": "commentMarker"
        },
        "comment": "the comment start marker. commentMarker is use null to disable.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this one but with the specified character as the comment start marker.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withDelimiter(char delimiter)",
    "name": "withDelimiter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "delimiter"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "delimiter"
        },
        "comment": "the delimiter character.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this with the specified character as delimiter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withEscape(char escape)",
    "name": "withEscape",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "escape"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "escape"
        },
        "comment": "the escape character.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to his but with the specified character as the escape character.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==receiverObjectID"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withEscape(java.lang.Character escape)",
    "name": "withEscape",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Character",
          "name": "Character",
          "isArray": false
        },
        "name": "escape"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Character",
            "name": "Character",
            "isArray": false
          },
          "name": "escape"
        },
        "comment": "the escape character. escape is use null to disable.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified character as the escape character.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withFirstRecordAsHeader()",
    "name": "withFirstRecordAsHeader",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but using the first record as header.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withHeader(java.lang.Class<? extends java.lang.Enum<?>> headerEnum)",
    "name": "withHeader",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "headerEnum"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "headerEnum"
        },
        "comment": "the enum defining the header null if disabled empty if parsed automatically user specified otherwise.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified header.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withHeader(java.sql.ResultSet resultSet)",
    "name": "withHeader",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.sql.ResultSet",
          "name": "ResultSet",
          "isArray": false
        },
        "name": "resultSet"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.sql.ResultSet",
            "name": "ResultSet",
            "isArray": false
          },
          "name": "resultSet"
        },
        "comment": "the resultSet for the header null if disabled empty if parsed automatically user specified otherwise.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified header.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.sql.SQLException",
          "name": "SQLException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "SQLException if a database access error occurs or this method is called on a closed result set.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withHeader(java.sql.ResultSetMetaData metaData)",
    "name": "withHeader",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.sql.ResultSetMetaData",
          "name": "ResultSetMetaData",
          "isArray": false
        },
        "name": "metaData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.sql.ResultSetMetaData",
            "name": "ResultSetMetaData",
            "isArray": false
          },
          "name": "metaData"
        },
        "comment": "the metaData for the header null if disabled empty if parsed automatically user specified otherwise.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified header.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.sql.SQLException",
          "name": "SQLException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "SQLException if a database access error occurs or this method is called on a closed result set.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withHeader(java.lang.String... header)",
    "name": "withHeader",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "header"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.String;",
            "name": "String[]",
            "isArray": true
          },
          "name": "header"
        },
        "comment": "the header null if disabled empty if parsed automatically user specified otherwise.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified header.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withHeaderComments(java.lang.Object... headerComments)",
    "name": "withHeaderComments",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "headerComments"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "headerComments"
        },
        "comment": "the headerComments which . headerComments is printed by the Printer before the actual CSV data.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified header.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withIgnoreEmptyLines()",
    "name": "withIgnoreEmptyLines",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified empty line skipping behavior.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withIgnoreEmptyLines(boolean ignoreEmptyLines)",
    "name": "withIgnoreEmptyLines",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "ignoreEmptyLines"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "ignoreEmptyLines"
        },
        "comment": "the empty line skipping behavior true to ignore the empty lines between the records. ignoreEmptyLines is false to translate empty lines to empty records.",
        "kind": "PARAM",
        "condition": "args[0]==false"
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified empty line skipping behavior.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withIgnoreHeaderCase()",
    "name": "withIgnoreHeaderCase",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A new CSVFormat that will ignore case header name.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withIgnoreHeaderCase(boolean ignoreHeaderCase)",
    "name": "withIgnoreHeaderCase",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "ignoreHeaderCase"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "ignoreHeaderCase"
        },
        "comment": "the case mapping behavior true to access name/values. ignoreHeaderCase is false to leave the mapping as is.",
        "kind": "PARAM",
        "condition": "args[0]==false"
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that will ignore case header name if specified as true.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withIgnoreSurroundingSpaces()",
    "name": "withIgnoreSurroundingSpaces",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified trimming behavior.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withIgnoreSurroundingSpaces(boolean ignoreSurroundingSpaces)",
    "name": "withIgnoreSurroundingSpaces",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "ignoreSurroundingSpaces"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "ignoreSurroundingSpaces"
        },
        "comment": "the trimming behavior true to remove the surrounding spaces. ignoreSurroundingSpaces is false to leave the spaces as is.",
        "kind": "PARAM",
        "condition": "args[0]==false"
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified trimming behavior.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withNullString(java.lang.String nullString)",
    "name": "withNullString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "nullString"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "nullString"
        },
        "comment": "the String to convert to and from null. No substitution occurs if null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified null conversion string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withQuote(char quoteChar)",
    "name": "withQuote",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "quoteChar"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "quoteChar"
        },
        "comment": "the quoteChar character.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified character as quoteChar.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withQuote(java.lang.Character quoteChar)",
    "name": "withQuote",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Character",
          "name": "Character",
          "isArray": false
        },
        "name": "quoteChar"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Character",
            "name": "Character",
            "isArray": false
          },
          "name": "quoteChar"
        },
        "comment": "the quoteChar character. quoteChar is use null to disable.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified character as quoteChar.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withQuoteMode(org.apache.commons.csv.QuoteMode quoteModePolicy)",
    "name": "withQuoteMode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.QuoteMode",
          "name": "QuoteMode",
          "isArray": false
        },
        "name": "quoteModePolicy"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.QuoteMode",
            "name": "QuoteMode",
            "isArray": false
          },
          "name": "quoteModePolicy"
        },
        "comment": "the quote policy to use for output.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified quote policy.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withRecordSeparator(char recordSeparator)",
    "name": "withRecordSeparator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "recordSeparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "recordSeparator"
        },
        "comment": "the record separator to use for output.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the the specified output record separator.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withRecordSeparator(java.lang.String recordSeparator)",
    "name": "withRecordSeparator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "recordSeparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "recordSeparator"
        },
        "comment": "the record separator to use for output.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the the specified output record separator.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "recordSeparator is none of CR LF or CRLF.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withSkipHeaderRecord()",
    "name": "withSkipHeaderRecord",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withSkipHeaderRecord(boolean skipHeaderRecord)",
    "name": "withSkipHeaderRecord",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "skipHeaderRecord"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "skipHeaderRecord"
        },
        "comment": "whether to skip the header record.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withTrailingDelimiter()",
    "name": "withTrailingDelimiter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the trailing delimiter setting.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withTrailingDelimiter(boolean trailingDelimiter)",
    "name": "withTrailingDelimiter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "trailingDelimiter"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "trailingDelimiter"
        },
        "comment": "whether to add a trailing delimiter.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified trailing delimiter setting.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withTrim()",
    "name": "withTrim",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the trim setting on.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withTrim(boolean trim)",
    "name": "withTrim",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "trim"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "trim"
        },
        "comment": "whether to trim leading and trailing blanks.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified trim setting.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]