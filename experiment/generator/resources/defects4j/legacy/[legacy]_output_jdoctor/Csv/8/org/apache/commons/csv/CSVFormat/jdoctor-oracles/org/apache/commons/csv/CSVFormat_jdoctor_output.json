[
  {
    "signature": "newFormat(char delimiter)",
    "name": "newFormat",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "delimiter"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "delimiter"
        },
        "comment": "the char used for value separation. delimiter is not a line break character.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new CSV format.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the delimiter is a line break character.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "format(java.lang.Object... values)",
    "name": "format",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the values to format.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the formatted values.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCommentStart()",
    "name": "getCommentStart",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Character",
      "name": "java.lang.Character",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the comment start marker, may be null.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==null"
    },
    "throwsTags": []
  },
  {
    "signature": "getDelimiter()",
    "name": "getDelimiter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char",
      "name": "char",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the delimiter character.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getEscape()",
    "name": "getEscape",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Character",
      "name": "java.lang.Character",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the escape character, may be null.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==null"
    },
    "throwsTags": []
  },
  {
    "signature": "getHeader()",
    "name": "getHeader",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a copy of the header array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getIgnoreEmptyLines()",
    "name": "getIgnoreEmptyLines",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if empty lines between records are ignored, false if they are turned into empty records.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getIgnoreSurroundingSpaces()",
    "name": "getIgnoreSurroundingSpaces",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if spaces around values are ignored, false if they are treated as part of the value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNullString()",
    "name": "getNullString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the String to convert to and from null. No substitution occurs if null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getQuoteChar()",
    "name": "getQuoteChar",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Character",
      "name": "java.lang.Character",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the quoteChar character, may be null.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==null"
    },
    "throwsTags": []
  },
  {
    "signature": "getQuotePolicy()",
    "name": "getQuotePolicy",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.Quote",
      "name": "org.apache.commons.csv.Quote",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the quote policy.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRecordSeparator()",
    "name": "getRecordSeparator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the line separator.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSkipHeaderRecord()",
    "name": "getSkipHeaderRecord",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if to skip the header record., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isCommentingEnabled()",
    "name": "isCommentingEnabled",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true is comments are supported, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEscaping()",
    "name": "isEscaping",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if escapes are processed.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isNullHandling()",
    "name": "isNullHandling",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if a nullString is defined.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isQuoting()",
    "name": "isQuoting",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if a quoteChar is defined.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "parse(java.io.Reader in)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVParser",
      "name": "org.apache.commons.csv.CSVParser",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Reader",
            "name": "Reader",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "the input stream.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a parser over a stream of CSVRecords.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an I/O error occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "validate()",
    "name": "validate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": ".",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withCommentStart(char commentStart)",
    "name": "withCommentStart",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "commentStart"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "commentStart"
        },
        "comment": "the comment start marker.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this one but with the specified character as the comment start marker.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withCommentStart(java.lang.Character commentStart)",
    "name": "withCommentStart",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Character",
          "name": "Character",
          "isArray": false
        },
        "name": "commentStart"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Character",
            "name": "Character",
            "isArray": false
          },
          "name": "commentStart"
        },
        "comment": "the comment start marker. commentStart is use null to disable.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this one but with the specified character as the comment start marker.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withDelimiter(char delimiter)",
    "name": "withDelimiter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "delimiter"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "delimiter"
        },
        "comment": "the delimiter character.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this with the specified character as delimiter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withEscape(char escape)",
    "name": "withEscape",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "escape"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "escape"
        },
        "comment": "the escape character.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to his but with the specified character as the escape character.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==receiverObjectID"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withEscape(java.lang.Character escape)",
    "name": "withEscape",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Character",
          "name": "Character",
          "isArray": false
        },
        "name": "escape"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Character",
            "name": "Character",
            "isArray": false
          },
          "name": "escape"
        },
        "comment": "the escape character. escape is use null to disable.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified character as the escape character.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withHeader(java.lang.String... header)",
    "name": "withHeader",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "header"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.String;",
            "name": "String[]",
            "isArray": true
          },
          "name": "header"
        },
        "comment": "the header null if disabled empty if parsed automatically user specified otherwise.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified header.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withIgnoreEmptyLines(boolean ignoreEmptyLines)",
    "name": "withIgnoreEmptyLines",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "ignoreEmptyLines"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "ignoreEmptyLines"
        },
        "comment": "the empty line skipping behavior true to ignore the empty lines between the records. ignoreEmptyLines is false to translate empty lines to empty records.",
        "kind": "PARAM",
        "condition": "args[0]==false"
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified empty line skipping behavior.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withIgnoreSurroundingSpaces(boolean ignoreSurroundingSpaces)",
    "name": "withIgnoreSurroundingSpaces",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "ignoreSurroundingSpaces"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "ignoreSurroundingSpaces"
        },
        "comment": "the trimming behavior true to remove the surrounding spaces. ignoreSurroundingSpaces is false to leave the spaces as is.",
        "kind": "PARAM",
        "condition": "args[0]==false"
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified trimming behavior.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withNullString(java.lang.String nullString)",
    "name": "withNullString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "nullString"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "nullString"
        },
        "comment": "the String to convert to and from null. No substitution occurs if null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified null conversion string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withQuoteChar(char quoteChar)",
    "name": "withQuoteChar",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "quoteChar"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "quoteChar"
        },
        "comment": "the quoteChar character.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified character as quoteChar.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withQuoteChar(java.lang.Character quoteChar)",
    "name": "withQuoteChar",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Character",
          "name": "Character",
          "isArray": false
        },
        "name": "quoteChar"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Character",
            "name": "Character",
            "isArray": false
          },
          "name": "quoteChar"
        },
        "comment": "the quoteChar character. quoteChar is use null to disable.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified character as quoteChar.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "thrown if the specified character is a line break.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withQuotePolicy(org.apache.commons.csv.Quote quotePolicy)",
    "name": "withQuotePolicy",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.csv.Quote",
          "name": "Quote",
          "isArray": false
        },
        "name": "quotePolicy"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.csv.Quote",
            "name": "Quote",
            "isArray": false
          },
          "name": "quotePolicy"
        },
        "comment": "the quote policy to use for output.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the specified quote policy.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withRecordSeparator(char recordSeparator)",
    "name": "withRecordSeparator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "recordSeparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "recordSeparator"
        },
        "comment": "the record separator to use for output.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the the specified output record separator.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withRecordSeparator(java.lang.String recordSeparator)",
    "name": "withRecordSeparator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "recordSeparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "recordSeparator"
        },
        "comment": "the record separator to use for output.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the the specified output record separator.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withSkipHeaderRecord(boolean skipHeaderRecord)",
    "name": "withSkipHeaderRecord",
    "containingClass": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "CSVFormat",
      "isArray": false
    },
    "targetClass": "org.apache.commons.csv.CSVFormat",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.csv.CSVFormat",
      "name": "org.apache.commons.csv.CSVFormat",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "skipHeaderRecord"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "skipHeaderRecord"
        },
        "comment": "whether to skip the header record.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]