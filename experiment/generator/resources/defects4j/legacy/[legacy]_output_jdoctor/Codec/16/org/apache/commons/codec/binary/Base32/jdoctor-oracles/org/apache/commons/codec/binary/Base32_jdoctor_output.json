[
  {
    "signature": "org.apache.commons.codec.binary.Base32()",
    "name": "org.apache.commons.codec.binary.Base32",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.codec.binary.Base32(byte pad)",
    "name": "org.apache.commons.codec.binary.Base32",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "pad"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "pad"
        },
        "comment": "byte used as padding byte.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.codec.binary.Base32(boolean useHex)",
    "name": "org.apache.commons.codec.binary.Base32",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "useHex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "useHex"
        },
        "comment": "if true then use Base32 Hex alphabet.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.codec.binary.Base32(boolean useHex, byte pad)",
    "name": "org.apache.commons.codec.binary.Base32",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "useHex"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "pad"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "useHex"
        },
        "comment": "if true then use Base32 Hex alphabet.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "pad"
        },
        "comment": "byte used as padding byte.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.codec.binary.Base32(int lineLength)",
    "name": "org.apache.commons.codec.binary.Base32",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lineLength"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lineLength"
        },
        "comment": "Each line of encoded data . lineLength is at most of the given length (rounded down to nearest multiple of 8). If lineLength <= 0 then the output . lineLength is not divided into lines (chunks). Ignored when decoding.",
        "kind": "PARAM",
        "condition": "args[0]<=0"
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.codec.binary.Base32(int lineLength, byte[] lineSeparator)",
    "name": "org.apache.commons.codec.binary.Base32",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lineLength"
      },
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "lineSeparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lineLength"
        },
        "comment": "Each line of encoded data . lineLength is at most of the given length (rounded down to nearest multiple of 8). If lineLength <= 0 then the output . lineLength is not divided into lines (chunks). Ignored when decoding.",
        "kind": "PARAM",
        "condition": "args[0]<=0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "lineSeparator"
        },
        "comment": "Each line of encoded data will end with this sequence of bytes.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "The provided lineSeparator included some Base32 characters. That's not going to work!.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "org.apache.commons.codec.binary.Base32(int lineLength, byte[] lineSeparator, boolean useHex)",
    "name": "org.apache.commons.codec.binary.Base32",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lineLength"
      },
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "lineSeparator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "useHex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lineLength"
        },
        "comment": "Each line of encoded data . lineLength is at most of the given length (rounded down to nearest multiple of 8). If lineLength <= 0 then the output . lineLength is not divided into lines (chunks). Ignored when decoding.",
        "kind": "PARAM",
        "condition": "args[0]<=0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "lineSeparator"
        },
        "comment": "Each line of encoded data will end with this sequence of bytes.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "useHex"
        },
        "comment": "if true then use Base32 Hex alphabet. useHex is otherwise use Base32 alphabet.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "The provided lineSeparator included some Base32 characters. That's not going to work! Or the lineLength > 0 and lineSeparator is null.",
        "kind": "THROWS",
        "condition": "args[0]>0 && args[1]==null"
      }
    ]
  },
  {
    "signature": "org.apache.commons.codec.binary.Base32(int lineLength, byte[] lineSeparator, boolean useHex, byte pad)",
    "name": "org.apache.commons.codec.binary.Base32",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lineLength"
      },
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "lineSeparator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "useHex"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "pad"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lineLength"
        },
        "comment": "Each line of encoded data . lineLength is at most of the given length (rounded down to nearest multiple of 8). If lineLength <= 0 then the output . lineLength is not divided into lines (chunks). Ignored when decoding.",
        "kind": "PARAM",
        "condition": "args[0]<=0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "lineSeparator"
        },
        "comment": "Each line of encoded data will end with this sequence of bytes.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "useHex"
        },
        "comment": "if true then use Base32 Hex alphabet. useHex is otherwise use Base32 alphabet.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "pad"
        },
        "comment": "byte used as padding byte.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "The provided lineSeparator included some Base32 characters. That's not going to work! Or the lineLength > 0 and lineSeparator is null.",
        "kind": "THROWS",
        "condition": "args[0]>0 && args[1]==null"
      }
    ]
  },
  {
    "signature": "decode(byte[] in, int inPos, int inAvail, org.apache.commons.codec.binary.BaseNCodec$Context context)",
    "name": "decode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "inPos"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "inAvail"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.codec.binary.BaseNCodec$Context",
          "name": "Context",
          "isArray": false
        },
        "name": "context"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "in"
        },
        "comment": "byte[] array of ascii data to Base32 decode.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "inPos"
        },
        "comment": "Position to start reading data from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "inAvail"
        },
        "comment": "Amount of bytes available from input for encoding.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.codec.binary.BaseNCodec$Context",
            "name": "Context",
            "isArray": false
          },
          "name": "context"
        },
        "comment": "the context to be used Output is written to Context#buffer as 8-bit octets using Context#pos as the buffer position.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "encode(byte[] in, int inPos, int inAvail, org.apache.commons.codec.binary.BaseNCodec$Context context)",
    "name": "encode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "inPos"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "inAvail"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.codec.binary.BaseNCodec$Context",
          "name": "Context",
          "isArray": false
        },
        "name": "context"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "in"
        },
        "comment": "byte[] array of binary data to Base32 encode.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "inPos"
        },
        "comment": "Position to start reading data from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "inAvail"
        },
        "comment": "Amount of bytes available from input for encoding.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.codec.binary.BaseNCodec$Context",
            "name": "Context",
            "isArray": false
          },
          "name": "context"
        },
        "comment": "the context to be used.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isInAlphabet(byte octet)",
    "name": "isInAlphabet",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base32",
      "name": "Base32",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base32",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "octet"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "octet"
        },
        "comment": "The value to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the value is defined in the the Base32 alphabet false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]