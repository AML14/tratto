[
  {
    "signature": "org.apache.commons.codec.binary.Base64()",
    "name": "org.apache.commons.codec.binary.Base64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.codec.binary.Base64(boolean urlSafe)",
    "name": "org.apache.commons.codec.binary.Base64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "urlSafe"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "urlSafe"
        },
        "comment": "if true. urlSafe is URL-safe encoding is used. In most cases this should be set to false.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.codec.binary.Base64(int lineLength)",
    "name": "org.apache.commons.codec.binary.Base64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lineLength"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lineLength"
        },
        "comment": "Each line of encoded data . lineLength is at most of the given length (rounded down to nearest multiple of 4). If lineLength <= 0 then the output . lineLength is not divided into lines (chunks). Ignored when decoding.",
        "kind": "PARAM",
        "condition": "args[0]<=0"
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.codec.binary.Base64(int lineLength, byte[] lineSeparator)",
    "name": "org.apache.commons.codec.binary.Base64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lineLength"
      },
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "lineSeparator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lineLength"
        },
        "comment": "Each line of encoded data . lineLength is at most of the given length (rounded down to nearest multiple of 4). If lineLength <= 0 then the output . lineLength is not divided into lines (chunks). Ignored when decoding.",
        "kind": "PARAM",
        "condition": "args[0]<=0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "lineSeparator"
        },
        "comment": "Each line of encoded data will end with this sequence of bytes.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown when the provided lineSeparator included some base64 characters.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "org.apache.commons.codec.binary.Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)",
    "name": "org.apache.commons.codec.binary.Base64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lineLength"
      },
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "lineSeparator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "urlSafe"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lineLength"
        },
        "comment": "Each line of encoded data . lineLength is at most of the given length (rounded down to nearest multiple of 4). If lineLength <= 0 then the output . lineLength is not divided into lines (chunks). Ignored when decoding.",
        "kind": "PARAM",
        "condition": "args[0]<=0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "lineSeparator"
        },
        "comment": "Each line of encoded data will end with this sequence of bytes.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "urlSafe"
        },
        "comment": "Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode operations. Decoding seamlessly handles both modes.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "The provided lineSeparator included some base64 characters. That's not going to work!.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "isUrlSafe()",
    "name": "isUrlSafe",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if we're in URL-SAFE mode, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasData()",
    "name": "hasData",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if there is Base64 object still available for reading.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "avail()",
    "name": "avail",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The amount of buffered data available for reading.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "readResults(byte[] b, int bPos, int bAvail)",
    "name": "readResults",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "bPos"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "bAvail"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "b"
        },
        "comment": "byte[] array to extract the buffered data into.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "bPos"
        },
        "comment": "position in byte[] array to start extraction at.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "bAvail"
        },
        "comment": "amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The number of bytes successfully extracted into the provided byte[] array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setInitialBuffer(byte[] out, int outPos, int outAvail)",
    "name": "setInitialBuffer",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "outPos"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "outAvail"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "out"
        },
        "comment": "byte[] array to buffer directly to.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "outPos"
        },
        "comment": "Position to start buffering into.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "outAvail"
        },
        "comment": "Amount of bytes available for direct buffering.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "encode(byte[] in, int inPos, int inAvail)",
    "name": "encode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "inPos"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "inAvail"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "in"
        },
        "comment": "byte[] array of binary data to base64 encode.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "inPos"
        },
        "comment": "Position to start reading data from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "inAvail"
        },
        "comment": "Amount of bytes available from input for encoding.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "decode(byte[] in, int inPos, int inAvail)",
    "name": "decode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "inPos"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "inAvail"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "in"
        },
        "comment": "byte[] array of ascii data to base64 decode.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "inPos"
        },
        "comment": "Position to start reading data from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "inAvail"
        },
        "comment": "Amount of bytes available from input for encoding.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isBase64(byte octet)",
    "name": "isBase64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "octet"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "octet"
        },
        "comment": "The value to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the value is defined in the the base 64 alphabet, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isArrayByteBase64(byte[] arrayOctet)",
    "name": "isArrayByteBase64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "arrayOctet"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "arrayOctet"
        },
        "comment": "byte array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if all bytes are valid characters in the Base64 alphabet or if the byte array is empty; false, otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "encodeBase64(byte[] binaryData)",
    "name": "encodeBase64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "binaryData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "binaryData"
        },
        "comment": "binaryData is binary. binary data to encode.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "byte[] containing Base64 characters in their UTF-8 representation.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "encodeBase64String(byte[] binaryData)",
    "name": "encodeBase64String",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "binaryData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "binaryData"
        },
        "comment": "binaryData is binary. binary data to encode.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "String containing Base64 characters.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "encodeBase64URLSafe(byte[] binaryData)",
    "name": "encodeBase64URLSafe",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "binaryData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "binaryData"
        },
        "comment": "binaryData is binary. binary data to encode.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "byte[] containing Base64 characters in their UTF-8 representation.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "encodeBase64URLSafeString(byte[] binaryData)",
    "name": "encodeBase64URLSafeString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "binaryData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "binaryData"
        },
        "comment": "binaryData is binary. binary data to encode.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "String containing Base64 characters.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "encodeBase64Chunked(byte[] binaryData)",
    "name": "encodeBase64Chunked",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "binaryData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "binaryData"
        },
        "comment": "binaryData is binary. binary data to encode.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Base64 characters chunked in 76 character blocks.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "decode(java.lang.Object pObject)",
    "name": "decode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "pObject"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "pObject"
        },
        "comment": "Object to decode.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.codec.DecoderException",
          "name": "DecoderException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameter supplied is not of type byte[].",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "decode(java.lang.String pArray)",
    "name": "decode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pArray"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "pArray"
        },
        "comment": "A String containing Base64 character data.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a byte array containing binary data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "decode(byte[] pArray)",
    "name": "decode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "pArray"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "pArray"
        },
        "comment": "A byte array containing Base64 character data.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a byte array containing binary data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "encodeBase64(byte[] binaryData, boolean isChunked)",
    "name": "encodeBase64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "binaryData"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isChunked"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "binaryData"
        },
        "comment": "Array containing binary data to encode.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "isChunked"
        },
        "comment": "if true this encoder will chunk the base64 output into 76 character blocks.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Base64-encoded data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown when the input array needs an output array bigger than Integer#MAX_VALUE.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)",
    "name": "encodeBase64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "binaryData"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isChunked"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "urlSafe"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "binaryData"
        },
        "comment": "Array containing binary data to encode.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "isChunked"
        },
        "comment": "if true this encoder will chunk the base64 output into 76 character blocks.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "urlSafe"
        },
        "comment": "if true this encoder will emit - and _ instead of the usual + and / characters.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Base64-encoded data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown when the input array needs an output array bigger than Integer#MAX_VALUE.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)",
    "name": "encodeBase64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "binaryData"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isChunked"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "urlSafe"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxResultSize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "binaryData"
        },
        "comment": "Array containing binary data to encode.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "isChunked"
        },
        "comment": "if true this encoder will chunk the base64 output into 76 character blocks.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "urlSafe"
        },
        "comment": "if true this encoder will emit - and _ instead of the usual + and / characters.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxResultSize"
        },
        "comment": "The maximum result size to accept.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Base64-encoded data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown when the input array needs an output array bigger than maxResultSize.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "decodeBase64(java.lang.String base64String)",
    "name": "decodeBase64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "base64String"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "base64String"
        },
        "comment": "String containing Base64 data.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Array containing decoded data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "decodeBase64(byte[] base64Data)",
    "name": "decodeBase64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "base64Data"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "base64Data"
        },
        "comment": "base64Data is Byte. Byte array containing Base64 data.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Array containing decoded data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "discardWhitespace(byte[] data)",
    "name": "discardWhitespace",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "data"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "data"
        },
        "comment": "The base-64 encoded data to discard the whitespace from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The data, less whitespace (see RFC 2045).",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "encode(java.lang.Object pObject)",
    "name": "encode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "pObject"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "pObject"
        },
        "comment": "Object to encode.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "An object (of type byte[]) containing the base64 encoded data which corresponds to the byte[] supplied.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.codec.EncoderException",
          "name": "EncoderException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameter supplied is not of type byte[].",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "encodeToString(byte[] pArray)",
    "name": "encodeToString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "pArray"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "pArray"
        },
        "comment": "pArray is byte. byte array containing binary data.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A String containing only Base64 character data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "encode(byte[] pArray)",
    "name": "encode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "pArray"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "pArray"
        },
        "comment": "pArray is byte. byte array containing binary data.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A byte array containing only Base64 character data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "decodeInteger(byte[] pArray)",
    "name": "decodeInteger",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.math.BigInteger",
      "name": "java.math.BigInteger",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "pArray"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "pArray"
        },
        "comment": "pArray is byte. byte array containing base64 character data.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A BigInteger.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "encodeInteger(java.math.BigInteger bigInt)",
    "name": "encodeInteger",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.math.BigInteger",
          "name": "BigInteger",
          "isArray": false
        },
        "name": "bigInt"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.math.BigInteger",
            "name": "BigInteger",
            "isArray": false
          },
          "name": "bigInt"
        },
        "comment": "a BigInteger.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A byte array containing base64 character data.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "null is passed in.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "toIntegerBytes(java.math.BigInteger bigInt)",
    "name": "toIntegerBytes",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.math.BigInteger",
          "name": "BigInteger",
          "isArray": false
        },
        "name": "bigInt"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.math.BigInteger",
            "name": "BigInteger",
            "isArray": false
          },
          "name": "bigInt"
        },
        "comment": "BigInteger to be converted.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a byte array representation of the BigInteger parameter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]