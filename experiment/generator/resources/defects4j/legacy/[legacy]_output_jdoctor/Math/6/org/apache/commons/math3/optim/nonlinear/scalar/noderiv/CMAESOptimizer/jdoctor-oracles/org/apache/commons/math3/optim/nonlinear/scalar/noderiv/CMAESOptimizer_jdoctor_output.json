[
  {
    "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer(int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, org.apache.commons.math3.random.RandomGenerator random, boolean generateStatistics, org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> checker)",
    "name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
      "name": "CMAESOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxIterations"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "stopFitness"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isActiveCMA"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "diagonalOnly"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "checkFeasableCount"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.random.RandomGenerator",
          "name": "RandomGenerator",
          "isArray": false
        },
        "name": "random"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "generateStatistics"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.optim.ConvergenceChecker",
          "name": "ConvergenceChecker",
          "isArray": false
        },
        "name": "checker"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxIterations"
        },
        "comment": "maxIterations is Maximal. Maximal number of iterations.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "stopFitness"
        },
        "comment": "Whether to stop if objective function value is smaller than stopFitness.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "isActiveCMA"
        },
        "comment": "Chooses the covariance matrix update method.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "diagonalOnly"
        },
        "comment": "Number of initial iterations. diagonalOnly is where the covariance matrix remains diagonal.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "checkFeasableCount"
        },
        "comment": "Determines how often new random objective variables are generated in case they are out of bounds.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.random.RandomGenerator",
            "name": "RandomGenerator",
            "isArray": false
          },
          "name": "random"
        },
        "comment": "Random generator.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "generateStatistics"
        },
        "comment": "generateStatistics is Whether. Whether statistic data is collected.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.optim.ConvergenceChecker",
            "name": "ConvergenceChecker",
            "isArray": false
          },
          "name": "checker"
        },
        "comment": "Convergence checker.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getStatisticsSigmaHistory()",
    "name": "getStatisticsSigmaHistory",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
      "name": "CMAESOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.Double>",
      "name": "java.util.List<java.lang.Double>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "History of sigma values.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getStatisticsMeanHistory()",
    "name": "getStatisticsMeanHistory",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
      "name": "CMAESOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<org.apache.commons.math3.linear.RealMatrix>",
      "name": "java.util.List<org.apache.commons.math3.linear.RealMatrix>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "History of mean matrix.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getStatisticsFitnessHistory()",
    "name": "getStatisticsFitnessHistory",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
      "name": "CMAESOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.Double>",
      "name": "java.util.List<java.lang.Double>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "History of fitness values.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getStatisticsDHistory()",
    "name": "getStatisticsDHistory",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
      "name": "CMAESOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<org.apache.commons.math3.linear.RealMatrix>",
      "name": "java.util.List<org.apache.commons.math3.linear.RealMatrix>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "History of D matrix.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "optimize(org.apache.commons.math3.optim.OptimizationData... optData)",
    "name": "optimize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
      "name": "CMAESOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.optim.PointValuePair",
      "name": "org.apache.commons.math3.optim.PointValuePair",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lorg.apache.commons.math3.optim.OptimizationData;",
          "name": "OptimizationData[]",
          "isArray": true
        },
        "name": "optData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Lorg.apache.commons.math3.optim.OptimizationData;",
            "name": "OptimizationData[]",
            "isArray": true
          },
          "name": "optData"
        },
        "comment": "Optimization data. In addition to those documented in MultivariateOptimizer#parseOptimizationData(OptimizationData[]) MultivariateOptimizer this method will register the following data: Sigma PopulationSize.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "@inheritDoc}.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.TooManyEvaluationsException",
          "name": "TooManyEvaluationsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the maximal number of evaluations is exceeded.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the initial guess target and weight arguments have inconsistent dimensions.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "doOptimize()",
    "name": "doOptimize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
      "name": "CMAESOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.optim.PointValuePair",
      "name": "org.apache.commons.math3.optim.PointValuePair",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "parseOptimizationData(org.apache.commons.math3.optim.OptimizationData... optData)",
    "name": "parseOptimizationData",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
      "name": "CMAESOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lorg.apache.commons.math3.optim.OptimizationData;",
          "name": "OptimizationData[]",
          "isArray": true
        },
        "name": "optData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Lorg.apache.commons.math3.optim.OptimizationData;",
            "name": "OptimizationData[]",
            "isArray": true
          },
          "name": "optData"
        },
        "comment": "Optimization data. The following data . optData is looked for: Sigma PopulationSize.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  }
]