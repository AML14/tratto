/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 19:21:26 GMT 2023
 */
package org.apache.commons.math.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.AbstractLinearOptimizer;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexSolver;
import org.apache.commons.math.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SimplexSolver_ESTest extends SimplexSolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1.0);
        double[] doubleArray0 = new double[9];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1330.0));
        BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1, 1);
        simplexTableau0.tableau = (RealMatrix) blockRealMatrix0;
        boolean boolean0 = simplexSolver0.isOptimal(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[] doubleArray0 = new double[9];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1330.0));
        simplexTableau0.numArtificialVariables = (-1);
        SimplexSolver simplexSolver0 = new SimplexSolver();
        boolean boolean0 = simplexSolver0.isOptimal(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(0.0);
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100);
        simplexTableau0.numArtificialVariables = 2407;
        simplexSolver0.solvePhase1(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1.0);
        double[] doubleArray0 = new double[9];
        doubleArray0[2] = (double) 100;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1330.0));
        simplexTableau0.numArtificialVariables = 100;
        simplexSolver0.doIteration(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1.0);
        double[] doubleArray0 = new double[9];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1330.0));
        BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1, 1);
        simplexTableau0.tableau = (RealMatrix) blockRealMatrix0;
        simplexSolver0.doIteration(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[7];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-472.86906330773));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100.0);
        simplexSolver0.solvePhase1(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1.0E-6);
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double((-5609.2087724));
        doubleArray0[1] = double0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, (double) doubleArray0[1]);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(arrayRealVector0).when(linearConstraint0).getCoefficients();
        doReturn(relationship0, relationship0, relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
        doReturn(1.0E-6, (double) 100).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 562.7235872);
        simplexSolver0.doIteration(simplexTableau0);
        simplexTableau0.getNumVariables();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1.0E-6);
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(294.67815414933716);
        doubleArray0[1] = double0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, (double) doubleArray0[1]);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(arrayRealVector0, (RealVector) null).when(linearConstraint0).getCoefficients();
        doReturn(relationship0, relationship0, relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
        doReturn(1.0E-6, (double) 100, 0.0, 0.0).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MINIMIZE;
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
        simplexSolver0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1.0E-6);
        Double[] doubleArray0 = new Double[21];
        Double double0 = new Double(100);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, (double) doubleArray0[1]);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 1413.958);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
        RealPointValuePair realPointValuePair0 = simplexSolver0.doOptimize();
        realPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver((-15.181877774949651));
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-15.181877774949651));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 100);
        simplexTableau0.numArtificialVariables = 2407;
        simplexSolver0.solvePhase1(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[3] = (-5.25704103262477);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3901.748128813988));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1330.0));
        simplexTableau0.numArtificialVariables = (-1);
        SimplexSolver simplexSolver0 = new SimplexSolver();
        simplexSolver0.setMaxIterations((-1));
        simplexSolver0.solvePhase1(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        simplexSolver0.solvePhase1((SimplexTableau) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        simplexSolver0.isOptimal((SimplexTableau) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        simplexSolver0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1.0E-6);
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double((-5609.2087724));
        doubleArray0[0] = double0;
        Double double1 = new Double(294.67815414933716);
        doubleArray0[1] = double1;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, (double) doubleArray0[1]);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.EQ;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1734), (-1789.0));
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(arrayRealVector0, (RealVector) null).when(linearConstraint0).getCoefficients();
        doReturn(relationship0, relationship0, relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
        doReturn(1.0E-6, (double) 100, 0.0, 0.0).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MINIMIZE;
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
        simplexSolver0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver((-5572.24971804817));
        simplexSolver0.setMaxIterations((-2073));
        simplexSolver0.doIteration((SimplexTableau) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver((-3.6972655904500518));
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(100);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-3.6972655904500518));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 100);
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        simplexTableau0.tableau = (RealMatrix) array2DRowRealMatrix0;
        simplexSolver0.doIteration(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1.0E-6);
        Double[] doubleArray0 = new Double[21];
        Double double0 = new Double(294.67815414933716);
        doubleArray0[1] = double0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, (double) doubleArray0[1]);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        RealPointValuePair realPointValuePair0 = simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
        RealPointValuePair realPointValuePair1 = simplexSolver0.doOptimize();
        realPointValuePair1.equals((Object) realPointValuePair0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = (double) (-2781);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1068.46547325);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2781.0));
        boolean boolean0 = simplexSolver0.isOptimal(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1.0E-6);
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(100);
        doubleArray0[1] = double0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, (double) doubleArray0[1]);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 1.0E-6);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(arrayRealVector0, (RealVector) null).when(linearConstraint0).getCoefficients();
        doReturn(relationship0, relationship0, relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
        doReturn(1.0E-6, (double) 100, 0.0, 0.0).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
        simplexSolver0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver((-3.6972655904500518));
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(100);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-3.6972655904500518));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100);
        simplexTableau0.numArtificialVariables = 100;
        boolean boolean0 = simplexSolver0.isOptimal(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(100);
        doubleArray0[1] = double0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, (double) doubleArray0[1]);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 100);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(arrayRealVector0).when(linearConstraint0).getCoefficients();
        doReturn(relationship0, relationship0, relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
        doReturn(1.0E-6, (double) 100).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
    }
}
