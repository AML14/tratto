/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:50:37 GMT 2023
 */
package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Complex_ESTest extends Complex_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0050() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.divide(1602.95755678);
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex2.ONE.tanh();
        Complex complex4 = complex2.multiply(37);
        Complex.valueOf(328.766847813523);
        complex1.equals((Object) null);
        complex4.INF.hashCode();
        complex1.INF.negate();
        complex4.multiply(0.0);
        Complex complex5 = complex4.sqrt1z();
        Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 37);
        complex3.atan();
        Complex.valueOf(0.0, 0.0);
        complex5.conjugate();
        Complex complex7 = Complex.valueOf(328.766847813523);
        java.util.List default0;
        if ((-2651) <= 0) {
            try {
                default0 = complex7.ZERO.nthRoot((-2651));
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            default0 = complex7.ZERO.nthRoot((-2651));
        }
    }

    @Test(timeout = 4000)
    public void test0251() throws Throwable {
        Complex complex0 = new Complex((-1161.507980828377), 2.0);
        complex0.I.add(0.0);
        org.apache.commons.math3.complex.Complex default1;
        if ((Complex) null == null) {
            try {
                default1 = complex0.pow((Complex) null);
                fail();
            } catch (org.apache.commons.math3.exception.NullArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default1 = complex0.pow((Complex) null);
        }
    }

    @Test(timeout = 4000)
    public void test0302() throws Throwable {
        Complex complex0 = Complex.valueOf((-879.322541214), 0.0);
        complex0.ONE.pow(2969.33717141241);
        org.apache.commons.math3.complex.Complex default2;
        if ((Complex) null == null) {
            try {
                default2 = complex0.add((Complex) null);
                fail();
            } catch (org.apache.commons.math3.exception.NullArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default2 = complex0.add((Complex) null);
        }
    }

    @Test(timeout = 4000)
    public void test0343() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
    }

    @Test(timeout = 4000)
    public void test0344() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
    }

    @Test(timeout = 4000)
    public void test0345() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
        complex0.add(complex5);
        Complex complex12 = complex0.ONE.acos();
        complex5.toString();
        complex5.createComplex(Double.NaN, 5627.840250944935);
        Complex complex13 = Complex.valueOf((-1596.23024));
        complex3.log();
        Complex complex14 = complex13.subtract(complex8);
    }

    @Test(timeout = 4000)
    public void test0346() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
        complex0.add(complex5);
        Complex complex12 = complex0.ONE.acos();
        complex5.toString();
        complex5.createComplex(Double.NaN, 5627.840250944935);
        Complex complex13 = Complex.valueOf((-1596.23024));
        complex3.log();
        Complex complex14 = complex13.subtract(complex8);
        Complex complex15 = complex13.multiply((-61.25461971));
        complex2.createComplex(0.0, (-1506.638287109));
        complex8.multiply(3140);
        Complex complex16 = complex9.reciprocal();
        complex16.getReal();
    }

    @Test(timeout = 4000)
    public void test0347() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
        complex0.add(complex5);
        Complex complex12 = complex0.ONE.acos();
        complex5.toString();
        complex5.createComplex(Double.NaN, 5627.840250944935);
        Complex complex13 = Complex.valueOf((-1596.23024));
        complex3.log();
        Complex complex14 = complex13.subtract(complex8);
        Complex complex15 = complex13.multiply((-61.25461971));
        complex2.createComplex(0.0, (-1506.638287109));
        complex8.multiply(3140);
        Complex complex16 = complex9.reciprocal();
        java.util.List list0;
        if (3140 <= 0) {
            try {
                list0 = complex15.nthRoot(3140);
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            list0 = complex15.nthRoot(3140);
        }
        complex15.getImaginary();
    }

    @Test(timeout = 4000)
    public void test0348() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
        complex0.add(complex5);
        Complex complex12 = complex0.ONE.acos();
        complex5.toString();
        complex5.createComplex(Double.NaN, 5627.840250944935);
        Complex complex13 = Complex.valueOf((-1596.23024));
        complex3.log();
        Complex complex14 = complex13.subtract(complex8);
        Complex complex15 = complex13.multiply((-61.25461971));
        complex2.createComplex(0.0, (-1506.638287109));
        complex8.multiply(3140);
        Complex complex16 = complex9.reciprocal();
        java.util.List list0;
        if (3140 <= 0) {
            try {
                list0 = complex15.nthRoot(3140);
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            list0 = complex15.nthRoot(3140);
        }
        list0.size();
    }

    @Test(timeout = 4000)
    public void test0349() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
        complex0.add(complex5);
        Complex complex12 = complex0.ONE.acos();
        complex5.toString();
        complex5.createComplex(Double.NaN, 5627.840250944935);
        Complex complex13 = Complex.valueOf((-1596.23024));
        complex3.log();
        Complex complex14 = complex13.subtract(complex8);
        Complex complex15 = complex13.multiply((-61.25461971));
        complex2.createComplex(0.0, (-1506.638287109));
        complex8.multiply(3140);
        Complex complex16 = complex9.reciprocal();
        java.util.List list0;
        if (3140 <= 0) {
            try {
                list0 = complex15.nthRoot(3140);
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            list0 = complex15.nthRoot(3140);
        }
        Complex complex17 = Complex.valueOf(Double.NaN);
    }

    @Test(timeout = 4000)
    public void test03410() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
        complex0.add(complex5);
        Complex complex12 = complex0.ONE.acos();
        complex5.toString();
        complex5.createComplex(Double.NaN, 5627.840250944935);
        Complex complex13 = Complex.valueOf((-1596.23024));
        complex3.log();
        Complex complex14 = complex13.subtract(complex8);
        Complex complex15 = complex13.multiply((-61.25461971));
        complex2.createComplex(0.0, (-1506.638287109));
        complex8.multiply(3140);
        Complex complex16 = complex9.reciprocal();
        java.util.List list0;
        if (3140 <= 0) {
            try {
                list0 = complex15.nthRoot(3140);
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            list0 = complex15.nthRoot(3140);
        }
        Complex complex17 = Complex.valueOf(Double.NaN);
        complex12.pow(complex8);
    }

    @Test(timeout = 4000)
    public void test03411() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
        complex0.add(complex5);
        Complex complex12 = complex0.ONE.acos();
        complex5.toString();
        complex5.createComplex(Double.NaN, 5627.840250944935);
        Complex complex13 = Complex.valueOf((-1596.23024));
        complex3.log();
        Complex complex14 = complex13.subtract(complex8);
        Complex complex15 = complex13.multiply((-61.25461971));
        complex2.createComplex(0.0, (-1506.638287109));
        complex8.multiply(3140);
        Complex complex16 = complex9.reciprocal();
        java.util.List list0;
        if (3140 <= 0) {
            try {
                list0 = complex15.nthRoot(3140);
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            list0 = complex15.nthRoot(3140);
        }
        Complex complex17 = Complex.valueOf(Double.NaN);
        complex12.pow(complex8);
        complex8.getReal();
    }

    @Test(timeout = 4000)
    public void test03412() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
        complex0.add(complex5);
        Complex complex12 = complex0.ONE.acos();
        complex5.toString();
        complex5.createComplex(Double.NaN, 5627.840250944935);
        Complex complex13 = Complex.valueOf((-1596.23024));
        complex3.log();
        Complex complex14 = complex13.subtract(complex8);
        Complex complex15 = complex13.multiply((-61.25461971));
        complex2.createComplex(0.0, (-1506.638287109));
        complex8.multiply(3140);
        Complex complex16 = complex9.reciprocal();
        java.util.List list0;
        if (3140 <= 0) {
            try {
                list0 = complex15.nthRoot(3140);
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            list0 = complex15.nthRoot(3140);
        }
        Complex complex17 = Complex.valueOf(Double.NaN);
        complex12.pow(complex8);
        complex12.getReal();
    }

    @Test(timeout = 4000)
    public void test03413() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.NaN.atan();
        Complex complex2 = complex0.subtract(0.0);
        Complex complex3 = complex2.ZERO.divide(complex1);
        Complex complex4 = complex0.log();
        Complex complex5 = complex4.INF.subtract(complex1);
        complex3.NaN.cos();
        double double0 = complex4.ZERO.abs();
        Complex complex6 = complex0.sqrt1z();
        Complex complex7 = complex4.ONE.asin();
        Complex complex8 = complex7.tan();
        complex7.ZERO.negate();
        Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
        Complex complex10 = complex9.INF.pow(complex6);
        Complex complex11 = complex9.NaN.acos();
        complex4.INF.toString();
        double double1 = complex0.abs();
        complex0.add(complex5);
        Complex complex12 = complex0.ONE.acos();
        complex5.toString();
        complex5.createComplex(Double.NaN, 5627.840250944935);
        Complex complex13 = Complex.valueOf((-1596.23024));
        complex3.log();
        Complex complex14 = complex13.subtract(complex8);
        Complex complex15 = complex13.multiply((-61.25461971));
        complex2.createComplex(0.0, (-1506.638287109));
        complex8.multiply(3140);
        Complex complex16 = complex9.reciprocal();
        java.util.List list0;
        if (3140 <= 0) {
            try {
                list0 = complex15.nthRoot(3140);
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            list0 = complex15.nthRoot(3140);
        }
        Complex complex17 = Complex.valueOf(Double.NaN);
        complex12.pow(complex8);
        complex12.equals((Object) complex16);
    }

    @Test(timeout = 4000)
    public void test04514() throws Throwable {
        Complex complex0 = Complex.NaN;
        complex0.cos();
        Complex complex1 = complex0.ONE.acos();
        java.util.List default3;
        if (0 <= 0) {
            try {
                default3 = complex1.INF.nthRoot(0);
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            default3 = complex1.INF.nthRoot(0);
        }
    }

    @Test(timeout = 4000)
    public void test04715() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = Complex.ONE;
        Complex complex2 = complex1.ZERO.pow(complex0);
        complex2.tan();
        Complex complex3 = complex0.subtract(complex1);
        org.apache.commons.math3.complex.Complex default4;
        if ((Complex) null == null) {
            try {
                default4 = complex3.multiply((Complex) null);
                fail();
            } catch (org.apache.commons.math3.exception.NullArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default4 = complex3.multiply((Complex) null);
        }
    }

    @Test(timeout = 4000)
    public void test05116() throws Throwable {
        Complex complex0 = Complex.ZERO;
        complex0.ONE.getField();
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.ONE.asin();
        Complex complex3 = complex1.NaN.acos();
        complex1.INF.abs();
        complex0.ZERO.divide(Double.POSITIVE_INFINITY);
        complex1.tan();
        Complex complex4 = complex1.ZERO.pow(complex0);
        Complex complex5 = complex4.INF.pow(complex3);
        complex5.INF.tanh();
        Complex complex6 = complex1.INF.atan();
        complex2.NaN.abs();
        Complex.valueOf(0.0);
        Complex complex7 = complex2.multiply(728);
        Complex complex8 = complex1.pow(complex0);
        complex7.pow((-2978.708));
        complex1.isInfinite();
        complex8.getReal();
        org.apache.commons.math3.complex.Complex default5;
        if ((Complex) null == null) {
            try {
                default5 = complex6.subtract((Complex) null);
                fail();
            } catch (org.apache.commons.math3.exception.NullArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default5 = complex6.subtract((Complex) null);
        }
    }

    @Test(timeout = 4000)
    public void test08717() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.NaN.cos();
        Complex complex3 = complex1.atan();
        complex3.ONE.conjugate();
        complex1.NaN.toString();
        Complex complex4 = complex0.createComplex(0.0, 0.0);
        complex4.NaN.abs();
        complex0.NaN.abs();
        complex0.INF.createComplex(0.0, 0.0);
        complex4.readResolve();
        complex1.ONE.sqrt();
        Complex complex5 = complex0.tan();
        complex5.I.atan();
        complex5.multiply(complex2);
        complex1.NaN.toString();
        java.util.List default6;
        if ((-3728) <= 0) {
            try {
                default6 = complex0.nthRoot((-3728));
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            default6 = complex0.nthRoot((-3728));
        }
    }

    @Test(timeout = 4000)
    public void test08818() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.NaN.conjugate();
        double double0 = 1.8356062677502141E202;
        complex0.ZERO.add(1.8356062677502141E202);
        complex1.toString();
        Complex complex2 = complex0.NaN.reciprocal();
        org.apache.commons.math3.complex.Complex default7;
        if ((Complex) null == null) {
            try {
                default7 = complex2.NaN.divide((Complex) null);
                fail();
            } catch (org.apache.commons.math3.exception.NullArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default7 = complex2.NaN.divide((Complex) null);
        }
    }

    @Test(timeout = 4000)
    public void test09119() throws Throwable {
        Complex complex0 = new Complex(0.0);
        java.util.List default8;
        if ((-1798) <= 0) {
            try {
                default8 = complex0.nthRoot((-1798));
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            default8 = complex0.nthRoot((-1798));
        }
    }

    @Test(timeout = 4000)
    public void test10220() throws Throwable {
        Complex complex0 = Complex.ONE;
        complex0.negate();
        complex0.NaN.hashCode();
        complex0.ONE.cosh();
        complex0.ZERO.tan();
        Complex complex1 = complex0.NaN.cos();
        complex1.INF.hashCode();
        java.util.List default9;
        if ((-867) <= 0) {
            try {
                default9 = complex0.nthRoot((-867));
                fail();
            } catch (org.apache.commons.math3.exception.NotPositiveException e) {
                // Successfully thrown exception
            }
        } else {
            default9 = complex0.nthRoot((-867));
        }
    }
}
