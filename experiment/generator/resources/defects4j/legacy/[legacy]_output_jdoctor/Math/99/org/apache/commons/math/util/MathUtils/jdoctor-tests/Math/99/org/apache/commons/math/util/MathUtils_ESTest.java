/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 21:36:04 GMT 2023
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        float float0 = MathUtils.round(Float.NaN, 0, (int) (byte) 1);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        double double0 = MathUtils.scalb((-1.0), (-2590));
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        double double0 = MathUtils.nextAfter(4.9E-324, 4.9E-324);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        double double0 = MathUtils.nextAfter(0, 0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        int int0 = MathUtils.lcm(471, 471);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        short short0;
        short0 = MathUtils.indicator((short) 31);
        assertTrue(true ? (short0 == (short) 31 || short0 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        long long0;
        long0 = MathUtils.indicator(0L);
        assertTrue(true ? long0 == 0L : true);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        int int0 = MathUtils.indicator(4036);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        double double0 = MathUtils.indicator((double) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        byte byte0;
        byte0 = MathUtils.indicator((byte) 98);
        assertTrue(true ? byte0 == (byte) 98 : true);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        int int0 = MathUtils.gcd(0, (-1));
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        double double0;
        if (21 < 0) {
            try {
                double0 = MathUtils.factorialDouble(21);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            double0 = MathUtils.factorialDouble(21);
        }
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        double double0 = MathUtils.factorialDouble((byte) 0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        long long0;
        if (20 < 0) {
            try {
                long0 = MathUtils.factorial(20);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.factorial(20);
        }
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test01418() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01419() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test01420() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test01421() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test01422() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test01423() throws Throwable {
        double[] doubleArray0 = new double[10];
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test01524() throws Throwable {
        boolean boolean0 = MathUtils.equals(0.5, (-4.9E-324), 16.0);
    }

    @Test(timeout = 4000)
    public void test01625() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) 0, (double) 1, 1.0);
    }

    @Test(timeout = 4000)
    public void test01726() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(67, (-2573));
    }

    @Test(timeout = 4000)
    public void test01827() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(0, 0);
    }

    @Test(timeout = 4000)
    public void test01928() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(37, 19);
    }

    @Test(timeout = 4000)
    public void test02029() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(0, 0);
    }

    @Test(timeout = 4000)
    public void test02130() throws Throwable {
        long long0;
        long0 = MathUtils.subAndCheck(0L, 2432902008176640000L);
        assertTrue(true ? long0 == 0L - 2432902008176640000L : true);
    }

    @Test(timeout = 4000)
    public void test02231() throws Throwable {
        long long0;
        long0 = MathUtils.subAndCheck(0L, (-2632L));
        assertTrue(true ? long0 == 0L - (-2632L) : true);
    }

    @Test(timeout = 4000)
    public void test02332() throws Throwable {
        long long0;
        long0 = MathUtils.subAndCheck((long) 471, 758L);
        assertTrue(true ? long0 == (long) 471 - 758L : true);
    }

    @Test(timeout = 4000)
    public void test02433() throws Throwable {
        int int0;
        int0 = MathUtils.subAndCheck(0, 0);
        assertTrue(true ? int0 == 0 - 0 : true);
    }

    @Test(timeout = 4000)
    public void test02534() throws Throwable {
        int int0;
        int0 = MathUtils.subAndCheck(298, 0);
        assertTrue(true ? int0 == 298 - 0 : true);
    }

    @Test(timeout = 4000)
    public void test02635() throws Throwable {
        double double0 = MathUtils.sinh(1.0);
    }

    @Test(timeout = 4000)
    public void test02736() throws Throwable {
        double double0 = MathUtils.sinh((-3341.17189361));
    }

    @Test(timeout = 4000)
    public void test02837() throws Throwable {
        float float0 = MathUtils.round((-3058.408F), 5, 5);
    }

    @Test(timeout = 4000)
    public void test02938() throws Throwable {
        float float0 = MathUtils.round((-3058.408F), 1);
    }

    @Test(timeout = 4000)
    public void test03039() throws Throwable {
        double double0 = MathUtils.round(0.0, 1, (int) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test03140() throws Throwable {
        double double0 = MathUtils.round(1772.907094093, 31, 5);
    }

    @Test(timeout = 4000)
    public void test03241() throws Throwable {
        double double0 = MathUtils.round(0.0, 67);
    }

    @Test(timeout = 4000)
    public void test03342() throws Throwable {
        double double0 = MathUtils.round((-1780.47166578776), (int) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test03443() throws Throwable {
        double double0 = MathUtils.normalizeAngle(0.0, (byte) 1);
    }

    @Test(timeout = 4000)
    public void test03544() throws Throwable {
        double double0 = MathUtils.normalizeAngle((short) 1, 1511);
    }

    @Test(timeout = 4000)
    public void test03645() throws Throwable {
        double double0 = MathUtils.nextAfter((-4.9E-324), 1375.0);
    }

    @Test(timeout = 4000)
    public void test03746() throws Throwable {
        int int0;
        int0 = MathUtils.mulAndCheck(0, (-1656));
        assertTrue(true ? int0 == 0 * (-1656) : true);
    }

    @Test(timeout = 4000)
    public void test03847() throws Throwable {
        int int0;
        int0 = MathUtils.mulAndCheck((int) (short) 10, 20);
        assertTrue(true ? int0 == (int) (short) 10 * 20 : true);
    }

    @Test(timeout = 4000)
    public void test03948() throws Throwable {
        double double0 = MathUtils.log(0.0, 758L);
    }

    @Test(timeout = 4000)
    public void test04049() throws Throwable {
        double double0 = MathUtils.log(39916800L, 1183.3316670651523);
    }

    @Test(timeout = 4000)
    public void test04150() throws Throwable {
        double double0 = MathUtils.log(1L, 0.0);
    }

    @Test(timeout = 4000)
    public void test04251() throws Throwable {
        int int0 = MathUtils.hash((double[]) null);
    }

    @Test(timeout = 4000)
    public void test04352() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 963.140565;
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test04353() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 963.140565;
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test04354() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 963.140565;
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test04455() throws Throwable {
        int int0 = MathUtils.hash(0.0);
    }

    @Test(timeout = 4000)
    public void test04556() throws Throwable {
        int int0 = MathUtils.hash((-1534.27614016));
    }

    @Test(timeout = 4000)
    public void test04657() throws Throwable {
        double double0 = MathUtils.cosh(0);
    }

    @Test(timeout = 4000)
    public void test04758() throws Throwable {
        long long0;
        long0 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? long0 == 0L + 0L : true);
    }

    @Test(timeout = 4000)
    public void test04859() throws Throwable {
        int int0;
        int0 = MathUtils.addAndCheck(0, 0);
        assertTrue(true ? int0 == 0 + 0 : true);
    }

    @Test(timeout = 4000)
    public void test04960() throws Throwable {
        int int0;
        int0 = MathUtils.addAndCheck(964, (-1774));
        assertTrue(true ? int0 == 964 + (-1774) : true);
    }

    @Test(timeout = 4000)
    public void test05061() throws Throwable {
        MathUtils.round((double) 21, 0, 1072);
    }

    @Test(timeout = 4000)
    public void test05162() throws Throwable {
        MathUtils.round((-1881.0), (-2144658010), 1);
    }

    @Test(timeout = 4000)
    public void test05263() throws Throwable {
        MathUtils.lcm((-277), (-1074790400));
    }

    @Test(timeout = 4000)
    public void test05464() throws Throwable {
        double double0 = MathUtils.nextAfter(0, (-1032.258982));
    }

    @Test(timeout = 4000)
    public void test05565() throws Throwable {
        double double0 = MathUtils.nextAfter(0L, 10.0);
    }

    @Test(timeout = 4000)
    public void test05666() throws Throwable {
        double double0 = MathUtils.nextAfter(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test05767() throws Throwable {
        double double0 = MathUtils.nextAfter(Double.NaN, 0.0);
    }

    @Test(timeout = 4000)
    public void test05868() throws Throwable {
        long default0;
        default0 = MathUtils.mulAndCheck(6402373705728000L, 6402373705728000L);
        assertTrue(true ? default0 == 6402373705728000L * 6402373705728000L : true);
    }

    @Test(timeout = 4000)
    public void test05969() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((long) (short) 1, (long) (byte) 1);
        assertTrue(true ? long0 == (long) (short) 1 * (long) (byte) 1 : true);
    }

    @Test(timeout = 4000)
    public void test06070() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((-1133L), (-1133L));
        assertTrue(true ? long0 == (-1133L) * (-1133L) : true);
    }

    @Test(timeout = 4000)
    public void test06171() throws Throwable {
        int int0;
        int0 = MathUtils.mulAndCheck(1, (-654));
        assertTrue(true ? int0 == 1 * (-654) : true);
    }

    @Test(timeout = 4000)
    public void test06272() throws Throwable {
        float float0 = MathUtils.indicator((-1247.0F));
    }

    @Test(timeout = 4000)
    public void test06373() throws Throwable {
        float float0 = MathUtils.indicator(26.5108F);
    }

    @Test(timeout = 4000)
    public void test06474() throws Throwable {
        int int0 = MathUtils.gcd(5, 31);
    }

    @Test(timeout = 4000)
    public void test06575() throws Throwable {
        int int0 = MathUtils.gcd((-3914), (-3914));
    }

    @Test(timeout = 4000)
    public void test06676() throws Throwable {
        double double0 = MathUtils.factorialLog(899);
    }

    @Test(timeout = 4000)
    public void test06777() throws Throwable {
        boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN);
    }

    @Test(timeout = 4000)
    public void test06878() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) 0, (double) 0);
    }

    @Test(timeout = 4000)
    public void test06979() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1810, 16);
    }

    @Test(timeout = 4000)
    public void test07080() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(435, 17);
    }

    @Test(timeout = 4000)
    public void test07181() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(1, (-1259));
    }

    @Test(timeout = 4000)
    public void test07282() throws Throwable {
        int int0;
        int0 = MathUtils.subAndCheck(5, 31);
        assertTrue(true ? int0 == 5 - 31 : true);
    }

    @Test(timeout = 4000)
    public void test07383() throws Throwable {
        int default1;
        default1 = MathUtils.subAndCheck((-1105), 2147483643);
        assertTrue(true ? default1 == (-1105) - 2147483643 : true);
    }

    @Test(timeout = 4000)
    public void test07484() throws Throwable {
        short short0 = MathUtils.sign((short) (-1));
    }

    @Test(timeout = 4000)
    public void test07585() throws Throwable {
        short short0 = MathUtils.sign((short) 0);
    }

    @Test(timeout = 4000)
    public void test07686() throws Throwable {
        short short0 = MathUtils.sign((short) 705);
    }

    @Test(timeout = 4000)
    public void test07787() throws Throwable {
        long long0 = MathUtils.sign((-2147483648L));
    }

    @Test(timeout = 4000)
    public void test07888() throws Throwable {
        long long0 = MathUtils.sign((long) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test07989() throws Throwable {
        long long0 = MathUtils.sign((long) (byte) 1);
    }

    @Test(timeout = 4000)
    public void test08090() throws Throwable {
        int int0 = MathUtils.sign((-2671));
    }

    @Test(timeout = 4000)
    public void test08191() throws Throwable {
        int int0 = MathUtils.sign(0);
    }

    @Test(timeout = 4000)
    public void test08292() throws Throwable {
        int int0 = MathUtils.sign(4402);
    }

    @Test(timeout = 4000)
    public void test08393() throws Throwable {
        float float0 = MathUtils.sign(1474.0F);
    }

    @Test(timeout = 4000)
    public void test08494() throws Throwable {
        float float0 = MathUtils.sign(0.0F);
    }

    @Test(timeout = 4000)
    public void test08595() throws Throwable {
        float float0 = MathUtils.sign(Float.NaN);
    }

    @Test(timeout = 4000)
    public void test08696() throws Throwable {
        float float0 = MathUtils.sign((-3141.9634F));
    }

    @Test(timeout = 4000)
    public void test08797() throws Throwable {
        double double0 = MathUtils.sign((-630.973542217));
    }

    @Test(timeout = 4000)
    public void test08898() throws Throwable {
        double double0 = MathUtils.sign(0.0);
    }

    @Test(timeout = 4000)
    public void test08999() throws Throwable {
        double double0 = MathUtils.sign(Double.NaN);
    }

    @Test(timeout = 4000)
    public void test090100() throws Throwable {
        double double0 = MathUtils.sign(69.6366507738);
    }

    @Test(timeout = 4000)
    public void test091101() throws Throwable {
        byte byte0;
        byte0 = MathUtils.sign((byte) (-96));
        assertTrue(true ? byte0 == (byte) (-96) : true);
    }

    @Test(timeout = 4000)
    public void test092102() throws Throwable {
        byte byte0;
        byte0 = MathUtils.sign((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test093103() throws Throwable {
        byte byte0;
        byte0 = MathUtils.sign((byte) 17);
        assertTrue(true ? byte0 == (byte) 17 : true);
    }

    @Test(timeout = 4000)
    public void test094104() throws Throwable {
        float float0 = MathUtils.round(1317.8057F, (int) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test095105() throws Throwable {
        MathUtils.round((-1245.479F), (-885), 5319);
    }

    @Test(timeout = 4000)
    public void test096106() throws Throwable {
        float float0 = MathUtils.round((float) (byte) 1, (-2101), 2);
    }

    @Test(timeout = 4000)
    public void test097107() throws Throwable {
        float float0 = MathUtils.round(1398.7898F, 0, 0);
    }

    @Test(timeout = 4000)
    public void test098108() throws Throwable {
        double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, (-608), (-1377));
    }

    @Test(timeout = 4000)
    public void test099109() throws Throwable {
        double double0 = MathUtils.round(Double.NaN, 684, 0);
    }

    @Test(timeout = 4000)
    public void test100110() throws Throwable {
        double double0 = MathUtils.scalb(Double.NEGATIVE_INFINITY, 887);
    }

    @Test(timeout = 4000)
    public void test101111() throws Throwable {
        double double0 = MathUtils.scalb(Double.NaN, (-2087));
    }

    @Test(timeout = 4000)
    public void test102112() throws Throwable {
        double double0 = MathUtils.scalb(1714.3074792154, 1);
    }

    @Test(timeout = 4000)
    public void test103113() throws Throwable {
        double double0 = MathUtils.scalb(0, 2973);
    }

    @Test(timeout = 4000)
    public void test104114() throws Throwable {
        double double0 = MathUtils.nextAfter(1.0, (-201.6));
    }

    @Test(timeout = 4000)
    public void test105115() throws Throwable {
        float float0 = MathUtils.round((float) (byte) 0, 0, 5);
    }

    @Test(timeout = 4000)
    public void test106116() throws Throwable {
        float float0 = MathUtils.round(1474.0F, 3637, 5);
    }

    @Test(timeout = 4000)
    public void test107117() throws Throwable {
        float float0 = MathUtils.round(0.0F, 0);
    }

    @Test(timeout = 4000)
    public void test108118() throws Throwable {
        MathUtils.binomialCoefficient(2855, 205);
    }

    @Test(timeout = 4000)
    public void test109119() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
        assertTrue(true ? long0 == (long) 0 * (long) 0 : true);
    }

    @Test(timeout = 4000)
    public void test110120() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((-2174L), 0L);
        assertTrue(true ? long0 == (-2174L) * 0L : true);
    }

    @Test(timeout = 4000)
    public void test111121() throws Throwable {
        long default2;
        default2 = MathUtils.mulAndCheck((-9218868437227405313L), (-465L));
        assertTrue(true ? default2 == (-9218868437227405313L) * (-465L) : true);
    }

    @Test(timeout = 4000)
    public void test112122() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((-1L), (-785L));
        assertTrue(true ? long0 == (-1L) * (-785L) : true);
    }

    @Test(timeout = 4000)
    public void test113123() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((-2403L), 1301L);
        assertTrue(true ? long0 == (-2403L) * 1301L : true);
    }

    @Test(timeout = 4000)
    public void test114124() throws Throwable {
        int default3;
        default3 = MathUtils.mulAndCheck(1259, 2134043785);
        assertTrue(true ? default3 == 1259 * 2134043785 : true);
    }

    @Test(timeout = 4000)
    public void test115125() throws Throwable {
        int default4;
        default4 = MathUtils.mulAndCheck(2092419964, (-1429));
        assertTrue(true ? default4 == 2092419964 * (-1429) : true);
    }

    @Test(timeout = 4000)
    public void test116126() throws Throwable {
        int int0 = MathUtils.lcm(15, 0);
    }

    @Test(timeout = 4000)
    public void test117127() throws Throwable {
        int int0 = MathUtils.lcm(0, 0);
    }

    @Test(timeout = 4000)
    public void test118128() throws Throwable {
        short short0;
        short0 = MathUtils.indicator((short) 0);
        assertTrue(true ? (short0 == (short) 0 || short0 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test119129() throws Throwable {
        short short0;
        short0 = MathUtils.indicator((short) (-1));
        assertTrue(true ? (short0 == (short) (-1) || short0 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test120130() throws Throwable {
        long long0;
        long0 = MathUtils.indicator(1L);
        assertTrue(true ? long0 == 1L : true);
    }

    @Test(timeout = 4000)
    public void test121131() throws Throwable {
        long long0;
        long0 = MathUtils.indicator((-1L));
        assertTrue(true ? long0 == (-1L) : true);
    }

    @Test(timeout = 4000)
    public void test122132() throws Throwable {
        int int0 = MathUtils.indicator(0);
    }

    @Test(timeout = 4000)
    public void test123133() throws Throwable {
        int int0 = MathUtils.indicator((-880));
    }

    @Test(timeout = 4000)
    public void test124134() throws Throwable {
        float float0 = MathUtils.round((float) (short) (-1), (-3852), 7);
    }

    @Test(timeout = 4000)
    public void test125135() throws Throwable {
        float float0 = MathUtils.indicator(Float.NaN);
    }

    @Test(timeout = 4000)
    public void test126136() throws Throwable {
        double double0 = MathUtils.indicator((double) (-1.0F));
    }

    @Test(timeout = 4000)
    public void test127137() throws Throwable {
        double double0 = MathUtils.indicator(Double.NaN);
    }

    @Test(timeout = 4000)
    public void test128138() throws Throwable {
        double double0 = MathUtils.indicator(4.9E-324);
    }

    @Test(timeout = 4000)
    public void test129139() throws Throwable {
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test130140() throws Throwable {
        byte byte0;
        byte0 = MathUtils.indicator((byte) (-101));
        assertTrue(true ? byte0 == (byte) (-101) : true);
    }

    @Test(timeout = 4000)
    public void test131141() throws Throwable {
        int int0 = MathUtils.gcd(272, (-2049));
    }

    @Test(timeout = 4000)
    public void test132142() throws Throwable {
        int int0 = MathUtils.gcd(6, (byte) 0);
    }

    @Test(timeout = 4000)
    public void test133143() throws Throwable {
        int int0 = MathUtils.gcd(0, 0);
    }

    @Test(timeout = 4000)
    public void test134144() throws Throwable {
        double double0 = MathUtils.factorialLog(0);
    }

    @Test(timeout = 4000)
    public void test135145() throws Throwable {
        MathUtils.factorialLog((-2146904029));
    }

    @Test(timeout = 4000)
    public void test136146() throws Throwable {
        double default5;
        if ((-1253) < 0) {
            try {
                default5 = MathUtils.factorialDouble((-1253));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default5 = MathUtils.factorialDouble((-1253));
        }
    }

    @Test(timeout = 4000)
    public void test137147() throws Throwable {
        double double0;
        if (668 < 0) {
            try {
                double0 = MathUtils.factorialDouble(668);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            double0 = MathUtils.factorialDouble(668);
        }
    }

    @Test(timeout = 4000)
    public void test138148() throws Throwable {
        long default6;
        if (2649 < 0) {
            try {
                default6 = MathUtils.factorial(2649);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default6 = MathUtils.factorial(2649);
        }
    }

    @Test(timeout = 4000)
    public void test139149() throws Throwable {
        long default7;
        if ((-4128) < 0) {
            try {
                default7 = MathUtils.factorial((-4128));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default7 = MathUtils.factorial((-4128));
        }
    }

    @Test(timeout = 4000)
    public void test140150() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 3675.144998324021;
        double[] doubleArray1 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test141151() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test142152() throws Throwable {
        boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test143153() throws Throwable {
        double[] doubleArray0 = new double[4];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test144154() throws Throwable {
        double[] doubleArray0 = new double[4];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test145155() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) 0, (double) (-1), 1.0);
    }

    @Test(timeout = 4000)
    public void test146156() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) (-34), 1918.67918793, 1.3164036458569648E64);
    }

    @Test(timeout = 4000)
    public void test147157() throws Throwable {
        boolean boolean0 = MathUtils.equals(2753.5, 0.0, 1676.0);
    }

    @Test(timeout = 4000)
    public void test148158() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) (short) 1, (double) (short) 14, (-4.9E-324));
    }

    @Test(timeout = 4000)
    public void test149159() throws Throwable {
        boolean boolean0 = MathUtils.equals(1.0, (double) 1L, (double) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test150160() throws Throwable {
        boolean boolean0 = MathUtils.equals(Double.NaN, (-3526.0));
    }

    @Test(timeout = 4000)
    public void test151161() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = (double) Float.NaN;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test152162() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(347, 272);
    }

    @Test(timeout = 4000)
    public void test153163() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1030, 964);
    }

    @Test(timeout = 4000)
    public void test154164() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(0, (-1));
    }

    @Test(timeout = 4000)
    public void test155165() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog((byte) 17, (byte) 1);
    }

    @Test(timeout = 4000)
    public void test156166() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog((short) 705, 0);
    }

    @Test(timeout = 4000)
    public void test157167() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(0, (short) 0);
    }

    @Test(timeout = 4000)
    public void test158168() throws Throwable {
        MathUtils.binomialCoefficientLog((byte) (-1), (byte) (-1));
    }

    @Test(timeout = 4000)
    public void test159169() throws Throwable {
        MathUtils.binomialCoefficientLog((-3349), 2860);
    }

    @Test(timeout = 4000)
    public void test160170() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(1265, 719);
    }

    @Test(timeout = 4000)
    public void test161171() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(668, 1);
    }

    @Test(timeout = 4000)
    public void test162172() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(787, 0);
    }

    @Test(timeout = 4000)
    public void test163173() throws Throwable {
        MathUtils.binomialCoefficientDouble((-1403), (-1403));
    }

    @Test(timeout = 4000)
    public void test164174() throws Throwable {
        MathUtils.binomialCoefficientDouble(0, 14);
    }

    @Test(timeout = 4000)
    public void test165175() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble((short) 62, 27);
    }

    @Test(timeout = 4000)
    public void test166176() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(381, 9);
    }

    @Test(timeout = 4000)
    public void test167177() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(19, 13);
    }

    @Test(timeout = 4000)
    public void test168178() throws Throwable {
        long long0 = MathUtils.binomialCoefficient((short) 14, 13);
    }

    @Test(timeout = 4000)
    public void test169179() throws Throwable {
        long long0 = MathUtils.binomialCoefficient((byte) 5, (byte) 1);
    }

    @Test(timeout = 4000)
    public void test170180() throws Throwable {
        MathUtils.binomialCoefficient((-1513), (-2087));
    }

    @Test(timeout = 4000)
    public void test171181() throws Throwable {
        MathUtils.binomialCoefficient((-1774), 933);
    }

    @Test(timeout = 4000)
    public void test172182() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(3197, 0);
    }

    @Test(timeout = 4000)
    public void test173183() throws Throwable {
        long long0;
        long0 = MathUtils.subAndCheck((long) 19, (long) 19);
        assertTrue(true ? long0 == (long) 19 - (long) 19 : true);
    }

    @Test(timeout = 4000)
    public void test174184() throws Throwable {
        long long0;
        long0 = MathUtils.addAndCheck((long) 721, (long) 1);
        assertTrue(true ? long0 == (long) 721 + (long) 1 : true);
    }

    @Test(timeout = 4000)
    public void test175185() throws Throwable {
        MathUtils.addAndCheck(Integer.MAX_VALUE, (int) (short) 1);
    }

    @Test(timeout = 4000)
    public void test176186() throws Throwable {
        int int0;
        int0 = MathUtils.addAndCheck(0, 1);
        assertTrue(true ? int0 == 0 + 1 : true);
    }

    @Test(timeout = 4000)
    public void test177187() throws Throwable {
        int default8;
        default8 = MathUtils.addAndCheck((-2147483646), (-2147483646));
        assertTrue(true ? default8 == (-2147483646) + (-2147483646) : true);
    }

    @Test(timeout = 4000)
    public void test178188() throws Throwable {
        double double0 = MathUtils.round(1772.907094093, 721);
    }

    @Test(timeout = 4000)
    public void test179189() throws Throwable {
        double double0;
        double0 = MathUtils.normalizeAngle((-5636.940604490026), 4.9E-324);
        assertTrue(true ? double0 == (-5636.940604490026) - (-5636.940604490026) : true);
    }

    @Test(timeout = 4000)
    public void test180190() throws Throwable {
        double double0 = MathUtils.sinh(0.0);
    }

    @Test(timeout = 4000)
    public void test181191() throws Throwable {
        long long0;
        long0 = MathUtils.addAndCheck((-2147483648L), (-1L));
        assertTrue(true ? long0 == (-2147483648L) + (-1L) : true);
    }

    @Test(timeout = 4000)
    public void test182192() throws Throwable {
        double[] doubleArray0 = new double[5];
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test183193() throws Throwable {
        int int0 = MathUtils.hash((-2139.93606027));
    }
}
