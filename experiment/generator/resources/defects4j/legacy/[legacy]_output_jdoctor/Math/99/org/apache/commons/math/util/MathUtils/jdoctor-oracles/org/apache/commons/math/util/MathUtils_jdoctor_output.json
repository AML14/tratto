[
  {
    "signature": "addAndCheck(int x, int y)",
    "name": "addAndCheck",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "an addend.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "an addend.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the sum x+y.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[0]+args[1]"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result can not be represented as an int.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "addAndCheck(long a, long b)",
    "name": "addAndCheck",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "an addend.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "an addend.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the sum a+b.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[0]+args[1]"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result can not be represented as an long.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "binomialCoefficient(int n, int k)",
    "name": "binomialCoefficient",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "the size of the set.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "k"
        },
        "comment": "the size of the subsets to be counted.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "n choose k.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "preconditions are not met.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result is too large to be represented by a long integer.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "binomialCoefficientDouble(int n, int k)",
    "name": "binomialCoefficientDouble",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "the size of the set.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "k"
        },
        "comment": "the size of the subsets to be counted.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "n choose k.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "preconditions are not met.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "binomialCoefficientLog(int n, int k)",
    "name": "binomialCoefficientLog",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "the size of the set.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "k"
        },
        "comment": "the size of the subsets to be counted.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "n choose k.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "preconditions are not met.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "cosh(double x)",
    "name": "cosh",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "x is double. double value for which to find the hyperbolic cosine.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "hyperbolic cosine of x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equals(double x, double y)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "x is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "y is second. second value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are equal or both are NaN.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equals(double x, double y, double eps)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "eps"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "x is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "y is second. second value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "eps"
        },
        "comment": "the amount of absolute error to allow.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are equal or within range of each other.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equals(double[] x, double[] y)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "x"
        },
        "comment": "x is first. first array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "y"
        },
        "comment": "y is second. second array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are both null or have same dimension and equal elements.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "factorial(int n)",
    "name": "factorial",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "argument.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "n!.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result is too large to be represented by a long integer.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "n < 0.",
        "kind": "THROWS",
        "condition": "args[0]<0"
      }
    ]
  },
  {
    "signature": "factorialDouble(int n)",
    "name": "factorialDouble",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "argument.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "n!.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "n < 0.",
        "kind": "THROWS",
        "condition": "args[0]<0"
      }
    ]
  },
  {
    "signature": "factorialLog(int n)",
    "name": "factorialLog",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "argument.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "n!.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "preconditions are not met.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "gcd(int p, int q)",
    "name": "gcd",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "p"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "q"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "the greatest common divisor, never negative.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result cannot be represented as a nonnegative int value.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "hash(double value)",
    "name": "hash",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to be hashed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the hash code.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hash(double[] value)",
    "name": "hash",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "value"
        },
        "comment": "the value to be hashed ( null).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the hash code.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indicator(byte x)",
    "name": "indicator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a byte.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "(byte)(+1) or (byte)(-1), depending on the sign of x.",
      "kind": "RETURN",
      "condition": "true ? methodResultID == args[0]"
    },
    "throwsTags": []
  },
  {
    "signature": "indicator(double x)",
    "name": "indicator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a double.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "+1.0 or -1.0, depending on the sign of x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indicator(float x)",
    "name": "indicator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float",
      "name": "float",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a float.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "+1.0F or -1.0F, depending on the sign of x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indicator(int x)",
    "name": "indicator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value an int.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "+1 or -1, depending on the sign of x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indicator(long x)",
    "name": "indicator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a long.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "+1L or -1L, depending on the sign of x.",
      "kind": "RETURN",
      "condition": "true ? methodResultID == args[0]"
    },
    "throwsTags": []
  },
  {
    "signature": "indicator(short x)",
    "name": "indicator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short",
      "name": "short",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a short.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "(short)(+1) or (short)(-1), depending on the sign of x.",
      "kind": "RETURN",
      "condition": "true ? (methodResultID == args[0]||methodResultID==-1)"
    },
    "throwsTags": []
  },
  {
    "signature": "lcm(int a, int b)",
    "name": "lcm",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "any number.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "any number.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the least common multiple, never negative.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result cannot be represented as a nonnegative int value.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "log(double base, double x)",
    "name": "log",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "base"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "base"
        },
        "comment": "the base of the logarithm. base is greater than 0.",
        "kind": "PARAM",
        "condition": "args[0]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "argument. x is greater than 0.",
        "kind": "PARAM",
        "condition": "args[1]>0"
      }
    ],
    "returnTag": {
      "comment": "the value of the logarithm - the number y such that base^y = x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mulAndCheck(int x, int y)",
    "name": "mulAndCheck",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "a factor.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "a factor.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the product x*y.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[0]*args[1]"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result can not be represented as an int.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "mulAndCheck(long a, long b)",
    "name": "mulAndCheck",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "a is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "b is second. second value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the product a * b.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[0]*args[1]"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result can not be represented as an long.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "nextAfter(double d, double direction)",
    "name": "nextAfter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "direction"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "d"
        },
        "comment": "d is base. base number.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "direction"
        },
        "comment": "(the only important thing is whether direction is greater or smaller than d).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the next machine representable number in the specified direction.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "scalb(double d, int scaleFactor)",
    "name": "scalb",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "scaleFactor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "d"
        },
        "comment": "d is base. base number.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "scaleFactor"
        },
        "comment": "power of two by which d sould be multiplied.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "d &times; 2scaleFactor.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "normalizeAngle(double a, double center)",
    "name": "normalizeAngle",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "center"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "angle to normalize.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "center"
        },
        "comment": "center of the desired 2&pi interval for the result.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a-2k&pi; with integer k and center-&pi; <= a-2k&pi; <= center+&pi;.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[0]-args[0]"
    },
    "throwsTags": []
  },
  {
    "signature": "round(double x, int scale)",
    "name": "round",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "scale"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value to round.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "scale"
        },
        "comment": "the number of digits to the right of the decimal point.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the rounded value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "round(double x, int scale, int roundingMethod)",
    "name": "round",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "scale"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "roundingMethod"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value to round.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "scale"
        },
        "comment": "the number of digits to the right of the decimal point.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "roundingMethod"
        },
        "comment": "the rounding method as defined in BigDecimal.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the rounded value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "round(float x, int scale)",
    "name": "round",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float",
      "name": "float",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "scale"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value to round.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "scale"
        },
        "comment": "the number of digits to the right of the decimal point.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the rounded value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "round(float x, int scale, int roundingMethod)",
    "name": "round",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float",
      "name": "float",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "scale"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "roundingMethod"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value to round.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "scale"
        },
        "comment": "the number of digits to the right of the decimal point.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "roundingMethod"
        },
        "comment": "the rounding method as defined in BigDecimal.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the rounded value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "sign(byte x)",
    "name": "sign",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a byte.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "(byte)(+1), (byte)(0), or (byte)(-1), depending on the sign of x.",
      "kind": "RETURN",
      "condition": "true ? methodResultID == args[0]"
    },
    "throwsTags": []
  },
  {
    "signature": "sign(double x)",
    "name": "sign",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a double.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "+1.0, 0.0, or -1.0, depending on the sign of x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "sign(float x)",
    "name": "sign",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float",
      "name": "float",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a float.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "+1.0F, 0.0F, or -1.0F, depending on the sign of x.",
      "kind": "RETURN",
      "condition": "true ? methodResultID == args[0]"
    },
    "throwsTags": []
  },
  {
    "signature": "sign(int x)",
    "name": "sign",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value an int.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "+1, 0, or -1, depending on the sign of x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "sign(long x)",
    "name": "sign",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a long.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "+1L, 0L, or -1L, depending on the sign of x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "sign(short x)",
    "name": "sign",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short",
      "name": "short",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value a short.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "(short)(+1), (short)(0), or (short)(-1), depending on the sign of x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "sinh(double x)",
    "name": "sinh",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "x is double. double value for which to find the hyperbolic sine.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "hyperbolic sine of x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subAndCheck(int x, int y)",
    "name": "subAndCheck",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the minuend.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "the subtrahend.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the difference x-y.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[0]-args[1]"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result can not be represented as an int.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "subAndCheck(long a, long b)",
    "name": "subAndCheck",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.util.MathUtils",
      "name": "MathUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.util.MathUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "a is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "b is second. second value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the difference a-b.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[0]-args[1]"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result can not be represented as an long.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]