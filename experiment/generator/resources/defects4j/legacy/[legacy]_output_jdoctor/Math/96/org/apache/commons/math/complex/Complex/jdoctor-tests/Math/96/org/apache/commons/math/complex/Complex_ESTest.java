/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 20:40:20 GMT 2023
 */
package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Complex_ESTest extends Complex_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test320() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.INF.acos();
        complex1.I.log();
        Complex complex2 = complex0.multiply(complex1);
        complex2.I.tan();
        org.apache.commons.math.complex.Complex complex3;
        if ((Complex) null == null) {
            try {
                complex3 = complex0.pow((Complex) null);
                fail();
            } catch (java.lang.NullPointerException e) {
                // Successfully thrown exception
            }
        } else {
            complex3 = complex0.pow((Complex) null);
        }
        complex3.INF.tanh();
    }

    @Test(timeout = 4000)
    public void test591() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ONE.exp();
        Complex complex2 = complex1.INF.atan();
        complex1.ONE.log();
        complex2.ONE.sinh();
        Complex complex3 = complex0.createComplex((-3540.78), Double.POSITIVE_INFINITY);
        complex0.multiply(complex2);
        org.apache.commons.math.complex.Complex default0;
        if ((Complex) null == null) {
            try {
                default0 = complex3.NaN.add((Complex) null);
                fail();
            } catch (java.lang.NullPointerException e) {
                // Successfully thrown exception
            }
        } else {
            default0 = complex3.NaN.add((Complex) null);
        }
        Complex complex4 = complex0.log();
        complex4.ONE.tan();
        complex0.atan();
    }

    @Test(timeout = 4000)
    public void test812() throws Throwable {
        Complex complex0 = Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1;
        if ((Complex) null == null) {
            try {
                complex1 = complex0.divide((Complex) null);
                fail();
            } catch (java.lang.NullPointerException e) {
                // Successfully thrown exception
            }
        } else {
            complex1 = complex0.divide((Complex) null);
        }
        complex1.asin();
    }

    @Test(timeout = 4000)
    public void test893() throws Throwable {
        Complex complex0 = new Complex(470.00681317, (-3029.47));
        complex0.ZERO.sqrt();
        Complex complex1 = new Complex((-3029.47), (-870.1));
        Complex complex2 = complex0.I.multiply(complex1);
        complex2.NaN.atan();
        org.apache.commons.math.complex.Complex default1;
        if ((Complex) null == null) {
            try {
                default1 = complex0.subtract((Complex) null);
                fail();
            } catch (java.lang.NullPointerException e) {
                // Successfully thrown exception
            }
        } else {
            default1 = complex0.subtract((Complex) null);
        }
        complex0.ONE.pow(complex2);
        Complex complex3 = complex0.I.sinh();
        complex3.hashCode();
        complex1.isNaN();
    }

    @Test(timeout = 4000)
    public void test934() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.isNaN();
        Complex complex1 = complex0.conjugate();
        complex1.ZERO.subtract(complex0);
        org.apache.commons.math.complex.Complex complex2;
        if ((Complex) null == null) {
            try {
                complex2 = complex0.multiply((Complex) null);
                fail();
            } catch (java.lang.NullPointerException e) {
                // Successfully thrown exception
            }
        } else {
            complex2 = complex0.multiply((Complex) null);
        }
        complex2.ZERO.multiply(complex1);
    }
}
