/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 17:05:53 GMT 2023
 */
package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.analysis.MultivariateMatrixFunction;
import org.apache.commons.math.optimization.SimpleVectorialValueChecker;
import org.apache.commons.math.optimization.VectorialPointValuePair;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class LevenbergMarquardtOptimizer_ESTest extends LevenbergMarquardtOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.rows = (-2562);
        levenbergMarquardtOptimizer0.checker = null;
        levenbergMarquardtOptimizer0.doOptimize();
        levenbergMarquardtOptimizer0.doOptimize();
        levenbergMarquardtOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.rows = 1910;
        levenbergMarquardtOptimizer0.doOptimize();
        levenbergMarquardtOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test213() throws Throwable {
        LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
        levenbergMarquardtOptimizer0.checker = null;
        double[][] doubleArray0 = new double[2][9];
        MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
        doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
        double[] doubleArray1 = new double[2];
        DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
        doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
        doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
        levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
        levenbergMarquardtOptimizer0.doOptimize();
        doubleArray0[0] = doubleArray1;
        levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
        levenbergMarquardtOptimizer0.setInitialStepBoundFactor((-869.9265));
        levenbergMarquardtOptimizer0.doOptimize();
        levenbergMarquardtOptimizer0.doOptimize();
        levenbergMarquardtOptimizer0.doOptimize();
        levenbergMarquardtOptimizer0.doOptimize();
    }
}
