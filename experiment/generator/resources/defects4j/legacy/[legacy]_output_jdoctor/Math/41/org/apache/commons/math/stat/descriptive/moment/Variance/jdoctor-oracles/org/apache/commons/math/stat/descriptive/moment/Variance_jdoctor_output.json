[
  {
    "signature": "org.apache.commons.math.stat.descriptive.moment.Variance()",
    "name": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.math.stat.descriptive.moment.Variance(org.apache.commons.math.stat.descriptive.moment.SecondMoment m2)",
    "name": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
          "name": "SecondMoment",
          "isArray": false
        },
        "name": "m2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
            "name": "SecondMoment",
            "isArray": false
          },
          "name": "m2"
        },
        "comment": "the SecondMoment (Third or Fourth moments work here as well.).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.math.stat.descriptive.moment.Variance(boolean isBiasCorrected)",
    "name": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isBiasCorrected"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "isBiasCorrected"
        },
        "comment": "setting for bias correction - true means bias . isBiasCorrected is corrected and is equivalent to using the argumentless constructor.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.math.stat.descriptive.moment.Variance(boolean isBiasCorrected, org.apache.commons.math.stat.descriptive.moment.SecondMoment m2)",
    "name": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isBiasCorrected"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
          "name": "SecondMoment",
          "isArray": false
        },
        "name": "m2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "isBiasCorrected"
        },
        "comment": "setting for bias correction - true means bias . isBiasCorrected is corrected.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
            "name": "SecondMoment",
            "isArray": false
          },
          "name": "m2"
        },
        "comment": "the SecondMoment (Third or Fourth moments work here as well.).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.math.stat.descriptive.moment.Variance(org.apache.commons.math.stat.descriptive.moment.Variance original)",
    "name": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
          "name": "Variance",
          "isArray": false
        },
        "name": "original"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
            "name": "Variance",
            "isArray": false
          },
          "name": "original"
        },
        "comment": "the Variance instance to copy.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "increment(double d)",
    "name": "increment",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getResult()",
    "name": "getResult",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getN()",
    "name": "getN",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "evaluate(double[] values)",
    "name": "evaluate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the input array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if length = 0.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "evaluate(double[] values, int begin, int length)",
    "name": "evaluate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the input array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if length = 0.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array is null or the array index parameters are not valid.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "evaluate(double[] values, double[] weights, int begin, int length)",
    "name": "evaluate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "weights"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the input array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "weights"
        },
        "comment": "the weights array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the weighted variance of the values or Double.NaN if length = 0.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters are not valid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "evaluate(double[] values, double[] weights)",
    "name": "evaluate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "weights"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the input array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "weights"
        },
        "comment": "the weights array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the weighted variance of the values.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters are not valid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "evaluate(double[] values, double mean, int begin, int length)",
    "name": "evaluate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the input array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "mean is precomputed. precomputed mean value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if length = 0.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array is null or the array index parameters are not valid.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "evaluate(double[] values, double mean)",
    "name": "evaluate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the input array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "mean is precomputed. precomputed mean value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if the array is empty.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "evaluate(double[] values, double[] weights, double mean, int begin, int length)",
    "name": "evaluate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "weights"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "begin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the input array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "weights"
        },
        "comment": "the weights array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "mean is precomputed. precomputed weighted mean value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "begin"
        },
        "comment": "index of the first array element to include.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the number of elements to include.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if length = 0.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters are not valid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "evaluate(double[] values, double[] weights, double mean)",
    "name": "evaluate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "weights"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the input array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "weights"
        },
        "comment": "the weights array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "mean is precomputed. precomputed weighted mean value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the variance of the values or Double.NaN if length = 0.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the parameters are not valid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "isBiasCorrected()",
    "name": "isBiasCorrected",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "Returns the isBiasCorrected.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setBiasCorrected(boolean biasCorrected)",
    "name": "setBiasCorrected",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "biasCorrected"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "biasCorrected"
        },
        "comment": "The isBiasCorrected to set.",
        "kind": "PARAM",
        "condition": "receiverObjectID.isBiasCorrected()"
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "copy()",
    "name": "copy",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "copy(org.apache.commons.math.stat.descriptive.moment.Variance source, org.apache.commons.math.stat.descriptive.moment.Variance dest)",
    "name": "copy",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
      "name": "Variance",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.stat.descriptive.moment.Variance",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
          "name": "Variance",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
          "name": "Variance",
          "isArray": false
        },
        "name": "dest"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
            "name": "Variance",
            "isArray": false
          },
          "name": "source"
        },
        "comment": "Variance to copy.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math.stat.descriptive.moment.Variance",
            "name": "Variance",
            "isArray": false
          },
          "name": "dest"
        },
        "comment": "Variance to copy to.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "either source or dest is null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  }
]