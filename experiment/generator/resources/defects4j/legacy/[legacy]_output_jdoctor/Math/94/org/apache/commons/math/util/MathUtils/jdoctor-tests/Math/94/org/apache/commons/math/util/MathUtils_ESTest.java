/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 20:06:25 GMT 2023
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        MathUtils.lcm(3000, 3000);
        MathUtils.sign(0L);
        MathUtils.cosh((-4.9E-324));
        double double0 = MathUtils.EPSILON;
        long default0;
        default0 = MathUtils.mulAndCheck((-24L), 0L);
        assertTrue(true ? default0 == (-24L) * 0L : true);
        MathUtils.scalb(3000, 3000);
        MathUtils.sign((double) 3000);
        MathUtils.cosh((-2093.952733));
        long default1;
        if (3000 < 0) {
            try {
                default1 = MathUtils.factorial(3000);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default1 = MathUtils.factorial(3000);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        long default2;
        default2 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default2 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default3;
        default3 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default3 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        long default4;
        default4 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default4 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default5;
        default5 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default5 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        long default6;
        default6 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default6 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default7;
        default7 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default7 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        long default8;
        default8 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default8 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default9;
        default9 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default9 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        long default10;
        default10 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default10 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default11;
        default11 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default11 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        long default12;
        default12 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default12 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default13;
        default13 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default13 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
        int int0 = MathUtils.gcd(0, 945);
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        long default14;
        default14 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default14 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default15;
        default15 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default15 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
        int int0 = MathUtils.gcd(0, 945);
        float float2 = MathUtils.indicator(0.0F);
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        long default16;
        default16 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default16 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default17;
        default17 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default17 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
        int int0 = MathUtils.gcd(0, 945);
        float float2 = MathUtils.indicator(0.0F);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        long default18;
        default18 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default18 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default19;
        default19 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default19 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
        int int0 = MathUtils.gcd(0, 945);
        float float2 = MathUtils.indicator(0.0F);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.hash(0.0);
        float float3 = MathUtils.sign(0.0F);
    }

    @Test(timeout = 4000)
    public void test00210() throws Throwable {
        MathUtils.nextAfter(4.9E-324, 0.0);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 4.9E-324;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        MathUtils.hash(doubleArray0);
        byte default20;
        default20 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default20 == (byte) 0 : true);
        MathUtils.sign(1530.2847F);
        MathUtils.scalb(0.0, (byte) 0);
        MathUtils.gcd((byte) 1, (-1));
        MathUtils.round(0.0, 1083);
        MathUtils.sign(1814L);
        int default21;
        default21 = MathUtils.addAndCheck(1762, (int) (byte) 0);
        assertTrue(true ? default21 == 1762 + (int) (byte) 0 : true);
        MathUtils.indicator((float) 1);
        long default22;
        default22 = MathUtils.indicator((long) 1083);
        assertTrue(true ? default22 == (long) 1083 : true);
        byte default23;
        default23 = MathUtils.sign((byte) (-111));
        assertTrue(true ? default23 == (byte) (-111) : true);
        double default24;
        if (1083 < 0) {
            try {
                default24 = MathUtils.factorialDouble(1083);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default24 = MathUtils.factorialDouble(1083);
        }
        MathUtils.binomialCoefficientLog(1762, (byte) (-111));
        MathUtils.hash(doubleArray0);
        long default25;
        default25 = MathUtils.addAndCheck((-4640L), (-4640L));
        assertTrue(true ? default25 == (-4640L) + (-4640L) : true);
        double default26;
        if ((-1) < 0) {
            try {
                default26 = MathUtils.factorialDouble((-1));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default26 = MathUtils.factorialDouble((-1));
        }
    }

    @Test(timeout = 4000)
    public void test00311() throws Throwable {
        double double0 = MathUtils.SAFE_MIN;
        double default27;
        default27 = MathUtils.normalizeAngle(0.0, 2.2250738585072014E-308);
        assertTrue(true ? default27 == 0.0 - 0.0 : true);
        MathUtils.sinh(0.0);
        MathUtils.equals(0.0, 0.0);
        MathUtils.sinh(0.0);
        MathUtils.round(0.0, 1, 1);
        MathUtils.round(0.0F, 283);
        MathUtils.equals((-110.3522941595321), 0.0);
        long default28;
        default28 = MathUtils.addAndCheck((long) 1, 4774L);
        assertTrue(true ? default28 == (long) 1 + 4774L : true);
        MathUtils.binomialCoefficient(4, (-4276));
        MathUtils.nextAfter(0.0F, 1);
        MathUtils.round(0.0, 188);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 2.2250738585072014E-308;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 2874.20586468;
        MathUtils.equals(doubleArray0, doubleArray0);
        long default29;
        if (1 < 0) {
            try {
                default29 = MathUtils.factorial(1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default29 = MathUtils.factorial(1);
        }
        MathUtils.binomialCoefficient(0, 0);
        MathUtils.binomialCoefficient((-2315), (-1));
    }

    @Test(timeout = 4000)
    public void test00412() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
    }

    @Test(timeout = 4000)
    public void test00413() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
    }

    @Test(timeout = 4000)
    public void test00414() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
    }

    @Test(timeout = 4000)
    public void test00415() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
    }

    @Test(timeout = 4000)
    public void test00416() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
    }

    @Test(timeout = 4000)
    public void test00417() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default30;
        default30 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default30 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test00418() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default31;
        default31 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default31 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
    }

    @Test(timeout = 4000)
    public void test00419() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default32;
        default32 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default32 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test00420() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default33;
        default33 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default33 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
        int int1 = MathUtils.hash((-1.0));
    }

    @Test(timeout = 4000)
    public void test00421() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default34;
        default34 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default34 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
        int int1 = MathUtils.hash((-1.0));
        byte default35;
        default35 = MathUtils.sign((byte) 1);
        assertTrue(true ? default35 == (byte) 1 : true);
        double double3 = MathUtils.sinh(0.5);
    }

    @Test(timeout = 4000)
    public void test00422() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default36;
        default36 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default36 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
        int int1 = MathUtils.hash((-1.0));
        byte default37;
        default37 = MathUtils.sign((byte) 1);
        assertTrue(true ? default37 == (byte) 1 : true);
        double double3 = MathUtils.sinh(0.5);
        long long1 = MathUtils.sign((long) (-1074790400));
    }

    @Test(timeout = 4000)
    public void test00423() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default38;
        default38 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default38 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
        int int1 = MathUtils.hash((-1.0));
        byte default39;
        default39 = MathUtils.sign((byte) 1);
        assertTrue(true ? default39 == (byte) 1 : true);
        double double3 = MathUtils.sinh(0.5);
        long long1 = MathUtils.sign((long) (-1074790400));
        long long2;
        long2 = MathUtils.indicator((long) (byte) 0);
        assertTrue(true ? long2 == (long) (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test00524() throws Throwable {
        MathUtils.binomialCoefficientDouble(0, 0);
        MathUtils.hash((double) 0);
        MathUtils.lcm((-3869), 52);
        MathUtils.sign((double) 201188);
        byte default40;
        default40 = MathUtils.sign((byte) 0);
        assertTrue(true ? default40 == (byte) 0 : true);
        MathUtils.gcd(52, 1);
        MathUtils.sign(52);
        MathUtils.sign((long) 201188);
        int default41;
        default41 = MathUtils.subAndCheck(0, 6603);
        assertTrue(true ? default41 == 0 - 6603 : true);
        long default42;
        default42 = MathUtils.mulAndCheck((long) 1, (-2588L));
        assertTrue(true ? default42 == (long) 1 * (-2588L) : true);
        MathUtils.sign((-243.34741F));
        MathUtils.scalb((-3869), 1);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) 201188;
        doubleArray0[1] = 1.0;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = (double) 0;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.hash((double) 1);
        int default43;
        default43 = MathUtils.subAndCheck(1892, 31);
        assertTrue(true ? default43 == 1892 - 31 : true);
        MathUtils.binomialCoefficientLog((-3869), 1);
    }

    @Test(timeout = 4000)
    public void test00625() throws Throwable {
        assertTrue((-0.7478510541174533) > 0);
        assertTrue((-0.7478510541174533) > 0);
        double default44;
        default44 = MathUtils.log((-0.7478510541174533), (-0.7478510541174533));
        MathUtils.cosh(Double.NaN);
        long long0;
        long0 = MathUtils.subAndCheck(3487L, (-2147483648L));
        assertTrue(true ? long0 == 3487L - (-2147483648L) : true);
    }

    @Test(timeout = 4000)
    public void test00626() throws Throwable {
        assertTrue((-0.7478510541174533) > 0);
        assertTrue((-0.7478510541174533) > 0);
        double default45;
        default45 = MathUtils.log((-0.7478510541174533), (-0.7478510541174533));
        MathUtils.cosh(Double.NaN);
        long long0;
        long0 = MathUtils.subAndCheck(3487L, (-2147483648L));
        assertTrue(true ? long0 == 3487L - (-2147483648L) : true);
        double double0 = MathUtils.nextAfter(Double.NaN, (-10.928587103411145));
    }

    @Test(timeout = 4000)
    public void test00627() throws Throwable {
        assertTrue((-0.7478510541174533) > 0);
        assertTrue((-0.7478510541174533) > 0);
        double default46;
        default46 = MathUtils.log((-0.7478510541174533), (-0.7478510541174533));
        MathUtils.cosh(Double.NaN);
        long long0;
        long0 = MathUtils.subAndCheck(3487L, (-2147483648L));
        assertTrue(true ? long0 == 3487L - (-2147483648L) : true);
        double double0 = MathUtils.nextAfter(Double.NaN, (-10.928587103411145));
        double double1 = MathUtils.binomialCoefficientLog(356, 356);
    }

    @Test(timeout = 4000)
    public void test00628() throws Throwable {
        assertTrue((-0.7478510541174533) > 0);
        assertTrue((-0.7478510541174533) > 0);
        double default47;
        default47 = MathUtils.log((-0.7478510541174533), (-0.7478510541174533));
        MathUtils.cosh(Double.NaN);
        long long0;
        long0 = MathUtils.subAndCheck(3487L, (-2147483648L));
        assertTrue(true ? long0 == 3487L - (-2147483648L) : true);
        double double0 = MathUtils.nextAfter(Double.NaN, (-10.928587103411145));
        double double1 = MathUtils.binomialCoefficientLog(356, 356);
        int int0 = MathUtils.sign(356);
    }

    @Test(timeout = 4000)
    public void test00729() throws Throwable {
        long default48;
        default48 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default48 == 0L * 0L : true);
        long default49;
        default49 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default49 == 0L * 0L : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-110.3522941595321);
        doubleArray0[1] = (double) 0L;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = (double) 0L;
        doubleArray0[4] = (double) 0L;
        MathUtils.equals(doubleArray0, doubleArray0);
        double[] doubleArray1 = new double[6];
        doubleArray1[0] = (-110.3522941595321);
        doubleArray1[1] = (double) 0L;
        doubleArray1[2] = (-110.3522941595321);
        doubleArray1[3] = (double) 0L;
        doubleArray1[4] = (double) 0L;
        doubleArray1[5] = (-110.3522941595321);
        int int0 = MathUtils.hash(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test00730() throws Throwable {
        long default50;
        default50 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default50 == 0L * 0L : true);
        long default51;
        default51 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default51 == 0L * 0L : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-110.3522941595321);
        doubleArray0[1] = (double) 0L;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = (double) 0L;
        doubleArray0[4] = (double) 0L;
        MathUtils.equals(doubleArray0, doubleArray0);
        double[] doubleArray1 = new double[6];
        doubleArray1[0] = (-110.3522941595321);
        doubleArray1[1] = (double) 0L;
        doubleArray1[2] = (-110.3522941595321);
        doubleArray1[3] = (double) 0L;
        doubleArray1[4] = (double) 0L;
        doubleArray1[5] = (-110.3522941595321);
        int int0 = MathUtils.hash(doubleArray1);
        int default52;
        default52 = MathUtils.addAndCheck(2068852981, 2068852981);
        assertTrue(true ? default52 == 2068852981 + 2068852981 : true);
    }

    @Test(timeout = 4000)
    public void test01331() throws Throwable {
        int int0 = 300;
        int default53;
        default53 = MathUtils.mulAndCheck(300, 1);
        assertTrue(true ? default53 == 300 * 1 : true);
        MathUtils.scalb((-2900.8202145115297), (-929));
        MathUtils.sign((-2900.8202145115297));
        int int1 = 453;
        MathUtils.binomialCoefficientLog(453, 1);
        MathUtils.equals(0.0, (double) 300);
        MathUtils.sign((long) 300);
        long default54;
        default54 = MathUtils.mulAndCheck((long) (-929), (long) 453);
        assertTrue(true ? default54 == (long) (-929) * (long) 453 : true);
        MathUtils.factorialLog(453);
        MathUtils.sign((-3894));
        MathUtils.binomialCoefficientDouble((-1), (-929));
    }

    @Test(timeout = 4000)
    public void test01532() throws Throwable {
        double double0 = (-1712.611);
        MathUtils.cosh((-1712.611));
        long default55;
        default55 = MathUtils.indicator((-1L));
        assertTrue(true ? default55 == (-1L) : true);
        short default56;
        default56 = MathUtils.indicator((short) (-241));
        assertTrue(true ? (default56 == (short) (-241) || default56 == -1) : true);
        int default57;
        default57 = MathUtils.subAndCheck((-1), 31);
        assertTrue(true ? default57 == (-1) - 31 : true);
        long default58;
        if ((-32) < 0) {
            try {
                default58 = MathUtils.factorial((-32));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default58 = MathUtils.factorial((-32));
        }
    }

    @Test(timeout = 4000)
    public void test01633() throws Throwable {
        MathUtils.nextAfter((-2200.8951), (-2200.8951));
        MathUtils.cosh((-2200.8951));
        MathUtils.sign(Float.NaN);
        MathUtils.sign((-912.0F));
        int int0 = (-2147234663);
        MathUtils.binomialCoefficientDouble((-2147234663), (-2147234663));
    }

    @Test(timeout = 4000)
    public void test02134() throws Throwable {
        MathUtils.binomialCoefficientDouble((-330), (-1));
    }

    @Test(timeout = 4000)
    public void test02635() throws Throwable {
        int int0 = (-2255);
        MathUtils.sign((-2255));
        MathUtils.indicator(0.0F);
        MathUtils.binomialCoefficient((-2255), (-1));
    }

    @Test(timeout = 4000)
    public void test02736() throws Throwable {
        double double0 = (-1505.4677638);
        MathUtils.nextAfter((-1505.4677638), 0.0);
        int int0 = (-367);
        MathUtils.binomialCoefficient((-367), (-367));
    }

    @Test(timeout = 4000)
    public void test03137() throws Throwable {
        long long0 = 0L;
        long default59;
        default59 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default59 == 0L + 0L : true);
        int int0 = 0;
        MathUtils.round((float) 0L, 0, 3511);
    }

    @Test(timeout = 4000)
    public void test03438() throws Throwable {
        int int0 = 0;
        int int1 = 1800;
        int default60;
        default60 = MathUtils.subAndCheck(0, 1800);
        assertTrue(true ? default60 == 0 - 1800 : true);
        byte byte0 = (byte) 0;
        byte default61;
        default61 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default61 == (byte) 0 : true);
        int int2 = 0;
        MathUtils.binomialCoefficientLog((-1800), 0);
    }

    @Test(timeout = 4000)
    public void test03539() throws Throwable {
        long default62;
        default62 = MathUtils.subAndCheck(1626L, 0L);
        assertTrue(true ? default62 == 1626L - 0L : true);
        int int0 = 0;
        MathUtils.binomialCoefficient(0, 0);
        int default63;
        default63 = MathUtils.mulAndCheck(1, 0);
        assertTrue(true ? default63 == 1 * 0 : true);
        MathUtils.sinh(1);
        MathUtils.indicator((float) 1626L);
        MathUtils.round((double) 0, 1);
        long default64;
        default64 = MathUtils.mulAndCheck((-1L), (long) 0);
        assertTrue(true ? default64 == (-1L) * (long) 0 : true);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 0L;
        doubleArray0[1] = (double) 0L;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = (double) 1626L;
        doubleArray0[4] = (double) 1L;
        doubleArray0[5] = (double) 0L;
        MathUtils.equals(doubleArray0, doubleArray0);
        short default65;
        default65 = MathUtils.indicator((short) 451);
        assertTrue(true ? (default65 == (short) 451 || default65 == -1) : true);
        MathUtils.normalizeAngle(0L, 2.2909552562);
        int default66;
        default66 = MathUtils.mulAndCheck(1639, (-1057));
        assertTrue(true ? default66 == 1639 * (-1057) : true);
        long default67;
        if (0 < 0) {
            try {
                default67 = MathUtils.factorial(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default67 = MathUtils.factorial(0);
        }
        MathUtils.round((float) 0, 2068, (-1));
    }

    @Test(timeout = 4000)
    public void test04440() throws Throwable {
        short short0 = (short) 2846;
        MathUtils.sign((short) 2846);
        int int0 = 0;
        MathUtils.indicator(0);
        int int1 = 31;
        MathUtils.scalb((short) 1, 31);
        int int2 = (-176);
        MathUtils.binomialCoefficient((-176), (-1207));
    }

    @Test(timeout = 4000)
    public void test04541() throws Throwable {
        short default68;
        default68 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default68 == (short) 0 || default68 == -1) : true);
        MathUtils.sign((short) (-1));
        MathUtils.cosh(1.0);
        MathUtils.log(0.0, (short) (-1));
        MathUtils.factorial((short) (-1));
    }

    @Test(timeout = 4000)
    public void test04642() throws Throwable {
        int default69;
        default69 = MathUtils.addAndCheck((-1), 0);
        assertTrue(true ? default69 == (-1) + 0 : true);
        int int0 = 0;
        int default70;
        default70 = MathUtils.subAndCheck(0, 819);
        assertTrue(true ? default70 == 0 - 819 : true);
        int int1 = 3677;
        MathUtils.round((double) (-1), 0, 3677);
    }

    @Test(timeout = 4000)
    public void test04843() throws Throwable {
        MathUtils.lcm((-479), (-1));
        long default71;
        if ((-1) < 0) {
            try {
                default71 = MathUtils.factorial((-1));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default71 = MathUtils.factorial((-1));
        }
    }

    @Test(timeout = 4000)
    public void test05044() throws Throwable {
        MathUtils.sign(0.0);
        int int0 = (-1956);
        MathUtils.gcd((-1956), (-1956));
        int int1 = 3585;
        MathUtils.binomialCoefficient(663, 3585);
    }

    @Test(timeout = 4000)
    public void test05145() throws Throwable {
        MathUtils.binomialCoefficientDouble(2421, (-3779));
        MathUtils.sign(Double.NaN);
        byte default72;
        default72 = MathUtils.indicator((byte) (-36));
        assertTrue(true ? default72 == (byte) (-36) : true);
        MathUtils.normalizeAngle(Double.NaN, (byte) (-36));
        int default73;
        default73 = MathUtils.mulAndCheck(2421, 0);
        assertTrue(true ? default73 == 2421 * 0 : true);
        int int0 = 31;
        MathUtils.binomialCoefficient(1851, 31);
    }

    @Test(timeout = 4000)
    public void test05246() throws Throwable {
        MathUtils.scalb((-3868.132), 0);
        MathUtils.binomialCoefficientDouble(0, 0);
        byte default74;
        default74 = MathUtils.sign((byte) 95);
        assertTrue(true ? default74 == (byte) 95 : true);
        int default75;
        default75 = MathUtils.mulAndCheck(0, 0);
        assertTrue(true ? default75 == 0 * 0 : true);
        MathUtils.factorialLog((-2545));
    }

    @Test(timeout = 4000)
    public void test05347() throws Throwable {
        MathUtils.sign((short) 0);
        int int0 = 712;
        double default76;
        if (712 < 0) {
            try {
                default76 = MathUtils.factorialDouble(712);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default76 = MathUtils.factorialDouble(712);
        }
        MathUtils.round(Double.POSITIVE_INFINITY, (int) (short) 0, (-1634));
        byte default77;
        default77 = MathUtils.indicator((byte) (-127));
        assertTrue(true ? default77 == (byte) (-127) : true);
        int default78;
        default78 = MathUtils.mulAndCheck(0, (int) (short) 0);
        assertTrue(true ? default78 == 0 * (int) (short) 0 : true);
        MathUtils.sign((-1025.8123F));
        MathUtils.factorialDouble((byte) (-1));
    }

    @Test(timeout = 4000)
    public void test05448() throws Throwable {
        int int0 = 0;
        int default79;
        default79 = MathUtils.mulAndCheck(0, 0);
        assertTrue(true ? default79 == 0 * 0 : true);
        MathUtils.round(0.0F, 0);
        MathUtils.binomialCoefficientDouble(0, 1);
    }

    @Test(timeout = 4000)
    public void test06049() throws Throwable {
        MathUtils.equals(1083.8, 1083.8);
        MathUtils.round((-2676.102F), 0, 0);
        MathUtils.sign((-2677.0F));
        long default80;
        default80 = MathUtils.addAndCheck((-1967L), (-2288L));
        assertTrue(true ? default80 == (-1967L) + (-2288L) : true);
        MathUtils.factorialLog(0);
        assertTrue((-1.0F) > 0);
        assertTrue((-1266.6) > 0);
        double default81;
        default81 = MathUtils.log((-1.0F), (-1266.6));
        int default82;
        default82 = MathUtils.subAndCheck(0, 839);
        assertTrue(true ? default82 == 0 - 839 : true);
        MathUtils.round((-1094.1), 839, 52);
    }

    @Test(timeout = 4000)
    public void test06250() throws Throwable {
        MathUtils.binomialCoefficientLog((-1109), (-1109));
    }

    @Test(timeout = 4000)
    public void test06351() throws Throwable {
        MathUtils.cosh(0.0);
        long default83;
        if (1 < 0) {
            try {
                default83 = MathUtils.factorial(1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default83 = MathUtils.factorial(1);
        }
        MathUtils.round((double) 1L, 1);
        long default84;
        default84 = MathUtils.addAndCheck((long) 1, 1L);
        assertTrue(true ? default84 == (long) 1 + 1L : true);
        double double0 = Double.POSITIVE_INFINITY;
        MathUtils.nextAfter(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        MathUtils.nextAfter(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        byte default85;
        default85 = MathUtils.indicator((byte) 37);
        assertTrue(true ? default85 == (byte) 37 : true);
        byte default86;
        default86 = MathUtils.indicator((byte) 1);
        assertTrue(true ? default86 == (byte) 1 : true);
        MathUtils.round(0.0, (int) (byte) 1, (int) (byte) 37);
    }

    @Test(timeout = 4000)
    public void test06452() throws Throwable {
        MathUtils.round(54.987404F, 1, 1);
        short default87;
        default87 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default87 == (short) 0 || default87 == -1) : true);
        MathUtils.hash((double) 54.9F);
        MathUtils.cosh(1);
        long default88;
        default88 = MathUtils.indicator(2147483647L);
        assertTrue(true ? default88 == 2147483647L : true);
        int default89;
        default89 = MathUtils.addAndCheck(1, 1);
        assertTrue(true ? default89 == 1 + 1 : true);
        long default90;
        default90 = MathUtils.addAndCheck(3230L, (long) 1);
        assertTrue(true ? default90 == 3230L + (long) 1 : true);
        MathUtils.sign((long) 4944691);
        MathUtils.binomialCoefficient(1, 4944691);
    }

    @Test(timeout = 4000)
    public void test06653() throws Throwable {
        MathUtils.sinh(3018.52846);
        long default91;
        default91 = MathUtils.mulAndCheck((-9218868437227405313L), (-2831L));
        assertTrue(true ? default91 == (-9218868437227405313L) * (-2831L) : true);
    }

    @Test(timeout = 4000)
    public void test06954() throws Throwable {
        MathUtils.lcm(2282, 2282);
        MathUtils.round((double) 2282, 3060);
        MathUtils.sign(0);
        MathUtils.binomialCoefficientDouble(0, 421);
    }

    @Test(timeout = 4000)
    public void test07155() throws Throwable {
        int default92;
        default92 = MathUtils.mulAndCheck(0, (-4501));
        assertTrue(true ? default92 == 0 * (-4501) : true);
        MathUtils.sign(678L);
        short default93;
        default93 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default93 == (short) 0 || default93 == -1) : true);
        MathUtils.indicator((double) 0);
        MathUtils.sign((long) 0);
        MathUtils.sign(0.0F);
        long default94;
        default94 = MathUtils.mulAndCheck((-104L), 9223372036854774099L);
        assertTrue(true ? default94 == (-104L) * 9223372036854774099L : true);
    }

    @Test(timeout = 4000)
    public void test07256() throws Throwable {
        long default95;
        default95 = MathUtils.mulAndCheck((-2593L), 899L);
        assertTrue(true ? default95 == (-2593L) * 899L : true);
        MathUtils.sign((short) (-615));
        MathUtils.indicator((-860.92F));
        int int0 = 0;
        MathUtils.lcm(0, 0);
    }

    @Test(timeout = 4000)
    public void test07457() throws Throwable {
        MathUtils.lcm(840, 840);
        MathUtils.sign(840);
        MathUtils.sign((short) (-1));
        byte byte0 = (byte) 0;
        byte default96;
        default96 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default96 == (byte) 0 : true);
        MathUtils.sign(0.0F);
        MathUtils.normalizeAngle(0.0, 1);
        MathUtils.normalizeAngle(840, 0.0F);
        long default97;
        default97 = MathUtils.subAndCheck((long) 1, 517L);
        assertTrue(true ? default97 == (long) 1 - 517L : true);
        MathUtils.indicator((int) (byte) 0);
        long default98;
        default98 = MathUtils.indicator(517L);
        assertTrue(true ? default98 == 517L : true);
        long default99;
        default99 = MathUtils.subAndCheck(0L, (long) (byte) 1);
        assertTrue(true ? default99 == 0L - (long) (byte) 1 : true);
        MathUtils.sign((short) (-1));
        int default100;
        default100 = MathUtils.addAndCheck((int) (short) (-1), 974);
        assertTrue(true ? default100 == (int) (short) (-1) + 974 : true);
        short default101;
        default101 = MathUtils.indicator((short) (-1));
        assertTrue(true ? (default101 == (short) (-1) || default101 == -1) : true);
        MathUtils.indicator((-1.0F));
        MathUtils.gcd(973, 516);
        MathUtils.binomialCoefficient(974, 840);
    }

    @Test(timeout = 4000)
    public void test07658() throws Throwable {
        MathUtils.nextAfter(0.0, 0.0);
        MathUtils.hash((-2574.0));
        MathUtils.indicator(1070.411672413604);
        long default102;
        if ((-1062986752) < 0) {
            try {
                default102 = MathUtils.factorial((-1062986752));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default102 = MathUtils.factorial((-1062986752));
        }
    }

    @Test(timeout = 4000)
    public void test08259() throws Throwable {
        byte byte0 = (byte) 0;
        byte default103;
        default103 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default103 == (byte) 0 : true);
        int int0 = 0;
        int default104;
        default104 = MathUtils.subAndCheck(0, (int) (byte) 1);
        assertTrue(true ? default104 == 0 - (int) (byte) 1 : true);
        MathUtils.sign((-2087.4907F));
        int int1 = (-3156);
        MathUtils.lcm((-3156), (-3156));
        MathUtils.binomialCoefficientDouble(3156, (byte) 1);
        MathUtils.binomialCoefficientDouble((-1518), (-3156));
    }

    @Test(timeout = 4000)
    public void test08460() throws Throwable {
        MathUtils.sign(4);
        MathUtils.sign((long) 1);
        byte default105;
        default105 = MathUtils.sign((byte) (-29));
        assertTrue(true ? default105 == (byte) (-29) : true);
        byte default106;
        default106 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default106 == (byte) 0 : true);
        MathUtils.sign((long) 4);
        int default107;
        default107 = MathUtils.addAndCheck(0, 1);
        assertTrue(true ? default107 == 0 + 1 : true);
        long default108;
        default108 = MathUtils.indicator(1L);
        assertTrue(true ? default108 == 1L : true);
        assertTrue(0.0 > 0);
        assertTrue(0.0 > 0);
        double default109;
        default109 = MathUtils.log(0.0, 0.0);
        MathUtils.binomialCoefficientDouble(0, (-1));
        long default110;
        default110 = MathUtils.mulAndCheck((long) 1, (long) 0);
        assertTrue(true ? default110 == (long) 1 * (long) 0 : true);
        double default111;
        default111 = MathUtils.normalizeAngle(0.0, 0.0);
        assertTrue(true ? default111 == 0.0 - 0.0 : true);
        MathUtils.cosh(1L);
        long default112;
        default112 = MathUtils.mulAndCheck(57L, 0L);
        assertTrue(true ? default112 == 57L * 0L : true);
        MathUtils.nextAfter(0.0, (-4.9E-324));
        MathUtils.round((-1.0F), (-1), 0);
        short default113;
        default113 = MathUtils.indicator((short) (byte) 0);
        assertTrue(true ? (default113 == (short) (byte) 0 || default113 == -1) : true);
        MathUtils.round((double) (-10.0F), 0, 1282);
    }

    @Test(timeout = 4000)
    public void test08661() throws Throwable {
        MathUtils.sign((-3029.091F));
        MathUtils.nextAfter((-3029.091F), (-1.0F));
        MathUtils.binomialCoefficientDouble(4, 4);
        MathUtils.lcm(4, 0);
        long default114;
        if (373 < 0) {
            try {
                default114 = MathUtils.factorial(373);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default114 = MathUtils.factorial(373);
        }
    }

    @Test(timeout = 4000)
    public void test08762() throws Throwable {
        double default115;
        default115 = MathUtils.normalizeAngle(1069.1507236483772, (-850.954521));
        assertTrue(true ? default115 == 1069.1507236483772 - 1069.1507236483772 : true);
        int int0 = 2;
        int default116;
        default116 = MathUtils.addAndCheck(1052, 2);
        assertTrue(true ? default116 == 1052 + 2 : true);
        long default117;
        if (1054 < 0) {
            try {
                default117 = MathUtils.factorial(1054);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default117 = MathUtils.factorial(1054);
        }
    }

    @Test(timeout = 4000)
    public void test09163() throws Throwable {
        double double0 = (-1853.67);
        assertTrue(1470.7 > 0);
        assertTrue((-1853.67) > 0);
        double default118;
        default118 = MathUtils.log(1470.7, (-1853.67));
        MathUtils.sign((short) 0);
        MathUtils.indicator(1);
        MathUtils.indicator(Double.NaN);
        MathUtils.lcm((short) 0, 0);
    }

    @Test(timeout = 4000)
    public void test09364() throws Throwable {
        long long0 = 9223372036854775807L;
        long default119;
        default119 = MathUtils.subAndCheck((-2147483648L), 9223372036854775807L);
        assertTrue(true ? default119 == (-2147483648L) - 9223372036854775807L : true);
    }

    @Test(timeout = 4000)
    public void test09765() throws Throwable {
        MathUtils.binomialCoefficient(758, 758);
        MathUtils.indicator((-3704));
        MathUtils.nextAfter((-5328384.368904361), (-2618.33587));
        MathUtils.round((float) 1L, (-3704), 2);
        byte byte0 = (byte) (-124);
        byte default120;
        default120 = MathUtils.sign((byte) (-124));
        assertTrue(true ? default120 == (byte) (-124) : true);
        int int0 = (-794);
        MathUtils.factorialLog((-794));
    }

    @Test(timeout = 4000)
    public void test09866() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 2937.58149819;
        doubleArray0[1] = 6.283185307179586;
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-43.8565267608);
        doubleArray0[4] = 1.1102230246251565E-16;
        doubleArray0[5] = (-921.80277);
        doubleArray0[6] = 1.0;
        doubleArray0[7] = (-2076.6398838);
        doubleArray0[8] = 0.0;
        MathUtils.hash(doubleArray0);
        MathUtils.indicator(1390893829);
        MathUtils.hash(doubleArray0);
        MathUtils.sign(0.0);
        int default121;
        default121 = MathUtils.mulAndCheck(1390893829, (-1));
        assertTrue(true ? default121 == 1390893829 * (-1) : true);
        int default122;
        default122 = MathUtils.subAndCheck(1390893829, 1);
        assertTrue(true ? default122 == 1390893829 - 1 : true);
        MathUtils.round((float) 1390893829, (-1390893829));
        long default123;
        default123 = MathUtils.mulAndCheck(3223L, (long) 1);
        assertTrue(true ? default123 == 3223L * (long) 1 : true);
        int default124;
        default124 = MathUtils.mulAndCheck(2022, 1390893829);
        assertTrue(true ? default124 == 2022 * 1390893829 : true);
    }

    @Test(timeout = 4000)
    public void test10067() throws Throwable {
        int int0 = 779;
        MathUtils.factorialLog(779);
        MathUtils.sign(4411.838655764204);
        MathUtils.lcm(779, 1286);
        long default125;
        default125 = MathUtils.mulAndCheck(4503599627370496L, (long) 1001794);
        assertTrue(true ? default125 == 4503599627370496L * (long) 1001794 : true);
    }

    @Test(timeout = 4000)
    public void test10368() throws Throwable {
        MathUtils.cosh(6.283185307179586);
        short default126;
        default126 = MathUtils.indicator((short) (-1));
        assertTrue(true ? (default126 == (short) (-1) || default126 == -1) : true);
        short default127;
        default127 = MathUtils.indicator((short) (-1));
        assertTrue(true ? (default127 == (short) (-1) || default127 == -1) : true);
        int int0 = 2;
        MathUtils.binomialCoefficientLog(2, 2);
        int int1 = 2;
        MathUtils.round((-3167.637F), 2, 2);
        int int2 = 4240;
        double default128;
        if (4240 < 0) {
            try {
                default128 = MathUtils.factorialDouble(4240);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default128 = MathUtils.factorialDouble(4240);
        }
        MathUtils.binomialCoefficientDouble(0, 118);
    }

    @Test(timeout = 4000)
    public void test11069() throws Throwable {
        MathUtils.sign((-816.297189));
        long default129;
        default129 = MathUtils.mulAndCheck((-3840L), (-377L));
        assertTrue(true ? default129 == (-3840L) * (-377L) : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 1447680L;
        doubleArray0[1] = (double) (-377L);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-1.0);
        MathUtils.hash(doubleArray0);
        float default130;
        default130 = MathUtils.sign((float) 395698079);
        assertTrue(true ? default130 == (float) 395698079 : true);
        long default131;
        default131 = MathUtils.subAndCheck((-377L), 1447680L);
        assertTrue(true ? default131 == (-377L) - 1447680L : true);
        MathUtils.gcd(395698079, 395698079);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign(395698079);
        MathUtils.round((float) (-3840L), 395698079, 1);
        MathUtils.nextAfter((-2145.3777), (-377L));
        int int0 = 5316;
        MathUtils.indicator(5316);
        MathUtils.indicator(0.0F);
        int default132;
        default132 = MathUtils.mulAndCheck(395698079, (-639));
        assertTrue(true ? default132 == 395698079 * (-639) : true);
    }

    @Test(timeout = 4000)
    public void test11170() throws Throwable {
        MathUtils.nextAfter(4.9E-324, 0.0);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 4.9E-324;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        MathUtils.hash(doubleArray0);
        byte default133;
        default133 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default133 == (byte) 0 : true);
        MathUtils.sign(1530.2847F);
        MathUtils.scalb(0.0, (byte) 0);
        MathUtils.gcd((byte) 1, (-1));
        int int0 = 1083;
        MathUtils.round(0.0, 1083);
        MathUtils.sign(1814L);
        MathUtils.lcm(1083, 28658942);
    }

    @Test(timeout = 4000)
    public void test11971() throws Throwable {
        assertTrue(0.0 > 0);
        assertTrue(0.0 > 0);
        double default134;
        default134 = MathUtils.log(0.0, 0.0);
        MathUtils.cosh(Double.NaN);
        long default135;
        default135 = MathUtils.subAndCheck(3463L, (-9223372036854775780L));
        assertTrue(true ? default135 == 3463L - (-9223372036854775780L) : true);
    }

    @Test(timeout = 4000)
    public void test12172() throws Throwable {
        long default136;
        default136 = MathUtils.indicator((-4138L));
        assertTrue(true ? default136 == (-4138L) : true);
        MathUtils.gcd(31, 31);
        MathUtils.cosh((-1L));
        long default137;
        default137 = MathUtils.subAndCheck(9223372036854775807L, (-1572L));
        assertTrue(true ? default137 == 9223372036854775807L - (-1572L) : true);
    }

    @Test(timeout = 4000)
    public void test12273() throws Throwable {
        int int0 = 7449;
        int default138;
        default138 = MathUtils.subAndCheck(7449, (-2147483645));
        assertTrue(true ? default138 == 7449 - (-2147483645) : true);
    }
}
