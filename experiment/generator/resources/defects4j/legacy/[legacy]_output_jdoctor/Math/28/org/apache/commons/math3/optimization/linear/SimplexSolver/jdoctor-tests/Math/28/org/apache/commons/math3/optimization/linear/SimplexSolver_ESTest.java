/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 11:59:10 GMT 2023
 */
package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SimplexSolver_ESTest extends SimplexSolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 100;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0).when(linearConstraint0).getCoefficients();
        doReturn(relationship0).when(linearConstraint0).getRelationship();
        doReturn((-1092.386), (-1092.386)).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 100.0, 100);
        simplexSolver0.doIteration(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        simplexSolver0.solvePhase1((SimplexTableau) null);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        simplexSolver0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[1];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[2];
        doubleArray1[0] = (Double) 100.0;
        doubleArray1[1] = (Double) 100.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.LEQ;
        GoalType goalType0 = GoalType.MAXIMIZE;
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(100, 100);
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0, openMapRealVector1).when(linearConstraint0).getCoefficients();
        doReturn(relationship0, relationship0).when(linearConstraint0).getRelationship();
        doReturn(100.0, doubleArray1[1], 1.0E-6, (-1234.0)).when(linearConstraint0).getValue();
        linkedList0.offerLast(linearConstraint0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 100);
        simplexSolver0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 100;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[2];
        doubleArray1[0] = (Double) 100.0;
        doubleArray1[1] = (Double) 100.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();
        doReturn(relationship0, relationship0).when(linearConstraint0).getRelationship();
        doReturn(100.0, 100.0, 100.0, (double) 100).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
        simplexSolver0.doOptimize();
        simplexSolver0.getIterations();
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver(1594.949, (-599));
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[1];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[2];
        doubleArray1[0] = (Double) 100.0;
        doubleArray1[1] = (Double) 100.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0, openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();
        doReturn(relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
        doReturn(100.0, 100.0, 100.0, (double) 100, 1.0E-12).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100.0, 100);
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
        Relationship relationship1 = Relationship.EQ;
        LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0).when(linearConstraint1).getCoefficients();
        doReturn(relationship1).when(linearConstraint1).getRelationship();
        doReturn(100.0, doubleArray1[1]).when(linearConstraint1).getValue();
        linkedList0.offerLast(linearConstraint1);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 100);
        simplexSolver0.solvePhase1(simplexTableau1);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[1];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[2];
        doubleArray1[0] = (Double) 100.0;
        doubleArray1[1] = (Double) 100.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.LEQ;
        Relationship relationship1 = Relationship.EQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0, openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();
        doReturn(relationship0, relationship0, relationship1).when(linearConstraint0).getRelationship();
        doReturn(100.0, 100.0, 100.0, (double) 100, doubleArray1[0]).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100.0, 100);
        LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0, openMapRealVector0).when(linearConstraint1).getCoefficients();
        doReturn(relationship1, relationship1).when(linearConstraint1).getRelationship();
        doReturn(100.0, doubleArray1[1], 1.0E-12, (double) 100).when(linearConstraint1).getValue();
        linkedList0.offerLast(linearConstraint1);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100.0, 100);
        SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray1[0], 100);
        simplexSolver0.solvePhase1(simplexTableau2);
        simplexSolver0.getIterations();
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[14];
        doubleArray0[0] = (double) 100;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[2];
        doubleArray1[0] = (Double) 100.0;
        doubleArray1[1] = (Double) 100.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0).when(linearConstraint0).getCoefficients();
        doReturn(relationship0).when(linearConstraint0).getRelationship();
        doReturn(100.0, 100.0).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0).when(linearConstraint1).getCoefficients();
        doReturn(relationship0).when(linearConstraint1).getRelationship();
        doReturn(100.0, doubleArray1[1]).when(linearConstraint1).getValue();
        linkedList0.offerLast(linearConstraint1);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, 100);
        simplexSolver0.doIteration(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[3];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[2];
        doubleArray1[0] = (Double) 100.0;
        doubleArray1[1] = (Double) 100.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0).when(linearConstraint0).getCoefficients();
        doReturn(relationship0).when(linearConstraint0).getRelationship();
        doReturn(100.0, 100.0).when(linearConstraint0).getValue();
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
        doReturn(openMapRealVector0).when(linearConstraint1).getCoefficients();
        doReturn(relationship0).when(linearConstraint1).getRelationship();
        doReturn(100.0, doubleArray1[1]).when(linearConstraint1).getValue();
        linkedList0.offerLast(linearConstraint1);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 100);
        simplexSolver0.solvePhase1(simplexTableau0);
        simplexSolver0.getIterations();
    }

    @Test(timeout = 4000)
    public void test1210() throws Throwable {
        SimplexSolver simplexSolver0 = new SimplexSolver();
        double[] doubleArray0 = new double[14];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, 100);
        simplexSolver0.doIteration(simplexTableau0);
    }
}
