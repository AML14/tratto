[
  {
    "signature": "org.apache.commons.math.distribution.FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom)",
    "name": "org.apache.commons.math.distribution.FDistributionImpl",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "numeratorDegreesOfFreedom"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "denominatorDegreesOfFreedom"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "numeratorDegreesOfFreedom"
        },
        "comment": "the numerator degrees of freedom.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "denominatorDegreesOfFreedom"
        },
        "comment": "the denominator degrees of freedom.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "cumulativeProbability(double x)",
    "name": "cumulativeProbability",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "the value at which the CDF is evaluated.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "CDF for this distribution.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.MathException",
          "name": "MathException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the cumulative probability can not be computed due to convergence or other numerical errors.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "inverseCumulativeProbability(double p)",
    "name": "inverseCumulativeProbability",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "p is desired. desired probability.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x, such that P(X < x) = p.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.MathException",
          "name": "MathException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the inverse cumulative probability can not be computed due to convergence or other numerical errors.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "p is not a valid probability.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getDomainLowerBound(double p)",
    "name": "getDomainLowerBound",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "the desired probability for the critical value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "domain value lower bound, i.e. P(X < lower bound) < p.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDomainUpperBound(double p)",
    "name": "getDomainUpperBound",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "the desired probability for the critical value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "domain value upper bound, i.e. P(X < upper bound) > p.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getInitialDomain(double p)",
    "name": "getInitialDomain",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "the desired probability for the critical value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "initial domain value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setNumeratorDegreesOfFreedom(double degreesOfFreedom)",
    "name": "setNumeratorDegreesOfFreedom",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "degreesOfFreedom"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "degreesOfFreedom"
        },
        "comment": "degreesOfFreedom is new. new numerator degrees of freedom.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "degreesOfFreedom is not positive.",
        "kind": "THROWS",
        "condition": "(args[0]>0) == false"
      }
    ]
  },
  {
    "signature": "getNumeratorDegreesOfFreedom()",
    "name": "getNumeratorDegreesOfFreedom",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the numerator degrees of freedom.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setDenominatorDegreesOfFreedom(double degreesOfFreedom)",
    "name": "setDenominatorDegreesOfFreedom",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "degreesOfFreedom"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "degreesOfFreedom"
        },
        "comment": "degreesOfFreedom is new. new denominator degrees of freedom.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "degreesOfFreedom is not positive.",
        "kind": "THROWS",
        "condition": "(args[0]>0) == false"
      }
    ]
  },
  {
    "signature": "getDenominatorDegreesOfFreedom()",
    "name": "getDenominatorDegreesOfFreedom",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.FDistributionImpl",
      "name": "FDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.FDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the denominator degrees of freedom.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]