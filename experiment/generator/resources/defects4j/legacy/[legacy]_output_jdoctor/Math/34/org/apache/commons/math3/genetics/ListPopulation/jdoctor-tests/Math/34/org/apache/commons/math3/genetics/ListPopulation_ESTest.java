/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 13:39:32 GMT 2023
 */
package org.apache.commons.math3.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.ElitisticListPopulation;
import org.apache.commons.math3.genetics.Population;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ListPopulation_ESTest extends ListPopulation_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(3542, 0.21449066);
        elitisticListPopulation0.toString();
        int int0 = (-1108);
        elitisticListPopulation0.setPopulationLimit((-1108));
        double double0 = 0.9;
        elitisticListPopulation0.setElitismRate(double0);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        int int0 = 1;
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        linkedList0.offer((Chromosome) null);
        elitisticListPopulation0.addChromosomes(linkedList0);
        Chromosome chromosome0 = elitisticListPopulation0.getFittestChromosome();
        linkedList0.add(chromosome0);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        int int0 = 3227;
        double double0 = 0.9;
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(3227, 0.9);
        if ((List<Chromosome>) null == null) {
            try {
                elitisticListPopulation0.setChromosomes((List<Chromosome>) null);
                fail();
            } catch (org.apache.commons.math3.exception.NullArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            elitisticListPopulation0.setChromosomes((List<Chromosome>) null);
        }
        elitisticListPopulation0.getChromosomes();
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        linkedList0.add((Chromosome) null);
        linkedList0.add((Chromosome) null);
        elitisticListPopulation0.setChromosomes(linkedList0);
        elitisticListPopulation0.getPopulationSize();
        elitisticListPopulation0.iterator();
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        elitisticListPopulation0.setPopulationLimit(1499);
        linkedList0.add((Chromosome) null);
        linkedList0.offer((Chromosome) null);
        elitisticListPopulation0.setChromosomes(linkedList0);
        elitisticListPopulation0.setPopulationLimit(1);
        LinkedList<Chromosome> linkedList1 = new LinkedList<Chromosome>();
        ElitisticListPopulation elitisticListPopulation1 = (ElitisticListPopulation) elitisticListPopulation0.nextGeneration();
        elitisticListPopulation1.setChromosomes(linkedList0);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((-279), (-279));
        elitisticListPopulation0.getChromosomeList();
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        double double0 = 0.0;
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(298, 0.0);
        elitisticListPopulation0.getFittestChromosome();
        elitisticListPopulation0.getFittestChromosome();
    }

    @Test(timeout = 4000)
    public void test177() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(2312, 0.0);
        elitisticListPopulation0.getChromosomeList();
        elitisticListPopulation0.toString();
        Chromosome chromosome0 = elitisticListPopulation0.getFittestChromosome();
        elitisticListPopulation0.addChromosome(chromosome0);
        elitisticListPopulation0.getChromosomes();
    }

    @Test(timeout = 4000)
    public void test198() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(29, 0.0);
        elitisticListPopulation0.setPopulationLimit((-3288));
        elitisticListPopulation0.getFittestChromosome();
        elitisticListPopulation0.getPopulationSize();
        elitisticListPopulation0.getChromosomes();
    }

    @Test(timeout = 4000)
    public void test219() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(415, 0.0);
        elitisticListPopulation0.setPopulationLimit(415);
        Chromosome chromosome0 = elitisticListPopulation0.getFittestChromosome();
        elitisticListPopulation0.addChromosome(chromosome0);
        LinkedList<Chromosome> linkedList0 = null;
        linkedList0 = new LinkedList<Chromosome>();
    }

    @Test(timeout = 4000)
    public void test2310() throws Throwable {
        int int0 = 1;
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        int int1 = 0;
        elitisticListPopulation0.setPopulationLimit(0);
    }

    @Test(timeout = 4000)
    public void test2511() throws Throwable {
        int int0 = 3236;
        double double0 = 0.9;
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(3236, 0.9);
        if ((List<Chromosome>) null == null) {
            try {
                elitisticListPopulation0.setChromosomes((List<Chromosome>) null);
                fail();
            } catch (org.apache.commons.math3.exception.NullArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            elitisticListPopulation0.setChromosomes((List<Chromosome>) null);
        }
        elitisticListPopulation0.getChromosomes();
    }

    @Test(timeout = 4000)
    public void test3312() throws Throwable {
        int int0 = 1;
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        linkedList0.offer((Chromosome) null);
        elitisticListPopulation0.addChromosomes(linkedList0);
        elitisticListPopulation0.getChromosomes();
        elitisticListPopulation0.setPopulationLimit(1);
        Chromosome chromosome0 = elitisticListPopulation0.getFittestChromosome();
        linkedList0.add(chromosome0);
    }

    @Test(timeout = 4000)
    public void test3413() throws Throwable {
        int int0 = 1;
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        linkedList0.add((Chromosome) null);
        linkedList0.offer((Chromosome) null);
        elitisticListPopulation0.addChromosomes(linkedList0);
        elitisticListPopulation0.getChromosomes();
    }

    @Test(timeout = 4000)
    public void test3514() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        elitisticListPopulation0.getChromosomes();
        linkedList0.add((Chromosome) null);
        linkedList0.offer((Chromosome) null);
        elitisticListPopulation0.setPopulationLimit(1);
        LinkedList<Chromosome> linkedList1 = new LinkedList<Chromosome>();
        linkedList0.addAll((Collection<? extends Chromosome>) linkedList1);
        ElitisticListPopulation elitisticListPopulation1 = (ElitisticListPopulation) elitisticListPopulation0.nextGeneration();
        elitisticListPopulation1.setChromosomes(linkedList0);
        elitisticListPopulation0.getPopulationSize();
        elitisticListPopulation1.iterator();
    }

    @Test(timeout = 4000)
    public void test3615() throws Throwable {
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        elitisticListPopulation0.setPopulationLimit(1512);
        linkedList0.add((Chromosome) null);
        linkedList0.offer((Chromosome) null);
        elitisticListPopulation0.setChromosomes(linkedList0);
        elitisticListPopulation0.setPopulationLimit(1);
        LinkedList<Chromosome> linkedList1 = new LinkedList<Chromosome>();
        ElitisticListPopulation elitisticListPopulation1 = (ElitisticListPopulation) elitisticListPopulation0.nextGeneration();
        elitisticListPopulation1.setChromosomes(linkedList0);
    }

    @Test(timeout = 4000)
    public void test3716() throws Throwable {
        LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
        linkedList0.add((Chromosome) null);
        linkedList0.offer((Chromosome) null);
        ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 1, 0.0);
        elitisticListPopulation0.getFittestChromosome();
        elitisticListPopulation0.getElitismRate();
        elitisticListPopulation0.getChromosomes();
    }
}
