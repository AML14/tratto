/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 16:36:27 GMT 2023
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[5] = 1.63E18;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[5] = 1.63E18;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[5] = 1.63E18;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[7] = 3.834E-20;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[7] = 3.834E-20;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[7] = 3.834E-20;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 61;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test0027() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 61;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test0038() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = (double) 2821L;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test0049() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 1060.6;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test00510() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[1] = (double) 872356L;
        MathUtils.checkOrder(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test00611() throws Throwable {
        int[] intArray0 = new int[3];
        intArray0[0] = 14;
        double double0 = MathUtils.distance(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test00612() throws Throwable {
        int[] intArray0 = new int[3];
        intArray0[0] = 14;
        double double0 = MathUtils.distance(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test00613() throws Throwable {
        int[] intArray0 = new int[3];
        intArray0[0] = 14;
        double double0 = MathUtils.distance(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test00714() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 3628800L;
        double double0 = MathUtils.distance(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test00715() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 3628800L;
        double double0 = MathUtils.distance(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test00716() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 3628800L;
        double double0 = MathUtils.distance(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test00817() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[0] = (int) (byte) 1;
        int[] intArray1 = new int[5];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test00818() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[0] = (int) (byte) 1;
        int[] intArray1 = new int[5];
        MathUtils.distance1(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test00919() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[0] = (int) (byte) 1;
        int int0 = MathUtils.distance1(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test00920() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[0] = (int) (byte) 1;
        int int0 = MathUtils.distance1(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test00921() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[0] = (int) (byte) 1;
        int int0 = MathUtils.distance1(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test01022() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[5] = Double.NEGATIVE_INFINITY;
        double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01023() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[5] = Double.NEGATIVE_INFINITY;
        double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01024() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[5] = Double.NEGATIVE_INFINITY;
        double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01125() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01126() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01127() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01228() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test01229() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test01230() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test01231() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test01232() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test01233() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    }

    @Test(timeout = 4000)
    public void test01234() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    }

    @Test(timeout = 4000)
    public void test01235() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    }

    @Test(timeout = 4000)
    public void test01236() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test01237() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    }

    @Test(timeout = 4000)
    public void test01238() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    }

    @Test(timeout = 4000)
    public void test01239() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test01240() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test01241() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test01242() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test01343() throws Throwable {
        assertTrue(0L > 0);
        long long0;
        if (0L < 0) {
            try {
                long0 = MathUtils.pow(0L, 0L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow(0L, 0L);
        }
    }

    @Test(timeout = 4000)
    public void test01444() throws Throwable {
        float float0 = MathUtils.round(Float.NaN, 0);
    }

    @Test(timeout = 4000)
    public void test01545() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    }

    @Test(timeout = 4000)
    public void test01546() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    }

    @Test(timeout = 4000)
    public void test01547() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    }

    @Test(timeout = 4000)
    public void test01548() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01549() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    }

    @Test(timeout = 4000)
    public void test01550() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    }

    @Test(timeout = 4000)
    public void test01551() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    }

    @Test(timeout = 4000)
    public void test01552() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    }

    @Test(timeout = 4000)
    public void test01653() throws Throwable {
        double double0 = MathUtils.scalb((-6340.6206967), (-1981));
    }

    @Test(timeout = 4000)
    public void test01754() throws Throwable {
        short short0;
        short0 = MathUtils.indicator((short) 0);
        assertTrue(true ? (short0 == (short) 0 || short0 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test01855() throws Throwable {
        long long0;
        long0 = MathUtils.indicator(0L);
        assertTrue(true ? long0 == 0L : true);
    }

    @Test(timeout = 4000)
    public void test01956() throws Throwable {
        int int0 = MathUtils.indicator(2471);
    }

    @Test(timeout = 4000)
    public void test02057() throws Throwable {
        double double0 = MathUtils.indicator((double) 0);
    }

    @Test(timeout = 4000)
    public void test02158() throws Throwable {
        byte byte0;
        byte0 = MathUtils.indicator((byte) 39);
        assertTrue(true ? byte0 == (byte) 39 : true);
    }

    @Test(timeout = 4000)
    public void test02259() throws Throwable {
        long long0 = MathUtils.gcd(0L, 2216L);
    }

    @Test(timeout = 4000)
    public void test02360() throws Throwable {
        double double0 = MathUtils.factorialDouble((byte) 110);
    }

    @Test(timeout = 4000)
    public void test02461() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02462() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02463() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02464() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02465() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02466() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02467() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02468() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02469() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02470() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02571() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02572() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02573() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02574() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02575() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02576() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02577() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02578() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02579() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02580() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02681() throws Throwable {
        MathUtils.equalsIncludingNaN(0.0, 752.22, 0);
    }

    @Test(timeout = 4000)
    public void test02782() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(0.4342944622039795, 0.0, 0.4342944622039795);
    }

    @Test(timeout = 4000)
    public void test02883() throws Throwable {
        boolean boolean0 = MathUtils.equals(1.0, (double) 2L, 1.0);
    }

    @Test(timeout = 4000)
    public void test02984() throws Throwable {
        boolean boolean0 = MathUtils.equals(10.0, 3087.04427599);
    }

    @Test(timeout = 4000)
    public void test03085() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(61, (-6));
    }

    @Test(timeout = 4000)
    public void test03186() throws Throwable {
        long long0;
        long0 = MathUtils.subAndCheck(0L, (long) 9);
        assertTrue(true ? long0 == 0L - (long) 9 : true);
    }

    @Test(timeout = 4000)
    public void test03287() throws Throwable {
        long long0;
        long0 = MathUtils.addAndCheck(1800L, 1800L);
        assertTrue(true ? long0 == 1800L + 1800L : true);
    }

    @Test(timeout = 4000)
    public void test03388() throws Throwable {
        int int0;
        int0 = MathUtils.addAndCheck(31, 64);
        assertTrue(true ? int0 == 31 + 64 : true);
    }

    @Test(timeout = 4000)
    public void test03489() throws Throwable {
        long long0;
        long0 = MathUtils.subAndCheck(471L, (long) 1);
        assertTrue(true ? long0 == 471L - (long) 1 : true);
    }

    @Test(timeout = 4000)
    public void test03590() throws Throwable {
        int int0;
        int0 = MathUtils.subAndCheck((-639), (-639));
        assertTrue(true ? int0 == (-639) - (-639) : true);
    }

    @Test(timeout = 4000)
    public void test03691() throws Throwable {
        int int0;
        int0 = MathUtils.subAndCheck(0, 2257);
        assertTrue(true ? int0 == 0 - 2257 : true);
    }

    @Test(timeout = 4000)
    public void test03792() throws Throwable {
        double double0 = MathUtils.sinh(0.0);
    }

    @Test(timeout = 4000)
    public void test03893() throws Throwable {
        double double0 = MathUtils.sinh((-3052.3));
    }

    @Test(timeout = 4000)
    public void test03994() throws Throwable {
        float float0 = MathUtils.round(0.0F, 9, 0);
    }

    @Test(timeout = 4000)
    public void test04095() throws Throwable {
        float float0 = MathUtils.round((-3002.0F), 0, 0);
    }

    @Test(timeout = 4000)
    public void test04196() throws Throwable {
        float float0 = MathUtils.round((float) 0, 915);
    }

    @Test(timeout = 4000)
    public void test04297() throws Throwable {
        float float0 = MathUtils.round((float) 14, 14);
    }

    @Test(timeout = 4000)
    public void test04398() throws Throwable {
        float float0 = MathUtils.round((-3241.0F), 30);
    }

    @Test(timeout = 4000)
    public void test04499() throws Throwable {
        double double0 = MathUtils.round(0.0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test045100() throws Throwable {
        double double0 = MathUtils.round((double) 1, 136, 0);
    }

    @Test(timeout = 4000)
    public void test046101() throws Throwable {
        double double0 = MathUtils.round(1062.0, 706);
    }

    @Test(timeout = 4000)
    public void test047102() throws Throwable {
        double double0 = MathUtils.round((-1531.101501175026), 927);
    }

    @Test(timeout = 4000)
    public void test048103() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test048104() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test048105() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test048106() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test048107() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test048108() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test048109() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test048110() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test048111() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test048112() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test048113() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test048114() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test048115() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test048116() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test048117() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test049118() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
    }

    @Test(timeout = 4000)
    public void test049119() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test049120() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test049121() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
    }

    @Test(timeout = 4000)
    public void test049122() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
    }

    @Test(timeout = 4000)
    public void test049123() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
    }

    @Test(timeout = 4000)
    public void test049124() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test049125() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test049126() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test049127() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test049128() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test050129() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test050130() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test050131() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test050132() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test050133() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test050134() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test050135() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test050136() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test050137() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test050138() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test050139() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test050140() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test050141() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test050142() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test050143() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test051144() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
    }

    @Test(timeout = 4000)
    public void test051145() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test051146() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test051147() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
    }

    @Test(timeout = 4000)
    public void test051148() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
    }

    @Test(timeout = 4000)
    public void test051149() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
    }

    @Test(timeout = 4000)
    public void test051150() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test051151() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test051152() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test051153() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test052154() throws Throwable {
        assertTrue((long) 1 > 0);
        long long0;
        if ((long) 1 < 0) {
            try {
                long0 = MathUtils.pow(4635822497680326656L, (long) 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow(4635822497680326656L, (long) 1);
        }
    }

    @Test(timeout = 4000)
    public void test053155() throws Throwable {
        assertTrue(483L > 0);
        long long0;
        if (483L < 0) {
            try {
                long0 = MathUtils.pow((-4035746434778044925L), 483L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((-4035746434778044925L), 483L);
        }
    }

    @Test(timeout = 4000)
    public void test054156() throws Throwable {
        assertTrue(1 > 0);
        long long0;
        if (1 < 0) {
            try {
                long0 = MathUtils.pow((long) (byte) 0, 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((long) (byte) 0, 1);
        }
    }

    @Test(timeout = 4000)
    public void test055157() throws Throwable {
        assertTrue(0 > 0);
        long long0;
        if (0 < 0) {
            try {
                long0 = MathUtils.pow((-309L), 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((-309L), 0);
        }
    }

    @Test(timeout = 4000)
    public void test056158() throws Throwable {
        assertTrue((long) 1880 > 0);
        int int0;
        if ((long) 1880 < 0) {
            try {
                int0 = MathUtils.pow(1880, (long) 1880);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            int0 = MathUtils.pow(1880, (long) 1880);
        }
    }

    @Test(timeout = 4000)
    public void test057159() throws Throwable {
        assertTrue((long) 143 > 0);
        int int0;
        if ((long) 143 < 0) {
            try {
                int0 = MathUtils.pow(143, (long) 143);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            int0 = MathUtils.pow(143, (long) 143);
        }
    }

    @Test(timeout = 4000)
    public void test058160() throws Throwable {
        assertTrue((int) (byte) 0 > 0);
        int int0;
        if ((int) (byte) 0 < 0) {
            try {
                int0 = MathUtils.pow(1, (int) (byte) 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            int0 = MathUtils.pow(1, (int) (byte) 0);
        }
    }

    @Test(timeout = 4000)
    public void test059161() throws Throwable {
        assertTrue(272 > 0);
        int int0;
        if (272 < 0) {
            try {
                int0 = MathUtils.pow(9, 272);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            int0 = MathUtils.pow(9, 272);
        }
    }

    @Test(timeout = 4000)
    public void test060162() throws Throwable {
        double double0;
        double0 = MathUtils.normalizeAngle(0.0, 0.0);
        assertTrue(true ? double0 == 0.0 - 0.0 : true);
    }

    @Test(timeout = 4000)
    public void test061163() throws Throwable {
        double double0 = MathUtils.normalizeAngle(2304L, (-2648.155));
    }

    @Test(timeout = 4000)
    public void test062164() throws Throwable {
        int int0;
        int0 = MathUtils.mulAndCheck(0, 40);
        assertTrue(true ? int0 == 0 * 40 : true);
    }

    @Test(timeout = 4000)
    public void test063165() throws Throwable {
        int int0;
        int0 = MathUtils.mulAndCheck((-2703), 3908);
        assertTrue(true ? int0 == (-2703) * 3908 : true);
    }

    @Test(timeout = 4000)
    public void test064166() throws Throwable {
        assertTrue(0.0 > 0);
        assertTrue(570.4046387729519 > 0);
        double double0;
        double0 = MathUtils.log(0.0, 570.4046387729519);
    }

    @Test(timeout = 4000)
    public void test065167() throws Throwable {
        double double0 = MathUtils.log(4507L, 4507L);
    }

    @Test(timeout = 4000)
    public void test066168() throws Throwable {
        double double0 = MathUtils.log((byte) 1, 0.0);
    }

    @Test(timeout = 4000)
    public void test067169() throws Throwable {
        int int0 = MathUtils.hash((double[]) null);
    }

    @Test(timeout = 4000)
    public void test068170() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = Double.NEGATIVE_INFINITY;
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test068171() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = Double.NEGATIVE_INFINITY;
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test068172() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = Double.NEGATIVE_INFINITY;
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test069173() throws Throwable {
        int int0 = MathUtils.hash(1.0);
    }

    @Test(timeout = 4000)
    public void test070174() throws Throwable {
        int int0 = MathUtils.hash(9.219544613762692E-9);
    }

    @Test(timeout = 4000)
    public void test071175() throws Throwable {
        int int0 = MathUtils.gcd(0, 0);
    }

    @Test(timeout = 4000)
    public void test072176() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test072177() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test072178() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test072179() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
        intArray0.equals((Object) intArray1);
    }

    @Test(timeout = 4000)
    public void test072180() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test072181() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test072182() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test072183() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test072184() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test072185() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test073186() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test073187() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test073188() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test073189() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test073190() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test073191() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test073192() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test073193() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test073194() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test073195() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test074196() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test074197() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test074198() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test074199() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
        intArray0.equals((Object) intArray1);
    }

    @Test(timeout = 4000)
    public void test074200() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test074201() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test074202() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test074203() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test074204() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test074205() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test075206() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test075207() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test075208() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test075209() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test075210() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test075211() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test075212() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test075213() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test075214() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test075215() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test076216() throws Throwable {
        long long0;
        long0 = MathUtils.addAndCheck(0L, (long) (short) 0);
        assertTrue(true ? long0 == 0L + (long) (short) 0 : true);
    }

    @Test(timeout = 4000)
    public void test077217() throws Throwable {
        long long0;
        long0 = MathUtils.addAndCheck((long) (byte) 1, (-1694L));
        assertTrue(true ? long0 == (long) (byte) 1 + (-1694L) : true);
    }

    @Test(timeout = 4000)
    public void test078218() throws Throwable {
        MathUtils.safeNorm((double[]) null);
    }

    @Test(timeout = 4000)
    public void test079219() throws Throwable {
        MathUtils.round(2921.464137515, (int) (byte) 0, (-2682));
    }

    @Test(timeout = 4000)
    public void test080220() throws Throwable {
        MathUtils.round((-1725.28993636968), 710504735, 0);
    }

    @Test(timeout = 4000)
    public void test081221() throws Throwable {
        MathUtils.pow((BigInteger) null, (BigInteger) null);
    }

    @Test(timeout = 4000)
    public void test082222() throws Throwable {
        assertTrue(65L > 0);
        java.math.BigInteger default0;
        if (65L < 0) {
            try {
                default0 = MathUtils.pow((BigInteger) null, 65L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default0 = MathUtils.pow((BigInteger) null, 65L);
        }
    }

    @Test(timeout = 4000)
    public void test083223() throws Throwable {
        assertTrue(883 > 0);
        java.math.BigInteger default1;
        if (883 < 0) {
            try {
                default1 = MathUtils.pow((BigInteger) null, 883);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default1 = MathUtils.pow((BigInteger) null, 883);
        }
    }

    @Test(timeout = 4000)
    public void test084224() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
    }

    @Test(timeout = 4000)
    public void test084225() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
        BigInteger bigInteger0 = new BigInteger(1162067162, mockRandom0);
    }

    @Test(timeout = 4000)
    public void test084226() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
        BigInteger bigInteger0 = new BigInteger(1162067162, mockRandom0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test084227() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
        BigInteger bigInteger0 = new BigInteger(1162067162, mockRandom0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test084228() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
        BigInteger bigInteger0 = new BigInteger(1162067162, mockRandom0);
        MathUtils.pow(bigInteger0, 1162067162);
    }

    @Test(timeout = 4000)
    public void test085229() throws Throwable {
        MathUtils.normalizeArray((double[]) null, (-1067.364075367));
    }

    @Test(timeout = 4000)
    public void test086230() throws Throwable {
        MathUtils.lcm(4577762542105553359L, 121645100408832000L);
    }

    @Test(timeout = 4000)
    public void test087231() throws Throwable {
        MathUtils.lcm((-1287859880), (-2376));
    }

    @Test(timeout = 4000)
    public void test089232() throws Throwable {
        MathUtils.distanceInf((int[]) null, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test090233() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = new int[1];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test090234() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = new int[1];
        MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test091235() throws Throwable {
        MathUtils.distanceInf((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test092236() throws Throwable {
        MathUtils.distance1((int[]) null, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test093237() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathUtils.distance1(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test094238() throws Throwable {
        int[] intArray0 = new int[5];
        MathUtils.distance((int[]) null, intArray0);
    }

    @Test(timeout = 4000)
    public void test095239() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = new int[1];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test095240() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = new int[1];
        MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test096241() throws Throwable {
        MathUtils.distance((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test097242() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = new double[1];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test097243() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = new double[1];
        MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test098244() throws Throwable {
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test099245() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test100246() throws Throwable {
        MathUtils.binomialCoefficientDouble((-2147483647), 72);
    }

    @Test(timeout = 4000)
    public void test101247() throws Throwable {
        MathUtils.binomialCoefficient((-386), 1547);
    }

    @Test(timeout = 4000)
    public void test102248() throws Throwable {
        double[] doubleArray0 = new double[6];
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test103249() throws Throwable {
        long default2;
        default2 = MathUtils.mulAndCheck(287L, 2935890503282001226L);
        assertTrue(true ? default2 == 287L * 2935890503282001226L : true);
    }

    @Test(timeout = 4000)
    public void test104250() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((long) (short) 1, 336L);
        assertTrue(true ? long0 == (long) (short) 1 * 336L : true);
    }

    @Test(timeout = 4000)
    public void test105251() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((-5034868814120038111L), 1L);
        assertTrue(true ? long0 == (-5034868814120038111L) * 1L : true);
    }

    @Test(timeout = 4000)
    public void test106252() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck(0L, 1800L);
        assertTrue(true ? long0 == 0L * 1800L : true);
    }

    @Test(timeout = 4000)
    public void test107253() throws Throwable {
        int int0;
        int0 = MathUtils.mulAndCheck((-473), (-1621));
        assertTrue(true ? int0 == (-473) * (-1621) : true);
    }

    @Test(timeout = 4000)
    public void test108254() throws Throwable {
        float float0 = MathUtils.indicator((-1.0F));
    }

    @Test(timeout = 4000)
    public void test109255() throws Throwable {
        long long0 = MathUtils.gcd(355687428096000L, 355687428096000L);
    }

    @Test(timeout = 4000)
    public void test110256() throws Throwable {
        int int0 = MathUtils.gcd(9, 1532);
    }

    @Test(timeout = 4000)
    public void test111257() throws Throwable {
        long long0;
        if (13 < 0) {
            try {
                long0 = MathUtils.factorial(13);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.factorial(13);
        }
    }

    @Test(timeout = 4000)
    public void test112258() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) 1, (double) (-978), 123);
    }

    @Test(timeout = 4000)
    public void test113259() throws Throwable {
        boolean boolean0 = MathUtils.equals((-1409.0), (-1409.0), 902);
    }

    @Test(timeout = 4000)
    public void test114260() throws Throwable {
        MathUtils.equals(0.5000000000042687, 3087.04427599, 1073741824);
    }

    @Test(timeout = 4000)
    public void test115261() throws Throwable {
        boolean boolean0 = MathUtils.equals(545.8799724201457, 545.8799724201457, 1030);
    }

    @Test(timeout = 4000)
    public void test116262() throws Throwable {
        MathUtils.equals((-3010.7841332), 1439.9909648456148, (-2144));
    }

    @Test(timeout = 4000)
    public void test117263() throws Throwable {
        boolean boolean0 = MathUtils.equals((-2259.94506036678), (-2259.94506036678), (-2259.94506036678));
    }

    @Test(timeout = 4000)
    public void test118264() throws Throwable {
        boolean boolean0 = MathUtils.equals(2.2250738585072014E-308, (double) 1, 2.2250738585072014E-308);
    }

    @Test(timeout = 4000)
    public void test119265() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
    }

    @Test(timeout = 4000)
    public void test120266() throws Throwable {
        boolean boolean0 = MathUtils.equals((-3052.3), (-3052.3));
    }

    @Test(timeout = 4000)
    public void test121267() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(2025, 14);
    }

    @Test(timeout = 4000)
    public void test122268() throws Throwable {
        MathUtils.binomialCoefficient(119764, 927);
    }

    @Test(timeout = 4000)
    public void test123269() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[2] = Double.NaN;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test123270() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[2] = Double.NaN;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test123271() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[2] = Double.NaN;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test124272() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 2.2250738585072014E-308;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test124273() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 2.2250738585072014E-308;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test124274() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 2.2250738585072014E-308;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test125275() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[6] = Double.POSITIVE_INFINITY;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test125276() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[6] = Double.POSITIVE_INFINITY;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test125277() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[6] = Double.POSITIVE_INFINITY;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test126278() throws Throwable {
        double[] doubleArray0 = new double[8];
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test126279() throws Throwable {
        double[] doubleArray0 = new double[8];
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test126280() throws Throwable {
        double[] doubleArray0 = new double[8];
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test127281() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 1060.6;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test128282() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 61;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test129283() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = 1.0;
        MathUtils.checkOrder(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test129284() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = 1.0;
        MathUtils.checkOrder(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test130285() throws Throwable {
        double[] doubleArray0 = new double[3];
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test130286() throws Throwable {
        double[] doubleArray0 = new double[3];
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test131287() throws Throwable {
        int[] intArray0 = new int[4];
        int int0 = MathUtils.distanceInf(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test131288() throws Throwable {
        int[] intArray0 = new int[4];
        int int0 = MathUtils.distanceInf(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test131289() throws Throwable {
        int[] intArray0 = new int[4];
        int int0 = MathUtils.distanceInf(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test132290() throws Throwable {
        double[] doubleArray0 = new double[4];
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test132291() throws Throwable {
        double[] doubleArray0 = new double[4];
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test132292() throws Throwable {
        double[] doubleArray0 = new double[4];
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test133293() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
    }

    @Test(timeout = 4000)
    public void test133294() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test133295() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test133296() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test133297() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test133298() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test133299() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test133300() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test133301() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test133302() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test133303() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test134304() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test134305() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test134306() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test134307() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test134308() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test134309() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test135310() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
    }

    @Test(timeout = 4000)
    public void test135311() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test135312() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test135313() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test135314() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test135315() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test135316() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test135317() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test135318() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test135319() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test135320() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test136321() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test136322() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test136323() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test136324() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test136325() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test136326() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test136327() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test136328() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test136329() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test136330() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test136331() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test136332() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test136333() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test136334() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test136335() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test137336() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
    }

    @Test(timeout = 4000)
    public void test137337() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test137338() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test137339() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        MathUtils.pow(bigInteger0, (-4607181111125649408L));
    }

    @Test(timeout = 4000)
    public void test138340() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
    }

    @Test(timeout = 4000)
    public void test138341() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test138342() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test138343() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        MathUtils.pow(bigInteger0, (-997));
    }

    @Test(timeout = 4000)
    public void test139344() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
    }

    @Test(timeout = 4000)
    public void test139345() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test139346() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test139347() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
    }

    @Test(timeout = 4000)
    public void test139348() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
    }

    @Test(timeout = 4000)
    public void test139349() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
    }

    @Test(timeout = 4000)
    public void test139350() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test139351() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test139352() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test139353() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test139354() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test140355() throws Throwable {
        assertTrue((-638L) > 0);
        long default3;
        if ((-638L) < 0) {
            try {
                default3 = MathUtils.pow(0L, (-638L));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default3 = MathUtils.pow(0L, (-638L));
        }
    }

    @Test(timeout = 4000)
    public void test141356() throws Throwable {
        assertTrue(1581L > 0);
        long long0;
        if (1581L < 0) {
            try {
                long0 = MathUtils.pow(0L, 1581L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow(0L, 1581L);
        }
    }

    @Test(timeout = 4000)
    public void test142357() throws Throwable {
        assertTrue((-1841) > 0);
        long default4;
        if ((-1841) < 0) {
            try {
                default4 = MathUtils.pow((long) 1, (-1841));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default4 = MathUtils.pow((long) 1, (-1841));
        }
    }

    @Test(timeout = 4000)
    public void test143358() throws Throwable {
        assertTrue(596 > 0);
        long long0;
        if (596 < 0) {
            try {
                long0 = MathUtils.pow(4294967295L, 596);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow(4294967295L, 596);
        }
    }

    @Test(timeout = 4000)
    public void test144359() throws Throwable {
        assertTrue(2L > 0);
        int int0;
        if (2L < 0) {
            try {
                int0 = MathUtils.pow((-2059), 2L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            int0 = MathUtils.pow((-2059), 2L);
        }
    }

    @Test(timeout = 4000)
    public void test145360() throws Throwable {
        assertTrue((-1445L) > 0);
        int default5;
        if ((-1445L) < 0) {
            try {
                default5 = MathUtils.pow(14, (-1445L));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default5 = MathUtils.pow(14, (-1445L));
        }
    }

    @Test(timeout = 4000)
    public void test146361() throws Throwable {
        assertTrue((long) 0 > 0);
        int int0;
        if ((long) 0 < 0) {
            try {
                int0 = MathUtils.pow(395, (long) 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            int0 = MathUtils.pow(395, (long) 0);
        }
    }

    @Test(timeout = 4000)
    public void test147362() throws Throwable {
        assertTrue((-3551) > 0);
        int default6;
        if ((-3551) < 0) {
            try {
                default6 = MathUtils.pow((-3551), (-3551));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default6 = MathUtils.pow((-3551), (-3551));
        }
    }

    @Test(timeout = 4000)
    public void test148363() throws Throwable {
        assertTrue(2682 > 0);
        int int0;
        if (2682 < 0) {
            try {
                int0 = MathUtils.pow(0, 2682);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            int0 = MathUtils.pow(0, 2682);
        }
    }

    @Test(timeout = 4000)
    public void test149364() throws Throwable {
        int int0;
        int0 = MathUtils.subAndCheck(220, (-967));
        assertTrue(true ? int0 == 220 - (-967) : true);
    }

    @Test(timeout = 4000)
    public void test150365() throws Throwable {
        int default7;
        default7 = MathUtils.subAndCheck((-2147483646), (int) (short) 238);
        assertTrue(true ? default7 == (-2147483646) - (int) (short) 238 : true);
    }

    @Test(timeout = 4000)
    public void test151366() throws Throwable {
        short short0 = MathUtils.sign((short) (-4654));
    }

    @Test(timeout = 4000)
    public void test152367() throws Throwable {
        short short0 = MathUtils.sign((short) 0);
    }

    @Test(timeout = 4000)
    public void test153368() throws Throwable {
        short short0 = MathUtils.sign((short) 85);
    }

    @Test(timeout = 4000)
    public void test154369() throws Throwable {
        long long0 = MathUtils.sign((long) (-1367));
    }

    @Test(timeout = 4000)
    public void test155370() throws Throwable {
        long long0 = MathUtils.sign(0L);
    }

    @Test(timeout = 4000)
    public void test156371() throws Throwable {
        long long0 = MathUtils.sign((long) 916);
    }

    @Test(timeout = 4000)
    public void test157372() throws Throwable {
        int int0 = MathUtils.sign((-2355));
    }

    @Test(timeout = 4000)
    public void test158373() throws Throwable {
        int int0 = MathUtils.sign(0);
    }

    @Test(timeout = 4000)
    public void test159374() throws Throwable {
        int int0 = MathUtils.sign(4239481);
    }

    @Test(timeout = 4000)
    public void test160375() throws Throwable {
        float float0 = MathUtils.sign(1694.555F);
    }

    @Test(timeout = 4000)
    public void test161376() throws Throwable {
        float float0;
        float0 = MathUtils.sign((float) 0);
        assertTrue(true ? float0 == (float) 0 : true);
    }

    @Test(timeout = 4000)
    public void test162377() throws Throwable {
        float float0 = MathUtils.sign(Float.NaN);
    }

    @Test(timeout = 4000)
    public void test163378() throws Throwable {
        float float0 = MathUtils.sign((-61.0F));
    }

    @Test(timeout = 4000)
    public void test164379() throws Throwable {
        double double0 = MathUtils.sign((-48.01345));
    }

    @Test(timeout = 4000)
    public void test165380() throws Throwable {
        double double0 = MathUtils.sign(0.0);
    }

    @Test(timeout = 4000)
    public void test166381() throws Throwable {
        double double0 = MathUtils.sign(323.0);
    }

    @Test(timeout = 4000)
    public void test167382() throws Throwable {
        byte byte0;
        byte0 = MathUtils.sign((byte) (-31));
        assertTrue(true ? byte0 == (byte) (-31) : true);
    }

    @Test(timeout = 4000)
    public void test168383() throws Throwable {
        byte byte0;
        byte0 = MathUtils.sign((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test169384() throws Throwable {
        byte byte0;
        byte0 = MathUtils.sign((byte) 24);
        assertTrue(true ? byte0 == (byte) 24 : true);
    }

    @Test(timeout = 4000)
    public void test170385() throws Throwable {
        MathUtils.round((float) 0, 0, (-1687));
    }

    @Test(timeout = 4000)
    public void test171386() throws Throwable {
        float float0 = MathUtils.round((float) 2508, 2508, 1);
    }

    @Test(timeout = 4000)
    public void test172387() throws Throwable {
        float float0 = MathUtils.round((float) 0L, 9998, 0);
    }

    @Test(timeout = 4000)
    public void test173388() throws Throwable {
        double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 61, 0);
    }

    @Test(timeout = 4000)
    public void test174389() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test174390() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test174391() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test174392() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test174393() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test174394() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test174395() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test174396() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test175397() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test176398() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[4] = Double.POSITIVE_INFINITY;
        MathUtils.normalizeArray(doubleArray0, (-3551.0));
    }

    @Test(timeout = 4000)
    public void test177399() throws Throwable {
        double[] doubleArray0 = new double[3];
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
    }

    @Test(timeout = 4000)
    public void test178400() throws Throwable {
        double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, (byte) 9);
    }

    @Test(timeout = 4000)
    public void test179401() throws Throwable {
        double double0 = MathUtils.scalb(0.0, (-64));
    }

    @Test(timeout = 4000)
    public void test180402() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck(2307L, 0L);
        assertTrue(true ? long0 == 2307L * 0L : true);
    }

    @Test(timeout = 4000)
    public void test181403() throws Throwable {
        long default8;
        default8 = MathUtils.mulAndCheck((long) (-1981), 2935890503282001226L);
        assertTrue(true ? default8 == (long) (-1981) * 2935890503282001226L : true);
    }

    @Test(timeout = 4000)
    public void test182404() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((-904L), 0L);
        assertTrue(true ? long0 == (-904L) * 0L : true);
    }

    @Test(timeout = 4000)
    public void test183405() throws Throwable {
        long long0;
        long0 = MathUtils.mulAndCheck((-934L), (-934L));
        assertTrue(true ? long0 == (-934L) * (-934L) : true);
    }

    @Test(timeout = 4000)
    public void test184406() throws Throwable {
        long default9;
        default9 = MathUtils.mulAndCheck((-976L), (-4035746434778044925L));
        assertTrue(true ? default9 == (-976L) * (-4035746434778044925L) : true);
    }

    @Test(timeout = 4000)
    public void test185407() throws Throwable {
        MathUtils.mulAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test186408() throws Throwable {
        int default10;
        default10 = MathUtils.mulAndCheck((-2146209931), 6);
        assertTrue(true ? default10 == (-2146209931) * 6 : true);
    }

    @Test(timeout = 4000)
    public void test187409() throws Throwable {
        long long0 = MathUtils.lcm((-95L), 0L);
    }

    @Test(timeout = 4000)
    public void test188410() throws Throwable {
        long long0 = MathUtils.lcm(0L, (-5241L));
    }

    @Test(timeout = 4000)
    public void test189411() throws Throwable {
        int int0 = MathUtils.lcm((-1712), 0);
    }

    @Test(timeout = 4000)
    public void test190412() throws Throwable {
        int int0 = MathUtils.lcm(70, 70);
    }

    @Test(timeout = 4000)
    public void test191413() throws Throwable {
        int int0 = MathUtils.lcm(0, 931);
    }

    @Test(timeout = 4000)
    public void test192414() throws Throwable {
        short short0;
        short0 = MathUtils.indicator((short) 78);
        assertTrue(true ? (short0 == (short) 78 || short0 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test193415() throws Throwable {
        short short0;
        short0 = MathUtils.indicator((short) (-2116));
        assertTrue(true ? (short0 == (short) (-2116) || short0 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test194416() throws Throwable {
        long long0;
        long0 = MathUtils.indicator((long) 70);
        assertTrue(true ? long0 == (long) 70 : true);
    }

    @Test(timeout = 4000)
    public void test195417() throws Throwable {
        long long0;
        long0 = MathUtils.indicator((-2175L));
        assertTrue(true ? long0 == (-2175L) : true);
    }

    @Test(timeout = 4000)
    public void test196418() throws Throwable {
        int int0 = MathUtils.indicator(0);
    }

    @Test(timeout = 4000)
    public void test197419() throws Throwable {
        int int0 = MathUtils.indicator((-1400));
    }

    @Test(timeout = 4000)
    public void test198420() throws Throwable {
        float float0 = MathUtils.indicator(1.0F);
    }

    @Test(timeout = 4000)
    public void test199421() throws Throwable {
        float float0 = MathUtils.indicator(Float.NaN);
    }

    @Test(timeout = 4000)
    public void test200422() throws Throwable {
        double double0 = MathUtils.indicator(1.0);
    }

    @Test(timeout = 4000)
    public void test201423() throws Throwable {
        double double0 = MathUtils.indicator((double) (-681));
    }

    @Test(timeout = 4000)
    public void test202424() throws Throwable {
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test203425() throws Throwable {
        byte byte0;
        byte0 = MathUtils.indicator((byte) (-31));
        assertTrue(true ? byte0 == (byte) (-31) : true);
    }

    @Test(timeout = 4000)
    public void test204426() throws Throwable {
        MathUtils.gcd((-9223372036854775808L), (-9223372036854775808L));
    }

    @Test(timeout = 4000)
    public void test205427() throws Throwable {
        long long0 = MathUtils.lcm(395L, (-2144L));
    }

    @Test(timeout = 4000)
    public void test206428() throws Throwable {
        long long0 = MathUtils.gcd((-1L), (long) (short) 0);
    }

    @Test(timeout = 4000)
    public void test207429() throws Throwable {
        long long0 = MathUtils.gcd((-9223372036854775808L), 4648655997399728128L);
    }

    @Test(timeout = 4000)
    public void test208430() throws Throwable {
        long long0 = MathUtils.gcd((long) 0, (long) 0);
    }

    @Test(timeout = 4000)
    public void test209431() throws Throwable {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test210432() throws Throwable {
        int int0 = MathUtils.gcd((-1172), (-2567));
    }

    @Test(timeout = 4000)
    public void test211433() throws Throwable {
        int int0 = MathUtils.gcd((-1), 0);
    }

    @Test(timeout = 4000)
    public void test212434() throws Throwable {
        int int0 = MathUtils.gcd(0, (-303));
    }

    @Test(timeout = 4000)
    public void test213435() throws Throwable {
        double double0 = MathUtils.factorialLog(1300);
    }

    @Test(timeout = 4000)
    public void test214436() throws Throwable {
        double double0 = MathUtils.factorialLog(0);
    }

    @Test(timeout = 4000)
    public void test215437() throws Throwable {
        MathUtils.factorialLog((-1192));
    }

    @Test(timeout = 4000)
    public void test217438() throws Throwable {
        double default11;
        if ((-1108) < 0) {
            try {
                default11 = MathUtils.factorialDouble((-1108));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default11 = MathUtils.factorialDouble((-1108));
        }
    }

    @Test(timeout = 4000)
    public void test218439() throws Throwable {
        long default12;
        if (83 < 0) {
            try {
                default12 = MathUtils.factorial(83);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default12 = MathUtils.factorial(83);
        }
    }

    @Test(timeout = 4000)
    public void test219440() throws Throwable {
        long default13;
        if ((-82) < 0) {
            try {
                default13 = MathUtils.factorial((-82));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default13 = MathUtils.factorial((-82));
        }
    }

    @Test(timeout = 4000)
    public void test220441() throws Throwable {
        double double0;
        if (0 < 0) {
            try {
                double0 = MathUtils.factorialDouble(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            double0 = MathUtils.factorialDouble(0);
        }
    }

    @Test(timeout = 4000)
    public void test221442() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test221443() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test221444() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test221445() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test221446() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test221447() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test221448() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test221449() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test221450() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test221451() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222452() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test222453() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222454() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222455() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222456() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test222457() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222458() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222459() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222460() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222461() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test223462() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test224463() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    }

    @Test(timeout = 4000)
    public void test224464() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    }

    @Test(timeout = 4000)
    public void test224465() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    }

    @Test(timeout = 4000)
    public void test224466() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test224467() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    }

    @Test(timeout = 4000)
    public void test224468() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    }

    @Test(timeout = 4000)
    public void test224469() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    }

    @Test(timeout = 4000)
    public void test224470() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    }

    @Test(timeout = 4000)
    public void test224471() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test224472() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test224473() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test224474() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test224475() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test224476() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test224477() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test224478() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test224479() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225480() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test225481() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225482() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225483() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225484() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test225485() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225486() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225487() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225488() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225489() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test226490() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test226491() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test226492() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test227493() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test227494() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test227495() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test228496() throws Throwable {
        boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test229497() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0.0F, 647);
    }

    @Test(timeout = 4000)
    public void test230498() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) 1, (double) (short) 19, 22);
    }

    @Test(timeout = 4000)
    public void test231499() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-1769.71));
    }

    @Test(timeout = 4000)
    public void test232500() throws Throwable {
        MathUtils.equalsIncludingNaN((double) 6L, 2.0, 4194304);
    }

    @Test(timeout = 4000)
    public void test233501() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(11.0, 888.8365771801, 1242.851314);
    }

    @Test(timeout = 4000)
    public void test234502() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2021.0989655927, (-189.65088836));
    }

    @Test(timeout = 4000)
    public void test235503() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, 10.0, 10.0);
    }

    @Test(timeout = 4000)
    public void test236504() throws Throwable {
        boolean boolean0 = MathUtils.equals(87.0, (double) 916, (double) 1300);
    }

    @Test(timeout = 4000)
    public void test237505() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 1568.3587501037364);
    }

    @Test(timeout = 4000)
    public void test238506() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NaN;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test238507() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NaN;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test238508() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NaN;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test239509() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NaN;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test239510() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NaN;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test239511() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NaN;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test240512() throws Throwable {
        int int0 = MathUtils.compareTo(Double.NaN, 0, 1);
    }

    @Test(timeout = 4000)
    public void test241513() throws Throwable {
        int int0 = MathUtils.compareTo(1.304E19, 1.304E19, 0.097);
    }

    @Test(timeout = 4000)
    public void test242514() throws Throwable {
        int int0 = MathUtils.compareTo(647.3, 2294L, 0.0);
    }

    @Test(timeout = 4000)
    public void test243515() throws Throwable {
        MathUtils.binomialCoefficientLog((-2595), (-2595));
    }

    @Test(timeout = 4000)
    public void test244516() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1627, 1525);
    }

    @Test(timeout = 4000)
    public void test245517() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(524, (-3363));
    }

    @Test(timeout = 4000)
    public void test246518() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(205, 0);
    }

    @Test(timeout = 4000)
    public void test247519() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, (-681));
    }

    @Test(timeout = 4000)
    public void test248520() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(0, 0);
    }

    @Test(timeout = 4000)
    public void test249521() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(2471, 13);
    }

    @Test(timeout = 4000)
    public void test250522() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(2513, 1);
    }

    @Test(timeout = 4000)
    public void test251523() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(2513, 0);
    }

    @Test(timeout = 4000)
    public void test252524() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(4, 4);
    }

    @Test(timeout = 4000)
    public void test253525() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(1382, (-622));
    }

    @Test(timeout = 4000)
    public void test254526() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(66, 2);
    }

    @Test(timeout = 4000)
    public void test255527() throws Throwable {
        MathUtils.binomialCoefficient(3239, 1924);
    }

    @Test(timeout = 4000)
    public void test256528() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(57, 1);
    }

    @Test(timeout = 4000)
    public void test257529() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(1030, 0);
    }

    @Test(timeout = 4000)
    public void test258530() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(39, 22);
    }

    @Test(timeout = 4000)
    public void test259531() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(0, 0);
    }

    @Test(timeout = 4000)
    public void test260532() throws Throwable {
        long long0;
        long0 = MathUtils.subAndCheck((-1862L), (-1862L));
        assertTrue(true ? long0 == (-1862L) - (-1862L) : true);
    }

    @Test(timeout = 4000)
    public void test261533() throws Throwable {
        long long0;
        long0 = MathUtils.subAndCheck((-874L), 1421L);
        assertTrue(true ? long0 == (-874L) - 1421L : true);
    }

    @Test(timeout = 4000)
    public void test262534() throws Throwable {
        int int0;
        int0 = MathUtils.addAndCheck((-1), 0);
        assertTrue(true ? int0 == (-1) + 0 : true);
    }

    @Test(timeout = 4000)
    public void test263535() throws Throwable {
        double double0 = MathUtils.round(1.4456468917292502E-16, 0);
    }

    @Test(timeout = 4000)
    public void test264536() throws Throwable {
        double double0 = MathUtils.cosh((-442.158));
    }

    @Test(timeout = 4000)
    public void test265537() throws Throwable {
        double double0 = MathUtils.normalizeAngle((-1493.0), 0);
    }

    @Test(timeout = 4000)
    public void test267538() throws Throwable {
        double[] doubleArray0 = new double[0];
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test268539() throws Throwable {
        MathUtils.checkOrder((double[]) null);
    }

    @Test(timeout = 4000)
    public void test269540() throws Throwable {
        int int0 = MathUtils.hash((double) 0);
    }
}
