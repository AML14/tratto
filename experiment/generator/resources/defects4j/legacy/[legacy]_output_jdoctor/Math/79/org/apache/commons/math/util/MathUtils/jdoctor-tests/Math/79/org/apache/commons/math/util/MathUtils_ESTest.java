/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 19:14:29 GMT 2023
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        int[] intArray0 = new int[3];
        int int0 = 2618;
        intArray0[0] = 2618;
        int int1 = 2178;
        intArray0[1] = 2178;
        intArray0[2] = 14;
        MathUtils.distance(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        MathUtils.binomialCoefficient(4191, 4191);
        double default0;
        if (4191 < 0) {
            try {
                default0 = MathUtils.factorialDouble(4191);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default0 = MathUtils.factorialDouble(4191);
        }
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        MathUtils.normalizeArray(doubleArray0, 1457.319362);
    }

    @Test(timeout = 4000)
    public void test0032() throws Throwable {
        int[] intArray0 = new int[0];
        MathUtils.distance1(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        int int0 = 0;
        MathUtils.round(3892.7F, 0, 0);
        assertTrue(0 > 0);
        long default1;
        if (0 < 0) {
            try {
                default1 = MathUtils.pow((long) 0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default1 = MathUtils.pow((long) 0, 0);
        }
        MathUtils.sinh((-6077.737308));
        MathUtils.binomialCoefficientLog(0, 0);
        MathUtils.distance(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        long default2;
        if (0 < 0) {
            try {
                default2 = MathUtils.factorial(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default2 = MathUtils.factorial(0);
        }
        MathUtils.gcd(1726, 1726);
        MathUtils.sign(0);
        byte default3;
        default3 = MathUtils.indicator((byte) 14);
        assertTrue(true ? default3 == (byte) 14 : true);
        int[] intArray1 = new int[7];
        intArray1[0] = 0;
        intArray1[1] = 1726;
        intArray1[2] = (-3471);
        intArray1[3] = 0;
        intArray1[4] = 1726;
        intArray1[5] = (int) (byte) 1;
        intArray1[6] = 0;
        MathUtils.distanceInf(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test0053() throws Throwable {
        MathUtils.indicator(2.2250738585072014E-308);
        MathUtils.indicator(1.1102230246251565E-16);
        MathUtils.sign(1770.7891F);
        MathUtils.sign(1030L);
        assertTrue(993L > 0);
        int default4;
        if (993L < 0) {
            try {
                default4 = MathUtils.pow(3, 993L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default4 = MathUtils.pow(3, 993L);
        }
        MathUtils.equals(1.1102230246251565E-16, (-2450.7073), 2146779092);
    }

    @Test(timeout = 4000)
    public void test0064() throws Throwable {
        double[] doubleArray0 = null;
        MathUtils.normalizeArray((double[]) null, (-2308.0));
    }

    @Test(timeout = 4000)
    public void test0085() throws Throwable {
        int[] intArray0 = new int[0];
        MathUtils.distance1(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        MathUtils.round(3892.7F, 0, 0);
        assertTrue(0 > 0);
        long default5;
        if (0 < 0) {
            try {
                default5 = MathUtils.pow((long) 0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default5 = MathUtils.pow((long) 0, 0);
        }
        MathUtils.sinh((-6077.737308));
        MathUtils.binomialCoefficientLog(0, 0);
        MathUtils.distanceInf(intArray0, intArray0);
        long default6;
        if (0 < 0) {
            try {
                default6 = MathUtils.factorial(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default6 = MathUtils.factorial(0);
        }
        MathUtils.gcd(1726, 1726);
        MathUtils.sign(0);
        byte default7;
        default7 = MathUtils.indicator((byte) 14);
        assertTrue(true ? default7 == (byte) 14 : true);
        MathUtils.lcm(393, (byte) 1);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = (double) (byte) 14;
        doubleArray0[2] = (-6077.737308);
        doubleArray0[3] = (double) 0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = (double) 1L;
        doubleArray0[7] = (-1276.21716603516);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.mulAndCheck(393, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test0106() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-643.544327393);
        doubleArray0[1] = 828.9892002;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals(828.9892002, Double.NEGATIVE_INFINITY);
        MathUtils.gcd(3, 3);
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = Double.NEGATIVE_INFINITY;
        doubleArray1[1] = Double.NEGATIVE_INFINITY;
        doubleArray1[2] = 828.9892002;
        doubleArray1[3] = 828.9892002;
        doubleArray1[4] = Double.NEGATIVE_INFINITY;
        doubleArray1[5] = (-643.544327393);
        doubleArray1[6] = (double) 3;
        doubleArray1[7] = (double) 3;
        doubleArray1[8] = (double) 3;
        MathUtils.distance1(doubleArray0, doubleArray1);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.indicator(0);
        byte byte0 = (byte) 0;
        byte default8;
        default8 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default8 == (byte) 0 : true);
        MathUtils.log(1, 828.9892002);
        int int0 = (-1819);
        double default9;
        if ((-1819) < 0) {
            try {
                default9 = MathUtils.factorialDouble((-1819));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default9 = MathUtils.factorialDouble((-1819));
        }
    }

    @Test(timeout = 4000)
    public void test0117() throws Throwable {
        int int0 = Integer.MIN_VALUE;
        MathUtils.binomialCoefficient(3237, Integer.MIN_VALUE);
        byte byte0 = (byte) 0;
        byte default10;
        default10 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default10 == (byte) 0 : true);
        byte default11;
        default11 = MathUtils.sign((byte) 1);
        assertTrue(true ? default11 == (byte) 1 : true);
        MathUtils.cosh((-1926.605913337));
        MathUtils.round((-1739.42584287), Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test0158() throws Throwable {
        int int0 = 2147483624;
        MathUtils.binomialCoefficient(2147483624, 3225);
    }

    @Test(timeout = 4000)
    public void test0169() throws Throwable {
        int int0 = (-2147483646);
        int default12;
        default12 = MathUtils.addAndCheck((-2147483646), (-2147483646));
        assertTrue(true ? default12 == (-2147483646) + (-2147483646) : true);
    }

    @Test(timeout = 4000)
    public void test01810() throws Throwable {
        MathUtils.sign(1307.8883F);
        assertTrue(0 > 0);
        long default13;
        if (0 < 0) {
            try {
                default13 = MathUtils.pow(0L, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default13 = MathUtils.pow(0L, 0);
        }
        int default14;
        default14 = MathUtils.subAndCheck(0, 0);
        assertTrue(true ? default14 == 0 - 0 : true);
        int default15;
        default15 = MathUtils.addAndCheck(0, 0);
        assertTrue(true ? default15 == 0 + 0 : true);
        MathUtils.sign(0.0);
        MathUtils.round((-1610.4F), 0, 0);
        long default16;
        default16 = MathUtils.indicator((long) 0);
        assertTrue(true ? default16 == (long) 0 : true);
        MathUtils.indicator((double) 1307.8883F);
        byte default17;
        default17 = MathUtils.sign((byte) 21);
        assertTrue(true ? default17 == (byte) 21 : true);
        MathUtils.sign((-287L));
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = BigInteger.ONE;
        bigInteger1.modPow(bigInteger0, bigInteger0);
        BigInteger.valueOf(0L);
        BigInteger bigInteger2 = MathUtils.pow(bigInteger1, bigInteger0);
        BigInteger bigInteger3 = bigInteger0.andNot(bigInteger2);
        bigInteger2.floatValue();
        BigInteger bigInteger4 = BigInteger.ONE;
        bigInteger0.divide(bigInteger3);
    }

    @Test(timeout = 4000)
    public void test01911() throws Throwable {
        long default18;
        default18 = MathUtils.subAndCheck((-826L), 2728L);
        assertTrue(true ? default18 == (-826L) - 2728L : true);
        MathUtils.equals((-2153.953025617625), (-2153.953025617625), 139);
        int[] intArray0 = new int[9];
        intArray0[0] = 139;
        intArray0[1] = 139;
        intArray0[2] = 139;
        intArray0[3] = 139;
        intArray0[4] = 139;
        intArray0[5] = 139;
        intArray0[6] = 139;
        intArray0[7] = 139;
        intArray0[8] = 139;
        MathUtils.distance1(intArray0, intArray0);
        assertTrue((long) 139 > 0);
        long default19;
        if ((long) 139 < 0) {
            try {
                default19 = MathUtils.pow(3025L, (long) 139);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default19 = MathUtils.pow(3025L, (long) 139);
        }
        MathUtils.hash((double) (-3554L));
        assertTrue((-1639L) > 0);
        int default20;
        if ((-1639L) < 0) {
            try {
                default20 = MathUtils.pow(139, (-1639L));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default20 = MathUtils.pow(139, (-1639L));
        }
    }

    @Test(timeout = 4000)
    public void test02212() throws Throwable {
        int int0 = 0;
        MathUtils.binomialCoefficient(0, 0);
        float float0 = Float.NaN;
        int int1 = 0;
        MathUtils.round(Float.NaN, 0, 0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = BigInteger.TEN;
        MockRandom mockRandom0 = new MockRandom(1L);
        mockRandom0.nextFloat();
        BigInteger.probablePrime(0, mockRandom0);
    }

    @Test(timeout = 4000)
    public void test02313() throws Throwable {
        MathUtils.round(1.0, 1159);
        MathUtils.cosh(0.0);
        int int0 = 1;
        MathUtils.binomialCoefficient(1159, 1);
        MathUtils.round((-1.0F), (-311));
        MathUtils.binomialCoefficient((-311), 5);
    }

    @Test(timeout = 4000)
    public void test02614() throws Throwable {
        int default21;
        default21 = MathUtils.addAndCheck(2640, 2640);
        assertTrue(true ? default21 == 2640 + 2640 : true);
        assertTrue((long) 5280 > 0);
        long default22;
        if ((long) 5280 < 0) {
            try {
                default22 = MathUtils.pow((long) 5280, (long) 5280);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default22 = MathUtils.pow((long) 5280, (long) 5280);
        }
        assertTrue(2640 > 0);
        long default23;
        if (2640 < 0) {
            try {
                default23 = MathUtils.pow(0L, 2640);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default23 = MathUtils.pow(0L, 2640);
        }
        MathUtils.equals(0.0, 487.37343307056665, (-2621.877438012606));
        int int0 = 31;
        MathUtils.binomialCoefficientLog(2640, 31);
        MathUtils.log(31, 31);
        short default24;
        default24 = MathUtils.indicator((short) 1522);
        assertTrue(true ? (default24 == (short) 1522 || default24 == -1) : true);
        assertTrue(5280 > 0);
        int default25;
        if (5280 < 0) {
            try {
                default25 = MathUtils.pow(1236, 5280);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default25 = MathUtils.pow(1236, 5280);
        }
        MathUtils.round(1252.845186, 0);
        MathUtils.indicator((float) 0L);
        MathUtils.round(0.0, (-369), 1420);
    }

    @Test(timeout = 4000)
    public void test03015() throws Throwable {
        MathUtils.hash((-2018.9627));
        long default26;
        default26 = MathUtils.mulAndCheck((-9223372036854775808L), (long) 244896937);
        assertTrue(true ? default26 == (-9223372036854775808L) * (long) 244896937 : true);
    }

    @Test(timeout = 4000)
    public void test03116() throws Throwable {
        double default27;
        default27 = MathUtils.normalizeAngle((-1794.233680471964), (-1794.233680471964));
        assertTrue(true ? default27 == (-1794.233680471964) - (-1794.233680471964) : true);
        assertTrue(0.0 > 0);
        assertTrue((-1794.233680471964) > 0);
        double default28;
        default28 = MathUtils.log(0.0, (-1794.233680471964));
        MathUtils.lcm((-1), 1);
        MathUtils.round(18.724F, (-1), 1);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1794.233680471964);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = (double) (-1);
        doubleArray0[5] = (double) 18.724F;
        doubleArray0[6] = (double) 1;
        doubleArray0[7] = (-1794.233680471964);
        MathUtils.distance1(doubleArray0, doubleArray0);
        int[] intArray0 = new int[7];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = (-1);
        intArray0[3] = 1;
        intArray0[4] = (-1);
        intArray0[5] = 1;
        intArray0[6] = 1;
        MathUtils.distance(intArray0, intArray0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        MathUtils.pow(bigInteger0, (-1));
    }

    @Test(timeout = 4000)
    public void test03217() throws Throwable {
        MathUtils.sign(Float.NaN);
        MathUtils.equals((double) Float.NaN, 0.0);
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[1] = 0.0;
        MathUtils.distance(doubleArray0, doubleArray0);
        MathUtils.scalb(Float.NaN, Integer.MIN_VALUE);
        byte default29;
        default29 = MathUtils.sign((byte) 1);
        assertTrue(true ? default29 == (byte) 1 : true);
        MathUtils.sign(0.0F);
        int int0 = 0;
        MathUtils.indicator(0);
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
    }

    @Test(timeout = 4000)
    public void test03318() throws Throwable {
        MathUtils.scalb(6.283185307179586, 2073432487);
        MathUtils.lcm(2073432487, 2073432487);
        int int0 = 3410;
        int int1 = (-143);
        MathUtils.lcm(3410, (-143));
        assertTrue(44330 > 0);
        java.math.BigInteger default30;
        if (44330 < 0) {
            try {
                default30 = MathUtils.pow((BigInteger) null, 44330);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default30 = MathUtils.pow((BigInteger) null, 44330);
        }
    }

    @Test(timeout = 4000)
    public void test03419() throws Throwable {
        int int0 = 934;
        long default31;
        if (934 < 0) {
            try {
                default31 = MathUtils.factorial(934);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default31 = MathUtils.factorial(934);
        }
    }

    @Test(timeout = 4000)
    public void test03520() throws Throwable {
        int int0 = (-2503);
        MathUtils.indicator((-2503));
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = BigInteger.ONE;
        bigInteger1.divide(bigInteger0);
        bigInteger1.floatValue();
        bigInteger0.modInverse(bigInteger1);
        MathUtils.pow(bigInteger0, (long) (-2503));
    }

    @Test(timeout = 4000)
    public void test03721() throws Throwable {
        MathUtils.nextAfter(2760.41998, 2760.41998);
        MathUtils.indicator(200);
        int int0 = 16;
        int int1 = 1;
        int default32;
        default32 = MathUtils.mulAndCheck(16, 1);
        assertTrue(true ? default32 == 16 * 1 : true);
        int default33;
        default33 = MathUtils.mulAndCheck(16, 0);
        assertTrue(true ? default33 == 16 * 0 : true);
        double[] doubleArray0 = new double[0];
        MathUtils.hash(doubleArray0);
        long default34;
        if (200 < 0) {
            try {
                default34 = MathUtils.factorial(200);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default34 = MathUtils.factorial(200);
        }
    }

    @Test(timeout = 4000)
    public void test03922() throws Throwable {
        double[] doubleArray0 = null;
        MathUtils.hash((double[]) null);
        MathUtils.log(0, 0);
        int int0 = (-2076);
        MathUtils.equals(0.0, 0.0, (-2076));
    }

    @Test(timeout = 4000)
    public void test04223() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = 2412.7751;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = (-4.9E-324);
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = (-4.9E-324);
        doubleArray1[1] = 0.0;
        doubleArray1[2] = 1.0;
        MathUtils.distance1(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test04324() throws Throwable {
        MathUtils.sign(1234.98F);
        MathUtils.lcm(1260, 1260);
        assertTrue(0 > 0);
        int default35;
        if (0 < 0) {
            try {
                default35 = MathUtils.pow(1260, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default35 = MathUtils.pow(1260, 0);
        }
        MathUtils.indicator(3015);
        MathUtils.binomialCoefficientDouble(0, 0);
        MathUtils.sign(0.0F);
        MathUtils.indicator(1390);
        BigInteger bigInteger0 = BigInteger.ONE;
        bigInteger0.longValueExact();
        MathUtils.pow((BigInteger) null, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test04525() throws Throwable {
        int[] intArray0 = new int[5];
        intArray0[0] = 0;
        int int0 = 0;
        intArray0[1] = 0;
        intArray0[2] = 4194304;
        intArray0[3] = (-2008);
        intArray0[4] = 196;
        MathUtils.distanceInf(intArray0, intArray0);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) (-2008);
        doubleArray0[1] = (double) (-2008);
        doubleArray0[2] = (double) 196;
        MathUtils.distance1(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test05026() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[0] = (byte) (-75);
        byteArray0[1] = (byte) 17;
        byteArray0[2] = (byte) 12;
        byteArray0[3] = (byte) (-83);
        byteArray0[4] = (byte) (-1);
        byteArray0[5] = (byte) (-1);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test05327() throws Throwable {
        MathUtils.compareTo(2.0, 2.0, 2.0);
        short default36;
        default36 = MathUtils.indicator((short) (-496));
        assertTrue(true ? (default36 == (short) (-496) || default36 == -1) : true);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) (short) (-1);
        doubleArray0[1] = (double) 0;
        doubleArray0[2] = 2.0;
        MathUtils.distanceInf(doubleArray0, doubleArray0);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.nextAfter(0, 2.0);
        MathUtils.equals(472.3074991661, 1077.513167, (-1.0));
        MathUtils.equals(2393.71068944, 1.0, 0);
    }

    @Test(timeout = 4000)
    public void test05428() throws Throwable {
        MathUtils.compareTo(0.0, 0.0, 0.0);
        byte byte0 = (byte) (-90);
        byte default37;
        default37 = MathUtils.indicator((byte) (-90));
        assertTrue(true ? default37 == (byte) (-90) : true);
        double default38;
        if (1433 < 0) {
            try {
                default38 = MathUtils.factorialDouble(1433);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default38 = MathUtils.factorialDouble(1433);
        }
        int default39;
        default39 = MathUtils.mulAndCheck((int) (byte) (-90), 15);
        assertTrue(true ? default39 == (int) (byte) (-90) * 15 : true);
        assertTrue((-1350) > 0);
        int default40;
        if ((-1350) < 0) {
            try {
                default40 = MathUtils.pow((-1), (-1350));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default40 = MathUtils.pow((-1), (-1350));
        }
    }

    @Test(timeout = 4000)
    public void test05529() throws Throwable {
        MathUtils.indicator(3535.7);
        assertTrue((-2434) > 0);
        int default41;
        if ((-2434) < 0) {
            try {
                default41 = MathUtils.pow(1659, (-2434));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default41 = MathUtils.pow(1659, (-2434));
        }
    }

    @Test(timeout = 4000)
    public void test05730() throws Throwable {
        int int0 = 132;
        MathUtils.lcm(132, 132);
        MathUtils.hash(3541.11136656);
        MathUtils.nextAfter(0.0, 0.0);
        assertTrue((long) 1168244762 > 0);
        int default42;
        if ((long) 1168244762 < 0) {
            try {
                default42 = MathUtils.pow(1168244762, (long) 1168244762);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default42 = MathUtils.pow(1168244762, (long) 1168244762);
        }
        MathUtils.binomialCoefficientLog(0, 132);
    }

    @Test(timeout = 4000)
    public void test05931() throws Throwable {
        int int0 = (-823);
        int int1 = 349;
        MathUtils.binomialCoefficient((-823), 349);
    }

    @Test(timeout = 4000)
    public void test06032() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 10.0;
        MathUtils.equals(doubleArray0, doubleArray0);
        int int0 = 0;
        MathUtils.round(1829.5243766, 0);
        int int1 = 0;
        assertTrue((-1145L) > 0);
        int default43;
        if ((-1145L) < 0) {
            try {
                default43 = MathUtils.pow(0, (-1145L));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default43 = MathUtils.pow(0, (-1145L));
        }
    }

    @Test(timeout = 4000)
    public void test06133() throws Throwable {
        int int0 = 25;
        assertTrue(9 > 0);
        int default44;
        if (9 < 0) {
            try {
                default44 = MathUtils.pow(25, 9);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default44 = MathUtils.pow(25, 9);
        }
        int int1 = 0;
        int default45;
        default45 = MathUtils.subAndCheck(0, 766306777);
        assertTrue(true ? default45 == 0 - 766306777 : true);
        MathUtils.equals(776.957302461, (-2857.39), 689.267357643664);
        MathUtils.log((-766306777), 0.0);
        MathUtils.sign(0.0);
        MathUtils.indicator((float) (-766306777));
        assertTrue((-1L) > 0);
        long default46;
        if ((-1L) < 0) {
            try {
                default46 = MathUtils.pow((long) 9, (-1L));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default46 = MathUtils.pow((long) 9, (-1L));
        }
    }

    @Test(timeout = 4000)
    public void test06234() throws Throwable {
        MathUtils.distanceInf((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test06335() throws Throwable {
        short short0 = (short) 0;
        short default47;
        default47 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default47 == (short) 0 || default47 == -1) : true);
        assertTrue((-1102L) > 0);
        int default48;
        if ((-1102L) < 0) {
            try {
                default48 = MathUtils.pow((int) (short) 0, (-1102L));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default48 = MathUtils.pow((int) (short) 0, (-1102L));
        }
    }

    @Test(timeout = 4000)
    public void test06436() throws Throwable {
        int int0 = 1608;
        assertTrue((long) 1608 > 0);
        int default49;
        if ((long) 1608 < 0) {
            try {
                default49 = MathUtils.pow(1608, (long) 1608);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default49 = MathUtils.pow(1608, (long) 1608);
        }
        assertTrue((-1L) > 0);
        long default50;
        if ((-1L) < 0) {
            try {
                default50 = MathUtils.pow((long) 1608, (-1L));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default50 = MathUtils.pow((long) 1608, (-1L));
        }
    }

    @Test(timeout = 4000)
    public void test06837() throws Throwable {
        int int0 = 6;
        MathUtils.binomialCoefficientDouble(6, 6);
        assertTrue(157 > 0);
        java.math.BigInteger default51;
        if (157 < 0) {
            try {
                default51 = MathUtils.pow((BigInteger) null, 157);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default51 = MathUtils.pow((BigInteger) null, 157);
        }
    }

    @Test(timeout = 4000)
    public void test06938() throws Throwable {
        MathUtils.round(0.0F, 0, 0);
        MathUtils.hash((double) 0);
        long default52;
        default52 = MathUtils.mulAndCheck((long) 0, 1375L);
        assertTrue(true ? default52 == (long) 0 * 1375L : true);
        MathUtils.indicator((double) 0);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (-497.4288227);
        doubleArray0[1] = (double) 0;
        doubleArray0[2] = (double) 1375L;
        MathUtils.distanceInf(doubleArray0, doubleArray0);
        int[] intArray0 = new int[9];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = 0;
        intArray0[3] = 0;
        intArray0[4] = 0;
        intArray0[5] = 0;
        intArray0[6] = 0;
        intArray0[7] = 0;
        intArray0[8] = 0;
        int[] intArray1 = new int[1];
        intArray1[0] = 0;
        MathUtils.distance1(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test07239() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathUtils.distanceInf(doubleArray0, doubleArray0);
        MathUtils.equals(0.0, 0.0);
        MathUtils.cosh((-293.882628828));
        MathUtils.compareTo((-293.882628828), 152.86311, 2.1407898231843912E127);
        int int0 = 0;
        double default53;
        if (0 < 0) {
            try {
                default53 = MathUtils.factorialDouble(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default53 = MathUtils.factorialDouble(0);
        }
        MathUtils.binomialCoefficientLog(0, 0);
        MathUtils.sinh(0.0);
        MathUtils.sign(0);
        long default54;
        default54 = MathUtils.subAndCheck((long) 0, (long) 0);
        assertTrue(true ? default54 == (long) 0 - (long) 0 : true);
        short default55;
        default55 = MathUtils.indicator((short) (-1383));
        assertTrue(true ? (default55 == (short) (-1383) || default55 == -1) : true);
        MathUtils.sign(0.0F);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.binomialCoefficientLog((-1124), (-1854));
    }

    @Test(timeout = 4000)
    public void test07540() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathUtils.hash(doubleArray0);
        MathUtils.cosh(2864.62672122);
        int[] intArray0 = new int[2];
        intArray0[0] = 1;
        intArray0[1] = 1;
        MathUtils.distanceInf(intArray0, intArray0);
        double double0 = (-2236.52487723688);
        int int0 = (-67);
        MathUtils.round((-2236.52487723688), (-67), (-2790));
    }

    @Test(timeout = 4000)
    public void test07641() throws Throwable {
        int int0 = 0;
        double default56;
        if (0 < 0) {
            try {
                default56 = MathUtils.factorialDouble(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default56 = MathUtils.factorialDouble(0);
        }
        int[] intArray0 = null;
        MathUtils.distance1((int[]) null, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test07942() throws Throwable {
        MathUtils.lcm((-1), (-1));
        MathUtils.binomialCoefficient(3005, 0);
        long default57;
        default57 = MathUtils.indicator(0L);
        assertTrue(true ? default57 == 0L : true);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1L;
        doubleArray0[2] = (double) 0;
        doubleArray0[3] = (double) 3005;
        doubleArray0[4] = (double) 1L;
        doubleArray0[5] = (double) 1;
        doubleArray0[6] = (double) 0;
        doubleArray0[7] = (double) 1L;
        MathUtils.equals(doubleArray0, doubleArray0);
        assertTrue(1L > 0);
        int default58;
        if (1L < 0) {
            try {
                default58 = MathUtils.pow(3005, 1L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default58 = MathUtils.pow(3005, 1L);
        }
        MathUtils.binomialCoefficientLog(1, (-1));
        MathUtils.round((float) 3005, (-1), (-1));
    }

    @Test(timeout = 4000)
    public void test08143() throws Throwable {
        MathUtils.round(599.0209968245006, (-1902), 0);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 599.0209968245006;
        doubleArray0[1] = 599.0209968245006;
        doubleArray0[2] = (double) (-1902);
        doubleArray0[3] = 599.0209968245006;
        doubleArray0[4] = Double.POSITIVE_INFINITY;
        doubleArray0[5] = (double) (-1902);
        doubleArray0[6] = Double.POSITIVE_INFINITY;
        doubleArray0[7] = (double) 0;
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test08344() throws Throwable {
        int default59;
        default59 = MathUtils.subAndCheck((-908), (-908));
        assertTrue(true ? default59 == (-908) - (-908) : true);
        byte byte0 = (byte) 0;
        byte default60;
        default60 = MathUtils.sign((byte) 0);
        assertTrue(true ? default60 == (byte) 0 : true);
        double default61;
        default61 = MathUtils.normalizeAngle((-1.0), (-2013.0));
        assertTrue(true ? default61 == (-1.0) - (-1.0) : true);
        MathUtils.sign((int) (byte) 0);
        int int0 = 0;
        MathUtils.round(0.0, 7, 0);
        int default62;
        default62 = MathUtils.subAndCheck(0, (-13));
        assertTrue(true ? default62 == 0 - (-13) : true);
        int default63;
        default63 = MathUtils.addAndCheck(0, 5159);
        assertTrue(true ? default63 == 0 + 5159 : true);
        MathUtils.nextAfter((byte) 0, (-1.0));
        MathUtils.equals((-1.0), (-4.9E-324), (-2531));
    }

    @Test(timeout = 4000)
    public void test08745() throws Throwable {
        MathUtils.sign(0.0);
        double default64;
        default64 = MathUtils.normalizeAngle(0.0, 0.0);
        assertTrue(true ? default64 == 0.0 - 0.0 : true);
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 0.0;
        doubleArray0[7] = 0.0;
        doubleArray0[8] = 0.0;
        MathUtils.distance1(doubleArray0, doubleArray0);
        double default65;
        default65 = MathUtils.normalizeAngle(2883.06, 3276.25503479);
        assertTrue(true ? default65 == 2883.06 - 2883.06 : true);
        MathUtils.equals(886.93842, 0.0, 20);
        assertTrue(0 > 0);
        long default66;
        if (0 < 0) {
            try {
                default66 = MathUtils.pow(603L, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default66 = MathUtils.pow(603L, 0);
        }
        MathUtils.equals((-90.127840696958), 0.0, (-1370));
    }

    @Test(timeout = 4000)
    public void test08946() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-4049.55459018);
        doubleArray0[1] = (-1952.7);
        double[] doubleArray1 = new double[6];
        doubleArray1[0] = 0.0;
        doubleArray1[1] = (-1952.7);
        doubleArray1[2] = (-1952.7);
        doubleArray1[3] = (-1952.7);
        doubleArray1[4] = (-1952.7);
        doubleArray1[5] = (-1952.7);
        MathUtils.distanceInf(doubleArray0, doubleArray1);
        MathUtils.round(0.0F, 0);
        MathUtils.equals(doubleArray1, doubleArray1);
        double default67;
        default67 = MathUtils.normalizeAngle((-763.86184399), 0.0);
        assertTrue(true ? default67 == (-763.86184399) - (-763.86184399) : true);
        long default68;
        default68 = MathUtils.indicator((long) 0);
        assertTrue(true ? default68 == (long) 0 : true);
        MathUtils.cosh((-1952.7));
        double default69;
        if ((-955) < 0) {
            try {
                default69 = MathUtils.factorialDouble((-955));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default69 = MathUtils.factorialDouble((-955));
        }
    }

    @Test(timeout = 4000)
    public void test09047() throws Throwable {
        int default70;
        default70 = MathUtils.mulAndCheck(0, 0);
        assertTrue(true ? default70 == 0 * 0 : true);
        float float0 = 1270.0746F;
        MathUtils.indicator(1270.0746F);
        MathUtils.indicator((double) 0);
        short short0 = (short) (-1);
        MathUtils.sign((short) (-1));
        MathUtils.sinh(0);
        double[] doubleArray0 = null;
        MathUtils.distance((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test09148() throws Throwable {
        int int0 = (-202);
        MathUtils.round(0.0F, (-202));
        MathUtils.round((double) Float.NaN, 480);
        MathUtils.equals((double) 480, (double) (-202), (-202));
    }

    @Test(timeout = 4000)
    public void test09249() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = BigInteger.ONE;
        bigInteger0.xor(bigInteger1);
        MathUtils.pow(bigInteger0, bigInteger0);
        int int0 = (-1);
        double default71;
        if ((-1) < 0) {
            try {
                default71 = MathUtils.factorialDouble((-1));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default71 = MathUtils.factorialDouble((-1));
        }
    }

    @Test(timeout = 4000)
    public void test09350() throws Throwable {
        MathUtils.factorialLog((-1193));
    }

    @Test(timeout = 4000)
    public void test09451() throws Throwable {
        assertTrue(771L > 0);
        java.math.BigInteger default72;
        if (771L < 0) {
            try {
                default72 = MathUtils.pow((BigInteger) null, 771L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default72 = MathUtils.pow((BigInteger) null, 771L);
        }
    }

    @Test(timeout = 4000)
    public void test09552() throws Throwable {
        MathUtils.scalb(0.0, 662);
        MathUtils.sign((short) (-1));
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 0;
        byteArray0[1] = (byte) 0;
        byteArray0[2] = (byte) 0;
        byteArray0[3] = (byte) (-119);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = new BigInteger(byteArray0);
        bigInteger0.and(bigInteger1);
        bigInteger0.toString((int) (byte) 0);
        MathUtils.pow(bigInteger0, (int) (byte) 0);
        long default73;
        if ((-1391) < 0) {
            try {
                default73 = MathUtils.factorial((-1391));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default73 = MathUtils.factorial((-1391));
        }
    }

    @Test(timeout = 4000)
    public void test09653() throws Throwable {
        MathUtils.sinh(2012.178);
        int int0 = (-2602);
        MathUtils.round(2012.178, (-2602), (-2602));
    }

    @Test(timeout = 4000)
    public void test09854() throws Throwable {
        int default74;
        default74 = MathUtils.subAndCheck(0, 0);
        assertTrue(true ? default74 == 0 - 0 : true);
        long default75;
        default75 = MathUtils.mulAndCheck((-1L), (long) 0);
        assertTrue(true ? default75 == (-1L) * (long) 0 : true);
        int[] intArray0 = new int[1];
        intArray0[0] = 0;
        MathUtils.distanceInf(intArray0, intArray0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = (double) 0;
        doubleArray0[2] = (double) 0;
        doubleArray0[3] = (double) 0;
        doubleArray0[4] = (double) (-1L);
        doubleArray0[5] = (double) 0;
        doubleArray0[6] = (double) 0;
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = (double) 0L;
        doubleArray1[1] = (double) 0;
        MathUtils.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test10255() throws Throwable {
        int int0 = 0;
        assertTrue(0 > 0);
        int default76;
        if (0 < 0) {
            try {
                default76 = MathUtils.pow(0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default76 = MathUtils.pow(0, 0);
        }
        assertTrue((-1823) > 0);
        long default77;
        if ((-1823) < 0) {
            try {
                default77 = MathUtils.pow((long) 0, (-1823));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default77 = MathUtils.pow((long) 0, (-1823));
        }
    }

    @Test(timeout = 4000)
    public void test10356() throws Throwable {
        MathUtils.sign(0L);
        MathUtils.nextAfter(2.2250738585072014E-308, 0L);
        assertTrue(1866.718406 > 0);
        assertTrue(1866.718406 > 0);
        double default78;
        default78 = MathUtils.log(1866.718406, 1866.718406);
        MathUtils.gcd((-1049), 0);
        MathUtils.binomialCoefficientDouble(1049, 0);
        MathUtils.binomialCoefficientDouble(0, 1654);
    }

    @Test(timeout = 4000)
    public void test10657() throws Throwable {
        long long0 = (-1L);
        MathUtils.sign((-1L));
        double[] doubleArray0 = new double[0];
        MathUtils.normalizeArray(doubleArray0, (-1L));
    }

    @Test(timeout = 4000)
    public void test10758() throws Throwable {
        MathUtils.sign(3579L);
        short short0 = (short) 1;
        short default79;
        default79 = MathUtils.indicator((short) 1);
        assertTrue(true ? (default79 == (short) 1 || default79 == -1) : true);
        MathUtils.sinh(0.0);
        double double0 = 0.0;
        MathUtils.equals(0.0, 0.0, 1.0);
        long default80;
        default80 = MathUtils.subAndCheck(1L, (long) (short) 1);
        assertTrue(true ? default80 == 1L - (long) (short) 1 : true);
        MathUtils.sinh(1557.348148513444);
        MathUtils.nextAfter(0.0, 0L);
        assertTrue(3579L > 0);
        long default81;
        if (3579L < 0) {
            try {
                default81 = MathUtils.pow((long) (short) 1, 3579L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default81 = MathUtils.pow((long) (short) 1, 3579L);
        }
        int[] intArray0 = null;
        MathUtils.distance((int[]) null, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test10859() throws Throwable {
        double default82;
        if (2021 < 0) {
            try {
                default82 = MathUtils.factorialDouble(2021);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default82 = MathUtils.factorialDouble(2021);
        }
        int int0 = (-189);
        int int1 = Integer.MIN_VALUE;
        MathUtils.lcm((-189), Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test10960() throws Throwable {
        short default83;
        default83 = MathUtils.indicator((short) 2125);
        assertTrue(true ? (default83 == (short) 2125 || default83 == -1) : true);
        MathUtils.equals((double) (short) 2125, (double) (short) 2125, 0.0);
        short short0 = (short) 0;
        MathUtils.sign((short) 0);
        int int0 = Integer.MIN_VALUE;
        MathUtils.pow((long) (short) 1, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test11261() throws Throwable {
        MathUtils.factorialLog(5);
        MathUtils.round((float) 5, 0, 5);
        MathUtils.equals((double) 0, 49.05);
        MathUtils.gcd(0, 1);
        double[] doubleArray0 = new double[0];
        MathUtils.normalizeArray(doubleArray0, 1);
    }

    @Test(timeout = 4000)
    public void test11462() throws Throwable {
        MathUtils.nextAfter(0.0, 0.0);
        int int0 = 0;
        int int1 = 2;
        MathUtils.binomialCoefficient(0, 2);
    }

    @Test(timeout = 4000)
    public void test11563() throws Throwable {
        MathUtils.hash((-1180.46));
        int int0 = 0;
        MathUtils.scalb(0.0, 0);
        int int1 = 0;
        assertTrue(1027L > 0);
        int default84;
        if (1027L < 0) {
            try {
                default84 = MathUtils.pow(0, 1027L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default84 = MathUtils.pow(0, 1027L);
        }
        MathUtils.sinh(0);
        assertTrue(0 > 0);
        long default85;
        if (0 < 0) {
            try {
                default85 = MathUtils.pow((-2479L), 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default85 = MathUtils.pow((-2479L), 0);
        }
        MathUtils.mulAndCheck(Integer.MIN_VALUE, (-894500493));
    }

    @Test(timeout = 4000)
    public void test11664() throws Throwable {
        MathUtils.normalizeAngle(Double.NEGATIVE_INFINITY, (-3133.1239464));
        long long0 = 5040L;
        int int0 = (-254);
        assertTrue((-254) > 0);
        long default86;
        if ((-254) < 0) {
            try {
                default86 = MathUtils.pow(5040L, (-254));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default86 = MathUtils.pow(5040L, (-254));
        }
    }

    @Test(timeout = 4000)
    public void test11765() throws Throwable {
        MathUtils.sign(Double.POSITIVE_INFINITY);
        MathUtils.factorialLog(471);
        long default87;
        default87 = MathUtils.indicator(684L);
        assertTrue(true ? default87 == 684L : true);
        short default88;
        default88 = MathUtils.indicator((short) (-2005));
        assertTrue(true ? (default88 == (short) (-2005) || default88 == -1) : true);
        MathUtils.equals(1.0, 0.0, (double) 1L);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 1L;
        doubleArray0[1] = (double) (short) (-1);
        doubleArray0[2] = (double) 1L;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = (double) (short) (-1);
        doubleArray0[5] = 1757.5571;
        doubleArray0[6] = 1.0;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign((long) 471);
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1L);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.pow(bigInteger1, (-1));
    }

    @Test(timeout = 4000)
    public void test11866() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        MathUtils.pow(bigInteger0, (-1189));
    }

    @Test(timeout = 4000)
    public void test12167() throws Throwable {
        int int0 = 1;
        assertTrue(646L > 0);
        int default89;
        if (646L < 0) {
            try {
                default89 = MathUtils.pow(1, 646L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default89 = MathUtils.pow(1, 646L);
        }
        double default90;
        if (1 < 0) {
            try {
                default90 = MathUtils.factorialDouble(1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default90 = MathUtils.factorialDouble(1);
        }
        MathUtils.compareTo((-1666.062), (-2577.90655932433), 646L);
        MathUtils.indicator((-262.2159F));
        MathUtils.round(0.0F, 1, (-1346));
    }

    @Test(timeout = 4000)
    public void test13068() throws Throwable {
        MathUtils.cosh(Double.NEGATIVE_INFINITY);
        MathUtils.indicator(1783.7365F);
        MathUtils.hash(Double.POSITIVE_INFINITY);
        long default91;
        default91 = MathUtils.addAndCheck((long) 2146435072, 2343L);
        assertTrue(true ? default91 == (long) 2146435072 + 2343L : true);
        MathUtils.binomialCoefficient((-1297), 2146435072);
    }

    @Test(timeout = 4000)
    public void test13169() throws Throwable {
        MathUtils.nextAfter((-1.0), (-1.0));
        byte byte0 = (byte) 39;
        byte default92;
        default92 = MathUtils.indicator((byte) 39);
        assertTrue(true ? default92 == (byte) 39 : true);
        assertTrue(1L > 0);
        java.math.BigInteger default93;
        if (1L < 0) {
            try {
                default93 = MathUtils.pow((BigInteger) null, 1L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default93 = MathUtils.pow((BigInteger) null, 1L);
        }
    }

    @Test(timeout = 4000)
    public void test13270() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[0] = (-770);
        intArray0[1] = 66;
        intArray0[2] = (-2571);
        intArray0[3] = (-1452);
        intArray0[4] = 1;
        intArray0[5] = 2146932120;
        MathUtils.distance(intArray0, intArray0);
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 16;
        byteArray0[1] = (byte) 1;
        byteArray0[2] = (byte) 33;
        byteArray0[3] = (byte) 116;
        byteArray0[4] = (byte) 0;
        byteArray0[5] = (byte) 101;
        byteArray0[6] = (byte) (-13);
        byteArray0[7] = (byte) 1;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        MathUtils.pow(bigInteger0, (-770));
    }

    @Test(timeout = 4000)
    public void test13571() throws Throwable {
        double default94;
        default94 = MathUtils.normalizeAngle(2.2250738585072014E-308, 2.2250738585072014E-308);
        assertTrue(true ? default94 == 2.2250738585072014E-308 - 2.2250738585072014E-308 : true);
        MathUtils.sign((-1972.041F));
        int int0 = (-2220);
        MathUtils.binomialCoefficientDouble((-2220), (-2220));
    }

    @Test(timeout = 4000)
    public void test13772() throws Throwable {
        float float0 = 0.0F;
        MathUtils.indicator(0.0F);
        MathUtils.sign((double) 1.0F);
        double double0 = 0.0;
        MathUtils.equals(1.0, 0.0);
        byte byte0 = (byte) 1;
        byte default95;
        default95 = MathUtils.sign((byte) 1);
        assertTrue(true ? default95 == (byte) 1 : true);
        long long0 = (-2296L);
        long default96;
        default96 = MathUtils.mulAndCheck((-2296L), (-2296L));
        assertTrue(true ? default96 == (-2296L) * (-2296L) : true);
        int[] intArray0 = new int[5];
        intArray0[0] = (int) (byte) 1;
        intArray0[1] = (int) (byte) 1;
        intArray0[2] = (int) (byte) 1;
        intArray0[3] = (int) (byte) 1;
        intArray0[4] = (int) (byte) 1;
        MathUtils.distance(intArray0, intArray0);
        int int0 = 0;
        assertTrue((long) 1 > 0);
        int default97;
        if ((long) 1 < 0) {
            try {
                default97 = MathUtils.pow(0, (long) 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default97 = MathUtils.pow(0, (long) 1);
        }
        MathUtils.sign((-1.0F));
        MathUtils.nextAfter(1059.34032908715, 4.9E-324);
        long default98;
        if ((-447) < 0) {
            try {
                default98 = MathUtils.factorial((-447));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default98 = MathUtils.factorial((-447));
        }
    }

    @Test(timeout = 4000)
    public void test13873() throws Throwable {
        MathUtils.binomialCoefficientDouble(929, 55);
        MathUtils.sign(929);
        assertTrue(1L > 0);
        int default99;
        if (1L < 0) {
            try {
                default99 = MathUtils.pow(1, 1L);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default99 = MathUtils.pow(1, 1L);
        }
        MathUtils.equals((double) 1L, (double) 1);
        int[] intArray0 = new int[0];
        MathUtils.distance(intArray0, intArray0);
        MathUtils.indicator((float) 929);
        MathUtils.gcd((-998), 61);
        MathUtils.round((-2369.37201), 4194304);
        MathUtils.round(118.566F, 0);
        int default100;
        default100 = MathUtils.mulAndCheck(4194304, 1);
        assertTrue(true ? default100 == 4194304 * 1 : true);
        MathUtils.compareTo(1, 4194304, 0.0);
        MathUtils.sign((long) (-998));
        MathUtils.indicator((float) 1);
        MathUtils.distance(intArray0, intArray0);
        long default101;
        if (0 < 0) {
            try {
                default101 = MathUtils.factorial(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default101 = MathUtils.factorial(0);
        }
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test13974() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 2107.08812032;
        doubleArray0[1] = 10.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = (-1058.62501554362);
        doubleArray0[4] = 0.0;
        doubleArray0[5] = (-1399.742992132);
        doubleArray0[6] = 0.0;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
        MathUtils.distanceInf(doubleArray1, doubleArray0);
        MathUtils.indicator(2107.08812032);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 78;
        byte byte0 = (byte) (-49);
        byteArray0[1] = (byte) (-49);
        byte byte1 = (byte) (-92);
        byteArray0[2] = (byte) (-92);
        byteArray0[3] = (byte) 0;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.nextProbablePrime();
        bigInteger0.byteValueExact();
    }

    @Test(timeout = 4000)
    public void test14075() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
    }

    @Test(timeout = 4000)
    public void test14076() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
    }

    @Test(timeout = 4000)
    public void test14077() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
        int[] intArray0 = new int[4];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = (-1);
        int int1 = MathUtils.distanceInf(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test14078() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
        int[] intArray0 = new int[4];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = (-1);
        int int1 = MathUtils.distanceInf(intArray0, intArray0);
        assertTrue(2443.8207085413 > 0);
        assertTrue((-608.6319869) > 0);
        double double0;
        double0 = MathUtils.log(2443.8207085413, (-608.6319869));
    }

    @Test(timeout = 4000)
    public void test14079() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
        int[] intArray0 = new int[4];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = (-1);
        int int1 = MathUtils.distanceInf(intArray0, intArray0);
        assertTrue(2443.8207085413 > 0);
        assertTrue((-608.6319869) > 0);
        double double0;
        double0 = MathUtils.log(2443.8207085413, (-608.6319869));
        byte byte0;
        byte0 = MathUtils.indicator((byte) (-93));
        assertTrue(true ? byte0 == (byte) (-93) : true);
        assertTrue((long) 0 > 0);
        java.math.BigInteger bigInteger0;
        if ((long) 0 < 0) {
            try {
                bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
        }
    }

    @Test(timeout = 4000)
    public void test14080() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
        int[] intArray0 = new int[4];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = (-1);
        int int1 = MathUtils.distanceInf(intArray0, intArray0);
        assertTrue(2443.8207085413 > 0);
        assertTrue((-608.6319869) > 0);
        double double0;
        double0 = MathUtils.log(2443.8207085413, (-608.6319869));
        byte byte0;
        byte0 = MathUtils.indicator((byte) (-93));
        assertTrue(true ? byte0 == (byte) (-93) : true);
        assertTrue((long) 0 > 0);
        java.math.BigInteger bigInteger0;
        if ((long) 0 < 0) {
            try {
                bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
        }
        long default102;
        default102 = MathUtils.mulAndCheck(0L, 87178291200L);
        assertTrue(true ? default102 == 0L * 87178291200L : true);
        byte byte1;
        byte1 = MathUtils.sign((byte) (-93));
        assertTrue(true ? byte1 == (byte) (-93) : true);
    }

    @Test(timeout = 4000)
    public void test14081() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
        int[] intArray0 = new int[4];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = (-1);
        int int1 = MathUtils.distanceInf(intArray0, intArray0);
        assertTrue(2443.8207085413 > 0);
        assertTrue((-608.6319869) > 0);
        double double0;
        double0 = MathUtils.log(2443.8207085413, (-608.6319869));
        byte byte0;
        byte0 = MathUtils.indicator((byte) (-93));
        assertTrue(true ? byte0 == (byte) (-93) : true);
        assertTrue((long) 0 > 0);
        java.math.BigInteger bigInteger0;
        if ((long) 0 < 0) {
            try {
                bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
        }
        long default103;
        default103 = MathUtils.mulAndCheck(0L, 87178291200L);
        assertTrue(true ? default103 == 0L * 87178291200L : true);
        byte byte1;
        byte1 = MathUtils.sign((byte) (-93));
        assertTrue(true ? byte1 == (byte) (-93) : true);
        int int2 = MathUtils.sign(2);
        double double1 = MathUtils.indicator(0.0);
    }

    @Test(timeout = 4000)
    public void test14082() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
        int[] intArray0 = new int[4];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = (-1);
        int int1 = MathUtils.distanceInf(intArray0, intArray0);
        assertTrue(2443.8207085413 > 0);
        assertTrue((-608.6319869) > 0);
        double double0;
        double0 = MathUtils.log(2443.8207085413, (-608.6319869));
        byte byte0;
        byte0 = MathUtils.indicator((byte) (-93));
        assertTrue(true ? byte0 == (byte) (-93) : true);
        assertTrue((long) 0 > 0);
        java.math.BigInteger bigInteger0;
        if ((long) 0 < 0) {
            try {
                bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
        }
        long default104;
        default104 = MathUtils.mulAndCheck(0L, 87178291200L);
        assertTrue(true ? default104 == 0L * 87178291200L : true);
        byte byte1;
        byte1 = MathUtils.sign((byte) (-93));
        assertTrue(true ? byte1 == (byte) (-93) : true);
        int int2 = MathUtils.sign(2);
        double double1 = MathUtils.indicator(0.0);
        long default105;
        default105 = MathUtils.indicator((long) 0);
        assertTrue(true ? default105 == (long) 0 : true);
        int int3 = MathUtils.gcd((-1), 1);
    }

    @Test(timeout = 4000)
    public void test14083() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
        int[] intArray0 = new int[4];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = (-1);
        int int1 = MathUtils.distanceInf(intArray0, intArray0);
        assertTrue(2443.8207085413 > 0);
        assertTrue((-608.6319869) > 0);
        double double0;
        double0 = MathUtils.log(2443.8207085413, (-608.6319869));
        byte byte0;
        byte0 = MathUtils.indicator((byte) (-93));
        assertTrue(true ? byte0 == (byte) (-93) : true);
        assertTrue((long) 0 > 0);
        java.math.BigInteger bigInteger0;
        if ((long) 0 < 0) {
            try {
                bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
        }
        long default106;
        default106 = MathUtils.mulAndCheck(0L, 87178291200L);
        assertTrue(true ? default106 == 0L * 87178291200L : true);
        byte byte1;
        byte1 = MathUtils.sign((byte) (-93));
        assertTrue(true ? byte1 == (byte) (-93) : true);
        int int2 = MathUtils.sign(2);
        double double1 = MathUtils.indicator(0.0);
        long default107;
        default107 = MathUtils.indicator((long) 0);
        assertTrue(true ? default107 == (long) 0 : true);
        int int3 = MathUtils.gcd((-1), 1);
        double double2 = MathUtils.scalb((-362.4093135705), 2147483646);
    }

    @Test(timeout = 4000)
    public void test14084() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
        int[] intArray0 = new int[4];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = (-1);
        int int1 = MathUtils.distanceInf(intArray0, intArray0);
        assertTrue(2443.8207085413 > 0);
        assertTrue((-608.6319869) > 0);
        double double0;
        double0 = MathUtils.log(2443.8207085413, (-608.6319869));
        byte byte0;
        byte0 = MathUtils.indicator((byte) (-93));
        assertTrue(true ? byte0 == (byte) (-93) : true);
        assertTrue((long) 0 > 0);
        java.math.BigInteger bigInteger0;
        if ((long) 0 < 0) {
            try {
                bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
        }
        long default108;
        default108 = MathUtils.mulAndCheck(0L, 87178291200L);
        assertTrue(true ? default108 == 0L * 87178291200L : true);
        byte byte1;
        byte1 = MathUtils.sign((byte) (-93));
        assertTrue(true ? byte1 == (byte) (-93) : true);
        int int2 = MathUtils.sign(2);
        double double1 = MathUtils.indicator(0.0);
        long default109;
        default109 = MathUtils.indicator((long) 0);
        assertTrue(true ? default109 == (long) 0 : true);
        int int3 = MathUtils.gcd((-1), 1);
        double double2 = MathUtils.scalb((-362.4093135705), 2147483646);
        assertTrue(2 > 0);
        long long0;
        if (2 < 0) {
            try {
                long0 = MathUtils.pow((long) (-1), 2);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((long) (-1), 2);
        }
    }

    @Test(timeout = 4000)
    public void test14085() throws Throwable {
        MathUtils.indicator((-2757.917F));
        float float0 = MathUtils.round((-2757.917F), (-551), 0);
        int int0 = MathUtils.sign((-551));
        int[] intArray0 = new int[4];
        intArray0[0] = 0;
        intArray0[1] = 0;
        intArray0[2] = (-1);
        int int1 = MathUtils.distanceInf(intArray0, intArray0);
        assertTrue(2443.8207085413 > 0);
        assertTrue((-608.6319869) > 0);
        double double0;
        double0 = MathUtils.log(2443.8207085413, (-608.6319869));
        byte byte0;
        byte0 = MathUtils.indicator((byte) (-93));
        assertTrue(true ? byte0 == (byte) (-93) : true);
        assertTrue((long) 0 > 0);
        java.math.BigInteger bigInteger0;
        if ((long) 0 < 0) {
            try {
                bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
        }
        long default110;
        default110 = MathUtils.mulAndCheck(0L, 87178291200L);
        assertTrue(true ? default110 == 0L * 87178291200L : true);
        byte byte1;
        byte1 = MathUtils.sign((byte) (-93));
        assertTrue(true ? byte1 == (byte) (-93) : true);
        int int2 = MathUtils.sign(2);
        double double1 = MathUtils.indicator(0.0);
        long default111;
        default111 = MathUtils.indicator((long) 0);
        assertTrue(true ? default111 == (long) 0 : true);
        int int3 = MathUtils.gcd((-1), 1);
        double double2 = MathUtils.scalb((-362.4093135705), 2147483646);
        assertTrue(2 > 0);
        long long0;
        if (2 < 0) {
            try {
                long0 = MathUtils.pow((long) (-1), 2);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((long) (-1), 2);
        }
        double double3 = MathUtils.binomialCoefficientLog(2, (-1));
    }

    @Test(timeout = 4000)
    public void test14186() throws Throwable {
        byte default112;
        default112 = MathUtils.indicator((byte) (-114));
        assertTrue(true ? default112 == (byte) (-114) : true);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) (byte) (-1);
        doubleArray0[1] = (double) (byte) (-114);
        doubleArray0[2] = (double) (byte) (-114);
        doubleArray0[3] = (double) (byte) (-1);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-744.58655));
        MathUtils.distanceInf(doubleArray1, doubleArray0);
        MathUtils.sinh(2123.0);
        MathUtils.gcd(0, 0);
        MathUtils.indicator(2455.788F);
        MathUtils.round((double) (byte) (-114), 0, (int) (byte) (-114));
    }

    @Test(timeout = 4000)
    public void test14287() throws Throwable {
        int[] intArray0 = new int[0];
        int int0 = MathUtils.distance1(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test14288() throws Throwable {
        int[] intArray0 = new int[0];
        int int0 = MathUtils.distance1(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        float float0 = MathUtils.round(3892.7F, 0, 0);
    }

    @Test(timeout = 4000)
    public void test14289() throws Throwable {
        int[] intArray0 = new int[0];
        int int0 = MathUtils.distance1(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        float float0 = MathUtils.round(3892.7F, 0, 0);
        assertTrue(0 > 0);
        long long0;
        if (0 < 0) {
            try {
                long0 = MathUtils.pow((long) 0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((long) 0, 0);
        }
    }

    @Test(timeout = 4000)
    public void test14290() throws Throwable {
        int[] intArray0 = new int[0];
        int int0 = MathUtils.distance1(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        float float0 = MathUtils.round(3892.7F, 0, 0);
        assertTrue(0 > 0);
        long long0;
        if (0 < 0) {
            try {
                long0 = MathUtils.pow((long) 0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((long) 0, 0);
        }
        double double0 = MathUtils.sinh((-6077.737308));
    }

    @Test(timeout = 4000)
    public void test14291() throws Throwable {
        int[] intArray0 = new int[0];
        int int0 = MathUtils.distance1(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        float float0 = MathUtils.round(3892.7F, 0, 0);
        assertTrue(0 > 0);
        long long0;
        if (0 < 0) {
            try {
                long0 = MathUtils.pow((long) 0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((long) 0, 0);
        }
        double double0 = MathUtils.sinh((-6077.737308));
        double double1 = MathUtils.binomialCoefficientLog(0, 0);
    }

    @Test(timeout = 4000)
    public void test14292() throws Throwable {
        int[] intArray0 = new int[0];
        int int0 = MathUtils.distance1(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        float float0 = MathUtils.round(3892.7F, 0, 0);
        assertTrue(0 > 0);
        long long0;
        if (0 < 0) {
            try {
                long0 = MathUtils.pow((long) 0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((long) 0, 0);
        }
        double double0 = MathUtils.sinh((-6077.737308));
        double double1 = MathUtils.binomialCoefficientLog(0, 0);
        MathUtils.distance(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        long default113;
        if (0 < 0) {
            try {
                default113 = MathUtils.factorial(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default113 = MathUtils.factorial(0);
        }
        int int1 = MathUtils.gcd(1726, 1726);
    }

    @Test(timeout = 4000)
    public void test14293() throws Throwable {
        int[] intArray0 = new int[0];
        int int0 = MathUtils.distance1(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        float float0 = MathUtils.round(3892.7F, 0, 0);
        assertTrue(0 > 0);
        long long0;
        if (0 < 0) {
            try {
                long0 = MathUtils.pow((long) 0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            long0 = MathUtils.pow((long) 0, 0);
        }
        double double0 = MathUtils.sinh((-6077.737308));
        double double1 = MathUtils.binomialCoefficientLog(0, 0);
        MathUtils.distance(intArray0, intArray0);
        MathUtils.distanceInf(intArray0, intArray0);
        long default114;
        if (0 < 0) {
            try {
                default114 = MathUtils.factorial(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default114 = MathUtils.factorial(0);
        }
        int int1 = MathUtils.gcd(1726, 1726);
        MathUtils.sign(0);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 14);
        assertTrue(true ? byte0 == (byte) 14 : true);
    }

    @Test(timeout = 4000)
    public void test14394() throws Throwable {
        MathUtils.binomialCoefficient(4191, 3092);
    }

    @Test(timeout = 4000)
    public void test14495() throws Throwable {
        int int0 = 0;
        int int1 = (-603);
        MathUtils.binomialCoefficientDouble(0, (-603));
        MathUtils.sinh(1.0);
        MathUtils.log(3670.43953, 0);
        byte default115;
        default115 = MathUtils.indicator((byte) 52);
        assertTrue(true ? default115 == (byte) 52 : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) (-603);
        doubleArray0[1] = 1.1752011936438016;
        doubleArray0[2] = (double) (-603);
        doubleArray0[3] = 3670.43953;
        doubleArray0[4] = (double) (-603);
        MathUtils.distance1(doubleArray0, doubleArray0);
        MathUtils.distance(doubleArray0, doubleArray0);
        MathUtils.distanceInf(doubleArray0, doubleArray0);
        MathUtils.equals((-1566.3), 1.0);
        MathUtils.indicator(0);
        int int2 = 1633;
        int default116;
        default116 = MathUtils.addAndCheck(20, 1633);
        assertTrue(true ? default116 == 20 + 1633 : true);
        MathUtils.binomialCoefficientDouble((-603), 1);
    }
}
