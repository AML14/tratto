/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 21:14:20 GMT 2023
 */
package org.apache.commons.math.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.BrentSolver;
import org.apache.commons.math.analysis.PolynomialFunction;
import org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.analysis.PolynomialSplineFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BrentSolver_ESTest extends BrentSolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        double[] doubleArray0 = new double[0];
        PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
        PolynomialFunction polynomialFunction0 = null;
        polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        double[] doubleArray0 = new double[2];
        PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[0];
        PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
        BrentSolver brentSolver0 = null;
        brentSolver0 = new BrentSolver(polynomialSplineFunction1);
    }

    @Test(timeout = 4000)
    public void test212() throws Throwable {
        double[] doubleArray0 = new double[2];
        double double0 = 1.5;
        doubleArray0[0] = 1.5;
        double double1 = 0.0;
        doubleArray0[1] = 1.5;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        brentSolver0.setRelativeAccuracy(1.5);
        double default0;
        default0 = brentSolver0.solve(1.5, 0.0, 0.0);
        assertTrue(true ? default0 == 0 : true);
        double double2 = 1.0E-6;
        double default1;
        default1 = brentSolver0.solve(0.0, (-1886.83536996), 1.0E-6);
        assertTrue(true ? default1 == 0 : true);
        double double3 = 4.3764418752698397E-7;
        double default2;
        if ((doubleArray0[1] < double3) == false) {
            try {
                default2 = brentSolver0.solve(doubleArray0[1], double3);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default2 = brentSolver0.solve(doubleArray0[1], double3);
            assertTrue(true ? default2 == 0 : true);
        }
        double default3;
        default3 = brentSolver0.solve(double2, doubleArray0[0], double0);
        assertTrue(true ? default3 == 0 : true);
    }
}
