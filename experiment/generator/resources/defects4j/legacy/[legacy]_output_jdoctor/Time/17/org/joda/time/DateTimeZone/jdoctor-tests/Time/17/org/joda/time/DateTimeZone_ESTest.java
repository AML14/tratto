/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 02:06:20 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 59);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes(0, (-68703773));
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+03:32:20.625");
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+03:32:20.625");
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        DateTimeZone.setDefault(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        dateTimeZone0.UTC.toTimeZone();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        dateTimeZone0.UTC.toTimeZone();
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
        dateTimeZone0.UTC.previousTransition(0L);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
        dateTimeZone0.UTC.previousTransition(0L);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.UTC.previousTransition(1);
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        long long0 = fixedDateTimeZone0.previousTransition((-4403L));
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        dateTimeZone0.nextTransition(0L);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.nextTransition(0L);
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-357));
        dateTimeZone0.nextTransition((-357));
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("WET");
        int int0 = dateTimeZone0.getStandardOffset(1804L);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        int int0 = dateTimeZone0.getStandardOffset(0L);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        int int0 = dateTimeZone0.getStandardOffset(0L);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
        dateTimeZone0.UTC.getOffsetFromLocal(0L);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
        dateTimeZone0.UTC.getOffsetFromLocal(0L);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
        DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
        int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
        DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
        int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Instant instant0 = new Instant();
        int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        int int0 = dateTimeZone0.getOffset(9972000000L);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        int int0 = dateTimeZone0.getOffset(9972000000L);
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        int int0 = dateTimeZone0.getOffset(9972000000L);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        int int0 = dateTimeZone0.getOffset(9972000000L);
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffset(1173L);
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        dateTimeZone0.getNameKey(9972000000L);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        String string0 = dateTimeZone0.getNameKey((-575L));
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
        boolean boolean0 = dateTimeZone0.UTC.equals(dateTimeZone1);
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
        boolean boolean0 = dateTimeZone0.equals("CET");
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(572, "ReadablePartial objects must be contiguous");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test2736() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(572, "ReadablePartial objects must be contiguous");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        long long0 = dateTimeZone0.convertUTCToLocal(0L);
    }

    @Test(timeout = 4000)
    public void test2837() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        long long0 = dateTimeZone0.convertUTCToLocal(1);
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        long long0 = dateTimeZone0.convertUTCToLocal(1);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test2939() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 3409, true, (-1531L));
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2940() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 3409, true, (-1531L));
    }

    @Test(timeout = 4000)
    public void test3041() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(572);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 572, true, (long) 572);
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(572);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 572, true, (long) 572);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
        assertTrue(false == true);
        long long0;
        long0 = dateTimeZone0.UTC.adjustOffset(0L, false);
    }

    @Test(timeout = 4000)
    public void test3144() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
        assertTrue(false == true);
        long long0;
        long0 = dateTimeZone0.UTC.adjustOffset(0L, false);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test3245() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        assertTrue(true == true);
        long long0;
        long0 = dateTimeZone0.adjustOffset((-1L), true);
    }

    @Test(timeout = 4000)
    public void test3346() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        assertTrue(((LocalDateTime) null == null) == false);
        boolean default0;
        default0 = dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
    }

    @Test(timeout = 4000)
    public void test3447() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(177, 0);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test3548() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
    }

    @Test(timeout = 4000)
    public void test3649() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, true);
    }

    @Test(timeout = 4000)
    public void test3750() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertLocalToUTC((-806L), true, (-806L));
    }

    @Test(timeout = 4000)
    public void test3851() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertUTCToLocal((-3433L));
    }

    @Test(timeout = 4000)
    public void test3952() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertUTCToLocal(5877L);
    }

    @Test(timeout = 4000)
    public void test4053() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.PRC;
        String string0 = dateTimeZone0.getName(10799996L, locale0);
    }

    @Test(timeout = 4000)
    public void test4054() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.PRC;
        String string0 = dateTimeZone0.getName(10799996L, locale0);
    }

    @Test(timeout = 4000)
    public void test4155() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);
        String string0 = dateTimeZone0.getName(3347L, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test4256() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        Locale locale0 = new Locale("xSp<QqI'HmDzP?", "L.$%ZG`>)m [Ad");
        String string0 = dateTimeZone0.getShortName((long) 1, locale0);
    }

    @Test(timeout = 4000)
    public void test4357() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone dateTimeZone0 = uTCProvider0.getZone("UTC");
        String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);
    }

    @Test(timeout = 4000)
    public void test4358() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone dateTimeZone0 = uTCProvider0.getZone("UTC");
        String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);
    }

    @Test(timeout = 4000)
    public void test4459() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-357), 1);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test4560() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
        dateTimeZone0.UTC.isFixed();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test4561() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
        dateTimeZone0.UTC.isFixed();
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test4662() throws Throwable {
        DateTimeZone.forID("hh!E!^m5qP");
    }

    @Test(timeout = 4000)
    public void test4763() throws Throwable {
        DateTimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test4864() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        String string0 = dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test4965() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
        long long0 = dateTimeZone0.adjustOffset(3409, false);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test4966() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
        long long0 = dateTimeZone0.adjustOffset(3409, false);
    }

    @Test(timeout = 4000)
    public void test5067() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        LocalDateTime localDateTime0 = LocalDateTime.now();
        dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test5068() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        LocalDateTime localDateTime0 = LocalDateTime.now();
        dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test5169() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
        long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 2593L);
    }

    @Test(timeout = 4000)
    public void test5270() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true);
    }

    @Test(timeout = 4000)
    public void test5271() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test5372() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
    }

    @Test(timeout = 4000)
    public void test5473() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
    }

    @Test(timeout = 4000)
    public void test5574() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertLocalToUTC(21859200000L, true, 10806818L);
    }

    @Test(timeout = 4000)
    public void test5675() throws Throwable {
        System.setCurrentTimeMillis((-9223372036854775808L));
        LocalDateTime localDateTime0 = null;
        localDateTime0 = new LocalDateTime();
    }

    @Test(timeout = 4000)
    public void test5776() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
        long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1673L);
    }

    @Test(timeout = 4000)
    public void test5877() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
        LocalDateTime localDateTime0 = new LocalDateTime((-3597407L));
        LocalDateTime localDateTime1 = localDateTime0.withWeekyear(1285);
        boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
    }

    @Test(timeout = 4000)
    public void test5978() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
        int int0 = dateTimeZone0.getOffsetFromLocal(423L);
    }

    @Test(timeout = 4000)
    public void test6079() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test6180() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(1L);
    }

    @Test(timeout = 4000)
    public void test6281() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.UTC.isStandardOffset(7L);
    }

    @Test(timeout = 4000)
    public void test6382() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        dateTimeZone0.UTC.getOffset((ReadableInstant) null);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test6383() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        dateTimeZone0.UTC.getOffset((ReadableInstant) null);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test6484() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        String string0 = dateTimeZone0.getName(9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test6585() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`HAljM6#");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test6586() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`HAljM6#");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00");
    }

    @Test(timeout = 4000)
    public void test6587() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`HAljM6#");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00");
    }

    @Test(timeout = 4000)
    public void test6688() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-28378000));
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test7089() throws Throwable {
        DateTimeZone.forOffsetMillis(12740625);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test7190() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        long long0 = dateTimeZone0.convertLocalToUTC(10800000L, false);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test7191() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        long long0 = dateTimeZone0.convertLocalToUTC(10800000L, false);
    }

    @Test(timeout = 4000)
    public void test7392() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test7393() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone1.getID();
    }

    @Test(timeout = 4000)
    public void test7394() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test7495() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(730, "UTC");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test7596() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test7597() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        int int0 = dateTimeZone0.getStandardOffset((-324L));
    }

    @Test(timeout = 4000)
    public void test7698() throws Throwable {
        DateTimeZone.forOffsetHours((-2112));
    }

    @Test(timeout = 4000)
    public void test7799() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes(0, 12720000);
    }

    @Test(timeout = 4000)
    public void test78100() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("-07:00");
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test78101() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("-07:00");
    }

    @Test(timeout = 4000)
    public void test79102() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test80103() throws Throwable {
        assertTrue(((DateTimeZone) null == null) == false);
        if ((DateTimeZone) null == null) {
            try {
                DateTimeZone.setDefault((DateTimeZone) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            DateTimeZone.setDefault((DateTimeZone) null);
        }
    }

    @Test(timeout = 4000)
    public void test81104() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone.setDefault(dateTimeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
        dateTimeZone1.getID();
    }

    @Test(timeout = 4000)
    public void test82105() throws Throwable {
        Provider provider0 = DateTimeZone.getProvider();
    }

    @Test(timeout = 4000)
    public void test83106() throws Throwable {
        NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    }

    @Test(timeout = 4000)
    public void test84107() throws Throwable {
        Set<String> set0 = DateTimeZone.getAvailableIDs();
        set0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test85108() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        String string0 = dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test86109() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test86110() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test87111() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);
        String string0 = dateTimeZone0.getShortName(4117L);
    }

    @Test(timeout = 4000)
    public void test88112() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forTimeZone(timeZone0);
        ((DateTimeZone) fixedDateTimeZone0).writeReplace();
        fixedDateTimeZone0.getID();
    }
}
