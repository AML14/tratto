/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 12:16:32 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0130() throws Throwable {
        int int0 = 0;
        LocalDateTime localDateTime0 = new LocalDateTime(0, 12, 0, 12, 12, 64);
        localDateTime0.withYearOfEra(int0);
        localDateTime0.toLocalDate();
    }

    @Test(timeout = 4000)
    public void test0231() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek((-3077));
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test0242() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withMonthOfYear(255);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test0263() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDate localDate0 = LocalDate.now();
        localDateTime0.compareTo((ReadablePartial) localDate0);
    }

    @Test(timeout = 4000)
    public void test0284() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withDayOfMonth(736);
        DateTimeFieldType.halfdayOfDay();
    }

    @Test(timeout = 4000)
    public void test0325() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusYears((-2147483598));
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDateTime localDateTime0 = null;
        localDateTime0 = new LocalDateTime(fixedDateTimeZone0, fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test0477() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withTime(23034375, 23034375, 23034375, 23034375);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test0488() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getFieldType(883);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test0539() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Locale locale0 = Locale.CHINESE;
        localDateTime0.toString("|Er", locale0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test06110() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withEra(23118750);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test06211() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getValue(153);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test06812() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(2390);
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test08013() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.hourOfDay();
        localDateTime0.toDate();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.setCopy("{gmi");
        localDateTime_Property0.getLeapAmount();
    }

    @Test(timeout = 4000)
    public void test09514() throws Throwable {
        assertTrue(((Calendar) null == null) == false);
        org.joda.time.LocalDateTime localDateTime0;
        if ((Calendar) null == null) {
            try {
                localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) null);
        }
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test10215() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.hourOfDay();
        localDateTime0.toDate();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.addToCopy(1392389541320L);
        localDateTime_Property0.roundCeilingCopy();
    }

    @Test(timeout = 4000)
    public void test10716() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withDayOfYear(23118774);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test11517() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        assertTrue(((DateTimeFieldType) null == null) == false);
        int default0;
        if ((DateTimeFieldType) null == null) {
            try {
                default0 = localDateTime0.get((DateTimeFieldType) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default0 = localDateTime0.get((DateTimeFieldType) null);
        }
        localDateTime0.getMillisOfDay();
    }

    @Test(timeout = 4000)
    public void test12618() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        assertTrue(((DurationFieldType) null == null) == false);
        org.joda.time.LocalDateTime default1;
        default1 = localDateTime0.withFieldAdded((DurationFieldType) null, 0);
        long long0 = 60000L;
        System.setCurrentTimeMillis(long0);
    }
}
