[
  {
    "signature": "org.joda.time.format.DateTimeFormatter(org.joda.time.format.DateTimePrinter printer, org.joda.time.format.DateTimeParser parser)",
    "name": "org.joda.time.format.DateTimeFormatter",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.format.DateTimePrinter",
          "name": "DateTimePrinter",
          "isArray": false
        },
        "name": "printer"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.format.DateTimeParser",
          "name": "DateTimeParser",
          "isArray": false
        },
        "name": "parser"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.format.DateTimePrinter",
            "name": "DateTimePrinter",
            "isArray": false
          },
          "name": "printer"
        },
        "comment": "the internal printer. printer is null if cannot print.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.format.DateTimeParser",
            "name": "DateTimeParser",
            "isArray": false
          },
          "name": "parser"
        },
        "comment": "the internal parser. parser is null if cannot parse.",
        "kind": "PARAM",
        "condition": "args[1]==null"
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isPrinter()",
    "name": "isPrinter",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if this is a printer.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPrinter()",
    "name": "getPrinter",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimePrinter",
      "name": "org.joda.time.format.DateTimePrinter",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the internal printer; is null if printing not supported.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isParser()",
    "name": "isParser",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if this is a parser.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getParser()",
    "name": "getParser",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeParser",
      "name": "org.joda.time.format.DateTimeParser",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the internal parser; is null if parsing not supported.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withLocale(java.util.Locale locale)",
    "name": "withLocale",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "org.joda.time.format.DateTimeFormatter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "locale"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Locale",
            "name": "Locale",
            "isArray": false
          },
          "name": "locale"
        },
        "comment": "the locale to use if null formatter uses default locale at invocation time.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new formatter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLocale()",
    "name": "getLocale",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Locale",
      "name": "java.util.Locale",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the locale to use; if null, formatter uses default locale at invocation time.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withOffsetParsed()",
    "name": "withOffsetParsed",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "org.joda.time.format.DateTimeFormatter",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the new formatter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isOffsetParsed()",
    "name": "isOffsetParsed",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the offset from the string is used as the zone.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withChronology(org.joda.time.Chronology chrono)",
    "name": "withChronology",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "org.joda.time.format.DateTimeFormatter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.Chronology",
          "name": "Chronology",
          "isArray": false
        },
        "name": "chrono"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.Chronology",
            "name": "Chronology",
            "isArray": false
          },
          "name": "chrono"
        },
        "comment": "the chronology to use as an override.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new formatter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getChronology()",
    "name": "getChronology",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Chronology",
      "name": "org.joda.time.Chronology",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the chronology to use as an override.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getChronolgy()",
    "name": "getChronolgy",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Chronology",
      "name": "org.joda.time.Chronology",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the chronology to use as an override.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withZoneUTC()",
    "name": "withZoneUTC",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "org.joda.time.format.DateTimeFormatter",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the new formatter, never null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withZone(org.joda.time.DateTimeZone zone)",
    "name": "withZone",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "org.joda.time.format.DateTimeFormatter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeZone",
          "name": "DateTimeZone",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DateTimeZone",
            "name": "DateTimeZone",
            "isArray": false
          },
          "name": "zone"
        },
        "comment": "the zone to use as an override.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new formatter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getZone()",
    "name": "getZone",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "org.joda.time.DateTimeZone",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the zone to use as an override.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withPivotYear(java.lang.Integer pivotYear)",
    "name": "withPivotYear",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "org.joda.time.format.DateTimeFormatter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Integer",
          "name": "Integer",
          "isArray": false
        },
        "name": "pivotYear"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Integer",
            "name": "Integer",
            "isArray": false
          },
          "name": "pivotYear"
        },
        "comment": "pivotYear is pivot. pivot year to use as an override when parsing.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new formatter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withPivotYear(int pivotYear)",
    "name": "withPivotYear",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "org.joda.time.format.DateTimeFormatter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "pivotYear"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "pivotYear"
        },
        "comment": "pivotYear is pivot. pivot year to use as an override when parsing.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new formatter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPivotYear()",
    "name": "getPivotYear",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Integer",
      "name": "java.lang.Integer",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the pivot year to use as an override.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withDefaultYear(int defaultYear)",
    "name": "withDefaultYear",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "org.joda.time.format.DateTimeFormatter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "defaultYear"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "defaultYear"
        },
        "comment": "the default year to use.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new formatter, not null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDefaultYear()",
    "name": "getDefaultYear",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the default year for parsing months and days.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "printTo(java.lang.StringBuffer buf, org.joda.time.ReadableInstant instant)",
    "name": "printTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.StringBuffer",
          "name": "StringBuffer",
          "isArray": false
        },
        "name": "buf"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadableInstant",
          "name": "ReadableInstant",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.StringBuffer",
            "name": "StringBuffer",
            "isArray": false
          },
          "name": "buf"
        },
        "comment": "the destination to format to. buf is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadableInstant",
            "name": "ReadableInstant",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "instant to format. instant is null means now.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "printTo(java.io.Writer out, org.joda.time.ReadableInstant instant)",
    "name": "printTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadableInstant",
          "name": "ReadableInstant",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the destination to format to. out is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadableInstant",
            "name": "ReadableInstant",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "instant to format. instant is null means now.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "printTo(java.lang.Appendable appendable, org.joda.time.ReadableInstant instant)",
    "name": "printTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Appendable",
          "name": "Appendable",
          "isArray": false
        },
        "name": "appendable"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadableInstant",
          "name": "ReadableInstant",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Appendable",
            "name": "Appendable",
            "isArray": false
          },
          "name": "appendable"
        },
        "comment": "the destination to format to. appendable is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadableInstant",
            "name": "ReadableInstant",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "instant to format. instant is null means now.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "printTo(java.lang.StringBuffer buf, long instant)",
    "name": "printTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.StringBuffer",
          "name": "StringBuffer",
          "isArray": false
        },
        "name": "buf"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.StringBuffer",
            "name": "StringBuffer",
            "isArray": false
          },
          "name": "buf"
        },
        "comment": "the destination to format to. buf is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "millis since 1970-01-01T00:00:00Z.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "printTo(java.io.Writer out, long instant)",
    "name": "printTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the destination to format to. out is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "millis since 1970-01-01T00:00:00Z.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "printTo(java.lang.Appendable appendable, long instant)",
    "name": "printTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Appendable",
          "name": "Appendable",
          "isArray": false
        },
        "name": "appendable"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Appendable",
            "name": "Appendable",
            "isArray": false
          },
          "name": "appendable"
        },
        "comment": "the destination to format to. appendable is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "millis since 1970-01-01T00:00:00Z.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "printTo(java.lang.StringBuffer buf, org.joda.time.ReadablePartial partial)",
    "name": "printTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.StringBuffer",
          "name": "StringBuffer",
          "isArray": false
        },
        "name": "buf"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePartial",
          "name": "ReadablePartial",
          "isArray": false
        },
        "name": "partial"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.StringBuffer",
            "name": "StringBuffer",
            "isArray": false
          },
          "name": "buf"
        },
        "comment": "the destination to format to. buf is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePartial",
            "name": "ReadablePartial",
            "isArray": false
          },
          "name": "partial"
        },
        "comment": "partial to format.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "printTo(java.io.Writer out, org.joda.time.ReadablePartial partial)",
    "name": "printTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePartial",
          "name": "ReadablePartial",
          "isArray": false
        },
        "name": "partial"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the destination to format to. out is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePartial",
            "name": "ReadablePartial",
            "isArray": false
          },
          "name": "partial"
        },
        "comment": "partial to format.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "printTo(java.lang.Appendable appendable, org.joda.time.ReadablePartial partial)",
    "name": "printTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Appendable",
          "name": "Appendable",
          "isArray": false
        },
        "name": "appendable"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePartial",
          "name": "ReadablePartial",
          "isArray": false
        },
        "name": "partial"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Appendable",
            "name": "Appendable",
            "isArray": false
          },
          "name": "appendable"
        },
        "comment": "the destination to format to. appendable is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePartial",
            "name": "ReadablePartial",
            "isArray": false
          },
          "name": "partial"
        },
        "comment": "partial to format.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "print(org.joda.time.ReadableInstant instant)",
    "name": "print",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadableInstant",
          "name": "ReadableInstant",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadableInstant",
            "name": "ReadableInstant",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "instant to format. instant is null means now.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the printed result.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "print(long instant)",
    "name": "print",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "millis since 1970-01-01T00:00:00Z.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the printed result.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "print(org.joda.time.ReadablePartial partial)",
    "name": "print",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePartial",
          "name": "ReadablePartial",
          "isArray": false
        },
        "name": "partial"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePartial",
            "name": "ReadablePartial",
            "isArray": false
          },
          "name": "partial"
        },
        "comment": "partial to format.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the printed result.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "parseInto(org.joda.time.ReadWritableInstant instant, java.lang.String text, int position)",
    "name": "parseInto",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadWritableInstant",
          "name": "ReadWritableInstant",
          "isArray": false
        },
        "name": "instant"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "text"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "position"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadWritableInstant",
            "name": "ReadWritableInstant",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "an instant that . instant is modified not null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "text"
        },
        "comment": "the text to parse.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "position"
        },
        "comment": "position to start parsing from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "new position, negative value means parse failed - apply complement operator (~) to get position of failure.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.UnsupportedOperationException",
          "name": "UnsupportedOperationException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "parsing is not supported.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the instant is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "any field is out of range.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parseMillis(java.lang.String text)",
    "name": "parseMillis",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "text"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "text"
        },
        "comment": "text to parse.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "parsed value expressed in milliseconds since the epoch.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.UnsupportedOperationException",
          "name": "UnsupportedOperationException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "parsing is not supported.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the text to parse is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parseLocalDate(java.lang.String text)",
    "name": "parseLocalDate",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.LocalDate",
      "name": "org.joda.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "text"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "text"
        },
        "comment": "the text to parse. text is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the parsed date, never null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.UnsupportedOperationException",
          "name": "UnsupportedOperationException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "parsing is not supported.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the text to parse is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parseLocalTime(java.lang.String text)",
    "name": "parseLocalTime",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.LocalTime",
      "name": "org.joda.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "text"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "text"
        },
        "comment": "the text to parse. text is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the parsed time, never null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.UnsupportedOperationException",
          "name": "UnsupportedOperationException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "parsing is not supported.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the text to parse is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parseLocalDateTime(java.lang.String text)",
    "name": "parseLocalDateTime",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.LocalDateTime",
      "name": "org.joda.time.LocalDateTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "text"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "text"
        },
        "comment": "the text to parse. text is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the parsed date-time, never null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.UnsupportedOperationException",
          "name": "UnsupportedOperationException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "parsing is not supported.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the text to parse is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parseDateTime(java.lang.String text)",
    "name": "parseDateTime",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTime",
      "name": "org.joda.time.DateTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "text"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "text"
        },
        "comment": "the text to parse. text is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the parsed date-time, never null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.UnsupportedOperationException",
          "name": "UnsupportedOperationException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "parsing is not supported.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the text to parse is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parseMutableDateTime(java.lang.String text)",
    "name": "parseMutableDateTime",
    "containingClass": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "DateTimeFormatter",
      "isArray": false
    },
    "targetClass": "org.joda.time.format.DateTimeFormatter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.MutableDateTime",
      "name": "org.joda.time.MutableDateTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "text"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "text"
        },
        "comment": "the text to parse. text is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the parsed date-time, never null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.UnsupportedOperationException",
          "name": "UnsupportedOperationException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "parsing is not supported.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the text to parse is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]