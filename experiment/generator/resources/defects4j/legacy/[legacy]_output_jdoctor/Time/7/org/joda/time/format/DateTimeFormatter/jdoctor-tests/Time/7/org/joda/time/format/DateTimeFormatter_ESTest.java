/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 01:02:44 GMT 2023
 */
package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import java.nio.CharBuffer;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        dateTimeFormatter0.getPivotYear();
        UTCProvider uTCProvider0 = new UTCProvider();
        ZoneId.getAvailableZoneIds();
        StringWriter stringWriter0 = new StringWriter(2275);
        stringWriter0.append('O');
        MutableDateTime.now();
        assertTrue(("O-Y1EtX /r)6t63A1{I" == null) == false);
        org.joda.time.MutableDateTime default0;
        default0 = dateTimeFormatter0.parseMutableDateTime("O-Y1EtX /r)6t63A1{I");
        dateTimeFormatter0.withZoneUTC();
        String string0 = "";
        assertTrue((string0 == null) == false);
        org.joda.time.LocalTime localTime0;
        localTime0 = dateTimeFormatter0.parseLocalTime(string0);
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadablePartial) localTime0);
        dateTimeFormatter0.getChronolgy();
    }

    @Test(timeout = 4000)
    public void test0181() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
        Partial partial0 = new Partial(localDate0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MockPrintStream mockPrintStream0 = new MockPrintStream("w");
        Object[] objectArray0 = new Object[8];
        objectArray0[0] = (Object) "|";
        objectArray0[2] = (Object) "|";
        objectArray0[3] = (Object) "w";
        objectArray0[4] = (Object) localDate0;
        objectArray0[5] = (Object) "w";
        objectArray0[6] = (Object) dateTimeFormatter1;
        PrintStream printStream0 = mockPrintStream0.printf("|", objectArray0);
        dateTimeFormatter1.printTo((Appendable) printStream0, (ReadablePartial) partial0);
        dateTimeFormatter1.getChronology();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
        PrintWriter printWriter0 = mockPrintWriter0.append('Y');
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
        dateTimeFormatter1.printTo((Writer) mockPrintWriter1, (ReadablePartial) localDate0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        dateTimeFormatter1.printTo((Appendable) printStream0, (ReadableInstant) mutableDateTime0);
        assertTrue(("w" == null) == false);
        org.joda.time.LocalTime default1;
        default1 = dateTimeFormatter1.parseLocalTime("w");
        String string0 = "";
        assertTrue((string0 == null) == false);
        org.joda.time.LocalTime default2;
        default2 = dateTimeFormatter0.parseLocalTime(string0);
        StringBuffer stringBuffer0 = null;
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) partial0);
    }

    @Test(timeout = 4000)
    public void test0262() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        int int0 = 65;
        dateTimeFormatter0.withDefaultYear(65);
        StringWriter stringWriter0 = new StringWriter();
        stringWriter0.getBuffer();
        LocalDateTime localDateTime0 = LocalDateTime.parse("");
        localDateTime0.withYear(int0);
    }

    @Test(timeout = 4000)
    public void test0313() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2697), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        Locale locale0 = null;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int0 = 0;
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
        String string0 = null;
        assertTrue(((String) null == null) == false);
        org.joda.time.MutableDateTime default3;
        default3 = dateTimeFormatter4.parseMutableDateTime((String) null);
        StringBuffer stringBuffer0 = new StringBuffer(string0);
        MockGregorianCalendar mockGregorianCalendar0 = null;
        mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    }

    @Test(timeout = 4000)
    public void test0324() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
        Locale locale0 = Locale.UK;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
        int int0 = (-1);
        dateTimeFormatter1.withLocale(locale0);
        dateTimeFormatter0.withDefaultYear((-1));
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1));
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        UTCProvider uTCProvider0 = new UTCProvider();
        String string0 = "Parsing not supported";
        assertTrue(("Parsing not supported" == null) == false);
        org.joda.time.MutableDateTime default4;
        default4 = dateTimeFormatter0.parseMutableDateTime("Parsing not supported");
        DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
        dateTimeFormatter5.print((long) int0);
    }

    @Test(timeout = 4000)
    public void test0395() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 47, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(47);
        Integer integer0 = new Integer(245);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        dateTimeFormatter3.withZone(fixedDateTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer();
        LocalDateTime localDateTime0 = LocalDateTime.parse("E+b^jb2^~g<$<4v!-u|");
        int int0 = 1;
        LocalDateTime localDateTime1 = localDateTime0.plusDays(int0);
        LocalDate localDate0 = localDateTime1.toLocalDate();
        localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test0446() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('x');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
        dateTimeFormatter2.withZoneUTC();
        dateTimeFormatter2.parseMillis((String) null);
        dateTimeFormatter1.withZoneUTC();
        int int0 = 0;
        Integer integer0 = null;
        integer0 = new Integer(int0);
    }

    @Test(timeout = 4000)
    public void test0487() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
        DateTimeZone.getDefault();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        dateTimeFieldType0.getField(chronology0);
        dateTimeFormatter0.withDefaultYear(1);
        dateTimeFormatter3.isOffsetParsed();
        String string0 = "CST";
        assertTrue(("CST" == null) == false);
        org.joda.time.LocalTime default5;
        default5 = dateTimeFormatter1.parseLocalTime("CST");
        StringWriter stringWriter0 = null;
        stringWriter0 = new StringWriter(int0);
    }

    @Test(timeout = 4000)
    public void test0498() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-826), false);
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
        Locale locale0 = Locale.KOREAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Instant instant0 = new Instant((long) (-826));
        Chronology chronology0 = instant0.getChronology();
        DateTime dateTime0 = new DateTime(0L);
        instant0.isBefore(dateTime0);
        LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        LocalDateTime localDateTime1 = localDateTime0.minusHours((-826));
        Integer integer0 = new Integer((-826));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-11L), chronology0, locale0, integer0, (-826));
        Integer.toUnsignedLong((-826));
        dateTimeParserBucket0.computeMillis(false);
        Integer.compare((-826), (-826));
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatter3.withZone(dateTimeZone0);
        localDateTime1.toLocalDate();
        dateTimeFormatter2.print((ReadablePartial) localDateTime1);
        dateTimeFormatter2.print((ReadablePartial) localDateTime1);
        long long0 = 1L;
        dateTimeFormatter3.print(long0);
        dateTimeFormatter0.withChronology(chronology0);
    }

    @Test(timeout = 4000)
    public void test0539() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1027, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        dateTimeFormatter0.withDefaultYear(10080);
        int int0 = 292271022;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        fixedDateTimeZone0.getName((long) 10080);
        String string0 = "5b`o@6e,FTZ0";
        assertTrue(("5b`o@6e,FTZ0" == null) == false);
        org.joda.time.MutableDateTime mutableDateTime0;
        mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("5b`o@6e,FTZ0");
        String string1 = "org.joda.time.chrono.GJYearOfEraDateTimeField";
        int int1 = 0;
        dateTimeFormatter0.parseInto(mutableDateTime0, string1, int1);
    }

    @Test(timeout = 4000)
    public void test05510() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(0);
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1505));
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        int int0 = (-955);
        Integer integer0 = Integer.valueOf("Instant must not be null", (-955));
        dateTimeFormatter3.withPivotYear(integer0);
        long long0 = (-2836L);
        DateTimeUtils.setCurrentMillisOffset(long0);
    }

    @Test(timeout = 4000)
    public void test05811() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        int int0 = 1;
        dateTimeFormatter0.withDefaultYear(1);
        String string0 = "(>TC|[5nkz p1^";
        assertTrue(("(>TC|[5nkz p1^" == null) == false);
        org.joda.time.LocalTime default6;
        default6 = dateTimeFormatter0.parseLocalTime("(>TC|[5nkz p1^");
    }

    @Test(timeout = 4000)
    public void test05912() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        linkedList0.add((Object) dateTimeFormatterBuilder_Composite0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Chronology chronology0 = buddhistChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        linkedList0.forEach(consumer0);
        DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
        DateTimeZone.setNameProvider(defaultNameProvider0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-527));
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withPivotYear(2000);
        Locale locale0 = Locale.TAIWAN;
        DateTimeZone.forTimeZone((TimeZone) null);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale0);
        dateTimeFormatter5.getLocale();
        DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter0.getZone();
        dateTimeFormatter4.withPivotYear(1023);
        dateTimeFormatter6.isOffsetParsed();
        DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withChronology(buddhistChronology0);
        assertTrue(("The datetime zone id '" == null) == false);
        org.joda.time.LocalDateTime default7;
        default7 = dateTimeFormatter7.parseLocalDateTime("The datetime zone id '");
        String string0 = "VADxWbj";
        assertTrue((string0 == null) == false);
        org.joda.time.MutableDateTime default8;
        default8 = dateTimeFormatter7.parseMutableDateTime(string0);
        Writer writer0 = null;
        Instant instant0 = Instant.now();
        dateTimeFormatter1.printTo(writer0, (ReadableInstant) instant0);
    }

    @Test(timeout = 4000)
    public void test06313() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('J');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
        dateTimeFormatter1.getChronolgy();
        int int0 = 12740625;
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTime dateTime0 = DateTime.parse("");
        LimitChronology limitChronology0 = LimitChronology.getInstance(copticChronology0, dateTime0, dateTime0);
        limitChronology0.getUpperLimit();
    }

    @Test(timeout = 4000)
    public void test06514() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 623191204, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) null);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        dateTimeFieldType0.getRangeDurationType();
        fixedDateTimeZone0.getNameKey(623191204);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-311));
        dateTimeFormatter2.getChronolgy();
        Integer integer0 = new Integer(623191204);
        dateTimeFormatter1.withPivotYear(integer0);
        dateTimeFormatter0.withOffsetParsed();
        String string0 = "Instant must not be null";
        StringBuffer stringBuffer0 = new StringBuffer("Instant must not be null");
        LocalDateTime localDateTime0 = new LocalDateTime((-1699L));
        LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(192);
        String string1 = "Parsing not supported";
        Locale locale0 = new Locale(string1, string1, string0);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDateTime1, locale0);
        dateTimeFormatter1.getLocale();
        dateTimeFormatter0.getChronology();
        dateTimeFormatter2.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test06615() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1900);
        assertTrue(((String) null == null) == false);
        org.joda.time.DateTime default9;
        default9 = dateTimeFormatter4.parseDateTime((String) null);
        String string0 = "subtrahend";
        Locale locale0 = new Locale(string0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        dateTimeFormatter5.getDefaultYear();
        dateTimeFormatter2.getLocale();
    }

    @Test(timeout = 4000)
    public void test06716() throws Throwable {
        YearMonth yearMonth0 = new YearMonth(1294L);
        Partial partial0 = new Partial(yearMonth0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        Chronology chronology0 = iSOChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        dateTimeFormatter2.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 0);
        Locale locale0 = Locale.ROOT;
        dateTimeFormatter4.withChronology(chronology0);
        dateTimeFormatter4.withLocale(locale0);
        dateTimeFormatter4.print((ReadablePartial) partial0);
        dateTimeFormatter0.getLocale();
        String string0 = null;
        File file0 = MockFile.createTempFile((String) null, "1969-12");
        MockPrintWriter mockPrintWriter0 = null;
        mockPrintWriter0 = new MockPrintWriter(file0);
    }

    @Test(timeout = 4000)
    public void test06817() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-2317));
        Integer.getInteger("$BxB)A)a^.Zjn.5If-E");
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) null);
        Locale locale0 = new Locale("$BxB)A)a^.Zjn.5If-E", (String) null);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        String string0 = null;
        assertTrue((string0 == null) == false);
        org.joda.time.MutableDateTime default10;
        default10 = dateTimeFormatter5.parseMutableDateTime(string0);
    }

    @Test(timeout = 4000)
    public void test07018() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        dateTimeFormatter0.getPivotYear();
        UTCProvider uTCProvider0 = new UTCProvider();
        uTCProvider0.getAvailableIDs();
        uTCProvider0.getZone((String) null);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
        StringWriter stringWriter0 = new StringWriter(2275);
        StringWriter stringWriter1 = stringWriter0.append('O');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) mutableDateTime0);
        assertTrue(((String) null == null) == false);
        org.joda.time.LocalTime default11;
        default11 = dateTimeFormatter1.parseLocalTime((String) null);
        String string0 = "O-Y1EtX /r)6t63A1{I";
        assertTrue((string0 == null) == false);
        org.joda.time.MutableDateTime default12;
        default12 = dateTimeFormatter0.parseMutableDateTime(string0);
        String string1 = "";
        assertTrue((string1 == null) == false);
        org.joda.time.LocalTime localTime0;
        localTime0 = dateTimeFormatter0.parseLocalTime(string1);
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadablePartial) localTime0);
    }

    @Test(timeout = 4000)
    public void test07319() throws Throwable {
        int int0 = (-63);
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-63), hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        int int1 = 694;
        Integer integer0 = new Integer(694);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Integer.toUnsignedLong(694);
        Writer writer0 = null;
        GJChronology.getInstance();
        int int2 = 2700;
        assertTrue(((Writer) null == null) == false);
        assertTrue(((Writer) null == null) == false);
        assertTrue(((Writer) null == null) == false);
        dateTimeFormatter0.printTo((Writer) null, 694L);
    }

    @Test(timeout = 4000)
    public void test07420() throws Throwable {
        String string0 = "8";
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("8");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = (-365);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        assertTrue(("8" == null) == false);
        org.joda.time.LocalTime default13;
        default13 = dateTimeFormatter0.parseLocalTime("8");
        EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-365));
    }

    @Test(timeout = 4000)
    public void test07821() throws Throwable {
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 3300);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
        Locale locale0 = Locale.JAPANESE;
        locale0.getDisplayVariant((Locale) null);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(3300);
        int int0 = (-5256);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-5256));
        Integer integer0 = new Integer(3300);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        dateTimeFormatter4.print((long) (-5256));
        String string0 = "org.joda.time.format.DateTimeFormatter";
        String string1 = "";
        File file0 = MockFile.createTempFile(string0, string1);
        MockPrintWriter mockPrintWriter0 = null;
        mockPrintWriter0 = new MockPrintWriter(file0);
    }

    @Test(timeout = 4000)
    public void test08222() throws Throwable {
        String string0 = "Ct~G}d";
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        Chronology chronology0 = null;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Ct~G}d", 0, (-395), 1026, (-2405), (-395), 0, 0, 0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
        DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
        dateTimeFormatter2.withZone(dateTimeZone1);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        charArrayWriter0.append((CharSequence) string0);
    }

    @Test(timeout = 4000)
    public void test08623() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        int int0 = 115;
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 115, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No instant converter found for type: ");
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(115);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(115);
        Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
        dateTimeFormatter4.withChronology(chronology0);
        Locale locale0 = Locale.FRENCH;
        dateTimeFormatter4.withLocale(locale0);
        Object object0 = new Object();
        DateTime dateTime0 = new DateTime(object0);
        DateTime dateTime1 = dateTime0.plusMonths(int0);
        DateTime dateTime2 = dateTime1.withMillis(int0);
        int int1 = 86400;
        dateTime2.minusYears(int1);
    }

    @Test(timeout = 4000)
    public void test09224() throws Throwable {
        int int0 = 7;
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("^,", "", false, 7, 7);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        Integer integer0 = new Integer(2128);
        dateTimeFormatter0.withPivotYear(integer0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        MonthDay monthDay0 = MonthDay.parse("=1tR*", dateTimeFormatter0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        int int1 = 0;
        MonthDay monthDay1 = monthDay0.withField(dateTimeFieldType0, int1);
        LocalDate localDate0 = monthDay1.toLocalDate(int0);
        localDate0.withMonthOfYear(int0);
    }

    @Test(timeout = 4000)
    public void test09425() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        assertTrue(("QpP8c%-:L7(AO+/[;" == null) == false);
        org.joda.time.DateTime default14;
        default14 = dateTimeFormatter1.parseDateTime("QpP8c%-:L7(AO+/[;");
        int int1 = 0;
        StringBuffer stringBuffer0 = null;
        stringBuffer0 = new StringBuffer(int1);
    }

    @Test(timeout = 4000)
    public void test09626() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        Locale locale0 = Locale.TAIWAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.withOffsetParsed();
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('k');
        DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(6);
        DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withDefaultYear(523);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        assertTrue(((Appendable) charArrayWriter0 == null) == false);
        dateTimeFormatter6.printTo((Appendable) charArrayWriter0, (-28801249L));
        LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) null);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        int int0 = 3116;
        Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
        ReadablePeriod readablePeriod0 = null;
        partial1.minus(readablePeriod0);
    }

    @Test(timeout = 4000)
    public void test10027() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        dateTimeFormatter0.getPivotYear();
        UTCProvider uTCProvider0 = new UTCProvider();
        uTCProvider0.getAvailableIDs();
        String string0 = null;
        uTCProvider0.getZone((String) null);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
        StringWriter stringWriter0 = new StringWriter(2275);
        StringWriter stringWriter1 = stringWriter0.append('O');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) mutableDateTime0);
        assertTrue((string0 == null) == false);
        org.joda.time.LocalTime default15;
        default15 = dateTimeFormatter1.parseLocalTime(string0);
        String string1 = "O-Y1EtX /r)6t63A1{I";
        assertTrue((string1 == null) == false);
        org.joda.time.MutableDateTime default16;
        default16 = dateTimeFormatter0.parseMutableDateTime(string1);
        String string2 = "";
        assertTrue((string2 == null) == false);
        org.joda.time.LocalTime default17;
        default17 = dateTimeFormatter0.parseLocalTime(string2);
    }

    @Test(timeout = 4000)
    public void test10128() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 560, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        String string0 = "Z";
        int int0 = 9;
        Integer integer0 = Integer.getInteger("Z", 9);
        dateTimeFieldType0.getRangeDurationType();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertTrue((stringBuffer0 == null) == false);
        dateTimeFormatter0.printTo(stringBuffer0, 3L);
        dateTimeFormatter1.withPivotYear(integer0);
        int int1 = (-3298);
        long long0 = (-2492L);
        LocalDate localDate0 = null;
        localDate0 = new LocalDate(long0);
    }

    @Test(timeout = 4000)
    public void test10629() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        int int0 = 2428;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
        dateTimeFormatter1.parseInto(mutableDateTime0, "Multiplication overflows a long: ", 17887500);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
        dateTimeFormatter5.withDefaultYear(2428);
        assertTrue(("" == null) == false);
        org.joda.time.LocalDateTime default18;
        default18 = dateTimeFormatter3.parseLocalDateTime("");
        dateTimeFormatter5.withLocale(locale0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeFormatter2.getParser();
    }

    @Test(timeout = 4000)
    public void test10830() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        assertTrue(("" == null) == false);
        org.joda.time.DateTime default19;
        default19 = dateTimeFormatter1.parseDateTime("");
        int int1 = 0;
        StringBuffer stringBuffer0 = new StringBuffer(0);
        assertTrue((stringBuffer0 == null) == false);
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = gregorianChronology0.withUTC();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        stringBuffer0.setLength((-2714));
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
        int int2 = 1;
        int int3 = 0;
        PeriodType periodType0 = PeriodType.yearMonthDay();
        Period period0 = null;
        period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
    }

    @Test(timeout = 4000)
    public void test11031() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
        DateTimeZone.getDefault();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        dateTimeFieldType0.getField(chronology0);
        dateTimeFormatter0.withDefaultYear(1);
        dateTimeFormatter4.isOffsetParsed();
        String string0 = "CST";
        StringBuffer stringBuffer0 = new StringBuffer(2126);
        LocalTime localTime0 = new LocalTime((long) 1, dateTimeZone0);
        Period period0 = new Period(0L, 2126, (PeriodType) null);
        Period period1 = period0.minusHours(2131);
        LocalTime localTime1 = localTime0.minus(period1);
        dateTimeFormatter3.printTo(stringBuffer0, (ReadablePartial) localTime1);
        assertTrue((string0 == null) == false);
        org.joda.time.LocalTime default20;
        default20 = dateTimeFormatter1.parseLocalTime(string0);
        StringWriter stringWriter0 = new StringWriter(int0);
        int int1 = 0;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) string0, int0, int1);
        stringWriter1.append((CharSequence) string0);
    }

    @Test(timeout = 4000)
    public void test11132() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        int int0 = (-1480);
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1480), (-1480));
        dateTimeFieldType0.getDurationType();
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        Locale locale0 = Locale.ENGLISH;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.getParser();
        int int1 = 1953;
        dateTimeFormatter1.withPivotYear(1953);
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('u');
        stringWriter1.getBuffer();
        LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) null);
        LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(int0);
        localDateTime1.minusHours(int1);
    }

    @Test(timeout = 4000)
    public void test11233() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
        DateTimeZone.getDefault();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        dateTimeFieldType0.getField(chronology0);
        dateTimeFormatter0.withDefaultYear(1);
        dateTimeFormatter3.isOffsetParsed();
        StringBuffer stringBuffer0 = new StringBuffer("");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Parsing not supported");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
        dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (ReadableInstant) null);
        String string0 = "";
        assertTrue((string0 == null) == false);
        org.joda.time.LocalDate localDate0;
        localDate0 = dateTimeFormatter1.parseLocalDate(string0);
        Locale locale0 = Locale.KOREAN;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
    }

    @Test(timeout = 4000)
    public void test11334() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        int int0 = 2428;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
        dateTimeFormatter1.parseInto(mutableDateTime0, "Multiplication overflows a long: ", 17887500);
        dateTimeFormatter3.print((ReadablePartial) null);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
        dateTimeFormatter5.withDefaultYear(int0);
        String string0 = "";
        assertTrue((string0 == null) == false);
        org.joda.time.LocalDateTime default21;
        default21 = dateTimeFormatter3.parseLocalDateTime(string0);
        dateTimeFormatter5.withLocale(locale0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    }

    @Test(timeout = 4000)
    public void test11535() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        assertTrue(("" == null) == false);
        org.joda.time.DateTime default22;
        default22 = dateTimeFormatter1.parseDateTime("");
        int int1 = 0;
        StringBuffer stringBuffer0 = new StringBuffer(0);
        assertTrue((stringBuffer0 == null) == false);
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = gregorianChronology0.withUTC();
        gJChronology0.withUTC();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        assertTrue(("" == null) == false);
        org.joda.time.LocalDate default23;
        default23 = dateTimeFormatter1.parseLocalDate("");
        stringBuffer0.setLength((-2714));
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
        int int2 = 1;
        int int3 = 0;
        PeriodType periodType0 = PeriodType.yearMonthDay();
        Period period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
        period0.minusMillis(int3);
    }

    @Test(timeout = 4000)
    public void test11736() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        assertTrue(("" == null) == false);
        org.joda.time.DateTime default24;
        default24 = dateTimeFormatter1.parseDateTime("");
        int int1 = 0;
        StringBuffer stringBuffer0 = new StringBuffer(0);
        assertTrue((stringBuffer0 == null) == false);
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        GJChronology.getInstanceUTC();
        assertTrue(("" == null) == false);
        org.joda.time.LocalTime default25;
        default25 = dateTimeFormatter0.parseLocalTime("");
        Locale locale0 = Locale.GERMANY;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        stringBuffer0.setLength((-2714));
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
        int int2 = 1;
        int int3 = 0;
        PeriodType periodType0 = PeriodType.yearMonthDay();
        Period period0 = null;
        period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
    }

    @Test(timeout = 4000)
    public void test11837() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        int int0 = 2428;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
        dateTimeFormatter1.parseInto(mutableDateTime0, "Multiplication overflows a long: ", 17887500);
        dateTimeFieldType0.getRangeDurationType();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
        dateTimeFormatter5.withDefaultYear(2428);
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer(0);
        assertTrue((stringBuffer0 == null) == false);
        assertTrue((stringBuffer0 == null) == false);
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
        assertTrue((string0 == null) == false);
        org.joda.time.LocalDateTime default26;
        default26 = dateTimeFormatter3.parseLocalDateTime(string0);
        dateTimeFormatter5.withLocale(locale0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    }

    @Test(timeout = 4000)
    public void test12438() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldType0.getRangeDurationType();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime("5+5&Nq'Q=6Y_YwNr8?b", ethiopicChronology0);
        dateTimeFormatter1.withZoneUTC();
        localDateTime0.withHourOfDay(ethiopicChronology0.EE);
    }

    @Test(timeout = 4000)
    public void test12639() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        dateTimeFieldType0.getRangeDurationType();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TextField0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        int int0 = 0;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        dateTimeFormatter2.withLocale(locale0);
        dateTimeFormatter2.isPrinter();
        dateTimeFormatter1.getPivotYear();
        dateTimeFormatter1.withOffsetParsed();
        StringBuffer stringBuffer0 = new StringBuffer("");
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        ZoneId zoneId0 = ZoneId.of("Printing not supported", map0);
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (long) int0, (Chronology) julianChronology0, int0, dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test12740() throws Throwable {
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        PipedWriter pipedWriter0 = new PipedWriter();
        LocalTime localTime0 = new LocalTime(0, 0, 0);
        LocalTime localTime1 = localTime0.minusSeconds(0);
        int int0 = (-605);
        localTime1.plusHours((-605));
        localTime1.getFieldType(0);
        LocalTime localTime2 = localTime1.withFields(localTime0);
        LocalTime localTime3 = localTime2.minusMinutes(1512);
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) localTime3);
        String string0 = "-k[cc%:%@/z]&_";
        assertTrue((string0 == null) == false);
        org.joda.time.DateTime default27;
        default27 = dateTimeFormatter0.parseDateTime(string0);
        String string1 = "HW|{3";
        assertTrue((string1 == null) == false);
        org.joda.time.DateTime default28;
        default28 = dateTimeFormatter0.parseDateTime(string1);
    }

    @Test(timeout = 4000)
    public void test13041() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RWM0zO.\"z$c2 ");
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeZone.getDefault();
        dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1);
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('$');
        LocalDate localDate0 = new LocalDate(1180L);
        LocalDate localDate1 = localDate0.withDayOfWeek(1);
        LocalDate localDate2 = localDate1.withYearOfCentury(1);
        dateTimeFormatter2.printTo((Writer) stringWriter1, (ReadablePartial) localDate2);
        dateTimeFormatter1.isOffsetParsed();
        String string0 = "CST";
        assertTrue((string0 == null) == false);
        org.joda.time.LocalTime default29;
        default29 = dateTimeFormatter1.parseLocalTime(string0);
        StringWriter stringWriter2 = new StringWriter(int0);
        int int1 = 0;
        stringWriter2.append((CharSequence) string0, int0, int1);
    }

    @Test(timeout = 4000)
    public void test13142() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFieldType0.getRangeDurationType();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeZone.getDefault();
        dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1);
        MockFileWriter mockFileWriter0 = new MockFileWriter(".uUz1ti80");
        MutableDateTime mutableDateTime0 = new MutableDateTime((-28799686L), (Chronology) ethiopicChronology0);
        dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, 3081);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
        long long0 = 86400000L;
        DateTime dateTime0 = new DateTime(long0);
        dateTimeFormatter2.printTo((Appendable) mockPrintWriter0, (ReadableInstant) dateTime0);
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test13343() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList1);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        Chronology chronology0 = null;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
        String string0 = "centuryOfEra";
        assertTrue(("centuryOfEra" == null) == false);
        org.joda.time.MutableDateTime default30;
        default30 = dateTimeFormatter1.parseMutableDateTime("centuryOfEra");
    }

    @Test(timeout = 4000)
    public void test13544() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('.');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Integer integer0 = new Integer(3);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
        Chronology chronology0 = null;
        LocalDate localDate0 = new LocalDate(2325L, (Chronology) null);
        DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
        DateTime dateTime1 = dateTime0.toDateTimeISO();
        DateTime dateTime2 = dateTime1.withYearOfCentury(13);
        DateTime dateTime3 = dateTime2.withDayOfMonth(13);
        dateTimeFormatter4.printTo((Appendable) null, (ReadableInstant) dateTime3);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(chronology0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeFormatter5.withZone(fixedDateTimeZone0);
        dateTimeFormatter5.isPrinter();
    }

    @Test(timeout = 4000)
    public void test14145() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
        dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
        DateTimeFieldType.yearOfCentury();
        dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DurationField durationField0 = buddhistChronology0.hours();
        UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
        DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
        dateTimeFieldTypeArray0[4] = dateTimeFieldType2;
        DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
        dateTimeFieldTypeArray0[5] = dateTimeFieldType3;
        int[] intArray0 = new int[3];
        FileSystemHandling.shouldAllThrowIOExceptions();
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, (-1));
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
        Integer integer0 = new Integer((-2145318844));
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
        Locale locale0 = Locale.CANADA;
        StringBuffer stringBuffer0 = new StringBuffer(1);
        StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
        assertTrue((stringBuffer1 == null) == false);
        dateTimeFormatter4.printTo(stringBuffer1, 918518400000L);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        ReadablePartial readablePartial0 = null;
        dateTimeFormatter5.print(readablePartial0);
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test14946() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(90);
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
        PipedWriter pipedWriter0 = new PipedWriter();
        BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 1);
        LocalDateTime localDateTime0 = new LocalDateTime((-1656L));
        dateTimeFormatter1.printTo((Appendable) bufferedWriter0, (ReadablePartial) localDateTime0);
        String string0 = "";
        int int0 = (-2866);
        dateTimeFormatter1.parseInto(mutableDateTime1, string0, int0);
    }
}
