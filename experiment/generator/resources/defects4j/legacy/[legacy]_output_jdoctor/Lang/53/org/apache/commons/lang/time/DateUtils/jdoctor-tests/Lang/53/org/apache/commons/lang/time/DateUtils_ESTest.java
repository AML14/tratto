/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 03:59:19 GMT 2023
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-584), (-584), 982, (-1138), (-584), 982);
        assertTrue(982 == 1);
        java.util.Iterator default0;
        default0 = DateUtils.iterator((Object) mockGregorianCalendar0, 982);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Locale locale0 = Locale.KOREA;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        }
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        }
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 0, 7, (-432), (-432), (-432));
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(zoneInfo0);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        MockDate mockDate0 = new MockDate();
        MockDate mockDate1 = new MockDate((-2355), (-2355), (-2355));
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate1);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addHours(mockDate0, 1001);
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addHours(mockDate0, 1001);
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        java.util.Date calendar1;
        if (calendar0 == null) {
            try {
                calendar1 = DateUtils.truncate(calendar0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar1 = DateUtils.truncate(calendar0, 0);
        }
        boolean boolean0 = DateUtils.isSameDay(calendar0, calendar1);
        calendar1.toString();
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        java.util.Date calendar1;
        if (calendar0 == null) {
            try {
                calendar1 = DateUtils.truncate(calendar0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar1 = DateUtils.truncate(calendar0, 0);
        }
        boolean boolean0 = DateUtils.isSameDay(calendar0, calendar1);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3563, 1, 3563, 4194, 1001);
        mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1315));
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        }
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        Date date0 = DateUtils.addMinutes(mockDate0, (-2355));
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        Date date0 = DateUtils.addMinutes(mockDate0, (-2355));
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.add(mockDate0, 8, 4);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.setTimeZone((TimeZone) null);
        java.util.Date default1;
        if ((Object) mockGregorianCalendar0 == null) {
            try {
                default1 = DateUtils.truncate((Object) mockGregorianCalendar0, 421);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default1 = DateUtils.truncate((Object) mockGregorianCalendar0, 421);
        }
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        MockDate mockDate0 = new MockDate(280000000, (-1), (-1), 0, 280000000, 689);
        java.util.Date default2;
        if ((Date) mockDate0 == null) {
            try {
                default2 = DateUtils.round((Date) mockDate0, 280000000);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default2 = DateUtils.round((Date) mockDate0, 280000000);
        }
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.setTimeZone((TimeZone) null);
        java.util.Date default3;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                default3 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default3 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
        }
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-196), "gQ{\"z");
        Locale locale0 = Locale.FRANCE;
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
        calendar0.set(0, (-432));
        java.util.Date default4;
        if (calendar0 == null) {
            try {
                default4 = DateUtils.round(calendar0, (-196));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default4 = DateUtils.round(calendar0, (-196));
        }
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        String[] stringArray0 = new String[6];
        stringArray0[0] = "GMT";
        assertTrue(("GMT" == null) == false);
        assertTrue((stringArray0 == null) == false);
        java.util.Date default5;
        if ("GMT" == null || stringArray0 == null) {
            try {
                default5 = DateUtils.parseDate("GMT", stringArray0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default5 = DateUtils.parseDate("GMT", stringArray0);
        }
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.setTimeZone((TimeZone) null);
        DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-145), 4868, 869);
        mockGregorianCalendar0.setLenient(false);
        DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        assertTrue(((Date) null == null) == false);
        java.util.Date default6;
        if ((Date) null == null) {
            try {
                default6 = DateUtils.addYears((Date) null, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default6 = DateUtils.addYears((Date) null, 0);
        }
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        assertTrue(((Date) null == null) == false);
        java.util.Date default7;
        if ((Date) null == null) {
            try {
                default7 = DateUtils.addWeeks((Date) null, 149);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default7 = DateUtils.addWeeks((Date) null, 149);
        }
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        assertTrue(((Date) null == null) == false);
        java.util.Date default8;
        if ((Date) null == null) {
            try {
                default8 = DateUtils.addSeconds((Date) null, (-15));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default8 = DateUtils.addSeconds((Date) null, (-15));
        }
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        assertTrue(((Date) null == null) == false);
        java.util.Date default9;
        if ((Date) null == null) {
            try {
                default9 = DateUtils.addMonths((Date) null, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default9 = DateUtils.addMonths((Date) null, 0);
        }
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        assertTrue(((Date) null == null) == false);
        java.util.Date default10;
        if ((Date) null == null) {
            try {
                default10 = DateUtils.addMilliseconds((Date) null, 1000);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default10 = DateUtils.addMilliseconds((Date) null, 1000);
        }
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        assertTrue(((Date) null == null) == false);
        java.util.Date default11;
        if ((Date) null == null) {
            try {
                default11 = DateUtils.addHours((Date) null, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default11 = DateUtils.addHours((Date) null, 0);
        }
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        assertTrue(((Date) null == null) == false);
        java.util.Date default12;
        if ((Date) null == null) {
            try {
                default12 = DateUtils.addDays((Date) null, 2028);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default12 = DateUtils.addDays((Date) null, 2028);
        }
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        assertTrue(1055 == 1);
        java.util.Iterator default13;
        default13 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 1055);
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        MockDate mockDate0 = new MockDate();
        java.util.Date date0;
        if ((Date) mockDate0 == null) {
            try {
                date0 = DateUtils.round((Date) mockDate0, 9);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            date0 = DateUtils.round((Date) mockDate0, 9);
        }
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        assertTrue(((Date) null == null) == false);
        java.util.Date default14;
        if ((Date) null == null) {
            try {
                default14 = DateUtils.add((Date) null, 2091, 2091);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default14 = DateUtils.add((Date) null, 2091, 2091);
        }
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        MockDate mockDate0 = new MockDate((-1081), (-1081), 6, (-745), 5226, 6);
        DateUtils.add(mockDate0, (-348), (-348));
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-145), 4868, 869);
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test2933() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        dateUtils_DateIterator0.next();
    }

    @Test(timeout = 4000)
    public void test3034() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2147482605, 0, 0, 2147482605, 2147482605);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar1, mockGregorianCalendar0);
        dateUtils_DateIterator0.next();
        mockGregorianCalendar1.toString();
    }

    @Test(timeout = 4000)
    public void test3135() throws Throwable {
        assertTrue(7 == 1);
        java.util.Iterator default15;
        default15 = DateUtils.iterator((Object) "Unable to parse the date: ", 7);
    }

    @Test(timeout = 4000)
    public void test3236() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        assertTrue((-2355) == 1);
        java.util.Iterator default16;
        default16 = DateUtils.iterator((Object) mockDate0, (-2355));
    }

    @Test(timeout = 4000)
    public void test3337() throws Throwable {
        assertTrue(((Object) null == null) == false);
        assertTrue(0 == 1);
        assertTrue(0 == 1);
        assertTrue(0 == 1);
        java.util.Iterator default17;
        if ((Object) null == null) {
            try {
                default17 = DateUtils.iterator((Object) null, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default17 = DateUtils.iterator((Object) null, 0);
        }
    }

    @Test(timeout = 4000)
    public void test3438() throws Throwable {
        MockDate mockDate0 = new MockDate();
        assertTrue(4 == 1);
        java.util.Iterator iterator0;
        iterator0 = DateUtils.iterator((Date) mockDate0, 4);
    }

    @Test(timeout = 4000)
    public void test3539() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        assertTrue(6 == 1);
        java.util.Iterator iterator0;
        iterator0 = DateUtils.iterator((Date) mockDate0, 6);
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1138), (-1138), (-1138), (-1138), (-1138), (-1138));
        assertTrue(4 == 1);
        java.util.Iterator default18;
        default18 = DateUtils.iterator((Object) mockGregorianCalendar0, 4);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2971), 320, 320, 1231, (-2971), 320);
        assertTrue(3 == 1);
        java.util.Iterator default19;
        default19 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 3);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        MockDate mockDate0 = new MockDate((-5236), 1027, 0, (-400), 1027);
        assertTrue(146134526 == 1);
        java.util.Iterator default20;
        default20 = DateUtils.iterator((Date) mockDate0, 146134526);
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        assertTrue(((Calendar) null == null) == false);
        assertTrue(1860 == 1);
        assertTrue(1860 == 1);
        assertTrue(1860 == 1);
        java.util.Iterator default21;
        if ((Calendar) null == null) {
            try {
                default21 = DateUtils.iterator((Calendar) null, 1860);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default21 = DateUtils.iterator((Calendar) null, 1860);
        }
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        assertTrue(((Date) null == null) == false);
        assertTrue(948 == 1);
        assertTrue(948 == 1);
        assertTrue(948 == 1);
        java.util.Iterator default22;
        if ((Date) null == null) {
            try {
                default22 = DateUtils.iterator((Date) null, 948);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default22 = DateUtils.iterator((Date) null, 948);
        }
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), 629, 629, 629, 2036, 2036);
        assertTrue(1 == 1);
        java.util.Iterator iterator0;
        iterator0 = DateUtils.iterator((Date) mockDate0, 1);
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), 629, 629, 629, 2036, 2036);
        java.util.Date date0;
        if ((Object) mockDate0 == null) {
            try {
                date0 = DateUtils.round((Object) mockDate0, 9);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            date0 = DateUtils.round((Object) mockDate0, 9);
        }
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3563, 3563, 3563, 4194, 1001);
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        }
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3563, 3563, 3563, 947, 1001);
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        }
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29, 29, 1732, 29);
        java.util.Date date0;
        if ((Object) mockDate0 == null) {
            try {
                date0 = DateUtils.truncate((Object) mockDate0, 12);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            date0 = DateUtils.truncate((Object) mockDate0, 12);
        }
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        MockDate mockDate0 = new MockDate((-5236), 1027, 0, (-400), 1027);
        java.util.Date date0;
        if ((Date) mockDate0 == null) {
            try {
                date0 = DateUtils.truncate((Date) mockDate0, 13);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            date0 = DateUtils.truncate((Date) mockDate0, 13);
        }
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2147482605, 0, 0, 2147482605, 2147482605);
        java.util.Date default23;
        if ((Object) mockGregorianCalendar0 == null) {
            try {
                default23 = DateUtils.round((Object) mockGregorianCalendar0, 2147482605);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default23 = DateUtils.round((Object) mockGregorianCalendar0, 2147482605);
        }
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        MockDate mockDate0 = new MockDate(1015L);
        java.util.Date date0;
        if ((Object) mockDate0 == null) {
            try {
                date0 = DateUtils.truncate((Object) mockDate0, 14);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            date0 = DateUtils.truncate((Object) mockDate0, 14);
        }
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        MockDate mockDate0 = new MockDate(280000000, (-1), (-1), 0, 280000000, 689);
        java.util.Date default24;
        if ((Date) mockDate0 == null) {
            try {
                default24 = DateUtils.truncate((Date) mockDate0, (-1448));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default24 = DateUtils.truncate((Date) mockDate0, (-1448));
        }
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), 2147481971, (-3416), (-1), 2147481971, 1489);
        java.util.Date default25;
        if ((Object) mockDate0 == null) {
            try {
                default25 = DateUtils.truncate((Object) mockDate0, 1489);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default25 = DateUtils.truncate((Object) mockDate0, 1489);
        }
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        java.util.Date default26;
        if ((Object) null == null) {
            try {
                default26 = DateUtils.truncate((Object) null, 887);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else if ((Object) null == null) {
            try {
                default26 = DateUtils.truncate((Object) null, 887);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default26 = DateUtils.truncate((Object) null, 887);
        }
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        java.util.Date default27;
        if ((Object) timeZone0 == null) {
            try {
                default27 = DateUtils.truncate((Object) timeZone0, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default27 = DateUtils.truncate((Object) timeZone0, 0);
        }
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        java.util.Date default28;
        if ((Calendar) null == null) {
            try {
                default28 = DateUtils.truncate((Calendar) null, 1524);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else if ((Calendar) null == null) {
            try {
                default28 = DateUtils.truncate((Calendar) null, 1524);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default28 = DateUtils.truncate((Calendar) null, 1524);
        }
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        java.util.Date default29;
        if ((Date) null == null) {
            try {
                default29 = DateUtils.truncate((Date) null, 1205);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else if ((Date) null == null) {
            try {
                default29 = DateUtils.truncate((Date) null, 1205);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default29 = DateUtils.truncate((Date) null, 1205);
        }
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        java.util.Date default30;
        if ((Object) "<i" == null) {
            try {
                default30 = DateUtils.round((Object) "<i", (-718));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default30 = DateUtils.round((Object) "<i", (-718));
        }
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        java.util.Date default31;
        if ((Object) null == null) {
            try {
                default31 = DateUtils.round((Object) null, (-1078));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else if ((Object) null == null) {
            try {
                default31 = DateUtils.round((Object) null, (-1078));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default31 = DateUtils.round((Object) null, (-1078));
        }
    }

    @Test(timeout = 4000)
    public void test5761() throws Throwable {
        java.util.Date default32;
        if ((Calendar) null == null) {
            try {
                default32 = DateUtils.round((Calendar) null, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else if ((Calendar) null == null) {
            try {
                default32 = DateUtils.round((Calendar) null, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default32 = DateUtils.round((Calendar) null, 0);
        }
    }

    @Test(timeout = 4000)
    public void test5862() throws Throwable {
        java.util.Date default33;
        if ((Date) null == null) {
            try {
                default33 = DateUtils.round((Date) null, 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else if ((Date) null == null) {
            try {
                default33 = DateUtils.round((Date) null, 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default33 = DateUtils.round((Date) null, 1);
        }
    }

    @Test(timeout = 4000)
    public void test5963() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        java.util.Date date0;
        if ((Object) mockDate0 == null) {
            try {
                date0 = DateUtils.round((Object) mockDate0, 9);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            date0 = DateUtils.round((Object) mockDate0, 9);
        }
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test6064() throws Throwable {
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        assertTrue(("^+GjO-b( Y" == null) == false);
        assertTrue((stringArray0 == null) == false);
        java.util.Date default34;
        if ("^+GjO-b( Y" == null || stringArray0 == null) {
            try {
                default34 = DateUtils.parseDate("^+GjO-b( Y", stringArray0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default34 = DateUtils.parseDate("^+GjO-b( Y", stringArray0);
        }
    }

    @Test(timeout = 4000)
    public void test6165() throws Throwable {
        String[] stringArray0 = new String[3];
        stringArray0[0] = "y6:%K HE$`~]w";
        stringArray0[1] = "y6:%K HE$`~]w";
        stringArray0[2] = "y6:%K HE$`~]w";
        assertTrue(("y6:%K HE$`~]w" == null) == false);
        assertTrue((stringArray0 == null) == false);
        java.util.Date default35;
        if ("y6:%K HE$`~]w" == null || stringArray0 == null) {
            try {
                default35 = DateUtils.parseDate("y6:%K HE$`~]w", stringArray0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default35 = DateUtils.parseDate("y6:%K HE$`~]w", stringArray0);
        }
    }

    @Test(timeout = 4000)
    public void test6266() throws Throwable {
        assertTrue(("" == null) == false);
        assertTrue(((String[]) null == null) == false);
        java.util.Date default36;
        if ("" == null || (String[]) null == null) {
            try {
                default36 = DateUtils.parseDate("", (String[]) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default36 = DateUtils.parseDate("", (String[]) null);
        }
    }

    @Test(timeout = 4000)
    public void test6367() throws Throwable {
        String[] stringArray0 = new String[4];
        assertTrue(((String) null == null) == false);
        assertTrue((stringArray0 == null) == false);
        java.util.Date default37;
        if ((String) null == null || stringArray0 == null) {
            try {
                default37 = DateUtils.parseDate((String) null, stringArray0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default37 = DateUtils.parseDate((String) null, stringArray0);
        }
    }

    @Test(timeout = 4000)
    public void test6468() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        Calendar calendar1 = MockCalendar.getInstance();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar1, calendar0);
        calendar1.equals((Object) calendar0);
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        Calendar calendar1 = MockCalendar.getInstance();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar1, calendar0);
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3563, 1, 3563, 4194, 1001);
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        }
        DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test6671() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        }
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(3519, 9, 3519, 576, 1, (-1));
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, calendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test6672() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        }
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(3519, 9, 3519, 576, 1, (-1));
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, calendar0);
    }

    @Test(timeout = 4000)
    public void test6773() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-145), 4868, 869);
        Locale locale0 = Locale.forLanguageTag("^rqI1d` Z\"])yE3\"#~");
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test6874() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.isSameLocalTime(mockGregorianCalendar0, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test6975() throws Throwable {
        assertTrue(((Calendar) null == null) == false);
        assertTrue(((Calendar) null == null) == false);
        boolean default38;
        default38 = DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test7076() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
        boolean boolean0 = DateUtils.isSameInstant(calendar0, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test7177() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        DateUtils.isSameInstant(calendar0, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test7278() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1138), 956, 956, 956, (-572), 956);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test7379() throws Throwable {
        assertTrue(((Calendar) null == null) == false);
        assertTrue(((Calendar) null == null) == false);
        assertTrue(((Calendar) null == null) == false);
        assertTrue(((Calendar) null == null) == false);
        boolean default39;
        if ((Calendar) null == null || (Calendar) null == null) {
            try {
                default39 = DateUtils.isSameInstant((Calendar) null, (Calendar) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default39 = DateUtils.isSameInstant((Calendar) null, (Calendar) null);
        }
    }

    @Test(timeout = 4000)
    public void test7480() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        MockDate mockDate1 = new MockDate((-2355), (-2355), (-2355));
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate1);
    }

    @Test(timeout = 4000)
    public void test7581() throws Throwable {
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test7682() throws Throwable {
        MockDate mockDate0 = new MockDate();
        DateUtils.isSameInstant((Date) mockDate0, (Date) null);
    }

    @Test(timeout = 4000)
    public void test7783() throws Throwable {
        assertTrue(((Date) null == null) == false);
        assertTrue(((Date) null == null) == false);
        assertTrue(((Date) null == null) == false);
        assertTrue(((Date) null == null) == false);
        boolean default40;
        if ((Date) null == null || (Date) null == null) {
            try {
                default40 = DateUtils.isSameInstant((Date) null, (Date) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default40 = DateUtils.isSameInstant((Date) null, (Date) null);
        }
    }

    @Test(timeout = 4000)
    public void test7884() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        }
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test7885() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        java.util.Date calendar0;
        if ((Calendar) mockGregorianCalendar0 == null) {
            try {
                calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        }
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
    }

    @Test(timeout = 4000)
    public void test7986() throws Throwable {
        ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(15, 1205, 146139496);
        boolean boolean0 = DateUtils.isSameDay((Calendar) gregorianCalendar0, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test8087() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1138), 956, 956, 956, (-572), 956);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
    }

    @Test(timeout = 4000)
    public void test8188() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
        DateUtils.isSameDay(calendar0, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test8289() throws Throwable {
        assertTrue(((Calendar) null == null) == false);
        assertTrue(((Calendar) null == null) == false);
        assertTrue(((Calendar) null == null) == false);
        assertTrue(((Calendar) null == null) == false);
        boolean default41;
        if ((Calendar) null == null || (Calendar) null == null) {
            try {
                default41 = DateUtils.isSameDay((Calendar) null, (Calendar) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else if ((Calendar) null == null || (Calendar) null == null) {
            try {
                default41 = DateUtils.isSameDay((Calendar) null, (Calendar) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default41 = DateUtils.isSameDay((Calendar) null, (Calendar) null);
        }
    }

    @Test(timeout = 4000)
    public void test8390() throws Throwable {
        MockDate mockDate0 = new MockDate((-5236), 1027, 0, (-400), 1027);
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test8491() throws Throwable {
        MockDate mockDate0 = new MockDate(1001, 1001, 1001, 4194, 1001, 45);
        DateUtils.isSameDay((Date) mockDate0, (Date) null);
    }

    @Test(timeout = 4000)
    public void test8592() throws Throwable {
        assertTrue(((Date) null == null) == false);
        assertTrue(((Date) null == null) == false);
        assertTrue(((Date) null == null) == false);
        assertTrue(((Date) null == null) == false);
        boolean default42;
        if ((Date) null == null || (Date) null == null) {
            try {
                default42 = DateUtils.isSameDay((Date) null, (Date) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else if ((Date) null == null || (Date) null == null) {
            try {
                default42 = DateUtils.isSameDay((Date) null, (Date) null);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default42 = DateUtils.isSameDay((Date) null, (Date) null);
        }
    }

    @Test(timeout = 4000)
    public void test8693() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        dateUtils_DateIterator0.hasNext();
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test8794() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        dateUtils_DateIterator0.remove();
    }

    @Test(timeout = 4000)
    public void test8895() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(320, 320, (-2971), 320, 1231);
        assertTrue(1 == 1);
        java.util.Iterator iterator0;
        iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 1);
    }

    @Test(timeout = 4000)
    public void test8996() throws Throwable {
        String[] stringArray0 = new String[7];
        stringArray0[0] = "";
        assertTrue(("" == null) == false);
        assertTrue((stringArray0 == null) == false);
        java.util.Date date0;
        if ("" == null || stringArray0 == null) {
            try {
                date0 = DateUtils.parseDate("", stringArray0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            date0 = DateUtils.parseDate("", stringArray0);
        }
        Date date1 = DateUtils.addSeconds(date0, (-5683));
        date1.toString();
    }

    @Test(timeout = 4000)
    public void test9097() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addMonths(mockDate0, 9);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test9198() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        Date date0 = DateUtils.addDays(mockDate0, 1);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test9299() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        Date date0 = DateUtils.addMilliseconds(mockDate0, 10);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test93100() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        Date date0 = DateUtils.addYears(mockDate0, 1);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test94101() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        Date date0 = DateUtils.addWeeks(mockDate0, 778);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test95102() throws Throwable {
        assertTrue(((Date) null == null) == false);
        java.util.Date default43;
        if ((Date) null == null) {
            try {
                default43 = DateUtils.addMinutes((Date) null, 0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default43 = DateUtils.addMinutes((Date) null, 0);
        }
    }

    @Test(timeout = 4000)
    public void test96103() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
    }
}
