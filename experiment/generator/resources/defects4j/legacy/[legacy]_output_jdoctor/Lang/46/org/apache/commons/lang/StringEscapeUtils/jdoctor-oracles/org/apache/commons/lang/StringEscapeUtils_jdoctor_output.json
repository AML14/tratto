[
  {
    "signature": "org.apache.commons.lang.StringEscapeUtils()",
    "name": "org.apache.commons.lang.StringEscapeUtils",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "escapeJava(java.lang.String str)",
    "name": "escapeJava",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "String to escape values in null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "String with escaped values, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "escapeJava(java.io.Writer out, java.lang.String str)",
    "name": "escapeJava",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "Writer to write escaped string into.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "String to escape values in null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the Writer is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "error occurs on underlying Writer.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "escapeJavaScript(java.lang.String str)",
    "name": "escapeJavaScript",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "String to escape values in null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "String with escaped values, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "escapeJavaScript(java.io.Writer out, java.lang.String str)",
    "name": "escapeJavaScript",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "Writer to write escaped string into.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "String to escape values in null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the Writer is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "error occurs on underlying Writer.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "unescapeJava(java.lang.String str)",
    "name": "unescapeJava",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to unescape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new unescaped String, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "unescapeJava(java.io.Writer out, java.lang.String str)",
    "name": "unescapeJava",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the Writer used to output unescaped characters.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to unescape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the Writer is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "error occurs on underlying Writer.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "unescapeJavaScript(java.lang.String str)",
    "name": "unescapeJavaScript",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to unescape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new unescaped String, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "unescapeJavaScript(java.io.Writer out, java.lang.String str)",
    "name": "unescapeJavaScript",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the Writer used to output unescaped characters.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to unescape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the Writer is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "error occurs on underlying Writer.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "escapeHtml(java.lang.String str)",
    "name": "escapeHtml",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to escape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new escaped String, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "escapeHtml(java.io.Writer writer, java.lang.String string)",
    "name": "escapeHtml",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "writer"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "writer"
        },
        "comment": "the writer receiving the escaped string. writer is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to escape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the writer is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "when Writer passed throws the exception from calls to the Writer#write(int) methods.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "unescapeHtml(java.lang.String str)",
    "name": "unescapeHtml",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to unescape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new unescaped String, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "unescapeHtml(java.io.Writer writer, java.lang.String string)",
    "name": "unescapeHtml",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "writer"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "writer"
        },
        "comment": "the writer receiving the unescaped string. writer is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to unescape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the writer is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an IOException occurs.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "escapeXml(java.io.Writer writer, java.lang.String str)",
    "name": "escapeXml",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "writer"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "writer"
        },
        "comment": "the writer receiving the unescaped string. writer is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to escape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the writer is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "there is a problem writing.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "escapeXml(java.lang.String str)",
    "name": "escapeXml",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to escape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new escaped String, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "unescapeXml(java.io.Writer writer, java.lang.String str)",
    "name": "unescapeXml",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "writer"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "writer"
        },
        "comment": "the writer receiving the unescaped string. writer is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to unescape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the writer is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "there is a problem writing.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "unescapeXml(java.lang.String str)",
    "name": "unescapeXml",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to unescape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new unescaped String, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "escapeSql(java.lang.String str)",
    "name": "escapeSql",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the string to escape null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new String, escaped for SQL, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "escapeCsv(java.lang.String str)",
    "name": "escapeCsv",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the input CSV column String null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the input String, enclosed in double quotes if the value contains a comma, newline or double quote, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "escapeCsv(java.io.Writer out, java.lang.String str)",
    "name": "escapeCsv",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the input CSV column String null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "Writer to write input string to enclosed in double quotes if input contains a comma newline or double quote.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "error occurs on underlying Writer.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "unescapeCsv(java.lang.String str)",
    "name": "unescapeCsv",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the input CSV column String null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the input String, with enclosing double quotes removed and embedded double quotes unescaped, null if null string input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "unescapeCsv(java.io.Writer out, java.lang.String str)",
    "name": "unescapeCsv",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.StringEscapeUtils",
      "name": "StringEscapeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.StringEscapeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the input CSV column String null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.Writer",
            "name": "Writer",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "Writer to write the input String to with enclosing double quotes removed and embedded double quotes unescaped. out is null if null string input.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "error occurs on underlying Writer.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]