Package,Class,Method,Oracle,Oracle type,Info from source,Info from docs,
org.apache.commons.cli,BasicParser,"protected String[] flatten(@SuppressWarnings(""unused"") final Options options, final String[] arguments, @SuppressWarnings(""unused"") final boolean stopAtNonOption)",true ? methodResultID == arguments : true;,POST,True,True,
org.apache.commons.cli,CommandLine,public Properties getOptionProperties(final Option option),true ? methodResultID != null : true;,POST,FALSE,True,
org.apache.commons.cli,CommandLine,public Properties getOptionProperties(final String opt),true ? methodResultID != null : true;,POST,FALSE,True,
org.apache.commons.cli,CommandLine,public String getOptionValue(final Option option),option == null || this.getOptionValues(option) == null ? methodResultID == null : this.getOptionValues(option)[0];,POST,True,True,
org.apache.commons.cli,CommandLine,"public String getOptionValue(final Option option, final String defaultValue)",option == null || this.getOptionValues(option) == null ? methodResultID == defaultValue : this.getOptionValues(option)[0];,POST,True,True,
org.apache.commons.cli,CommandLine,public Object getParsedOptionValue(final Option option) throws ParseException,option == null || this.getOptionValue(option) == null ? methodResultID == null : true;,POST,True,FALSE,
org.apache.commons.cli,CommandLine,public Object getParsedOptionValue(final Option option) throws ParseException,PatternOptionBuilder.STRING_VALUE != option.getType() && PatternOptionBuilder.OBJECT_VALUE != option.getType() && PatternOptionBuilder.NUMBER_VALUE != option.getType() && PatternOptionBuilder.DATE_VALUE != option.getType() && PatternOptionBuilder.CLASS_VALUE != option.getType() && PatternOptionBuilder.FILE_VALUE != option.getType() && PatternOptionBuilder.EXISTING_FILE_VALUE != option.getType() && PatternOptionBuilder.FILES_VALUE != option.getType() && PatternOptionBuilder.URL_VALUE != option.getType() ,EXCEPT,True,True,
org.apache.commons.cli,CommandLine,public boolean hasOption(final Option opt),true ? methodResultID == options.contains(opt) : true;,POST,True,True,
org.apache.commons.cli,DefaultParser,private void checkRequiredArgs() throws ParseException,currentOption != null && currentOption.requiresArg();,EXCEPT,True,True,
org.apache.commons.cli,DefaultParser,protected void checkRequiredOptions() throws MissingOptionException,expectedOpts.isEmpty();,EXCEPT,True,True,
org.apache.commons.cli,DefaultParser,private void handleUnknownToken(final String token) throws ParseException,"token.startsWith(""-"") && token.length() > 1 && stopAtNonOption == false;",EXCEPT,True,True,
org.apache.commons.cli,DefaultParser,private boolean isArgument(final String token),true ? methodResultID == (isOption(token) || isNegativeNumber(token)) : true;,POST,True,FALSE,x
org.apache.commons.cli,DefaultParser,private boolean isOption(final String token),true ? methodResultID == (isLongOption(token) || isShortOption(token)) : true;,POST,True,FALSE,x
org.apache.commons.cli,DefaultParser,public static boolean isValueCode(final char ch),true ? methodResultID == (ch == '@' || ch == ':' || ch == '%' || ch == '+' || ch == '#' || ch == '<' || ch == '>' || ch == '*' || ch == '/' || ch == '!') : false;,POST,True,FALSE,x